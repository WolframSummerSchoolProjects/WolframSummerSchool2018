(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3206583,      63322]
NotebookOptionsPosition[   3196009,      63168]
NotebookOutlinePosition[   3196350,      63183]
CellTagsIndexPosition[   3196307,      63180]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"vgg16Net", "=", 
  RowBox[{"NetModel", "[", 
   RowBox[{
   "\"\<VGG-16 Trained on ImageNet Competition Data\>\"", ",", 
    "\"\<UninitializedEvaluationNet\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739641689552908*^9, 3.7396417127535486`*^9}, {
  3.740082301810373*^9, 3.7400823237344437`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"cb8286a2-8840-4446-b2a5-abe7799d0399"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["40", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], 
                    "fc6" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, 25088}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop6" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc7" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop7" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1000, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "prob" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association["Labels" -> {
                    Entity["Concept", "Tench::q9r2d"], 
                    Entity["Concept", "CarassiusAuratus::f73xs"], 
                    Entity["Concept", "CarcharodonCarcharias::st7pj"], 
                    Entity["Concept", "GaleocerdoCuvieri::h7238"], 
                    Entity["Concept", "HammerheadShark::cky4t"], 
                    Entity["Concept", "Crampfish::6369q"], 
                    Entity["Concept", "Stingray::4cts3"], 
                    Entity["Concept", "Cock::2s2xh"], 
                    Entity["Concept", "Hen::49q38"], 
                    Entity["Concept", "StruthioCamelus::7fgc2"], 
                    Entity["Concept", "Brambling::47bpt"], 
                    Entity["Concept", "CarduelisCarduelis::bv5y9"], 
                    Entity["Concept", "CarpodacusMexicanus::zq6w8"], 
                    Entity["Concept", "Junco::sjqs9"], 
                    Entity["Concept", "IndigoBird::6365d"], 
                    Entity["Concept", "AmericanRobin::wf28w"], 
                    Entity["Concept", "Bulbul::4x6vd"], 
                    Entity["Concept", "Jay::9g7qw"], 
                    Entity["Concept", "Magpie::62kfm"], 
                    Entity["Concept", "Chickadee::qmsc9"], 
                    Entity["Concept", "WaterOuzel::n32d7"], 
                    Entity["Concept", "Kite::y2jjm"], 
                    Entity["Concept", "AmericanEagle::z2fqr"], 
                    Entity["Concept", "Vulture::r2nfy"], 
                    Entity["Concept", "GreatGrayOwl::97vk2"], 
                    Entity["Concept", "EuropeanFireSalamander::t6v33"], 
                    Entity["Concept", "CommonNewt::9nx3s"], 
                    Entity["Concept", "Eft::t3bv7"], 
                    Entity["Concept", "AmbystomaMaculatum::qnd2g"], 
                    Entity["Concept", "AmbystomaMexicanum::k9j45"], 
                    Entity["Concept", "Bullfrog::r9cvc"], 
                    Entity["Concept", "Tree-frog::m988r"], 
                    Entity["Concept", "AscaphusTrui::qr2np"], 
                    Entity["Concept", "CarettaCaretta::768y9"], 
                    Entity["Concept", "DermochelysCoriacea::ypc4b"], 
                    Entity["Concept", "MudTurtle::47p9w"], 
                    Entity["Concept", "Terrapin::5j9b2"], 
                    Entity["Concept", "BoxTortoise::hksb9"], 
                    Entity["Concept", "BandedGecko::38zhr"], 
                    Entity["Concept", "CommonIguana::66q43"], 
                    Entity["Concept", "AmericanChameleon::67k54"], 
                    Entity["Concept", "Whiptail::sb62k"], 
                    Entity["Concept", "Agama::22vdx"], 
                    Entity["Concept", "ChlamydosaurusKingi::stq3k"], 
                    Entity["Concept", "AlligatorLizard::k6335"], 
                    Entity["Concept", "GilaMonster::k8q26"], 
                    Entity["Concept", "GreenLizard::2fkzv"], 
                    Entity["Concept", "AfricanChameleon::x82fs"], 
                    Entity["Concept", "DragonLizard::s68v6"], 
                    Entity["Concept", "AfricanCrocodile::zw55f"], 
                    Entity["Concept", "AlligatorMississipiensis::s7582"], 
                    Entity["Concept", "Triceratops::p997c"], 
                    Entity["Concept", "CarphophisAmoenus::35dfs"], 
                    Entity["Concept", "Ring-neckedSnake::2f823"], 
                    Entity["Concept", "HognoseSnake::k5k58"], 
                    Entity["Concept", "GrassSnake::pv2xf"], 
                    Entity["Concept", "KingSnake::t9m8y"], 
                    Entity["Concept", "GarterSnake::892t9"], 
                    Entity["Concept", "WaterSnake::y627x"], 
                    Entity["Concept", "VineSnake::9kywz"], 
                    Entity["Concept", "HypsiglenaTorquata::6869v"], 
                    Entity["Concept", "BoaConstrictor::qq73z"], 
                    Entity["Concept", "PythonSebae::dmhh6"], 
                    Entity["Concept", "IndianCobra::2sv7h"], 
                    Entity["Concept", "GreenMamba::c9qn3"], 
                    Entity["Concept", "SeaSnake::s529y"], 
                    Entity["Concept", "Cerastes::6575z"], 
                    Entity["Concept", "CrotalusAdamanteus::8ynrx"], 
                    Entity["Concept", "CrotalusCerastes::m382t"], 
                    Entity["Concept", "Trilobite::3qyq3"], 
                    Entity["Concept", "Harvestman::545h3"], 
                    Entity["Concept", "Scorpion::9rx48"], 
                    Entity["Concept", "ArgiopeAurantia::633xv"], 
                    Entity["Concept", "AraneusCavaticus::thm3g"], 
                    Entity["Concept", "AraneaDiademata::4jvj8"], 
                    Entity["Concept", "BlackWidow::4682d"], 
                    Entity["Concept", "Tarantula::mc462"], 
                    Entity["Concept", "HuntingSpider::q7898"], 
                    Entity["Concept", "Tick::xw6hc"], 
                    Entity["Concept", "Centipede::s8w7r"], 
                    Entity["Concept", "BlackGrouse::9w35m"], 
                    Entity["Concept", "Ptarmigan::tv6c8"], 
                    Entity["Concept", "BonasaUmbellus::bpbr3"], 
                    Entity["Concept", "PrairieChicken::2ws9g"], 
                    Entity["Concept", "Peacock::kd2y4"], 
                    Entity["Concept", "Quail::7462f"], 
                    Entity["Concept", "Partridge::t22mp"], 
                    Entity["Concept", "AfricanGray::84css"], 
                    Entity["Concept", "Macaw::ntx97"], 
                    Entity["Concept", "CacatuaGalerita::tfz9w"], 
                    Entity["Concept", "Lorikeet::4f725"], 
                    Entity["Concept", "Coucal::z95g6"], 
                    Entity["Concept", "BeeEater::376h3"], 
                    Entity["Concept", "Hornbill::6389h"], 
                    Entity["Concept", "Hummingbird::vz6gt"], 
                    Entity["Concept", "Jacamar::v7428"], 
                    Entity["Concept", "Toucan::2h2d5"], 
                    Entity["Concept", "Drake::5cdfw"], 
                    Entity["Concept", "MergusSerrator::5t86m"], 
                    Entity["Concept", "Goose::82x27"], 
                    Entity["Concept", "BlackSwan::6ft7p"], 
                    Entity["Concept", "Tusker::dqq7d"], 
                    Entity["Concept", "Anteater::8t864"], 
                    Entity["Concept", "Duck-billedPlatypus::b8867"], 
                    Entity["Concept", "BrushKangaroo::493r2"], 
                    Entity["Concept", "KangarooBear::hvf3s"], 
                    Entity["Concept", "Wombat::m5rqr"], 
                    Entity["Concept", "Jellyfish::fs9rf"], 
                    Entity["Concept", "SeaAnemone::5n98x"], 
                    Entity["Concept", "BrainCoral::v7844"], 
                    Entity["Concept", "Flatworm::h957w"], 
                    Entity["Concept", "Nematode::hz536"], 
                    Entity["Concept", "Conch::44pfv"], 
                    Entity["Concept", "Snail::3r58h"], 
                    Entity["Concept", "Slug::d4638"], 
                    Entity["Concept", "Nudibranch::dq2vh"], 
                    Entity["Concept", "Coat-of-mailShell::h3tp5"], 
                    Entity["Concept", "ChamberedNautilus::tspc6"], 
                    Entity["Concept", "CancerMagister::5r562"], 
                    Entity["Concept", "CancerIrroratus::d69mr"], 
                    Entity["Concept", "FiddlerCrab::4mt9n"], 
                    Entity["Concept", "ParalithodesCamtschatica::pfzy2"], 
                    Entity["Concept", "HomarusAmericanus::n2j65"], 
                    Entity["Concept", "SeaCrawfish::x53g2"], 
                    Entity["Concept", "Crawdaddy::946y4"], 
                    Entity["Concept", "HermitCrab::4k242"], 
                    Entity["Concept", "Isopod::4z747"], 
                    Entity["Concept", "CiconiaCiconia::wkt3m"], 
                    Entity["Concept", "BlackStork::5v349"], 
                    Entity["Concept", "Spoonbill::4939q"], 
                    Entity["Concept", "Flamingo::28r7m"], 
                    Entity["Concept", "EgrettaCaerulea::9965c"], 
                    Entity["Concept", "AmericanEgret::43jz8"], 
                    Entity["Concept", "Bittern::722qw"], 
                    Entity["Concept", "Crane::9wrg8"], 
                    Entity["Concept", "AramusPictus::964mw"], 
                    Entity["Concept", "EuropeanGallinule::c7jfx"], 
                    Entity["Concept", "AmericanCoot::c7452"], 
                    Entity["Concept", "Bustard::p3zj5"], 
                    Entity["Concept", "ArenariaInterpres::3rbq4"], 
                    Entity["Concept", "Dunlin::4mj52"], 
                    Entity["Concept", "Redshank::yvbj8"], 
                    Entity["Concept", "Dowitcher::47w6h"], 
                    Entity["Concept", "OysterCatcher::9drpt"], 
                    Entity["Concept", "Pelican::jpfg7"], 
                    Entity["Concept", "AptenodytesPatagonica::f85wf"], 
                    Entity["Concept", "Mollymawk::r8386"], 
                    Entity["Concept", "EschrichtiusGibbosus::2c8q9"], 
                    Entity["Concept", "KillerWhale::26sj4"], 
                    Entity["Concept", "Dugong::ss39b"], 
                    Entity["Concept", "SeaLion::bs87w"], 
                    Entity["Concept", "Chihuahua::8hmhf"], 
                    Entity["Concept", "JapaneseSpaniel::h55d9"], 
                    Entity["Concept", "MalteseDog::trsv6"], 
                    Entity["Concept", "Peke::b9n5f"], 
                    Entity["Concept", "Shih-Tzu::kc9k8"], 
                    Entity["Concept", "BlenheimSpaniel::cd3nm"], 
                    Entity["Concept", "Papillon::zhn7j"], 
                    Entity["Concept", "ToyTerrier::k3s97"], 
                    Entity["Concept", "RhodesianRidgeback::jph75"], 
                    Entity["Concept", "AfghanHound::6845m"], 
                    Entity["Concept", "Basset::n769x"], 
                    Entity["Concept", "Beagle::2bdvt"], 
                    Entity["Concept", "Bloodhound::pc454"], 
                    Entity["Concept", "Bluetick::fs5sw"], 
                    Entity["Concept", "Black-and-tanCoonhound::84k6y"], 
                    Entity["Concept", "WalkerFoxhound::z3y7p"], 
                    Entity["Concept", "EnglishFoxhound::5v343"], 
                    Entity["Concept", "Redbone::j6h4x"], 
                    Entity["Concept", "Borzoi::v43t8"], 
                    Entity["Concept", "IrishWolfhound::8m3gw"], 
                    Entity["Concept", "ItalianGreyhound::s4gq3"], 
                    Entity["Concept", "Whippet::57r47"], 
                    Entity["Concept", "IbizanHound::987kj"], 
                    Entity["Concept", "Elkhound::62q39"], 
                    Entity["Concept", "OtterHound::3442w"], 
                    Entity["Concept", "GazelleHound::7k449"], 
                    Entity["Concept", "Deerhound::btsv4"], 
                    Entity["Concept", "Weimaraner::476j6"], 
                    Entity["Concept", "StaffordshireBullTerrier::883y3"], 
                    Entity["Concept", "AmericanPitBullTerrier::kw55q"], 
                    Entity["Concept", "BedlingtonTerrier::98h82"], 
                    Entity["Concept", "BorderTerrier::gh5h6"], 
                    Entity["Concept", "KerryBlueTerrier::t9c62"], 
                    Entity["Concept", "IrishTerrier::qmsm4"], 
                    Entity["Concept", "NorfolkTerrier::b7z76"], 
                    Entity["Concept", "NorwichTerrier::9v483"], 
                    Entity["Concept", "YorkshireTerrier::bn4jn"], 
                    Entity["Concept", "Wire-hairedFoxTerrier::pn5qb"], 
                    Entity["Concept", "LakelandTerrier::b729b"], 
                    Entity["Concept", "SealyhamTerrier::5jz56"], 
                    Entity["Concept", "Airedale::w6gf4"], 
                    Entity["Concept", "CairnTerrier::67c37"], 
                    Entity["Concept", "AustralianTerrier::q2h6g"], 
                    Entity["Concept", "DandieDinmont::ff47s"], 
                    Entity["Concept", "BostonBull::6662j"], 
                    Entity["Concept", "MiniatureSchnauzer::848y9"], 
                    Entity["Concept", "GiantSchnauzer::8fwv6"], 
                    Entity["Concept", "StandardSchnauzer::q9j3y"], 
                    Entity["Concept", "ScotchTerrier::2f2jw"], 
                    Entity["Concept", "ChrysanthemumDog::y9tps"], 
                    Entity["Concept", "SilkyTerrier::xyfw3"], 
                    Entity["Concept", "Soft-coatedWheatenTerrier::474j2"], 
                    Entity["Concept", "WestHighlandWhiteTerrier::4h85y"], 
                    Entity["Concept", "LhasaApso::cr28m"], 
                    Entity["Concept", "Flat-coatedRetriever::866mk"], 
                    Entity["Concept", "Curly-coatedRetriever::pb8yt"], 
                    Entity["Concept", "GoldenRetriever::t59tg"], 
                    Entity["Concept", "LabradorRetriever::7g587"], 
                    Entity["Concept", "ChesapeakeBayRetriever::s8567"], 
                    Entity["Concept", "GermanShort-hairedPointer::k3297"], 
                    Entity["Concept", "HungarianPointer::7555p"], 
                    Entity["Concept", "EnglishSetter::ps793"], 
                    Entity["Concept", "IrishSetter::h5pp3"], 
                    Entity["Concept", "GordonSetter::yvx65"], 
                    Entity["Concept", "BrittanySpaniel::435gz"], 
                    Entity["Concept", "Clumber::2ddvk"], 
                    Entity["Concept", "EnglishSpringer::f4dq6"], 
                    Entity["Concept", "WelshSpringerSpaniel::qyng2"], 
                    Entity["Concept", "Cocker::7284r"], 
                    Entity["Concept", "SussexSpaniel::sbv42"], 
                    Entity["Concept", "IrishWaterSpaniel::m9zkp"], 
                    Entity["Concept", "Kuvasz::z4sxp"], 
                    Entity["Concept", "Schipperke::7778z"], 
                    Entity["Concept", "Groenendael::5854s"], 
                    Entity["Concept", "Malinois::k8y57"], 
                    Entity["Concept", "Briard::dtm5k"], 
                    Entity["Concept", "Kelpie::k6795"], 
                    Entity["Concept", "Komondor::p8q9b"], 
                    Entity["Concept", "OldEnglishSheepdog::4zdy3"], 
                    Entity["Concept", "ShetlandSheepDog::sffh8"], 
                    Entity["Concept", "Collie::999kf"], 
                    Entity["Concept", "BorderCollie::463w2"], 
                    Entity["Concept", "BouvierDesFlandres::h7txf"], 
                    Entity["Concept", "Rottweiler::zywt3"], 
                    Entity["Concept", "Alsatian::fh5zw"], 
                    Entity["Concept", "Doberman::zgqf4"], 
                    Entity["Concept", "MiniaturePinscher::jvy9c"], 
                    Entity["Concept", "GreaterSwissMountainDog::t7642"], 
                    Entity["Concept", "BerneseMountainDog::y32v5"], 
                    Entity["Concept", "Appenzeller::j96dj"], 
                    Entity["Concept", "EntleBucher::y43x6"], 
                    Entity["Concept", "Boxer::3966f"], 
                    Entity["Concept", "BullMastiff::6p365"], 
                    Entity["Concept", "TibetanMastiff::4f68b"], 
                    Entity["Concept", "FrenchBulldog::3jg82"], 
                    Entity["Concept", "GreatDane::xg8dn"], 
                    Entity["Concept", "SaintBernard::r5277"], 
                    Entity["Concept", "EskimoDog::2vm97"], 
                    Entity["Concept", "AlaskanMalamute::y6wqq"], 
                    Entity["Concept", "SiberianHusky::k7pkk"], 
                    Entity["Concept", "CarriageDog::jh3w6"], 
                    Entity["Concept", "Affenpinscher::58wr6"], 
                    Entity["Concept", "Basenji::k9yy2"], 
                    Entity["Concept", "Pug::6799h"], 
                    Entity["Concept", "Leonberg::49td5"], 
                    Entity["Concept", "NewfoundlandDog::q787h"], 
                    Entity["Concept", "GreatPyrenees::t8qh7"], 
                    Entity["Concept", "Samoyede::rq827"], 
                    Entity["Concept", "Pomeranian::dx7mr"], 
                    Entity["Concept", "ChowChow::7x292"], 
                    Entity["Concept", "Keeshond::rz734"], 
                    Entity["Concept", "BrabanconGriffon::jh5pt"], 
                    Entity["Concept", "Pembroke::95g54"], 
                    Entity["Concept", "Cardigan::b724j"], 
                    Entity["Concept", "ToyPoodle::732f6"], 
                    Entity["Concept", "MiniaturePoodle::4955p"], 
                    Entity["Concept", "StandardPoodle::w25c4"], 
                    Entity["Concept", "MexicanHairless::m2by7"], 
                    Entity["Concept", "CanisLupus::5gwtc"], 
                    Entity["Concept", "ArcticWolf::4xr47"], 
                    Entity["Concept", "CanisNiger::99p6d"], 
                    Entity["Concept", "BrushWolf::44t57"], 
                    Entity["Concept", "CanisDingo::529k9"], 
                    Entity["Concept", "CuonAlpinus::f5yfn"], 
                    Entity["Concept", "AfricanHuntingDog::d9b86"], 
                    Entity["Concept", "Hyaena::7444d"], 
                    Entity["Concept", "VulpesVulpes::g8mvp"], 
                    Entity["Concept", "VulpesMacrotis::jm64h"], 
                    Entity["Concept", "AlopexLagopus::44cg9"], 
                    Entity["Concept", "GrayFox::vftd5"], 
                    Entity["Concept", "TabbyCat::rvg7f"], 
                    Entity["Concept", "TigerCat::8k84h"], 
                    Entity["Concept", "PersianCat::p69kd"], 
                    Entity["Concept", "SiameseCat::hgg68"], 
                    Entity["Concept", "EgyptianCat::sd6pw"], 
                    Entity["Concept", "Cougar::7bc9f"], 
                    Entity["Concept", "Catamount::q4f63"], 
                    Entity["Concept", "PantheraPardus::r35k5"], 
                    Entity["Concept", "PantheraUncia::z6697"], 
                    Entity["Concept", "FelisOnca::jh7tq"], 
                    Entity["Concept", "KingOfBeasts::vrwm9"], 
                    Entity["Concept", "PantheraTigris::2mpmq"], 
                    Entity["Concept", "GiantAnteater::y96st"], 
                    Entity["Concept", "BrownBear::8374p"], 
                    Entity["Concept", "AmericanBlackBear::763x8"], 
                    Entity["Concept", "IceBear::fnc5j"], 
                    Entity["Concept", "MelursusUrsinus::48x75"], 
                    Entity["Concept", "Mongoose::5hp73"], 
                    Entity["Concept", "Meerkat::q77nd"], 
                    Entity["Concept", "TigerBeetle::8362y"], 
                    Entity["Concept", "LadyBeetle::tx6bz"], 
                    Entity["Concept", "CarabidBeetle::w3hjn"], 
                    Entity["Concept", "Long-hornedBeetle::9zzc8"], 
                    Entity["Concept", "Chrysomelid::y8pqz"], 
                    Entity["Concept", "DungBeetle::bt6hz"], 
                    Entity["Concept", "RhinocerosBeetle::23y53"], 
                    Entity["Concept", "Weevil::r87rt"], 
                    Entity["Concept", "Fly::68s97"], 
                    Entity["Concept", "Bee::d8yym"], 
                    Entity["Concept", "Ant::7tznr"], 
                    Entity["Concept", "Grasshopper::52v2f"], 
                    Entity["Concept", "Cricket::82n55"], 
                    Entity["Concept", "StickInsect::4x983"], 
                    Entity["Concept", "Cockroach::7426w"], 
                    Entity["Concept", "Mantid::93t86"], 
                    Entity["Concept", "Cicada::w2299"], 
                    Entity["Concept", "Leafhopper::8k2k2"], 
                    Entity["Concept", "Lacewing::8v2m6"], 
                    Entity["Concept", "Dragonfly::7s252"], 
                    Entity["Concept", "Damselfly::dh8zj"], 
                    Entity["Concept", "Admiral::j6fvp"], 
                    Entity["Concept", "RingletButterfly::28v7s"], 
                    Entity["Concept", "DanausPlexippus::bfk9c"], 
                    Entity["Concept", "CabbageButterfly::c8v77"], 
                    Entity["Concept", "SulfurButterfly::b9263"], 
                    Entity["Concept", "Lycaenid::4whyw"], 
                    Entity["Concept", "SeaStar::46w97"], 
                    Entity["Concept", "SeaUrchin::7b835"], 
                    Entity["Concept", "Holothurian::7jk5q"], 
                    Entity["Concept", "Cottontail::bsxk4"], 
                    Entity["Concept", "Hare::55m72"], 
                    Entity["Concept", "AngoraRabbit::v6627"], 
                    Entity["Concept", "Hamster::9yy49"], 
                    Entity["Concept", "Porcupine::5r285"], 
                    Entity["Concept", "EasternFoxSquirrel::8g9v6"], 
                    Entity["Concept", "Marmot::7vb94"], 
                    Entity["Concept", "Beaver::qp598"], 
                    Entity["Concept", "CaviaCobaya::b8w85"], 
                    Entity["Concept", "Sorrel::b824z"], 
                    Entity["Concept", "Zebra::nx5qr"], 
                    Entity["Concept", "Grunter::437d2"], 
                    Entity["Concept", "WildBoar::5wjz4"], 
                    Entity["Concept", "Warthog::3q477"], 
                    Entity["Concept", "Hippo::647b2"], 
                    Entity["Concept", "Ox::yhn7j"], 
                    Entity["Concept", "AsiaticBuffalo::532z9"], 
                    Entity["Concept", "Bison::25c86"], 
                    Entity["Concept", "Tup::8y669"], 
                    Entity["Concept", "Bighorn::773z4"], 
                    Entity["Concept", "CapraIbex::p5pmr"], 
                    Entity["Concept", "Hartebeest::r8276"], 
                    Entity["Concept", "AepycerosMelampus::q45p2"], 
                    Entity["Concept", "Gazelle::px427"], 
                    Entity["Concept", "ArabianCamel::98q62"], 
                    Entity["Concept", "Llama::pp4mc"], 
                    Entity["Concept", "Weasel::gcxk7"], 
                    Entity["Concept", "Mink::r5727"], 
                    Entity["Concept", "Fitch::x2w8q"], 
                    Entity["Concept", "Black-footedFerret::r6gqg"], 
                    Entity["Concept", "Otter::63tg7"], 
                    Entity["Concept", "WoodPussy::6886s"], 
                    Entity["Concept", "Badger::vcsk3"], 
                    Entity["Concept", "Armadillo::s9866"], 
                    Entity["Concept", "Ai::z6968"], 
                    Entity["Concept", "Orang::5385s"], 
                    Entity["Concept", "Gorilla::7vrdz"], 
                    Entity["Concept", "Chimp::2t668"], 
                    Entity["Concept", "Gibbon::7yqsr"], 
                    Entity["Concept", "HylobatesSyndactylus::3g4xn"], 
                    Entity["Concept", "Guenon::7y986"], 
                    Entity["Concept", "ErythrocebusPatas::949v6"], 
                    Entity["Concept", "Baboon::28m6v"], 
                    Entity["Concept", "Macaque::m87ss"], 
                    Entity["Concept", "Langur::3w42b"], 
                    Entity["Concept", "Colobus::yqv5q"], 
                    Entity["Concept", "NasalisLarvatus::92p77"], 
                    Entity["Concept", "Marmoset::3j236"], 
                    Entity["Concept", "CebusCapucinus::4r452"], 
                    Entity["Concept", "HowlerMonkey::87c48"], 
                    Entity["Concept", "TitiMonkey::6rqgy"], 
                    Entity["Concept", "AtelesGeoffroyi::8f944"], 
                    Entity["Concept", "SaimiriSciureus::f9528"], 
                    Entity["Concept", "LemurCatta::4z4fy"], 
                    Entity["Concept", "Indri::w2dsm"], 
                    Entity["Concept", "ElephasMaximus::4668g"], 
                    Entity["Concept", "AfricanElephant::634z7"], 
                    Entity["Concept", "AilurusFulgens::m96y6"], 
                    Entity["Concept", "AiluropodaMelanoleuca::xg799"], 
                    Entity["Concept", "Barracouta::dzc32"], 
                    Entity["Concept", "Eel::6yymn"], 
                    Entity["Concept", "BlueJack::8728b"], 
                    Entity["Concept", "HolocanthusTricolor::6t872"], 
                    Entity["Concept", "AnemoneFish::5mdgt"], 
                    Entity["Concept", "Sturgeon::46xyk"], 
                    Entity["Concept", "Garfish::p9w7b"], 
                    Entity["Concept", "Lionfish::45vp5"], 
                    Entity["Concept", "Globefish::z6448"], 
                    Entity["Concept", "Abacus::s322h"], 
                    Entity["Concept", "Abaya::327b3"], 
                    Entity["Concept", "AcademicGown::6vvft"], 
                    Entity["Concept", "Accordion::vx545"], 
                    Entity["Concept", "AcousticGuitar::wp46j"], 
                    Entity["Concept", "AircraftCarrier::74d49"], 
                    Entity["Concept", "Airliner::t7542"], 
                    Entity["Concept", "Airship::dg429"], 
                    Entity["Concept", "Altar::z644x"], 
                    Entity["Concept", "Ambulance::rgts3"], 
                    Entity["Concept", "AmphibiousVehicle::rr85n"], 
                    Entity["Concept", "AnalogClock::3832f"], 
                    Entity["Concept", "Apiary::d939v"], 
                    Entity["Concept", "Apron::qr79c"], 
                    Entity["Concept", "Ash-bin::6sd8p"], 
                    Entity["Concept", "AssaultRifle::d2gst"], 
                    Entity["Concept", "BackPack::2cjsp"], 
                    Entity["Concept", "Bakehouse::6nmsm"], 
                    Entity["Concept", "BalanceBeam::6nyqs"], 
                    Entity["Concept", "Balloon::64p99"], 
                    Entity["Concept", "Ballpen::k35fx"], 
                    Entity["Concept", "BandAid::z727z"], 
                    Entity["Concept", "Banjo::fs3f9"], 
                    Entity["Concept", "Balusters::nt6x4"], 
                    Entity["Concept", "Barbell::295kg"], 
                    Entity["Concept", "BarberChair::mybp2"], 
                    Entity["Concept", "Barbershop::qg6kn"], 
                    Entity["Concept", "Barn::6xw3q"], 
                    Entity["Concept", "Barometer::65g49"], 
                    Entity["Concept", "Barrel::3pzvn"], 
                    Entity["Concept", "GardenCart::7br53"], 
                    Entity["Concept", "Baseball::9f8qz"], 
                    Entity["Concept", "Basketball::jq262"], 
                    Entity["Concept", "Bassinet::yn2td"], 
                    Entity["Concept", "Bassoon::92ky9"], 
                    Entity["Concept", "BathingCap::tsd8r"], 
                    Entity["Concept", "BathTowel::72qcw"], 
                    Entity["Concept", "BathingTub::729f8"], 
                    Entity["Concept", "BeachWaggon::c945g"], 
                    Entity["Concept", "BeaconLight::k282w"], 
                    Entity["Concept", "Beaker::btv5s"], 
                    Entity["Concept", "Busby::448c3"], 
                    Entity["Concept", "BeerBottle::8gz7t"], 
                    Entity["Concept", "BeerGlass::r6xp2"], 
                    Entity["Concept", "BellCot::567d3"], 
                    Entity["Concept", "Bib::5wq8k"], 
                    Entity["Concept", "Bicycle-built-for-two::7h478"], 
                    Entity["Concept", "Bikini::m86f8"], 
                    Entity["Concept", "Ring-binder::848m9"], 
                    Entity["Concept", "Binoculars::yp4ss"], 
                    Entity["Concept", "Birdhouse::n3qgq"], 
                    Entity["Concept", "Boathouse::59rht"], 
                    Entity["Concept", "Bob::n2762"], 
                    Entity["Concept", "BolaTie::g65x6"], 
                    Entity["Concept", "PokeBonnet::f4y42"], 
                    Entity["Concept", "Bookcase::6t56v"], 
                    Entity["Concept", "Bookshop::4rgfr"], 
                    Entity["Concept", "Bottlecap::mgg5c"], 
                    Entity["Concept", "Bow::89mx8"], 
                    Entity["Concept", "Bow-tie::79h37"], 
                    Entity["Concept", "MemorialTablet::66g76"], 
                    Entity["Concept", "Bandeau::4j247"], 
                    Entity["Concept", "Breakwater::nrtz2"], 
                    Entity["Concept", "Breastplate::4fmw7"], 
                    Entity["Concept", "Broom::hgy49"], 
                    Entity["Concept", "Bucket::f9743"], 
                    Entity["Concept", "Buckle::3398s"], 
                    Entity["Concept", "BulletproofVest::djqn3"], 
                    Entity["Concept", "BulletTrain::4dfr5"], 
                    Entity["Concept", "ButcherShop::hfp48"], 
                    Entity["Concept", "Taxi::379w3"], 
                    Entity["Concept", "Caldron::k6c8c"], 
                    Entity["Concept", "WaxLight::d9rqz"], 
                    Entity["Concept", "Cannon::54f56"], 
                    Entity["Concept", "Canoe::nnt95"], 
                    Entity["Concept", "CanOpener::6b885"], 
                    Entity["Concept", "Cardigan::237mv"], 
                    Entity["Concept", "CarMirror::5xccg"], 
                    Entity["Concept", "Carousel::n2992"], 
                    Entity["Concept", "CarpentersKit::37rxx"], 
                    Entity["Concept", "Carton::769gr"], 
                    Entity["Concept", "CarWheel::t6f2y"], 
                    Entity["Concept", "AutomatedTeller::w8746"], 
                    Entity["Concept", "Cassette::2pvzn"], 
                    Entity["Concept", "CassettePlayer::v2ng9"], 
                    Entity["Concept", "Castle::m2pbs"], 
                    Entity["Concept", "Catamaran::7b489"], 
                    Entity["Concept", "CDPlayer::7gq93"], 
                    Entity["Concept", "Cello::hhbp5"], 
                    Entity["Concept", "Cellphone::5k4s4"], 
                    Entity["Concept", "Chain::w9j9s"], 
                    Entity["Concept", "ChainlinkFence::pfv8d"], 
                    Entity["Concept", "ChainArmor::h32y6"], 
                    Entity["Concept", "ChainSaw::f5bt6"], 
                    Entity["Concept", "Chest::fd956"], 
                    Entity["Concept", "Chiffonier::m3jmr"], 
                    Entity["Concept", "Chime::m6623"], 
                    Entity["Concept", "ChinaCabinet::9bmqg"], 
                    Entity["Concept", "ChristmasStocking::867r8"], 
                    Entity["Concept", "ChurchBuilding::2394b"], 
                    Entity["Concept", "MovieHouse::hbj23"], 
                    Entity["Concept", "Cleaver::bk925"], 
                    Entity["Concept", "CliffDwelling::5c9sb"], 
                    Entity["Concept", "Cloak::dj822"], 
                    Entity["Concept", "Geta::3r9c9"], 
                    Entity["Concept", "CocktailShaker::r9655"], 
                    Entity["Concept", "CoffeeMug::gwhm5"], 
                    Entity["Concept", "Coffeepot::32tb2"], 
                    Entity["Concept", "Coil::c7h65"], 
                    Entity["Concept", "CombinationLock::b8rp7"], 
                    Entity["Concept", "ComputerKeyboard::26d5s"], 
                    Entity["Concept", "CandyStore::268x7"], 
                    Entity["Concept", "ContainerShip::tsz7x"], 
                    Entity["Concept", "Convertible::4pxj2"], 
                    Entity["Concept", "BottleScrew::djq6x"], 
                    Entity["Concept", "Cornet::35d97"], 
                    Entity["Concept", "CowboyBoot::5f655"], 
                    Entity["Concept", "CowboyHat::59wk9"], 
                    Entity["Concept", "Cradle::3882z"], 
                    Entity["Concept", "Crane::k29p4"], 
                    Entity["Concept", "CrashHelmet::76cs8"], 
                    Entity["Concept", "Crate::wmc92"], 
                    Entity["Concept", "Cot::3kgws"], 
                    Entity["Concept", "CrockPot::w5t85"], 
                    Entity["Concept", "CroquetBall::g84t5"], 
                    Entity["Concept", "Crutch::3q57h"], 
                    Entity["Concept", "Cuirass::256jq"], 
                    Entity["Concept", "Dam::w9687"], 
                    Entity["Concept", "Desk::q73z7"], 
                    Entity["Concept", "DesktopComputer::f8gmj"], 
                    Entity["Concept", "DialPhone::3j2f6"], 
                    Entity["Concept", "Nappy::6979r"], 
                    Entity["Concept", "DigitalClock::hm3x5"], 
                    Entity["Concept", "DigitalWatch::v274r"], 
                    Entity["Concept", "DiningTable::6ypqf"], 
                    Entity["Concept", "Dishcloth::4t678"], 
                    Entity["Concept", "DishWasher::px58r"], 
                    Entity["Concept", "DiscBrake::bxcw7"], 
                    Entity["Concept", "DockingFacility::f42zy"], 
                    Entity["Concept", "DogSled::34t8q"], 
                    Entity["Concept", "Dome::5j3x2"], 
                    Entity["Concept", "WelcomeMat::jqb5y"], 
                    Entity["Concept", "DrillingPlatform::r792r"], 
                    Entity["Concept", "Membranophone::2x379"], 
                    Entity["Concept", "Drumstick::4j5yw"], 
                    Entity["Concept", "Dumbbell::qjh33"], 
                    Entity["Concept", "DutchOven::qy3dv"], 
                    Entity["Concept", "ElectricFan::n79z5"], 
                    Entity["Concept", "ElectricGuitar::9pkmr"], 
                    Entity["Concept", "ElectricLocomotive::5wv23"], 
                    Entity["Concept", "EntertainmentCenter::mg549"], 
                    Entity["Concept", "Envelope::c722j"], 
                    Entity["Concept", "EspressoMaker::z42xs"], 
                    Entity["Concept", "FacePowder::yzy7x"], 
                    Entity["Concept", "FeatherBoa::c94h7"], 
                    Entity["Concept", "FileCabinet::vsb9c"], 
                    Entity["Concept", "Fireboat::xf64t"], 
                    Entity["Concept", "FireEngine::zsvx8"], 
                    Entity["Concept", "FireScreen::665b5"], 
                    Entity["Concept", "Flagstaff::qz2t6"], 
                    Entity["Concept", "TransverseFlute::8pj76"], 
                    Entity["Concept", "FoldingChair::4vqcr"], 
                    Entity["Concept", "FootballHelmet::c6twc"], 
                    Entity["Concept", "Forklift::b2dfv"], 
                    Entity["Concept", "Fountain::yn972"], 
                    Entity["Concept", "FountainPen::r2vw4"], 
                    Entity["Concept", "Four-poster::8kbhw"], 
                    Entity["Concept", "FreightCar::5pg8s"], 
                    Entity["Concept", "FrenchHorn::rm367"], 
                    Entity["Concept", "FryingPan::23fyh"], 
                    Entity["Concept", "FurCoat::6q374"], 
                    Entity["Concept", "Dustcart::2bbpr"], 
                    Entity["Concept", "GasHelmet::23k79"], 
                    Entity["Concept", "GasolinePump::wk2nk"], 
                    Entity["Concept", "Goblet::h85x9"], 
                    Entity["Concept", "Go-kart::gjsj5"], 
                    Entity["Concept", "GolfBall::63tb2"], 
                    Entity["Concept", "GolfCart::sxmp6"], 
                    Entity["Concept", "Gondola::4ds6k"], 
                    Entity["Concept", "Tam-tam::m962t"], 
                    Entity["Concept", "Gown::76k26"], 
                    Entity["Concept", "GrandPiano::8kk56"], 
                    Entity["Concept", "Glasshouse::qxjm6"], 
                    Entity["Concept", "RadiatorGrille::75d36"], 
                    Entity["Concept", "FoodMarket::4bmts"], 
                    Entity["Concept", "Guillotine::w4656"], 
                    Entity["Concept", "HairSlide::3xwcp"], 
                    Entity["Concept", "HairSpray::9w6z4"], 
                    Entity["Concept", "HalfTrack::59zq4"], 
                    Entity["Concept", "Hammer::cx2fn"], 
                    Entity["Concept", "Hamper::3b93m"], 
                    Entity["Concept", "BlowDrier::t4dpz"], 
                    Entity["Concept", "Hand-heldComputer::zs5zw"], 
                    Entity["Concept", "Handkerchief::84d24"], 
                    Entity["Concept", "FixedDisk::5xfff"], 
                    Entity["Concept", "Harmonica::8t835"], 
                    Entity["Concept", "Harp::zz89k"], 
                    Entity["Concept", "Harvester::472sq"], 
                    Entity["Concept", "Hatchet::7cspp"], 
                    Entity["Concept", "Holster::g2prc"], 
                    Entity["Concept", "HomeTheater::4y845"], 
                    Entity["Concept", "Honeycomb::qq347"], 
                    Entity["Concept", "Claw::7kmg8"], 
                    Entity["Concept", "Hoopskirt::3784g"], 
                    Entity["Concept", "HighBar::n5222"], 
                    Entity["Concept", "Horse-cart::546b9"], 
                    Entity["Concept", "Hourglass::83jnz"], 
                    Entity["Concept", "IPod::366dw"], 
                    Entity["Concept", "SmoothingIron::274h7"], 
                    Entity["Concept", "Jack-o-lantern::yss6v"], 
                    Entity["Concept", "BlueJean::68hww"], 
                    Entity["Concept", "Jeep::5twmt"], 
                    Entity["Concept", "TeeShirt::nk5bs"], 
                    Entity["Concept", "JigsawPuzzle::jgp79"], 
                    Entity["Concept", "Jinrikisha::g7j7m"], 
                    Entity["Concept", "Joystick::nj32z"], 
                    Entity["Concept", "Kimono::284nv"], 
                    Entity["Concept", "KneePad::nh7y5"], 
                    Entity["Concept", "Knot::f4x5y"], 
                    Entity["Concept", "LabCoat::6fg55"], 
                    Entity["Concept", "Ladle::3m7q7"], 
                    Entity["Concept", "LampShade::4b824"], 
                    Entity["Concept", "Laptop::zdd33"], 
                    Entity["Concept", "LawnMower::z97p3"], 
                    Entity["Concept", "LensCap::6j259"], 
                    Entity["Concept", "LetterOpener::sx79v"], 
                    Entity["Concept", "Library::8855f"], 
                    Entity["Concept", "Lifeboat::3r554"], 
                    Entity["Concept", "Igniter::638td"], 
                    Entity["Concept", "Limo::jfrr3"], 
                    Entity["Concept", "OceanLiner::s5fxp"], 
                    Entity["Concept", "LipRouge::4vd22"], 
                    Entity["Concept", "Loafer::br9fk"], 
                    Entity["Concept", "Lotion::79h3v"], 
                    Entity["Concept", "Loudspeaker::44d64"], 
                    Entity["Concept", "JewelersLoupe::kg4bc"], 
                    Entity["Concept", "Lumbermill::94r3y"], 
                    Entity["Concept", "MagneticCompass::5r692"], 
                    Entity["Concept", "Postbag::ck37r"], 
                    Entity["Concept", "LetterBox::pccp7"], 
                    Entity["Concept", "Maillot::d8grj"], 
                    Entity["Concept", "TankSuit::5k74s"], 
                    Entity["Concept", "ManholeCover::4x7fq"], 
                    Entity["Concept", "Maraca::395nq"], 
                    Entity["Concept", "Marimba::kbbq5"], 
                    Entity["Concept", "Mask::798jz"], 
                    Entity["Concept", "Matchstick::266wm"], 
                    Entity["Concept", "Maypole::qc3qr"], 
                    Entity["Concept", "Labyrinth::gc6rg"], 
                    Entity["Concept", "MeasuringCup::7b637"], 
                    Entity["Concept", "MedicineCabinet::m9g7m"], 
                    Entity["Concept", "Megalith::753z9"], 
                    Entity["Concept", "Microphone::7bqww"], 
                    Entity["Concept", "MicrowaveOven::fs7tb"], 
                    Entity["Concept", "MilitaryUniform::r9626"], 
                    Entity["Concept", "MilkCan::d9g72"], 
                    Entity["Concept", "Minibus::y94d9"], 
                    Entity["Concept", "Mini::pn78q"], 
                    Entity["Concept", "Minivan::yfsj9"], 
                    Entity["Concept", "Missile::854m6"], 
                    Entity["Concept", "Mitten::7d534"], 
                    Entity["Concept", "MixingBowl::djy62"], 
                    Entity["Concept", "ManufacturedHome::d7czj"], 
                    Entity["Concept", "ModelT::c44dv"], 
                    Entity["Concept", "Modem::wq8j3"], 
                    Entity["Concept", "Monastery::mkgg8"], 
                    Entity["Concept", "Monitor::nh8d4"], 
                    Entity["Concept", "Moped::p85wp"], 
                    Entity["Concept", "Mortar::jz37q"], 
                    Entity["Concept", "Mortarboard::8r99w"], 
                    Entity["Concept", "Mosque::35k94"], 
                    Entity["Concept", "MosquitoNet::5z562"], 
                    Entity["Concept", "MotorScooter::bbwp9"], 
                    Entity["Concept", "All-terrainBike::7n976"], 
                    Entity["Concept", "MountainTent::k5s7y"], 
                    Entity["Concept", "ComputerMouse::kbzr4"], 
                    Entity["Concept", "Mousetrap::j8542"], 
                    Entity["Concept", "MovingVan::2s387"], 
                    Entity["Concept", "Muzzle::c7f4q"], 
                    Entity["Concept", "Nail::x2828"], 
                    Entity["Concept", "NeckBrace::hxh4p"], 
                    Entity["Concept", "Necklace::58n8w"], 
                    Entity["Concept", "Nipple::jfzc3"], 
                    Entity["Concept", "NotebookComputer::b3h64"], 
                    Entity["Concept", "Obelisk::s7vg6"], 
                    Entity["Concept", "Hautbois::937r3"], 
                    Entity["Concept", "Ocarina::zc9mv"], 
                    Entity["Concept", "Hodometer::jw6kb"], 
                    Entity["Concept", "OilFilter::d8chh"], 
                    Entity["Concept", "PipeOrgan::gq9sr"], 
                    Entity["Concept", "Cathode-rayOscilloscope::z4q77"], 
                    Entity["Concept", "Overskirt::n87sx"], 
                    Entity["Concept", "Oxcart::vwjn2"], 
                    Entity["Concept", "OxygenMask::4k479"], 
                    Entity["Concept", "Packet::r63y2"], 
                    Entity["Concept", "BoatPaddle::843sz"], 
                    Entity["Concept", "PaddleWheel::c59g3"], 
                    Entity["Concept", "Padlock::73c99"], 
                    Entity["Concept", "Paintbrush::2456k"], 
                    Entity["Concept", "Jammies::5vhcb"], 
                    Entity["Concept", "Palace::3556d"], 
                    Entity["Concept", "PandeanPipe::gjck2"], 
                    Entity["Concept", "PaperTowel::j7j8m"], 
                    Entity["Concept", "Parachute::k594d"], 
                    Entity["Concept", "Bars::3m828"], 
                    Entity["Concept", "ParkBench::hq98s"], 
                    Entity["Concept", "ParkingMeter::h445p"], 
                    Entity["Concept", "PassengerCar::b7xgp"], 
                    Entity["Concept", "Patio::65kf2"], 
                    Entity["Concept", "Pay-phone::4h2kc"], 
                    Entity["Concept", "Footstall::b89vf"], 
                    Entity["Concept", "PencilBox::977v9"], 
                    Entity["Concept", "PencilSharpener::23nv4"], 
                    Entity["Concept", "Essence::9m7fx"], 
                    Entity["Concept", "PetriDish::xt977"], 
                    Entity["Concept", "Photocopier::33g75"], 
                    Entity["Concept", "Plectron::5g596"], 
                    Entity["Concept", "Pickelhaube::pgr6y"], 
                    Entity["Concept", "Paling::2brd3"], 
                    Entity["Concept", "PickupTruck::9k58n"], 
                    Entity["Concept", "Pier::36y3h"], 
                    Entity["Concept", "PennyBank::78b56"], 
                    Entity["Concept", "PillBottle::r9pdj"], 
                    Entity["Concept", "Pillow::3y32w"], 
                    Entity["Concept", "Ping-pongBall::3vdwp"], 
                    Entity["Concept", "Pinwheel::85td5"], 
                    Entity["Concept", "PirateShip::386k8"], 
                    Entity["Concept", "Ewer::w6672"], 
                    Entity["Concept", "CarpentersPlane::287kt"], 
                    Entity["Concept", "Planetarium::kq5yg"], 
                    Entity["Concept", "PlasticBag::9x453"], 
                    Entity["Concept", "PlateRack::sxt2r"], 
                    Entity["Concept", "Plough::y6c4t"], 
                    Entity["Concept", "PlumbersHelper::hq4m2"], 
                    Entity["Concept", "PolaroidCamera::38q9k"], 
                    Entity["Concept", "Pole::c4566"], 
                    Entity["Concept", "BlackMaria::5jn8v"], 
                    Entity["Concept", "Poncho::tr389"], 
                    Entity["Concept", "BilliardTable::9c56d"], 
                    Entity["Concept", "PopBottle::6243b"], 
                    Entity["Concept", "Flowerpot::jjb26"], 
                    Entity["Concept", "PottersWheel::zwt32"], 
                    Entity["Concept", "PowerDrill::j44yg"], 
                    Entity["Concept", "PrayerMat::x6rjb"], 
                    Entity["Concept", "Printer::c4244"], 
                    Entity["Concept", "Prison::rsq7c"], 
                    Entity["Concept", "Missile::n28m6"], 
                    Entity["Concept", "Projector::d56q9"], 
                    Entity["Concept", "HockeyPuck::3hj3q"], 
                    Entity["Concept", "PunchBag::wm5qg"], 
                    Entity["Concept", "Purse::n57jd"], 
                    Entity["Concept", "QuillPen::jm57s"], 
                    Entity["Concept", "Quilt::f56w9"], 
                    Entity["Concept", "RaceCar::9m8p9"], 
                    Entity["Concept", "Racquet::53f72"], 
                    Entity["Concept", "Radiator::3959j"], 
                    Entity["Concept", "Radio::8p736"], 
                    Entity["Concept", "RadioReflector::55ckr"], 
                    Entity["Concept", "RainBarrel::65nkh"], 
                    Entity["Concept", "RecreationalVehicle::p93tb"], 
                    Entity["Concept", "Reel::v4rgf"], 
                    Entity["Concept", "ReflexCamera::j67h4"], 
                    Entity["Concept", "Icebox::tnkd4"], 
                    Entity["Concept", "Remote::h4drx"], 
                    Entity["Concept", "Eatery::f73dy"], 
                    Entity["Concept", "Six-gun::ctqb6"], 
                    Entity["Concept", "Rifle::x7pp3"], 
                    Entity["Concept", "RockingChair::ncpd5"], 
                    Entity["Concept", "Rotisserie::c8hjy"], 
                    Entity["Concept", "PencilEraser::7y7dd"], 
                    Entity["Concept", "RugbyBall::34tbp"], 
                    Entity["Concept", "Rule::shrw6"], 
                    Entity["Concept", "RunningShoe::z7fvm"], 
                    Entity["Concept", "Safe::36p67"], 
                    Entity["Concept", "SafetyPin::8h4m3"], 
                    Entity["Concept", "SaltShaker::7k48t"], 
                    Entity["Concept", "Sandal::7f3xr"], 
                    Entity["Concept", "Sarong::96j5v"], 
                    Entity["Concept", "Sax::v45s9"], 
                    Entity["Concept", "Scabbard::77z36"], 
                    Entity["Concept", "WeighingMachine::2xvy7"], 
                    Entity["Concept", "SchoolBus::2983r"], 
                    Entity["Concept", "Schooner::f2t26"], 
                    Entity["Concept", "Scoreboard::z76vk"], 
                    Entity["Concept", "CRTScreen::q6vr6"], 
                    Entity["Concept", "Screw::wwzc4"], 
                    Entity["Concept", "Screwdriver::8ty86"], 
                    Entity["Concept", "SeatBelt::4qg32"], 
                    Entity["Concept", "SewingMachine::23c46"], 
                    Entity["Concept", "Buckler::4m7zq"], 
                    Entity["Concept", "Shoe-shop::7ds48"], 
                    Entity["Concept", "Shoji::x95jt"], 
                    Entity["Concept", "ShoppingBasket::db865"], 
                    Entity["Concept", "ShoppingCart::95g62"], 
                    Entity["Concept", "Shovel::tjpz7"], 
                    Entity["Concept", "ShowerCap::2787m"], 
                    Entity["Concept", "ShowerCurtain::6cs25"], 
                    Entity["Concept", "Ski::5nbj2"], 
                    Entity["Concept", "SkiMask::6hd4m"], 
                    Entity["Concept", "SleepingBag::549k4"], 
                    Entity["Concept", "SlideRule::59p96"], 
                    Entity["Concept", "SlidingDoor::m65qk"], 
                    Entity["Concept", "One-armedBandit::573v8"], 
                    Entity["Concept", "Snorkel::53ncf"], 
                    Entity["Concept", "Snowmobile::y538p"], 
                    Entity["Concept", "Snowplough::h36y5"], 
                    Entity["Concept", "SoapDispenser::c2fjc"], 
                    Entity["Concept", "SoccerBall::25w42"], 
                    Entity["Concept", "Sock::8w379"], 
                    Entity["Concept", "SolarCollector::pw2xw"], 
                    Entity["Concept", "Sombrero::k9893"], 
                    Entity["Concept", "SoupBowl::w86pk"], 
                    Entity["Concept", "SpaceBar::735sr"], 
                    Entity["Concept", "SpaceHeater::spt23"], 
                    Entity["Concept", "SpaceShuttle::72jnc"], 
                    Entity["Concept", "Spatula::r7876"], 
                    Entity["Concept", "Speedboat::r6p4f"], 
                    Entity["Concept", "SpidersWeb::28fz6"], 
                    Entity["Concept", "Spindle::7zh9v"], 
                    Entity["Concept", "SportCar::k9874"], 
                    Entity["Concept", "Spot::q3792"], 
                    Entity["Concept", "Stage::86r83"], 
                    Entity["Concept", "SteamLocomotive::9kv4y"], 
                    Entity["Concept", "SteelArchBridge::46zx5"], 
                    Entity["Concept", "SteelDrum::fqv7s"], 
                    Entity["Concept", "Stethoscope::f829c"], 
                    Entity["Concept", "Stole::g8fqc"], 
                    Entity["Concept", "StoneWall::8489j"], 
                    Entity["Concept", "StopWatch::4vk6s"], 
                    Entity["Concept", "Stove::27vm8"], 
                    Entity["Concept", "Strainer::2c2kx"], 
                    Entity["Concept", "Streetcar::vhm65"], 
                    Entity["Concept", "Stretcher::74r96"], 
                    Entity["Concept", "DayBed::nrph3"], 
                    Entity["Concept", "Stupa::g64q6"], 
                    Entity["Concept", "Pigboat::p7yyy"], 
                    Entity["Concept", "SuitOfClothes::5c67x"], 
                    Entity["Concept", "Sundial::7mj6d"], 
                    Entity["Concept", "Sunglass::xc3yz"], 
                    Entity["Concept", "DarkGlasses::855bw"], 
                    Entity["Concept", "Sunblock::65k7n"], 
                    Entity["Concept", "SuspensionBridge::66qcg"], 
                    Entity["Concept", "Mop::v6xdr"], 
                    Entity["Concept", "Sweatshirt::s5937"], 
                    Entity["Concept", "BathingTrunks::c892w"], 
                    Entity["Concept", "Swing::s5b96"], 
                    Entity["Concept", "ElectricalSwitch::5gnjt"], 
                    Entity["Concept", "Syringe::8j57r"], 
                    Entity["Concept", "TableLamp::6239m"], 
                    Entity["Concept", "ArmoredCombatVehicle::353r5"], 
                    Entity["Concept", "TapePlayer::bf5f8"], 
                    Entity["Concept", "Teapot::c54x7"], 
                    Entity["Concept", "TeddyBear::f56q9"], 
                    Entity["Concept", "TelevisionSystem::5593b"], 
                    Entity["Concept", "TennisBall::xk58h"], 
                    Entity["Concept", "ThatchedRoof::w2cjw"], 
                    Entity["Concept", "TheaterCurtain::5kbhk"], 
                    Entity["Concept", "Thimble::9828b"], 
                    Entity["Concept", "ThreshingMachine::372m3"], 
                    Entity["Concept", "Throne::2t9q6"], 
                    Entity["Concept", "TileRoof::5p749"], 
                    Entity["Concept", "Toaster::rp6v2"], 
                    Entity["Concept", "TobacconistShop::88ncg"], 
                    Entity["Concept", "ToiletSeat::z8wvq"], 
                    Entity["Concept", "Torch::j9rg7"], 
                    Entity["Concept", "TotemPole::gbxn5"], 
                    Entity["Concept", "TowCar::ph6vn"], 
                    Entity["Concept", "Toyshop::74q74"], 
                    Entity["Concept", "Tractor::39j62"], 
                    Entity["Concept", "ArticulatedLorry::ph66j"], 
                    Entity["Concept", "Tray::jyx2n"], 
                    Entity["Concept", "TrenchCoat::rq833"], 
                    Entity["Concept", "Tricycle::3537s"], 
                    Entity["Concept", "Trimaran::2639q"], 
                    Entity["Concept", "Tripod::pqth2"], 
                    Entity["Concept", "TriumphalArch::q79sh"], 
                    Entity["Concept", "TracklessTrolley::78g52"], 
                    Entity["Concept", "Trombone::22z3w"], 
                    Entity["Concept", "Vat::vcpt8"], 
                    Entity["Concept", "Turnstile::82gr4"], 
                    Entity["Concept", "TypewriterKeyboard::z8334"], 
                    Entity["Concept", "Umbrella::3mntq"], 
                    Entity["Concept", "Monocycle::mrm29"], 
                    Entity["Concept", "UprightPiano::286t3"], 
                    Entity["Concept", "VacuumCleaner::7rg56"], 
                    Entity["Concept", "Vase::4x594"], 
                    Entity["Concept", "Vault::7k875"], 
                    Entity["Concept", "Velvet::575z6"], 
                    Entity["Concept", "VendingMachine::96kgg"], 
                    Entity["Concept", "Vestment::334y8"], 
                    Entity["Concept", "Viaduct::p32mt"], 
                    Entity["Concept", "Fiddle::q9djd"], 
                    Entity["Concept", "Volleyball::q7bkw"], 
                    Entity["Concept", "WaffleIron::gpqx8"], 
                    Entity["Concept", "WallClock::w5687"], 
                    Entity["Concept", "Billfold::z7845"], 
                    Entity["Concept", "Closet::588p6"], 
                    Entity["Concept", "MilitaryPlane::whx2r"], 
                    Entity["Concept", "Handbasin::6w875"], 
                    Entity["Concept", "AutomaticWasher::6d32z"], 
                    Entity["Concept", "WaterBottle::5wh67"], 
                    Entity["Concept", "WaterJug::759dt"], 
                    Entity["Concept", "WaterTower::4rr5d"], 
                    Entity["Concept", "WhiskeyJug::5gcrh"], 
                    Entity["Concept", "Whistle::pv275"], 
                    Entity["Concept", "Wig::9msqy"], 
                    Entity["Concept", "WindowScreen::wfk7m"], 
                    Entity["Concept", "WindowShade::3rh75"], 
                    Entity["Concept", "WindsorTie::5tt62"], 
                    Entity["Concept", "WineBottle::g4m78"], 
                    Entity["Concept", "Wing::tbhz7"], 
                    Entity["Concept", "Wok::fv9fj"], 
                    Entity["Concept", "WoodenSpoon::nc2wp"], 
                    Entity["Concept", "Woolen::ns82d"], 
                    Entity["Concept", "SnakeFence::837z2"], 
                    Entity["Concept", "Wreck::qr554"], 
                    Entity["Concept", "Yawl::hggp6"], 
                    Entity["Concept", "Yurt::4bbtv"], 
                    Entity["Concept", "InternetSite::639pp"], 
                    Entity["Concept", "ComicBook::ty3qz"], 
                    Entity["Concept", "Crossword::yqtk6"], 
                    Entity["Concept", "StreetSign::ysx2f"], 
                    Entity["Concept", "TrafficLight::b4966"], 
                    Entity["Concept", "BookJacket::sy4d3"], 
                    Entity["Concept", "Menu::g698m"], 
                    Entity["Concept", "Plate::2244k"], 
                    Entity["Concept", "Guacamole::xc482"], 
                    Entity["Concept", "Consomme::37g8f"], 
                    Entity["Concept", "HotPot::kgb8q"], 
                    Entity["Concept", "Trifle::b4264"], 
                    Entity["Concept", "IceCream::825yn"], 
                    Entity["Concept", "IceLolly::473v3"], 
                    Entity["Concept", "FrenchLoaf::x859t"], 
                    Entity["Concept", "Bagel::x38n5"], 
                    Entity["Concept", "Pretzel::967k7"], 
                    Entity["Concept", "Cheeseburger::3z2z7"], 
                    Entity["Concept", "RedHot::3j848"], 
                    Entity["Concept", "MashedPotato::8ys8w"], 
                    Entity["Concept", "HeadCabbage::9c693"], 
                    Entity["Concept", "Broccoli::spbm9"], 
                    Entity["Concept", "Cauliflower::fmp3m"], 
                    Entity["Concept", "Courgette::44yb5"], 
                    Entity["Concept", "SpaghettiSquash::8j979"], 
                    Entity["Concept", "AcornSquash::8p8y2"], 
                    Entity["Concept", "ButternutSquash::6k466"], 
                    Entity["Concept", "Cuke::nzfb2"], 
                    Entity["Concept", "Artichoke::ntvv7"], 
                    Entity["Concept", "BellPepper::9w646"], 
                    Entity["Concept", "Cardoon::s78dn"], 
                    Entity["Concept", "Mushroom::3xw4j"], 
                    Entity["Concept", "GrannySmith::k3786"], 
                    Entity["Concept", "Strawberry::3csyb"], 
                    Entity["Concept", "Orange::w579d"], 
                    Entity["Concept", "Lemon::743j2"], 
                    Entity["Concept", "Fig::d3p6f"], 
                    Entity["Concept", "Ananas::m6nzv"], 
                    Entity["Concept", "Banana::f6z73"], 
                    Entity["Concept", "Jak::p6r56"], 
                    Entity["Concept", "CustardApple::nx482"], 
                    Entity["Concept", "Pomegranate::dh736"], 
                    Entity["Concept", "Hay::vcd3m"], 
                    Entity["Concept", "Carbonara::9my37"], 
                    Entity["Concept", "ChocolateSauce::y5838"], 
                    Entity["Concept", "Dough::8x86g"], 
                    Entity["Concept", "MeatLoaf::t7nnp"], 
                    Entity["Concept", "Pizza::56w88"], 
                    Entity["Concept", "Potpie::38zh5"], 
                    Entity["Concept", "Burrito::4xwy5"], 
                    Entity["Concept", "RedWine::666g6"], 
                    Entity["Concept", "Espresso::rv2y4"], 
                    Entity["Concept", "Cup::q9zjy"], 
                    Entity["Concept", "Eggnog::9v7t8"], 
                    Entity["Concept", "Alp::m4bkv"], 
                    Entity["Concept", "Bubble::qp224"], 
                    Entity["Concept", "Cliff::q56fy"], 
                    Entity["Concept", "CoralReef::669j5"], 
                    Entity["Concept", "Geyser::5w69b"], 
                    Entity["Concept", "Lakeshore::4483j"], 
                    Entity["Concept", "Headland::8n9c9"], 
                    Entity["Concept", "SandBar::4w689"], 
                    Entity["Concept", "Sea-coast::m3d85"], 
                    Entity["Concept", "Vale::88wm8"], 
                    Entity["Concept", "Volcano::9fcbc"], 
                    Entity["Concept", "Ballplayer::7v976"], 
                    Entity["Concept", "Bridegroom::85m28"], 
                    Entity["Concept", "ScubaDiver::kqb95"], 
                    Entity["Concept", "Rapeseed::5x738"], 
                    Entity["Concept", "Daisy::hypz2"], 
                    Entity["Concept", "CypripediumCalceolus::7tzrs"], 
                    Entity["Concept", "Corn::m7hpj"], 
                    Entity["Concept", "Acorn::f62cf"], 
                    Entity["Concept", "RoseHip::333d2"], 
                    Entity["Concept", "Conker::v8p64"], 
                    Entity["Concept", "CoralFungus::f7fp4"], 
                    Entity["Concept", "Agaric::844w2"], 
                    Entity["Concept", "Gyromitra::3v4zb"], 
                    Entity["Concept", "CarrionFungus::wj2ng"], 
                    Entity["Concept", "Earthstar::678m7"], 
                    Entity["Concept", "GrifolaFrondosa::m7rxd"], 
                    Entity["Concept", "Bolete::9g3s2"], 
                    Entity["Concept", "Capitulum::834z6"], 
                    Entity["Concept", "BathroomTissue::ts4sr"]}, "Dimensions" -> 
                    1000], 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart = {
                    "Nodes", "conv1_1"}, 
                   NeuralNetworks`Private`NetChain`part = {
                    "Nodes", "conv1_1"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"prob\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {323., {493.5, 499.5}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{{3.7400823048376083`*^9, 3.7400823259133315`*^9}},
 CellLabel->"Out[71]=",ExpressionUUID->"63b8e25f-7356-46e3-b236-39a553e32113"],

Cell[BoxData[
 RowBox[{"vgg16Net2", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{
    RowBox[{"NetTake", "[", 
     RowBox[{"vgg16Net", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<conv1_1\>\"", ",", "\"\<pool5\>\""}], "}"}]}], "]"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", "100"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7396417514700775`*^9, 3.739641840777695*^9}, {
  3.7396421118628473`*^9, 3.7396421221781273`*^9}, {3.7396425950192614`*^9, 
  3.7396425975816565`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"61de63bb-f346-4bd1-be19-65a28ef8bd9b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["31", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {315., {284., 290.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739641841348738*^9, 3.7396421234940405`*^9, {3.739716718305009*^9, 
   3.7397167283324127`*^9}, 3.7398338721069927`*^9, 3.7398339388712425`*^9, 
   3.7398432407379074`*^9, 3.7398433612443237`*^9, 3.7399117513742657`*^9, 
   3.7399127240647397`*^9, 3.7399648570979815`*^9, 3.7399786846212177`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"d426838d-573e-445d-b4f2-35b03a471d6d"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net2", ",", 
    RowBox[{"\"\<b1\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv1_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642600871441*^9, 3.7396427912586265`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"63104c4d-cdec-4ce8-ac2a-23805560cf83"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["32", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {354., {292., 298.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{{3.7396427020114517`*^9, 3.739642724878748*^9}, 
   3.7396427935558558`*^9, 3.739642991505064*^9, {3.73971672089124*^9, 
   3.739716731777023*^9}, 3.739833875411356*^9, 3.739833941175089*^9, 
   3.7398432454976864`*^9, 3.7398432781869946`*^9, 3.7398433176754484`*^9, 
   3.739843361453515*^9, 3.739911751999151*^9, 3.7399127241897106`*^9, 
   3.7399648572073374`*^9, 3.739978684763086*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"8f82f178-76db-492f-b6ac-e5def2ff7ba7"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b2\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv2_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642796712408*^9, 3.7396428472538857`*^9}, {
  3.739642978952106*^9, 3.739642979436378*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"d21d311a-fa60-4ce6-acd6-40509e86fea0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["33", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{{3.7396429534824624`*^9, 3.739642996661477*^9}, 
   3.7397167341228724`*^9, 3.7398338783791933`*^9, 3.7398339434750605`*^9, 
   3.7398432475969825`*^9, 3.7398432805859137`*^9, {3.739843319975153*^9, 
   3.739843361581359*^9}, 3.7399117523427873`*^9, 3.739912724299059*^9, 
   3.739964857332304*^9, 3.739978684878485*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"0ebd5bb8-c1af-4c2b-b217-bbe287163a60"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b3\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv2_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428271143494`*^9, 3.7396428516364193`*^9}, {
  3.7396429840156007`*^9, 3.739642984359369*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"585257b9-8351-42eb-b74e-ec2c5b3a6bfb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["34", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{{3.7396429555140924`*^9, 3.7396429986309333`*^9}, 
   3.7397167367808495`*^9, 3.7398338820889683`*^9, 3.7398339460961795`*^9, 
   3.739843250080477*^9, 3.7398432840069733`*^9, {3.7398433231778655`*^9, 
   3.7398433617005796`*^9}, 3.7399117525614853`*^9, 3.7399127244240303`*^9, 
   3.739964857457608*^9, 3.739978685004527*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"d20ab0e2-ed0a-4d86-bbd4-0344fbdf9e72"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b4\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv3_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428298492174`*^9, 3.739642830130399*^9}, {
  3.739642860188901*^9, 3.7396428626760235`*^9}, {3.739643002621046*^9, 
  3.739643002945953*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"5985fdff-1e24-4b06-acc1-22d7334a39b5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["35", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739642958045904*^9, 3.739643003804959*^9, 3.7397167397386746`*^9, 
   3.739833885279125*^9, 3.7398339493021517`*^9, 3.739843286894221*^9, {
   3.7398433461977024`*^9, 3.739843361840643*^9}, 3.7399117528118715`*^9, 
   3.739912724564621*^9, 3.739964857566958*^9, 3.739978685143405*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"808013a5-7175-49c5-bc56-f5ccf812903a"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b5\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv3_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428330525217`*^9, 3.73964283336487*^9}, {
  3.7396428650198345`*^9, 3.739642865348113*^9}, {3.7396430059772034`*^9, 
  3.739643006289631*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"71714920-5cfd-42e4-bb4b-f7d40221c53c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["36", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739642960102137*^9, 3.7396430068143077`*^9, 3.739716743242175*^9, 
   3.7398338876634216`*^9, 3.7398339515734634`*^9, 3.739843290133749*^9, {
   3.739843325811109*^9, 3.739843361969858*^9}, 3.7399117531413174`*^9, 
   3.739912724689592*^9, 3.739964857694612*^9, 3.739978685260166*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"024694a1-a2a0-4db3-8717-961ce77bb6dc"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b6\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv3_3\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428357862716`*^9, 3.7396428360988674`*^9}, {
  3.7396428685874195`*^9, 3.739642872262774*^9}, {3.7396430090331855`*^9, 
  3.7396430093306255`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"3c87d700-803c-4c81-acdc-4c8acb256078"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["37", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.7396429630237155`*^9, 3.7396430106428127`*^9, 3.7397167462684803`*^9, 
   3.7398339546867714`*^9, 3.7398432929252653`*^9, {3.7398433462758093`*^9, 
   3.7398433621311574`*^9}, 3.73991175336001*^9, 3.7399127248770475`*^9, 
   3.739964857835204*^9, 3.7399786854007607`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"26b73a4b-6edb-4a4d-8f20-5800b9b6c622"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b7\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv4_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642876060563*^9, 3.7396429396263943`*^9}, {
  3.7396430138470707`*^9, 3.7396430140345807`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"cef161da-39fd-4485-86b8-7845df1f07cb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["38", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739642966278552*^9, 3.739643014518611*^9, 3.7397167489510145`*^9, {
   3.739833929668684*^9, 3.739833957143653*^9}, {3.7398433463382945`*^9, 
   3.7398433622561274`*^9}, 3.7399117535005755`*^9, 3.739912725017643*^9, 
   3.7399648579601755`*^9, 3.739978685600217*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"4bad8638-2128-4541-b539-774cc9e7f9f6"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b8\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv4_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642904377446*^9, 3.7396429045651093`*^9}, {
  3.739642941856287*^9, 3.73964294231341*^9}, {3.739643016956425*^9, 
  3.7396430172063646`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"ef0458aa-31c5-4ebb-b079-3659a26333ea"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["39", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.7396430176591864`*^9, 3.739716751948485*^9, {3.7398338908198323`*^9, 
   3.739833909147216*^9}, 3.739833959919653*^9, {3.7398432962917647`*^9, 
   3.7398433059364653`*^9}, {3.7398433463695736`*^9, 3.7398433624384975`*^9}, 
   3.7399117536255784`*^9, 3.739912725160596*^9, 3.739964858147631*^9, 
   3.7399786857251825`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"3d15a193-84ee-4a19-abc3-0602a0f7d2c8"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b9\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv4_3\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642907034354*^9, 3.7396429451211567`*^9}, {
  3.739643019910576*^9, 3.7396430200825825`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"4026c716-cb33-4cf1-bbf7-e447d5e7e207"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["40", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739643020566572*^9, 3.7397167546072755`*^9, 3.7398338935531473`*^9, 
   3.7398339632477293`*^9, {3.7398433464164333`*^9, 3.7398433625814047`*^9}, 
   3.7399117540530972`*^9, 3.739912725285567*^9, 3.739964858303878*^9, 
   3.7399786858657737`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"a58c5dd0-2fb7-40b3-b5fc-33e39d9eb80c"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b10\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv5_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396429091906476`*^9, 3.73964294718097*^9}, {
  3.739643023642692*^9, 3.739643023908248*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"fad25924-67aa-45a5-8acc-300def0a160f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["41", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739643024298558*^9, 3.739716757221013*^9, 3.7398338961581807`*^9, 
   3.739833965472118*^9, 3.7398432995654526`*^9, {3.739843346463296*^9, 
   3.739843362721997*^9}, 3.739911754187641*^9, 3.7399127255823917`*^9, 
   3.739964858460086*^9, 3.7399786860063396`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"cc0fd74d-9fb6-4ab9-9783-582bc4ec85ae"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b11\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv5_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396429114978495`*^9, 3.7396429119037805`*^9}, 
   3.7396429486848*^9, {3.739643027002644*^9, 3.7396430272994003`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"7d6b3340-aa00-4689-9ca8-2cf52cfb9a59"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["42", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739643027705413*^9, 3.7397167598412633`*^9, 3.739833900390339*^9, 
   3.739833968438328*^9, {3.739843346515835*^9, 3.7398433628611813`*^9}, 
   3.739911754421994*^9, 3.7399127257542057`*^9, 3.739964858600651*^9, 
   3.739978686146965*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"3e23f4f5-492a-4936-af2f-856a3d28e07a"],

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b12\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv5_3\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642914029666*^9, 3.739642950591263*^9}, {
  3.7396430303001127`*^9, 3.7396430310655336`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"130e9531-b97f-4774-b31f-27afc9223c59"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["43", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.7396430315965223`*^9, 3.7397167624625406`*^9, 3.7398339708936787`*^9, {
   3.73984334655357*^9, 3.739843363017401*^9}, 3.7399117545625534`*^9, 
   3.7399127259260406`*^9, 3.7399648587568645`*^9, 3.7399786862939525`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"3efee658-6e8b-4a3e-b2c3-4e14fd93b514"],

Cell[BoxData[
 RowBox[{"vgg16Net4", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{"vgg16Net3", ",", 
     RowBox[{"LinearLayer", "[", "1", "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396421390939593`*^9, 3.7396421882281246`*^9}, {
  3.7396426294564176`*^9, 3.739642629768813*^9}, {3.7396430336132975`*^9, 
  3.739643033988211*^9}, {3.7396453691887145`*^9, 3.739645383855776*^9}, {
  3.7396454559900208`*^9, 3.739645457990342*^9}, {3.7396455126426897`*^9, 
  3.739645513111726*^9}, {3.739712814178038*^9, 3.7397128151007247`*^9}, {
  3.7398342011594577`*^9, 3.739834202161356*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"a7853ad9-ced4-4b0d-b8a8-a12b53ce11eb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 8192}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "1"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "1"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {354., {431.5, 437.5}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{
  3.739642189454615*^9, 3.739643034456848*^9, 3.739645385699605*^9, 
   3.7396454588498325`*^9, {3.739645521692274*^9, 3.7396455343553896`*^9}, 
   3.7397128167866306`*^9, 3.739716766694786*^9, 3.739833974755501*^9, 
   3.739834202884118*^9, {3.739843346612946*^9, 3.739843363204857*^9}, 
   3.7399117564402623`*^9, 3.739912726051077*^9, 3.739964858991211*^9, 
   3.739978686550493*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"79e09fda-6e27-4eea-b0ef-49051fb2f057"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "dataDirectory", "=", 
   "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7394718041886687`*^9, 3.739471805977866*^9}, 
   3.739471847311478*^9, {3.739471888052724*^9, 3.739471927668871*^9}, 
   3.7395529733660297`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"3635ed9d-90c6-450b-8ea7-eaabfcbf54b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ids", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"FileBaseName", ",", 
     RowBox[{"Map", "[", 
      RowBox[{"FileNameTake", ",", 
       RowBox[{"FileNames", "[", 
        RowBox[{
         RowBox[{"___", "~~", "\"\<.mx\>\""}], ",", "dataDirectory"}], 
        "]"}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739471934953743*^9, 3.7394721092832556`*^9}, {
  3.7395529770167665`*^9, 3.7395529784813104`*^9}, {3.73955856300596*^9, 
  3.7395585793464966`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"e85c3804-5308-4667-9d6f-d56b7fe4929a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7400838600848618`*^9, 
  3.7400838601161475`*^9}},ExpressionUUID->"6426a8c2-e446-467e-96dc-\
9dc5f283ff60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLNamesData2.mx\>\"",
    ",", "ids"}], "]"}]], "Input",
 CellChangeTimes->{{3.7396349389259467`*^9, 3.739634975495325*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"54b9e02e-4a2a-4457-a150-0d1debbe907b"],

Cell[BoxData["\<\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\\
MLNamesData2.mx\"\>"], "Output",
 CellChangeTimes->{3.739634976509345*^9, 3.739638814777966*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"9cb85ade-1de4-4411-a33b-e3860a3ea32b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Length", "[", "ids", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "mxs", "]"}]}], "Input",
 CellChangeTimes->{{3.73998020763373*^9, 3.7399802135652485`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"e070dd6a-371c-40c5-a4f5-fdce87c091d9"],

Cell[BoxData["164913"], "Output",
 CellChangeTimes->{3.7395585831410437`*^9, 3.7400846585753975`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"0a57aa74-1e3a-4646-9d98-a0587a811030"],

Cell[BoxData["164913"], "Output",
 CellChangeTimes->{3.7395585831410437`*^9, 3.7400846585753975`*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"55c2569a-c7ec-4fcb-9f93-316cade921da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ids", "=", 
  RowBox[{
  "Import", "[", 
   "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLNamesData2.mx\>\"\
", "]"}]}]], "Input",
 CellChangeTimes->{{3.739638769475127*^9, 3.7396387850661488`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"2543a9e4-02ab-41d1-a8bc-33ff30a21a79"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"00002bf3-e652-4937-b5b7-da80bc8794e6\"\>", 
           ",", "\<\"00009198-253e-4028-a689-6a64578d99ea\"\>", 
           ",", "\<\"0000aaf4-d0a7-42b6-9220-2a138237794b\"\>", ",", 
           TemplateBox[{"164908"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"fffe7f0d-a317-453d-a358-c8f0384e441a\"\>", 
           ",", "\<\"fffeda98-7be8-4da1-90af-4ccf9bb957e9\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 15, 33184274969677548217, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 15, 33184274969677548217, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 15, 33184274969677548217, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[33184274969677548217 === $SessionID, 
   Out[15], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739638818249655*^9, 3.739642235519958*^9, 
  3.7397162230264635`*^9, 3.739833991907156*^9, 3.739843373383915*^9, 
  3.7399647879720097`*^9, 3.739978687841032*^9, 3.7400158465101604`*^9, 
  3.7400158951986356`*^9, 3.7400160518835645`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"4e6020f8-d57f-4c76-86af-aa49081ebf48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mxs", "=", 
  RowBox[{
  "Import", "[", 
   "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.mx\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739634885259762*^9, 3.7396349015287447`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"50c6b4aa-a51d-4c1e-b14b-0c8263194d44"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"00002bf3-e652-4937-b5b7-da80bc8794e6\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "35500", ",", "37500", ",", "6500", ",", "1000", ",", "28500", 
              ",", "26500", ",", "50000", ",", "22500", ",", "39500", ",", 
              "24000"}], "}"}]}], ",", 
           TemplateBox[{"164911"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"\<\"fffeda98-7be8-4da1-90af-4ccf9bb957e9\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "9500", ",", "26500", ",", "3000", ",", "39500", ",", "2500", 
              ",", "31000"}], "}"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 2, 33184274969677548217, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 2, 33184274969677548217, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 2, 33184274969677548217, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[33184274969677548217 === $SessionID, 
   Out[2], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739634942796733*^9, 3.739638817876004*^9, 
  3.739642239333029*^9, 3.739716233159733*^9, 3.739833996026466*^9, 
  3.7398433781966963`*^9, 3.7399647955314026`*^9, 3.739978690975685*^9, 
  3.740015852218707*^9, 3.7400158993221865`*^9, 3.7400160060156574`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"09bb7db9-e46a-48b0-8443-eec57e055e69"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mxs", "=", 
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"dataDirectory", ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"#", ",", "\"\<.mx\>\""}], "]"}]}], "}"}], "]"}], "]"}], 
      "&"}], ",", "ids"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739552998291153*^9, 3.739553016403425*^9}, {
   3.7395531264131775`*^9, 3.739553208244177*^9}, 3.739553568316764*^9, {
   3.7395539840975394`*^9, 3.7395539894123335`*^9}},
 CellLabel->
  "In[264]:=",ExpressionUUID->"c619a705-fbce-4a1b-92b0-efc5a82c196c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.mx\>\"", ",",
    "mxs"}], "]"}]], "Input",
 CellChangeTimes->{{3.739553260137849*^9, 3.7395532804742064`*^9}, {
  3.7395533177821803`*^9, 3.7395533387657156`*^9}},
 CellLabel->
  "In[265]:=",ExpressionUUID->"0482bcae-c1a5-4dc6-9e1e-575f9e3ada79"],

Cell[BoxData["\<\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.\
mx\"\>"], "Output",
 CellChangeTimes->{3.739555611575987*^9},
 CellLabel->
  "Out[265]=",ExpressionUUID->"5bcd7c45-f7c2-40a9-955f-404844bb0380"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"File", "[", 
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"dataDirectory", ",", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"#", ",", "\"\<.jpg\>\""}], "]"}]}], "}"}], "]"}], 
          "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Max", "[", 
           RowBox[{"mxs", "[", 
            RowBox[{"[", 
             RowBox[{"Key", "[", "#", "]"}], "]"}], "]"}], "]"}], "}"}]}], 
        "}"}], "&"}], ",", "ids"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7395576191613197`*^9, 3.739557678369922*^9}, {
  3.7395577558965483`*^9, 3.7395577792041645`*^9}, {3.7395578092837234`*^9, 
  3.739557842541752*^9}, {3.739557916694015*^9, 3.739557930974816*^9}, {
  3.7395579774953732`*^9, 3.739557987816764*^9}, {3.7395581088658996`*^9, 
  3.739558202376765*^9}, {3.7395586135526347`*^9, 3.7395586195331264`*^9}, {
  3.739558966293628*^9, 3.7395589679487133`*^9}, {3.7395594071732388`*^9, 
  3.739559415856855*^9}, {3.7395599836485963`*^9, 3.739559994012493*^9}, {
  3.7398340193281994`*^9, 3.7398340317632446`*^9}, {3.7398952950024343`*^9, 
  3.7398953026269035`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"e36ddc51-ff0a-4a57-be3a-8090dfdf0efe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"training", ",", "testing"}], "}"}], "=", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{
     RowBox[{"RandomSample", "[", "data", "]"}], ",", "161000"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7395586294538636`*^9, 3.7395586332460146`*^9}, {
  3.739558698607547*^9, 3.7395587157743483`*^9}, {3.7399803806180644`*^9, 
  3.7399803876806755`*^9}, {3.739980454448743*^9, 3.7399804596327844`*^9}, {
  3.739980507047841*^9, 3.7399805119370995`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"6094b7ad-5beb-474a-8c95-3c7cea3e30bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sample", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"testing", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396536318861485`*^9, 3.7396536450110393`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"ba54f65f-9acb-46a2-a481-ff22b53d76e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
a2c26ebd-69c4-4efa-8775-8b06b4a73a5a.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "40500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
710f93f2-3f6d-4bc9-8bd8-d0a367cada92.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "49500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
baee5664-7fa1-4f06-a360-dd440ac9e172.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "46500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
0583dff6-5f61-442a-90a8-6aae958e83bc.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "44500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
a27f9d5c-3447-4416-9ed6-97d776392ba2.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "48500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
30944587-142e-4fde-b9cc-54c7beee9f51.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "50000", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
395e44d2-865a-452e-9a5a-3889593f3e1f.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "48500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
5457a1a0-f521-4757-8109-dfdf1d340c08.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "40500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
e3262a9a-0d8a-4686-b478-73252e9eb837.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "50000", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
d6e07f6d-b17a-4779-a149-5600bcf7d303.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "49000", "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.739653645803919*^9, 3.7398341008505077`*^9, 
  3.7398433929373317`*^9, 3.7399961029562306`*^9, 3.7400798823651175`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"26cef51a-de5a-4cad-96b4-fdf3f48503da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16NetTrained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"vgg16Net4", ",", "training", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "testing"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "32"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739559110719847*^9, 3.7395591267652597`*^9}, {
  3.7395591816890154`*^9, 3.7395591931407566`*^9}, {3.739559962153488*^9, 
  3.7395599738912897`*^9}, {3.7396391562367477`*^9, 3.7396391759360867`*^9}, {
  3.739642252250087*^9, 3.739642259466106*^9}, {3.7396424763075705`*^9, 
  3.739642481789752*^9}, {3.7396425438822584`*^9, 3.7396425471775045`*^9}, {
  3.7396430935700345`*^9, 3.739643094007765*^9}, {3.7398341196523023`*^9, 
  3.7398341214013996`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"c2c6c75e-a14f-4858-98cb-ce736e067e86"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 8192}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7399787207339773`*^9, 3.739980399053071*^9, 
  3.73998050247698*^9, 3.7399960876506577`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"98c87a68-b03f-42b4-baab-19f8210473a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<MaxLength2.wlnet\>\"", ",", "vgg16NetTrained"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.739560015288725*^9, 3.7395600463753376`*^9}, {
   3.739836996209755*^9, 3.7398370004135656`*^9}, {3.739879746863305*^9, 
   3.739879785705282*^9}, 3.73997871403825*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"689c0b34-7992-4c36-9d19-5c29e53b3225"],

Cell[BoxData["\<\"MaxLength2.wlnet\"\>"], "Output",
 CellChangeTimes->{3.7398797891602936`*^9, 3.739978721960967*^9, 
  3.739996098570362*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"aac6240c-80db-4572-9173-7594190152d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16NetTrained", "=", 
  RowBox[{"Import", "[", "\"\<MaxLength2.wlnet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.739879792595083*^9, 3.7398798071835613`*^9}, 
   3.7399818134754143`*^9, {3.740079850959648*^9, 3.7400798564378386`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"2aed812a-ad0f-48a6-831a-7c3bb30205c3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 8192}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7398798086258793`*^9, 3.7400798604806185`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"9331a828-c89b-4c5b-84c2-c7564c2388fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"vgg16NetTrained", "[", 
  RowBox[{"sample", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"sample", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "2"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Map", "[", 
  RowBox[{"Import", ",", 
   RowBox[{"sample", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7396534275258193`*^9, 3.739653441804623*^9}, {
  3.7396534747923813`*^9, 3.739653493012641*^9}, {3.739996173514393*^9, 
  3.7399961868055754`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"29507aea-3559-46b0-a1d9-bef1b68fe4ef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "48550.83984375`", "}"}], ",", 
   RowBox[{"{", "41537.46484375`", "}"}], ",", 
   RowBox[{"{", "40172.7265625`", "}"}], ",", 
   RowBox[{"{", "34302.24609375`", "}"}], ",", 
   RowBox[{"{", "43740.078125`", "}"}], ",", 
   RowBox[{"{", "48262.81640625`", "}"}], ",", 
   RowBox[{"{", "45129.87890625`", "}"}], ",", 
   RowBox[{"{", "19226.544921875`", "}"}], ",", 
   RowBox[{"{", "48621.33203125`", "}"}], ",", 
   RowBox[{"{", "49782.359375`", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7396534665344696`*^9, 3.7396534946971335`*^9}, 
   3.7396536506130543`*^9, 3.7398516466604495`*^9, 3.7399961081827097`*^9, 
   3.7399961881877413`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"a122fc04-41a9-46f7-86b2-6d5d13a2f1c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "47500", "}"}], ",", 
   RowBox[{"{", "41000", "}"}], ",", 
   RowBox[{"{", "40000", "}"}], ",", 
   RowBox[{"{", "34000", "}"}], ",", 
   RowBox[{"{", "43500", "}"}], ",", 
   RowBox[{"{", "48500", "}"}], ",", 
   RowBox[{"{", "45000", "}"}], ",", 
   RowBox[{"{", "19000", "}"}], ",", 
   RowBox[{"{", "48000", "}"}], ",", 
   RowBox[{"{", "50000", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7396534665344696`*^9, 3.7396534946971335`*^9}, 
   3.7396536506130543`*^9, 3.7398516466604495`*^9, 3.7399961081827097`*^9, 
   3.7399961882189875`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"c1c5bbf8-64ad-4765-a670-1b389c17fd87"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
0TZ8Gsju05SIOIJYnV2E8F5qZAu1u6VOojIIl5aWyspVo4tqkTjIF8h3HnqF
zYr+wxnWK4+8Pr/+H994fGv3wf/ZF0m/xgqeO/fiA08XGq0oM37grFhvK129
+97rXjfrvrvPDvOnB7Gvnr7/lyWZ7bufrNQ137rwpZf2Pv36D1icv2Apv/r5
azvfcdL6wNuhyI1AexHu9wOIMajhOm2srjVtjRU9WGMFffs3YwWvYvPJlcYD
mW43XfbQk1I4bQFf68SNThFigFIzjDgzklnHAy0qE4panB51IGyKxG2egJ6k
C3qzCHFsq5eL5pxS3X62FnREdEorv9xNkvN0+7q3NnXSg5qGx4sLhAcvfeHH
u6zSP+2wnr/v9e7osy9/69rVR/7fVOt/+jNTvfWNb/5wcDwuvXl490t73tT0
R5/84sDuYt37lf2bw93rzfsufvNneb7pB386PvT+gPelyo3X3z3e5n+SFXnk
gd1XHyqOPemb0fRRiJ7F+vQaK+gVlApWiURp/eLccE0fRq+ADF++BXC40os6
Gz+YNAUSRlzK9XtS7TWtlddk0uQgF887hModwCVRXtUauK1ONl8OcQSXEIMh
D8LZlyx5C0QE2Tdoi/MGVIte1HMtb3PqJPrO+bRlFvLdO1vdwJXXt1nEP+7A
Bi+SzFdefvzimfv/ucJzP/7n/5Ah+C9vZai4c1j8D89djjX+06uff6Tni7Hu
vf91ithZEvddevxWji1+kkUvbfe8wSq/++Tb159x/BVr/vLL3GfuY6bh4jyY
m/hGs8SkH+n11y5r48SQgK+fQZxY4ofBiqCT1LhQ68RMLlFnmGsyqUTBUW6F
6914lYwaHAIIoDKataIeOtbt5/QWXrdfwEHpCWrhxODuDA4xcm2k3si7p9c7
5KQsN3OzRJie56qUFd5jTBddIp7tzBs3S4pzW6z6z86znrp7r919+PXvXT33
6D9VZPoHPvW3keqr3/gu827VfZS/d1vjzP3NE59+oGAJsb7z7M58/lo79/VL
37lVEwueYc1/Enhwm0X/87du3bhfwWKtfvAi99EvL8eJ9ROZoX8wCDOkF/5q
fXItQsXlWrtue/gP49vJQZZg4q1e2uaXAJZaNwJYTG7B+LDR6ieVxn1ymG73
M46gLJ63Q6A3K8t01ypEOJq1eaM6gk5R47Jcf1Cn0sVm1Bszqi18tV0IrNL1
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
9FU=
      "], {{0, 57}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 57},
    PlotRange->{{0, 100}, {0, 57}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
Bw==
      "], {{0, 66}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 66},
    PlotRange->{{0, 100}, {0, 66}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
SJgZQcKT4LCLlFCS/JqEFSFZGLbHGLLf017V7d48ddJIkKtsg2LUxKQtBz49
e7EB7BXIFc8QhSXlEO0zgfYr547vPHgAeuYN8gvnzmN8jR8f2rp598eAXtvN
9iWV5eHgzeNnD8+v2YbVjED5Wiv4dFkHwX0DvYEAFuJBk8mE+lQNvgGoe0F/
rCJ2qn3SGP3g8frXks2xHMyBiPztIVmn/CEOuxU8HWDagJVhgordHC/BhT0m
ISld1Ff2xgbfGSvZtjPepuYbF2u21cHTT5+/hO2VSF88d9JgtmM5oHyNl0+a
XU4Y+83mgN3qQkRrx52zJoseettw9V5hfmWgq8vb0Vo+s9IXjly7caekpJIg
Mc8Dry03ExcXd7/JPnTxK1iRDAwcawuJuIETnjcuTDctT8hZnepapFKaJjDB
VixVoIckjpR8lMhgrCKypRIloHo0TpA0FJwj8BCB/4sU4NtjxRJABf0tNy+t
27E/IBnGLRs+VCTFu13ZjbeaKZgugUAisfiDVQqzMyHFcq/Vgzg/Eru2bVmV
osxQ6QsarnvwjFGRNSsWG236OIXiRoePoe8TMiCHCoUCAv+/QBgewAoGJUC0
ExZZAkUeHfavjhqFfcsU67qJxR8okzNfR2IL8t1CrAeRASDpdI9cSUwcY4V6
scLtYgMlYiQ5vueX7wUXH5Y5A6J9oFCdUukNUxEIH1gy2jLRDVhReK4RE41S
vIAV3OgjQrR8EowBz4kMGFg2IIpkL7+SOgdqqNFoMjMzUU8t7+FYsQwCeseE
UPCx4f9g3Riv2fSWafMo14qJ+uzBiDqL6AZEX0NEM8fwkg4KEY7EgTAmvVGg
MDeT2JqUE/LLchUkZZv/fbZI9dyyQpuqIMews/5T0EGC5jatW/tD8atAAAsS
KJ3VapUrd9/QFWlQ2PhQiA4h/6Mjf2baMl6x9TX9tjdK17331DMx2uG/mPSH
mPgnYhJe+bVFo8K5055MBp4agAKQBsEUaZGJcBQh8U8gsHyEEQPh74vV1cun
ViyeyfnvUoG2osoFzQGu8fbd8tKiH5BfdXWBBCJwgiqVCkluEVTyId3hJJWB
GIEmkPd3o35q2DY6ffvLWTsGl60fO250zK7SN0/PGnP9/cTakkmZ8WNAhKJl
0GhAFmbJJsTeApoKigDhEx/B/pIDEZQe3acA/p02gYjqoEiYXCUeFp08e2Hd
mlU/FL+62XwH4bhDzMjIAFeIerIBD8NKMsgRFgg88gNW+u0jU2tfytrxqnvZ
G7HDYg4UDDxX8OLl8tdOzo3Xxw6TNY6hWJ6SbuQawdUgdAYxp+nADSTQMjos
XMEJAKrHJ3xPHUSsb8W80rJ825wlq4MSFz39+fEfkF8BQwCK6XA4QJx6o8KH
zZxkkFmI/SlE/G7Uz/TbxqTuwHJVvurdSa/HnC8f0lEx6EreE9cWTHBOfAP3
hpG8kcBy5K1XBsaMHB7zzlsxsWN+kjjhT5Gu2+BusOJJsUCUfX1PrCS5Aot0
8UZrzc5DO/fu31Cz+gfkV4APyFJJSUliYiJQLNQnjv4LWGG3IsAHeLlHR/wf
/dbxyTsGZW0fUrVm4tg/xVxwv0DNevVG9r9dLBqUN3YglnK4MkQgGgL5W3Hv
/WTf3glHjkw4uHfq26/8DMs1WDGcZowIYiQQDFP09yFXqOHiFwd2bwDeDu5r
16HjS9bVXm28VT2/6ofiV/IGNio1NVX2gw8jongTUW+0C09+dPg/6bdOTN4x
RL9t2JyVcUkDY67mPs+XvxAs6net4KWKuKGIYrHIsCCKEKldHPF2zJ49rx45
MvjIwbGTRv4CCW3gqBFFSowUR4LfUwMBiNqtNWbFVLsxs2rJCkLq75qV7ysS
p7id9uu370awgwMLGVm6apXK7EhMMbS1dCEe5tGzbXNNqkKt1juvNrbhAVL0
6hXLjDbTZEX67Y5OWuJXZAAvgxE4MUtnwpkbXhTlUjS2tcIDuS+ZstN4B1dG
Yaz+RcYqa/uw/PkjNO/8tDHvRZ/tcbKg3/XcF6ZPeh07AVLOA3pZ4qOEuJhP
Dr94/OhTxw4OHfP2T4D7I8aPXSPpkcJeHGn+5WxedBf6JO4EKbp8AF0cu3OU
ROgw7/HREvkBe4FT/UJYwBwGrAEbCsgLeoQoZQrgXUQ01bM4R5By4pKvoUQw
tTinJS2TQmKYg4OUlEyVzgyjIjhCIgZA3mhW8uaslDOJtCPt5JnK92oyk3Ym
TX3/9TGp/cc96qhLiN/0nG7XkMLVY2Nfi7le9DLhepLMfeK6e1D+5GFSb+S0
FjCThviRMV/se+LMod98dvCFESP+FuKhsBgg2AgTEe5HzGIPHjI4ojRSXt7x
uiWZZnA4PMA73ycmwvlUzC0hbucpAUdY+CvYTKnE72OlEAVbXI7vDdFFgeNw
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
/7glptOu2C9yYs9mpx/6w4ujM5bPfm3NrJfWzB40p3hYnr1bUj5MHyKC5Apl
rCAGk1crSctO+mAFwOCXZbAlwgn8CI8r2mDMBSkolqgcj98/EvA6TynSpBka
G+3uDj+uvokh8X6dUtiyfZ02S52ZaT599rrsVrwUrhNSgjAly/KL18eOXLR9
wKL6Z1YcefP9mr9/48ldOww39qta9hhO1uS9OGCgPXufRXPHpvVYdBcefzrl
928/pV8fp9w3VLnrRfeHQ8e9gbEKOf8Udj33Zd4IZ8KI3gQLpkcgVyNjPj7w
n6eO/vzMgX7pI3858DfPFyfXlSQ1lGtaDWn1/9Bv8JTF01/4cOZLu5cOWV31
p2xdK8yjIGU6BFnF5AgRIl95nZW8ROdrqVQ5SLm/FC169EAuLrpQh4v2EJ/B
JTL5WBTo201flpROg3k+de68q7Cwd7EWHRJZr2i2lo+zzB5aseXF9Zd+u+jA
y9XL/2rg350+Gtu+5+nwnpc9+4wv/u4Zg26/ztKiNXXmWW/0ezztD6++4NiU
mbp7aPqeZ6bXDh71esyFvGfCeYO6HUMu5MXaE9/mMElCoQgOakFF3hwc82n9
W+c/+4+Pd/cbNzjmzf8YMNf8qTvlti7+uslw4Z8GjJ44v+KFzXP/sLHixZUz
nss3NyHU3UM+efwiIi8FOywOt0UKexwWY0XTtGxhvv0mRD+iWEWzWDTtqT9c
W7e3nqBEiBzLKqcHGawZQk+2M2WK9e1Ud8LS+qcWHXmu5uPYDZv+5vm/vnhk
TPOW33ZteLxte8qAf3zUlfNRuulcqu6iVX1i4NOG/s+9nDEnUbtvfGbdIPe6
gYOfi2maP74995177tjLFRqXagyNV4aIPaVZT9Kkf921eXj97mdPfzRMMeEn
bzz5uHbcityMRru2JTXjyK+eGpVcPXvwxrkDPiwfvHzG06aMVmkANCOEgzhQ
BSHoDHm56GIkGpdmsZYJ8vYDYgXH+w9uqz94LERiQztz3mxfhKHktCioMIt0
Gne/V8amL9j02txNry1aP3pm1SODfneiNj18LJE6knRlY9ZLA/7TYPswQ19b
MqPBrtn7Qv/EocPHuZZmm2vTNRtG538w7t23YrYahrZUKC/mTz1Sour365iX
3xw44Lk//fGpZ3//WP/nnn18xBu/bDhb/En9hLrNI4Y9FzNu0KtF2u3W5E+c
xvN60+5f/P4Z9aLSt5eXDVpaqt+9bpA2vTu60is6HOi2hwSyxUG8zTJENEwU
oss5v6lM8C2xosjO8+c/3bplJ0xQkCQcbue9Lp+04Intpn1wsUZlezdBHWt1
D7LnDy+pfNNgTtQm5SsHz0rpNzP5sdKMl7UqZZK6ODWzKm5yuTF5YXqsW60y
aN3qIYaX3yt7Z6JpaFlR8vT4oWtSRpWPeKZKMbo4N3NKRkJGVqYtJ1eRobGa
Mt05CbGj/jnf/lSOYUCeYbQ6LlH93uxi89H0yR+oNQt0Duto/cSR0y3PGNPe
smjGqBUqnZEjuChvl4J9XLEG8y5Ka3txmpTvXW3+zRXz/y5W0bUWodOnj5WV
VgQC9KWrV+ZWz7/V3IZJMSKCKByi8QL+pHQV3NCFawaYg2akq7FNiHQg+i5i
WpJSEkg54JDWSU23VWnSMsNcwIf8Lag9hFiFMhX5ulFHMyJbEXHHYsrw0bgK
gN9ZFpEqPSPbrERME0KNCN3SJo8vMOdjwxPEi1uJMHLkZ5Goqx1RnTjRwaq0
ejkCFDpDUsoDphgnzNvDfqbHiLERaRH9DyhX0fwMtvNbNu5QZOhS09MuXr2E
oye/r1VoD6Kgnw77/UGL2SjlwkKEiFeV6JRWKcQQcepPoDV6FY2rFfhVOPgv
eXyaSamHloIiAfrQEmC0+jw8Opho3o8Eb0bGVLFPxkmj0qVMTYgudOSDVr3e
qLbJLEmWHJMlKUjdgkf7afyKULbWhAgACEcWoj8iBxfSWiYUFkTu/hhR71Lw
b7vd795XsOKDPOuLhDHloCiK5fE6KpyPRGECdwh7T5NGhXiaJzplzc3SOOAK
Lgz0Bj9No1VSnIcRmnmxQ2QiNq3FlqkX8ZJ4QS6FmR1zCBb5QqR0eyAtcQq0
K0rhCZD3tGR1rqtQXgGC2zJmT52cxkd6FtbCA7NSsDgDgQJDzYqZcYl4prpC
MpI0hT3RlxKl7CapAMn0YtXZ3SW/F/PdsUIPYiWGvZ23Vy1bjX0iBE3SZTjt
gQgGEQQVAJpmUanCLS1bViwB6+br9FdVvc9IqTecuSRRttH40eGdfuJqfpnK
470XCYWzVKqFsyq97e0BP7lizd4xk7KgvYI5c5q6buYXWvMsVkSKM4srVyxZ
5XIUatTGw4dPaLT2uy1+OQ2lUusqymd4O+7t3LTeaciyKpVbVnxgVKpuXLw0
y11oS1MybRCKivnmnDxHLkEyvgidX15BgL1lJEkCIxxiIhH6wqWLHp/3O2Al
SOsDcCIUF3rCUazw5IZb71xZ8/5aiQrjC72eUDTJKEpTK3AmhYq417Vt5QaY
x7Z2T822HT6YRCnWx7Lgj6xbsohDnaZ8hRSRoYbL53OseuCErXdurVq9Ncgi
COKC2AITLO/DRWcaFVgLtm/cVZBX0ni9af6iZXpLTlObrydrx0VoiGLCMwrc
rJeAiS13VBCdoL9crtlkVCqC7R1A+91OV15evidIBBlODqPDEo2XAxWv179u
w3pR+n9KfAe5ggeRBCu9w0I0N12tKKmw6CwWXVplqauydGZF8ayUqYkJU+Jz
svOWLlhRYHUb0lUmlcKq02iS0up3HsqYnKlRWJOUmnhNenqeMS3XkG7Ispiy
HWkGfUJqhjYhy61NylQnKdUOl1WXmRQ/cZghK1Wp0upsTk2uY4o+LcOUmG1X
5euMxnilXWtXJGvSU5UFhaVqnSEhJR2enJ6ln5KeBIZTb0yzmBRFOc7k8Sn2
tGKHojjXlrdiabXNpM912ObNnvXhh2u1WTplpjavqPTzM+fLZ809ePjjVSvX
mfT2lHjFZ8dO7t9/cFJ83IJFCxnuYeugHrqFydB9HRRDLXe+XLdqHdkdRlxw
0Zwyg0JfVT7/g+Ur6nbtPLCnfn/tYafGdedc44fLqqtmlFw4da60cE5J4bJd
e07lzqjQFplzq/NjM2OzC+wf1R9dmD/brXMQXDhek5zpcKlN2Wa7UaGO271r
Zb47U6fXpKmVs5fNU1rSUjWxOk28U6W1JGsdevukCVNsNrtCpTTZrLlFBRqz
wVnsdhU7KqoAvaR58ypUKaoZeVUbFx4sNM/Lzy2ePqM0x+UomlZsddjnLJyf
V1xssNm27tzjyi+y2pxAERcvfP/0ibNYqDr8Ho+vZsP6Tq/nO9h32V6xUn1Z
4PwgVwsq5oHg8mT3gV0ba9fvOLLnqCI51ajTpk5N16dbCg2l5Y7puvSk1MTY
QwcPz61aMadqc/0n15dsWF+5apY6N2VL/ZoMVUrt5u2FhjxTBkhWYpopM1Vn
VhvstlwwKnFTkt5xuJQ6gzoxOSm/JE+pS8pxKQvy9E69UTNVadFbASiz2QpY
pauUk5MTjHZj2czSKWlx8UmxJqvWYbflOwu3fLBbn1xgSHM7c/IXLau25zpU
WRqlLtOYbZ2almZ35SanZEyfVlnoLjXpbdcuN9qM9pSEtK2bamGwhaUluDhO
PHSd+cM2XMwWeL+PkBb4EyzlW714lcRPiPkVRbOLZ14/37i1Zv3y6uo55VV1
2w/PLl587eyNsiJ7+TTH8eOfFJTMdLjnr9t+dO7yJQpz6rylZTkuvd2cPa1g
eqGzUJGewSDa5LSpMi03b3cZTPrCaa7CcmuWNcNssWXbXHaLVatOtVsV2VaV
2Ww2GqxpaSkmix5gtDucjhyX1qAvLCuYNa8yr8iV7bBotdrCglKDzlZROm95
dU1l2dzCwuLlK1c4c10ghPMWVVctWKjJ1OXmusO+0NEDh4tcRWuXr5U9YGeH
t2xaBQQds+ZW9ZRrv5VQgWXnZJ4GWBGhtluNF7eu3QxY8eGujR8srsgvNyvN
RlVmjtGUl+1OjFOY9PlarSXHqdMZpqi1GfOql6ZkZmfoHRqLNsuUDgYJzE+h
tTQTwMjJybLrJyePz1Ak67XZqnRTeroiOS0hRZuYkpk6NVmtVWXnW/LdZqtZ
m5qSNjElU5OUmWlyGLOMKr3RYHfkajINmRp9SkpKVpY2OTnRYDDFxyUXF1a6
nEUmo82WbUpJTSgrLQZMYVKMRuPs2VXV1UtcObmaDHV2lvnwrv2aJOXthpu7
t+9JSkzTZBk/OnECYhBbjiMnL7etq/PbYhWhyehyEbxhzuBrlRZsCwSifNIS
aemVj65umc93B7GbI/kuX/gmj99uEGTKE6H84ODoFg9eM9GJbOZpQcQHMDHF
qzHx+2ZsNK8bFml4Qms7u3PLcbKFQ0DVRZpH9M2gZ1ntZj/nbfc2iXLln+4h
kAJEC3SesxSXNSmJvUKMgjqk98LY3vI7PEaguGhGEphbU9vSynlwDKG07NtJ
eXFDT4b02269/IokKZ4npHgctxvxd+LVvwQf7QmPk4MgtlLUEOZwjbxLxNl6
wkdFpHbpiKcLcDy56/OM90zhEERDHIQzIqaLYUxdQ5h4yflnYAveAJo7c02U
hIvgk+jbYd+MVYsZXKglZBOKl9qG8Ewe3H9YrzE23WxnKYkm0by0fqmDoJui
WFESSjJiJF7w9knd4Wy45dL16HBYrremA5aKv/9m5XfeBNRb7+h73KcC0lNk
kxMdfdan9a4c6L0iuvyEfTBFFmU696vn0jsRvdXP6H09E9l3Uvt2Q2pXDni+
1smv7z1/+a+e/t/tf7cffvsvnDuQKA==
      "], {{0, 67}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 67},
    PlotRange->{{0, 100}, {0, 67}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 71}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 71},
    PlotRange->{{0, 100}, {0, 71}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
uIV5OXq7HNjv4nLi2jWQ2Ns3Lgh8XNycDsp6nnP8CqZJf6vkob2nL5e/An4F
HGPmStGtgOB4jl+9wG4F6a/eueviLfByC37c2sfMexH8MAgAg4KCeHF6pxqy
Jufd6zoqzvVW5fZXZQyUZz+rOvykKq2tPH/9X/6MF9dMJHNFbV35Xx3VJ7pr
DvdXHh6oOvK08sSTqsKu2iLXfZu41Aq3Y4tdiHEWL2axaH5NE2Rg0zd/6Kg8
31l+pLcys688abA2Ex7dXXV+98pP8bQsjp1ZmH4zTc28BD9L5EptwLvqABza
oIWieX6ln1MaqXl+ZZ7nV3jnxuv8lUZvnKNMhvn8lRkZTaA0OmDsBCJbW1s3
NzfLneRvO0wOu9a3VF5sr81vrz/cWnu0veG4VJjTWHt6/bLl2EzTLAlP1q35
XCg809RwrK3uGFRurTktqb7QVHvjgNUmYHpkPfc1b7fIIc+z9/n1X9PqNV+I
G4uaRKclwpymusx2UW5z7dHmqgtbln2KABnd4ngSWBu4KkYT6u8KQ5xjwf9R
5WU3Xe33cPkrwzy/gvj6yjV7dx+cv5L1gmgo1RMl9+64Ori5OPmPjSkYFuIs
/d17NwP8g+3sAyTSAe4hWLIImwLbTkB77zZ708G9G6W1VyWiE01NBaLGU2Jp
oVB6vL7x4uqVqzh9xtIA8K9c+0Vl4/kayXFx44km0anGhrPC+kuihjv7D2yl
zRS7ZI31bVixuDHzN6u/rGm6VdV0rrYpv0Z8uLE5X9hworH2yuaVX2ILt5gy
wHV3S6vD7k3RId4zBt0MbWp73JKUEIJoFZe/4nIyjAnnrwpOzOevYhNBdmZm
huPjYpRybX/fWHRkCmDV3dualp40Nj490D8TG58zMTnNcuMiOujq6urt7U32
S78HK1urDaLai42i40Jxfl3jGaH0XL30ZJ344srlK7A84zjOZGIMy9Z+XiE+
Xy09JWw8LmooABmrF14Uiu7Y2G3nIpjXgfNrrCxWHwhWRpr664rPKkVF5aIz
lZJjleKc+uZjtY0nGoSXt6z5y5vLg7TeXHr7LsjVkcz4UeUcSEB5bcmj0iKO
HZgCg6MIVjh/dbVoIX+VrJh6VvbwyukzhcCkufxV2sjI096n7Vdv3cLuB+rE
Z0GMo9Aq+Xy7l5eXnZ0d4vjVu/NXJuv9a4S1hSLh0Yb6Iw11IDOnGxuOieoL
Vy/7CuuMCdysFsz7mrWf1jeeF0tOiUXHxMKjovqTwtozDcKrNgfWsayaLHW9
hmuRueLoFsMZDtqwbsVnYmGRSHimofFYXcOhBsmR2oY86MDGVZ/gnL1xkb0C
3DTTcrCHp45mKBkT6GCDtFZY9wCwUsrH808UgudXjo/i/JW0dSF/dRxpX/Z2
Vnd097+aBhpmKiz41qAcb2yqullehWm6EWUnZspVavIoso0BnCDZ8/O+vR+I
srXf0Nh4Tio+1tZwpL32pKz+dKewoFVYuHbZFzhBhzkPMH/N5nWftDQUtooK
HksKOsXHwKw113/bXH/Z4cAqHNtiR7MA14I+cmlOvPDKkoV+EHhav2vFZ7L6
oq76s7KmE23i3HZpnliUJ6o7vXH1H/AuDrIxjD9IQ5qZK4X503qcra8TV9y9
cw7nnBEVFZsyNDIGzeL81fWbHL9i844UKJ83CUsLz994uJC/ijTIX4glwK8e
4fyViirMyZ3m+BXhomCpdu7cGR4e7unp+V4dpKwPrm4Qn24VHu6syuwpPdL/
qKCn/HBH5fH133zKrSfIWTSN8wMrP+ooz+98lNVdm9VZm91edai18kh7zVm3
/d8gdpajkXqiQgy3TmHE6ACjMumRikZqxOowFzVoDvz54/7S8z0P8waqcmRV
aY/rM5trssQ1Jzau/k+sWexiJQSKoMMtnT15dGRqEqa8t78rNTUSntXW3Bgd
l4xxpamXQ/1xyekzOpy/Sk87hHQvFaMyQUwqKOpT2WBGbDTSTQ0OygITs7n8
VTfOXzGYXxkX9nCFhITw24reTd31e3d9WluWIXkY2X4zSHYluOd6eFdRmORm
8sa/fAj+xcQqOLoytfmvv2wtTm+/Hd5yx1d6x6fptkBcHCt5mOu463NkmuQM
CMWtHdPMwhIYWZs24FVpPY7gAHi13OqPP+8pypBdDuspEnQUeXfcDRDfEwhL
Etd9828LuT6L3nE76BjKcP7c2dk5uRF7U/PFS4X2dtYx0ZHNLW0MXkcyq1WK
M2fP+QaEuHmFdHb2g7JrlfI790oPOrkH+fn3yTqwZ1RMF92+C+7Ay8N3amLW
xNETgIqQBOCiNjY2BCuyxc6Svc9vX2Q13ns+a70Z8bjIY/CW48Dlvf1XDvRd
d2+/EbXhk/+DYzGaW7Ni5jZ9+dP2u3FNVw723NvXen1zb6mH6LqXqDjFevOf
uI1RmHMOvhjF+6DMRq1RDT6aMs3i7RDIYOKWvsyzDISyzst+03rO81WxV995
K3m5V8/1Pc1X9vbURm/++ocI/Mhie8V7cLJB13L77pIgl2QUCW8xm+ez/2bG
pJ7D2WYs4xDFm+nZWbz3VaOhNXrEcS0M1OjoqJOTU2xsrAZ+oGlLkwWM4vX2
OdNchM2XPbcEjy/u672waeDyytHiHUPFDpLL3g7rPkLqKaA3iokxGOe6T/5X
X2V82w3rZ/c29d1a03px6/OqiNZ7Kf72a0AezJRuZGQEOqjWKgzGOc7EzSLq
BaLHWKRiyNI+9Es9uel3H4yUBvVf3/Xyxq6BS+t7Lq8ar3WsOLfdat2PMG9f
vDZByCHfW/BQ/JZLckHeh4Jq+OU7Bu8Uwxv4DNz2PzNLmyi8KwniLK0CuCvc
d/XqVQ+gYd6CqVm8tohfeuAOa2trZLEVlm+c7wne7MrMOm76ecN5uye3reV1
jqMlm7qvLOu6vvNJafCGz/8JmUY55YKBD+9a9QPhDeee+zaPzy9TV9q8vHNQ
dtVNdFZgt+zXyASwgPponKw2Oexe5bz3K+uNv/PZ/6nL1n8PdV/h6LRCbXiB
p1WjQqaX2z77HyM1fpLzKwdvb+m7tmqkbEtr0Zrm+9Ybv/oAmafZJbbdUgXI
3JpMMNeWAFro60JSkY8duIVcmtKQ3UrN0qb4+HjQ476nQ6ERiWqMFpbYmZkZ
MOyOjo7kWYSdErklb/YtJJYVUZ5ftT/wlxbtk93aJruxquvGmvZbexpve6z9
8h9BPFXKQYSmzZRs49f/0PTQc6DccejWtidnV07dd+sHHTzleyxwJzvcgqgJ
iFi3f/XL0ssJtTfiuysyxdcF7cVhDbdDHt5P2mH1GWe3VYh+ZrP+R5UXd/eU
WEsvrhmvtW+9tqKv0kpW67595QcIjS+17W8oo+VBpI7fXk50UAcBupE1gEBp
yXokzRi1GGODWtLUeP/+fbxAb0KRManc3oL5ZwG5Ai5q+RQisTxo3PZsze61
P28uje6uCGy6blV/fk13iU1PtV/tbb/Nq36K0CsA04wA2+Etq34gLgmsv7L7
RZltz5VNT65ad1/3GCpPdVr1M0T1IWYQmZ/uXvkvreWJwjsBbSV+4psHn1Z4
N952q36UCKKF92OAfOr796z/14oiV8k9p74qz5rCDX2VDtK7+0QPXL78CGNl
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
aqo=
      "], {{0, 70}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 70},
    PlotRange->{{0, 100}, {0, 70}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzlfAd0FFe2LX/mzZ/xjOfNvMnZ3zbOGUfGYJtsgkkGZXWrc85BOQtFkIQI
EkggBAiJLLKQQOQsRJZBIAlJKHfOXdVV9c6tkto4zF/LZsb+f16tpqmuru6u
u+8+++5z7i09yVUtFP5gzJgxup/A00JO7CStlhP/6S/hxWKlTiJSCvgzlXqB
SKB9j/tDODgJ/vHhH9qn/h/bvF43s+PzYRRF0A/K78cJgjlM+P1eHB99QeB+
v5/ZJ0nS64W38O/8kr/nDVoNz06nE8Mwm83GHDSZTA9DYbfbmR04we12B48D
ev+jEPN4HQyjKJI5QFgsJvjP7yMwLGCzWfzYCDgulyv4qd7e3u/6Qr/XzTRs
g2iCEBwceoCAIqn29naNVu722BwOW2pKttkEMEJ4+uBkq8XJfKq/v5/+FNoc
Dsf3dvXf8Ua3GCesQC6XgwByEUiqfG6PxWQaEgv1divm9VsgQJFqkVRXVw9F
syuI1cNM+/ferrS0cjg8rmBhZPQ83E95XZTZPKxQcf24pbe3JyO1xE8rmc15
PykpJSqSl56eabUCsEimgqr1P0KvSCo9NZ8e5kwt15rystdQONXT05WQpPTj
5lu3buhU2W4UYdbtu8vq6xsCGHWk8XhhYWFHR0cgEGC+A3gY3P933kgqM73w
0qXLFDVEUWYryDlOdXTc0xr4g6a7JBnQq/MGekGprMYEzuDgMJJ/kjIYDH19
fQARQyd4Dsbjv8cGLSJGPdPnG0lZTH42mxMWNSU+SXT3tpnEwGh5RNJwi/0+
BKNOletxUh1dLfo4ttvthSD1uLE1a9aAtgctBPXvGIPQ+wAXwwHY8fl8TofX
7WQoYTp/qT4xrmC4nxweHoxLkHv9w319DwyaXPMQIGxNX6Ls6elleGU0Gm/f
vh00pRaL5ftr079qA5RAWBis4BmU2WSyZC9ZBs8Od/dndy4VLSunAlRnZ3ty
qnbI1Am8EgvirGbc7R3ctWd9Xd1elxM/e/Z8UlKSx+OBL4FvYLgKDvZ7bts/
e2N4FXwJuHm9/o1VNSqVCsRcpuAOD7o8LuQwVWqxzT5ot1vTUpY67aDbHout
OzU1XSiQZWfnMuMgYxXA6n9v7fnON4IewZwukHXM5yVGfTuGBzxAQ4+b8Hrg
DMyP0YaTBBc6SKHk0cecB3kQRcP+fVz7v3xjxq+gGkMyR7cU93gQT3zeAASU
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
i4lR
      "], {{0, 65}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 65},
    PlotRange->{{0, 100}, {0, 65}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
Yz/rzbDtTLdqzvzi2ZlD5Zludp/+EnefZrewMr2ULiHMNoM5QzqFiieyLCIp
Sqsj9KDUFM1hU7a+ucJhRWNNuBEWmRQat40V/ZpcZWWeGupohC+BkwesFhfm
MpNjGbN+ZGQEoh4D1mJqfKArISUdzk5OyGIiE0jD4spif1x8ilLNjY/MYCaP
tOOT3RGxibJN8/DAdGb6eYXaJDAgYQisnVzdfP0VGi0/3Fr73T+vvhBYneHY
kGVXl3boeeq++oyDz86eKM12e/cn30d6LTJq3/2vuxpy7aU51l3ZNs9j9tXG
fVmb8dnzXNvH+WG2X76PAeGLRl8JqLc1EUTJSJ44fNTFxvb4vr02B/e7nTzu
ZHP4+PEv9x3c7enjYmV9eGFp/hVpeukKX03+bLX7Dx87Otg5nzgQGeDlHxJx
4959s8lQdrsowEcUGxvbOz6PPSNIKUcU3rjt4uEvcg+QrcqhvwShuXvnup+f
n8jNf3Fhnc+s6+/cK4yIjHZ3jRweXOfJEUvSBMN3w9VHzPsbvtoT4in7vYPP
Cqfrcufqz09Vp848TZmrSx+ty+yTFn3y/k8RrrpirXf//XxX/khNSndxuLzx
6nJt9sSzpL6naQ2P8mxPHAJ0zDsI6Wu9Zvh8zrEDRxoe1/RKGrtbn/ZKHj1/
fFPSVvXw8e2a2nIXdwfBKQDWWgO5g9WyO+cBd3IGjYG3OJQWsFJZ5mXZirvX
fUWujo6OfRML+AjOAxN3Sysc3P08PMQvpuawO+Oo4tJbjq4uAX4Riy9wqbCZ
VBTdveLl7+fuHDE7oSXAJyDBNQNetL27yNXPH//NsWBUrQ9+KH1SONJ8Y6Il
f7D2/GhTzkjLxY66C43Pr3zw4c+xBTWjTz/6WXNdXntdzlTHbQB2pL5ouOXi
YGe+pKXM3sUBOIWel1jmKxu3JVrvvfV2a0Ntd2tNQ82Nnta7na232qTFDU33
2jqfHjn2BW//hWzPzuByS6i419OJcMHY6LCPs7W/h+OGSgeeeW11OS48kDbp
VlZWRIFROsxhqNG+juT0TIB1ZGo1MS4V0dql0a7QxPhVAz0/I0sKiwIWMTre
FZyWBLZjsmcmOSjFYGZwToU28aXTRGB4uI2rG8H3Dnzv8WOftTaUdjTf6Wgs
am+82ikpaG8tlLYWNrUUfvxbjBX4rN98+nZDe2mj5G5Ly72O1kppY0lTQ157
x/X6prL9x/YbBbni8JXMlrJvUVasntDN37z/Xs3D4s7Wss7Wa5L6cx0t2ZLm
y1Lpraame9bHv+BYzNO4HXfYkXp9jW5ZOENjw3Mwx1fOZ1B8R54+eVzzoATw
UalUyWcuqcwcadB0tjx/WPNMpiE3NCgxIU0+Ju1rLK+obZLzz7iQnIzMG+2d
dXnlD4Az6Nc017Iuqg04H8ozPRyV2Dk5Wtk7WrBC5FGrz5oaS6XNd1ubrrU0
FrRKi5ok15pbCyQtVz77+O8EqvP+J//0THIXtgZJ6dNnJcPDdW3thfUNF7u6
Kl3cTjA46YFLY8BCsDz5YjjwMzTILcOnnVmG+mz3BwPdTztbb7Q1nBvoyBzo
yOiUnOmS5kubbtqd2C1wWgwQa5EuXiu3sGJfxwouWF1ZAqxyT6cuyXBtU0tz
Y197M/g+o9EInAHkiiONY/2dHT39Qgq0KP82Ms20PL0m7Z1Y1UBkwxXknKUN
i4+flDQNTuOcjFpfnJ+/vKbkZ2Ioo2oNnu7t6yMY+TnZClxie3Jva2tZu+RO
m6SoTVLY3lEkaS9ob7s8IDlv9dv/iWgD8PLffvKTJmlBc1tRW8etpw8vD3Xe
kzacktSlDEqvHfv854jYwNzd0jOaTyIZdvhEgM343q9+0tlyt7Emq6MhcbQn
vq1e3Nea2N96rqPxsuOJj3DsJsQ3FiFiue0ptp0T3FuN4HN5tHa95PoVhdao
I9H42Ej5nWsCvwqJS19Tm/Qq+VC39Gx2Lo44DCghNg0xS/VPCsse1AF0GqUp
Ky1JpZiQtj+7U/GU5EcoNjxcroTIAilkK5hVINbe0UEcHOYsEoHBp1md/ck9
0oYb7Q15XY3ZXU3nulrPtTVndjVnDjWmWH/0Z4iCkFO59zf/vb3pdHtTZnfz
+eHmK1PSS+OSpMm2lBcdl5z3v4GYNXrjBYQAOHtDQUAKD1pCHGxriJXrN+cg
Qv/8/Z/2t1zva8ia7Eqd648Ykfj2NQT21sd31J5xtXoPZ1+3wnNkwYp6BatX
54twyAu0jTVcOJVI8TX3Q4P9GUkxYM8HBgYSsy4SvB+cmxgKj46DAZyZUoSH
xOq0s4vL/alJGWoFC5whIiJMrVuUq+ajYxLlctPU1HJIaBTH13/yQ4Mf6S0O
/PLgEVwwpt9ESG13+M3Wqizpg9iuqoieR8E9jwI6qnw6qv07qwIPvv3vkXkF
kasH3vl3ndWBnZV+vZXi3hL/nruigQcO0jvW0nvigBM/R7op571vHXrzL4++
+eeH3v7PB9/9D/ve+/7e937wxXs//Pzdvwjz2I+UE1+++ZeS++mtpUGSCueG
4i+6qg93P3bsfCxufxTnfuQXiFbx8eI2JttxDf3SH76qgzRFgFzdupojU2hA
chSbG3XV922tDqekpPSMzS0r9IQevDxx4849F49AP+/oDYidkdZkWL1yuTA8
NCnQP2p5cQkkzkjKrxZdCw6L9/EK6+4cg4cAYZetbSLecgIRNdEchX05BBRy
14M/6yiP6brnM1TuPlbhMFphPVhypK/Cru2+eO9bfwJAIWr58Nu7+qrc+0tt
R0psZU8Dhm8eX3hsN/bQrqtcHOrwK8SufPjGD3tLE4bKQgbKxb33fborfTor
xW2V4dIHCY6f/S2iZm1+/eOe8uSBytDJp16d9z4brz3WXXWs44FjW0WIx6F/
wNJLkIjadoFfwerV/JhCoxdiHOCiBpIlhYtA9zlqeXnZzGu+wK8Y3toYCaRW
6JFhA7FaOLsOesYKRTT6TeV8cc0jN3G4yM53bXrdSLDEli/WGFgvcUhgWJRa
rYTIF5Hz/kf/Yeh+yFix43y59Ur5kZWyzxdLPpm6b9VWHbbn138BCojotSPv
7BqpchwvOzJbdmij0mHwyu6Z8v2jldaSUr/je/4GMYpDu3/WVxowXmI3WnZi
qMJq4L5V3/2T3RWirrKgCBA8cvzAG9/vuBHWddN9ptp9sOSLwfLdAw8OdJfb
dFaIvQ79FGuuySzMgPCYCPl8wqKDX8lRw0dc38WaEIHNC6baeKbFyBfLYXBA
K2mIdjkKR3L8EbxkhtHr1mcIfhaM460rY5AplLMB8VFrWuPi+Nr55IsaIym8
hZ63Ci7uvg6OrvxrwOOWAauBitDhYqfZMuvliiPLpZ/NF380ef+IpDrskw9+
hNg1RM8ceHNX/wO7kbKDsxWHZor3z1ccWaw50Vl8qPdxuIf1L2CcP337r0Yq
fGfLrV5UHJ56cGi88vBI1YnBSueBB75hR36MtFLbX35/sTa957rjxH27maoj
45V7hyqPd9936aoI9jnyBqLlCOwPSAEjZCd22KvfpYNbkFlq1V7lrtt+wPIn
w4spH25jpyPwXl5WWVK/2tP9rPJRqVqPSxjOZl5ZV2oJXow5HjJnOxd+/RrB
6FfA/Hpb/6q9Kmm8NqHtjlNTwYHJRw5jFUeHKx0kD0P2f/ynCA0iQnLo3V19
j1z6Kq3HHluPVB3tKds3XuvQePdY7V1RoNM/s5rBg+/+2WCJ63yVzcyDE8Ol
ByarbbruHZysFXWWO8U5/hjJ73vs/redd93GHrjN1jhPVBzsu3tgpEZcd92r
r+aU9/E3ESNHOjlmGxyeVtMbCMEbMizB8dOaJqPmK0j9vzYsmBzeePxNO/wF
/NM+rCpsb68ToE1LzZXJ1RYkQaHNXIC3b6CvF2VU43pscsX+yFsl+WH15XF9
dckDT6N6qnybbtoMVAe3Pkx566ffQ2gcaK/Lvv/RVRVZU3iyucS565Gosdi+
udRjsD6ppSrZ6dA/Imb96Pt/3VcaMVTiM1Dq01vm0/PAr6lY1P4gWFoZ6fjF
XyBu4KOf7mq5G9ZTEdZT7t963W6mLrr+hv9ow8WntxOdDv4SETIc5+s1eGqb
Q2od9uHAm3VaXJtH4Bkow2u04V+NFfoKVjhRpurpflJaWiRgFRyUhDWaeFkE
6+Pt6eriIPbzdHawcrTbH+B1/Fyqt+fJ971sfxnt+UGiz3sh9n8f5/mbcJFt
fEiQh/UJHxsrse3RWA/raJcDiaID8R6fJ3h9GeX+ZbDTwWCXk772LoGuQR7H
nBI93SLtD0e5WkV72oSLTgSLbHycT4T5eUaI/fzdPGMDQyN9fELd7IMdj8V5
HRdbfxTh/HGk+ycRor3BbvvDxfaRQZ4H9n/h7x8o8vRjXtEjTAq0KtkfgxXH
/h6skHZutisqSqxUKifHV6KjMjV6MAQCu6OVarm7yIXgKySF7JyPl71cNokX
j3BybJ3YZUTOIVKGDITNYSfEhxB+9t5IQ+OZL5UGPArQGP3ivJBV8neNZnUo
2DMNG1CcjeS2qaOZws84buMNDz5+wpcy87YDd92MXRizjpkYsRzoboWLXnD5
GS7hNBBA+C3AbG7I+TkCSiir+LqxQhwDyqWsqiqOiooKCogbHVk0USDaeM5L
a1Yy2ICCSaA3NBvzKwuAoY+ftyVKxRkLJTLrMQln8My7t3eYfB1n5v09wkEJ
aCUlJBQYjWEr2EPWVt7QD3fXSJrkaDwEZjOrpXH5JBhLRsUw3hHRChJ5BkUL
URWBq+aMesOKbG4AwauSSm9XG4NGxvs+WvB4ZpohKcZMUAI+RrX2qyHhvwos
bksH0atYwRjRjJymtThxZsKQGk0UjxW4VpxPpRCpMqr4CQK0Kle6iXy1BlKv
p01G1sJkoKt6SqHRQpQtJMadHbzguFnNWGZUddh6sDSnUpncRcEgDbDncBId
p/sYEBLgLYQMSABIj72vF5Aha1d3wlK7C4Ol55AOexqaRGZDeIi/ECbDwGlN
Oq3ZyFcH4+pueIpea7Jw1D8OKz5rLQRf7A6s4E+t2aykKKqrY0yrEWYJKBOp
YrCA63RmDUCnMWph+KB7zm4+FjfBAwWshLVMb5ncA0/qqE2A197RjiTJkuJ7
ro4O4yP9eOkEoYyJD4FTDu72WRfP7T20j88X4Sk5XrD1DS3VZlYPOnnM2mZm
YTkkPEa2rsBLp0kt5nXIFBMRqZZrnzyu9fDwVGlgGNCd0rtzKwsUYqIS4mZm
cfbvUVWNIPJmCPn+4JKJl8jswMpyKwPJbArU9VTaRZAeisJmgqR02LdQOr6O
G6+DEIJ6NzdfDrtnZNDzoStfn27EobBWh5ZNSM5PBdJqtTrzVAYoD86fgHAy
6rAon03tMkC6olrG4s1QeDoLECN1wPoKrmTjORoOPap8MjO1BENgCfcYhq9T
wn3Xa7nzZ694ewdhds1y1+/enl6YISHSpnAZPKjhuTPZwC6p7e/uwGp74T/H
cTU1Nd7e3s7OztHR0XDw1q1b8NnV1fXixYvw59qqvKigmE/eGopLChYW5jbW
lRFhiZFRcYHBnhHR3iaz+tatO4723jkXsEO8V3wzJNDXzdHuycMHHEE8r6mJ
Do+AzdnOycPNK8g/zM83xMnBy8crJCnhTEL8GT9x0LU7eTbO+0TejmKx76Xc
/GsFxXbWHsF+kVqF/taN25ERYTa2Vv4BPp7e7m5e7j4+fmIX3xA3f7GjR4Rv
QJR/cIDIO8QvxF8UJHIK8HUPjwpKz0jIdbHxDvAIDPIMiI+Ij43OuHL5npdn
mL2TlzPEXUGheYX5U/MvtCZNQmoiQZFF1244Obheyim4f6+6vbkXsIJe3759
l2UtC6wQv9JqdXX1+vXrwsL2tra2iIiIc+fOCWfLy8sfPny4vLx6KvUsj7Op
pKxodvbF0rIsO7tgZXVDb9o8dTp2fWMRzp0/mw90eG11+XRGim4DT0lL6hpe
DI/BPiU6brirmzYaL2SdaWtpLcjLv3Qxb2Z6/n7Fw+SkUwtLizFxwdU1OHt2
4Vx2cEB0e9NQZlLelezbk4OzxTdLcs5mBwcGRYZHiH39xeKAiLDo6MCY+OD4
cN+QhPCo+MjoiJDQ5LiUpNiUAN+om0UPgvwSJ0dXs9JzCy5d727rOX/motgv
WrZOpWdcOnu+gMFhLRkaGTE1Nw1WyzfQD7QS3j835zII4PKsrCj/NklwzU1S
iaRNqFoV5Aps8vz8fFFRkbAuhiCIpqam/v5+AauJiYnm5maFQnXregmeUSJU
hdeyZbJV+aYmJ+cadiKsvkH6uLtPChdnny9UbpirKx8EB/hEBYYEuPt5Objd
uFTQ29J2I+9ygIe7n6tL3pmscH9fp5PWPiI3oF62ttaXLoHo0vn5F0RuJz1c
nIPFIfm5t+bG1nNP37hwKn9maPHJg9o7RXcSouPjo+LioxJS4tPOZJ13dxf5
+np7ebsFhfoGhXmK/ByDIsSBEYEiP78Tdo4xKelrKu3VWzfBIj2ouV9461pA
cIxGzUZHp0skfRxO6qPqx08GhgbBBiQmJwkrQFOSUrF515hzzudNTc4WFtyA
jjMMp1Ao4KzwEyVAjS5cuID41S+Tk5PBwcEgWohfh1VYWNja2rqysnY67bxR
Y6Bp9bkLKR0dbZsK7bUbFSYSjA1xuej89Oz48spaXs4NEN2Fmamq+yWMidpO
7D6vevyo5B5YmJryUqCL4wNd90tuZZ1KfDE9Njo2cDU/t6W1Lj018smje2Do
8y7khviGz46teDkHnE3Lqa9pKMzLz0hODfL1jQmLOJOelZ6QnpSQmnvl6vlL
2VGJkeHxQUGxfqEJ/tlF56+X3wyKDR+YmvzCympodjYrL7e4uuJxy9P7z6qi
YpNWV9VpqWfy82+ty/BizJzsvInJaZpmIyMjAQ2wkBezc3DmhEPS1rbiu2U3
b9xFQmjCax/NN9C+58+fC/YqNDRUpVKB6olEIg8Pj6ysLAHPSxcue7l5BgV5
5OSeWl9fW13bvH7zPom9OnXl2oW1jSV4Osh/WHAc9PdG0RVXZ7ewwAink85N
tQ1TgyOBXiIvZ4cQP1F4gLePh5PYxyMsNEDk6WrvaHu5ME9nVLi5W8XF+Hl7
2tmeOHIuK3Nu+kVGalrOubPg4r1FTp7udl4e9hGh4tOnUsODg7xE3tYnnTzE
gQGREUlZabHpcZ5BXu7+Ijt3F5/Q8IPWjkExqdGpZx28/GPSM4Au3KwocXZx
M5vo+NgkN1dP2Ls4e8RGJ2xsbJoM5qiIaKFIJDw8FATXTOhNJkNycmp3l0W5
hN8q2V7tuP0zOBqNBm2t7NtuWjW/VlSP6/so7KNx7CxXkELRHYNdoXFDrhDc
B7Bsni6DF+SHhOX5AUezeEIcWDFBmsCP47heb9QJMwsK7ebYRPfpM7FgEiB6
zcxIVyrkNGUyGNUMp6dZobzBgLbTJlschp8ohJGnDGaNwC3VOrNcZb597xG/
fH4rQyKsBeP4aUWSMuv4dQqWQgc4whAmsxEvOMfBhcGoNBO6nJwcrca4jQBI
nWCvBGQ2NjYECyY4x+0lZnhtMs8ZACuSVG5jZSZxdYVcuyF4eTiiVwuJfRDU
TYLBw7ChVBA42GDVms3tyXFhtRe9NdkqEGyjWVd07YqNzQkwRFWVjyl6OxNO
sZhZG4B7gMAD2dCqKfwUYdKLIHn8TYhQ4T24fAZtrmxmZ+WQBlrw+/yP88Cj
CJbSmw1q/qeOaIEGC8XhZh3fQQi3VuaAyPUOtto5HhscHBSGYdsDbsuYsFhb
AG375yZA6nQ6XNOBS4KN/P2FlXTAhylLlgbzTJOCD/f4KgMWydeWEV9BrDbq
eXPF0jjxTvM/oUMLSwKFjJqJ5ki+fMhIYQZrNuMqVKD9AnfT6Y3CDAuEk3xE
ackdGfXcNuFHJiOuxWVNuDAM9kC6MAXfmsrCc9DGrTWPhGpzhRcm2qDRYvnn
e4Th4n81gySEZWUEX2/JVwnRf+gyDQv5ZLdX1G7FTJblJDsuZdHOap8dB3fm
/V+fMv49z9zx3VffhNsKU3kF39rY1+/Lvfborfq03/3sraln9Iei9P99+z/8
Bh7W
      "], {{0, 66}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 66},
    PlotRange->{{0, 100}, {0, 66}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
5Z6U3zH2y9Cy/Gw3aj/qE0onpexfsIJuPCGKdAJq8BHmAGrZvOKnDUdWn9Ov
u1O/wd62jbmwg7n+ufNS4eCVmlvX2s+dab55pXPR7H+Cs8ZAt6eL4CxIWLk2
pKImGFUnBMYkq+IJ5Wz6If5uzHdq4EYJoPh67BKHteLOBpk+QXtbGaQNDn+g
TwfJhrtqIetopI4n2yHzGaKLQq0UZubwToU9DVIBmp7MtEGCMc4TYf4C2GHo
56QbpGytAEqJakyPXJ20eU1G1Cra3aAwBlCnf4uVQFXC3/IYsLIGEWvEsp+2
5K66pFs7WPeRq3UTdyGNv3YIWA1csd682nP29PEbl88snP08Rx2nCcMkKwEv
1YaJP7PShCu0x8lx84ewcg7oFbb9fvBcSuw01F4LdRcQzkRvfn135oodKYv3
Zq/08z2OfoNf6D782VsxEa+lxi6+erHoq3snA0rLunf/957st3ZnLfDa4Rgb
XAPmjOgVh3au/WTtP4AcHVUbh28dgW/IeGuyY9dwzssqcZFHmxik6DGr79Ug
HAhHVfK0HmSYD68NIdbtS3/afnjF9Yp37ba1SMtH4vlk4dpnrouFA5dtfVdP
nzl9svfyhQWzXmCpkyRh4hhgVaA1eeh7j1mVf5eV4YewCkrdiN0ErXvjul8C
Fsxhg64OiAhXU9/ForB8BpJK5Y7v27mEwxtxd31AvLAjYwXq1ifGvhiUzhLu
VpCv2anTGLQOGh10b+ctq4+zpcT9gvSUPwyDcqtkUdPOhDVJm1dnRC8DOcqi
xSC5v9fbtQOETGNpHUdXcZgJWI16bVFLftr1+bK+irc8te/gLWuV87HStT2u
SwUDl+t7r547dfrc9Uu982a9ylBfkkQNRxfLbD64P8CuTihbFS+fEPlFGisK
Bn2dNvj+a1mBEkiKfg369p7sRWHlFDJiha4FUgFwpcXNGlW+BCHh47u2b/wN
iNIx/5fekaaIjVNJb33MtpcppIVGW1msCUQ+6W7YlbZiVLjso04pdFNW0iss
WsWgOpGuEElLdtxKznVeJc7xaANQgrM/wapyotPqnmRF0zqG0Vj5sboxjy12
8U97Di25U7YSs6ymm99Rz0fJ13Jcl/LvXqm/dvVCz+mLVy/dnjvrTYY8TxAW
limWuHwJLwSx6kcnWWme6P8XKwarDatdAzeKQTZAUwL9Gb/tDVBWAA2ke2rc
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
UatIrfai1seM0rfrKJ5m+0S/mqT0DSud9HiRttE1mA8KMyg2kIgehl3Ca3gw
2g19UrsSgZo8AyXjSrtC1YMAAzEPEgtz1kAmuAb1YbXLOVSp8K0C3SjzDQyq
A0OduzOWHr6qUt2Ysygo6XiiYPJT/goraOyMjsFNAqXpq21Lf3ptz0IifxH7
mNXHUl8q6KsrfU29l2+cOXHj8uWbs+a8wlInoGwnl1AGPRVBtFRrTfRBic7V
LnhNrrx6TMA02WSeavvddTXfY/V4HXtIrGXQCpDxpKdU5WpgOBu883lAtE7c
Om0JCvWEszzAgU8sk2mbwoDcsoSUDha3QeVCEgIoErEQnioW06tMa9KmdxI2
vO1nemCHlDcvIE6uhDc9VjvfYVXKMXp6ghVP2iKW/eQqsDoKebVo8vqgAFq0
Nx9YXbvSd/ZE7/WLNxfMfFUkTkiIMYiWj2Olo+7iMFrsJ7RuA6ebJRporJvG
j9NkHauNiabJj37K7Xcllu778Xhh/5+jUlsMMBET9/IYnqhWbZ/wBbRFs4RF
pLUF8JOLvXmiUWIawBhCb4ca5J193gHL12Pt9rt7QPdKZI1EaD+2oAVRIxPV
2upiutgnV1N4JUPUEIjJ69SnffSzjoRX6JLVjHUF3/m2//xWoXfH4O3iy731
Vy5cvH7mbu/JoXWL3/nNf37ural/t3H+v3/r5efenfLcR/P/7uPlf79q7j+s
XvLC0oUz5syYuXTZvBlz/ydGt/I0+LhibQ3zU21LeKxEwMpFvALir7HSGD5x
N8TELRLfxJN4n7jbQqtWwqUDHx0T8WtQ+zvT5jBoHeQGeEZwlGnb3tufFkG5
6nFXqV/Q+ziDgNUIIIGwqomoEbFqGS8RiSLUmS9zFr/cAu0O9dZsWP4fzu9b
gpe+h1lWU+1r5XORTO/Ou7dLLvfVXTl/5vrpm/2n7Gtnrlr4/D805W04Z9jQ
3xKDnf2U7Tt6u+fg0BUL7hhsazp15ZKjf8Tzs9/+PaWcpLQzfuxpgywMCkYf
AydU9z1WT9ifpxgXHkv9CWLjagvtrdqZOjXAt4F5hB6VkTgLc4GbNjJIddLm
lazjCjpsAXONO4+OKlaZrJWJBgUaIARRq5BWH1Wp0OUhyaIwVtxtdDur/YGe
36/4j5eOvH9p91x37Ydo5yfgHsjeT4HVlV7LtfPdfacvOi/0r35lysz/+dyX
xo09ZUv7Wz909GweOR1D3j1i76v6srvp8sVbbZ0XT1+5vPCDF+9iJoYzSkzl
U4ZMV05S4pBSiB/M6nG1Ou4cCYvNWUmveQYrH/jPgFXc+vFvAxJ0sLKA0JgR
tSYzau3DwAWZqRlVzK6BL8CAiFjDpArVluhrul3zg4ynjHLpoYploZPk2pbP
+fcnD33g1G91NGx0dUWQ55Kx63vu3C65eqPm+oXWvlOnbvWcWzN1yrx/fu54
+e9P6VYNtP0euxDJ3srCb+0fulrS33v24rnrl64MXejr/dWMf6CDXRRlmbxk
/FRBGhlPCeAKCTWjkuVveWrlb0b5t/EEPd2o3EB7dFmJb7CIzcd0ks66HYkL
QfBwRCn45d3JH2L9Z1x3DaijkEWLx302ibBJeKOM22TcKmPaA5WoUkndGGcT
PMYA30GRzTcHjZs//k3zvrVXCtcPtcYOdcd7zqa7ru69eaPwUq+u91zt9ZMd
jmt3Vk6b8frP/l3N4Q3D3bsvmjZcMn/kPpfuuLxr4GLBSN/Z3gs3L5wd7Og6
8/a6WTcGqxmyTcRbnjaIeh7Rq7QhwFX/X+Yf/qWscEcRjxlz9y3DHSZIKmTQ
ujt1BZhlniwZVeuTtixJ3LQCFGxh7pKUmH9Kivp5RuzrGTFvZsa8PhHwYGp2
7G93xD6/N/GV+PW/SImcEhM1dcf+9z784JelqStyN766d+s/74n+3wdjn9+X
9HJ6xszktCWZcWsyI9fFb41IiYo8kLF1x/YlqR+++FnEy7qcGfmpvzmc9ut9
KW8mbl6Wk5S08XcR2zdv27B5cWr60pS4memx05824l6P3vCPxw7OvXwqBTr8
32T1hJaYWJ8zEfjfZHXP1wy6K3L9L74OfgmGcVT8Milipog3SUw56jiG9Lff
lwYkotkznM/j2j1cMtEk460K3qQFBg+afYTZD2MEWh3CbQ99Z3C05Y67ce++
D9U7dYGbRr/DqLgr/K4yyavHcCuCtTDOE9TwWQTtj4n/JCFqDTHY8TV71jdU
I94+HHYfEu1ZQfJogG4fud7Cuoa+CvJpiSuoieFGoqxPHeaQYIbqC4tmyK6n
YfUtsb9IrSdZUe5Shbbc93Vs/+R/7UickRYzlXHVgVjVFh8SZQreJXi6WG+N
MDHCaj+qg9VKaIO2nbylaGKeAc5FmKhmhkpF1CrQzZTYtW3rqyFP0yOybZyy
BSntziYfrmcZK0s3yGibgHR7kbMRMcvjYhYFhDOCq36UsI0TZWPk4THuswB9
gHAUfOW/wDhOk44zSVEzKAQEs1GYXGikTWpVfif+fIOk8Vt9Bf2K9ZZAY58Y
B592VlD5f7zh2zm0SVNp1BSmdvdQEeY45GdrHvhaPAN544oNG8nnkArIonGh
ER86JuMVD321El4oYkcDbEmAKKNG8u8rtejwUZDBBZ8vwu/m+rzlo3BakaIA
URJiK3BHrkxVyFgljKGEtzY1ZXZy3Gsg9Ydvf/7oUQflPRCQjgrUfsy9OyDr
YeQlvWbSUwdGDLQfYi8KKZYxv5UFNy3pUcfnhPtwSNaHZAPhztOGKlxP2Mse
jZ4i7QYYoH/IvQP/sgBJhh176DfRrlw/rd0k7rr1xaOHp0c5G4CiRkr+FGoR
0RL7zV1fBao55AuVKnygWrU5ZKQUcIloWcKW/xHmTdpvHE3ee8Ibw7zBT+sC
TGWI03407E/jX7qHdSJtC6mN90ebrl1O9ykVFJE7Fq6WhDK3I1dgQLrXgLvc
lbGQ8tq0HyNylbqHjuLuApXVj/lqxv0mFst33t37dbgOt+fDaQ1QVsauH+c7
RI/pWbLysZXajcl4BeUqCvG2EF+PDZV77hbHbXpeQECuW0bF+lEJrFM5ixQo
lJ7TJvPNlKcKGSkPis1pcS+DHYCnydEvgJkaVdqGbuaxqGlUaXXcLQT/PnRT
ty9ntWekxjmkz06frggNiljH0dWO4cKA0sJRNhKppZCmbRtezUlfxaBdCtOT
FjcrrPR8tmsR5qgk3ZU0Ug7c7vlrUfuRe2pdSLAGWKuAGpHBkiBX9yzvo0eH
8+7560E1haVGUvuZqVpssOq+evKzjAUBtp33WBmPCRsuA0SazWGs9rsVPqE7
pJxi8WbSWy/S2gTaxM+89EjMca/d+vX4VcRRC6+IdBeHd3L4CZU9LzNnvCMN
O9OWUkgLvB931xOeJo7oEMgTLNYdlq/vTH17oLdOpq7QrjNJ25YQjuNJkbNh
DAoKnT62ycfZaE+ZwlSBEu6/tifAme+pDaAWWG/5s2Q1Ktc5+vMABaRHkGsD
b7gzcU5azIyMmJnYiJVxNchk2/7sRSnRr/pZ7e681MT5DH1ycKB2W8R0v+8y
hnQlJy4l8Z7kxOWJ8UsjtsyO2j5/967fbd08Kyl+ZVrSWylxq5NiVsrsNXgQ
E7E4K+W91Pi3MpPfzUlft3HdrKzktckxa9Z/ODt+++r0+A+Toz+I/GRl7p4E
152TCduWh4Rr29e/xqCNPFkfFJuSY56HHHv08DhqP8ogJaS78H6g/pmBgmEF
cxY9enAKrKJI2MD7fJo2j/E0YsO2pG3T/MxJ1tOyN2O5j+kCYknbp4wHzkdv
n+F0te3dt+5uf31K6iqaPhcXt9Tj6dm8eV4oNCBLt6KjVlDklZTk9zdtXJCR
stZjP5me8C7hPpeZ9GF28kfO/jMiedfZfzZyw1syNRi39b3s5A0+bjglZu3O
1A2482pW3Kbo9e/Szt4dib8fudEcFq8lRk4XyObkqJf8fB1IZefgFw+CDZgj
LyzXgGx+lqx4Qi8yFpGpJb3a9F1i1BSeaPHzPTlpSxikFSI5eibpbkDttalx
06G40pIX49jxuNh54WDfpg1TUW93ZvrbDHl+Z9bvhvrbhgc6o7ct56jehJi3
M1J+B6xC6p2MpHfcQydiI5bHbHkLQGUmbMyI25QWswEibusHG9YuJt1XU2M/
iNm6QiRvJkV+mBG/gXH37kr9CEoSd3bkpC1FHTVRW54fC3RoP2cHI4hq5cky
zHUE/OAzZFWpctU0Xom5y3xiPYPVZCZPJdwWmWlLiHyd8jSGpNPx295Q2E6B
bM1JX8BgTalJc3C0KT15wfBgza7slTTRlRA9j8J7Nn/y5r3wXRY/l5X2rnOw
Myfzd1FbFiZELXUMNmalrmKJM3t2rEuJfXv7hmUqOxSz+Z34iPchr5Ki1iZG
vhMQ72z5ZHZ64luYqycz6YOEyLcY7/n0uFWkuxuxN+7bsYJB6/bunDd0J4/D
dWO+OsDFYMUBqVqi/gWa6oez8glVuLdIFWtEtprG9Ld7Dx05uDw+8oWEqJf9
QqfKtTsHdHkH346NeAlzVat8K+Gp3rNjLmav4gjtcu2nmfORIaNIte3NXEq4
YHRo3J25Ah2s97Fns+MhM9swV216yqyE2Okk2pYYszAlbmVsxLK0+HchNv1+
zoHdG5NilnrszenJC5PiZqckzN2RuiwldoHM9MRtf5Nw1YfkEzLbHLvtV9pV
UU2mGoRvpuwm4xmyKle4SsR9hKXKKKxU5qvHQ81AjEINuEd/L9jltVfgbgOF
VEN8NXaS9lYpdA02UjAmNfhoM+vRk47y+2o756nGh3WUo+pR+CznrqXs5ofq
adphEdB6v9QUDLSibn3AdwJxWEK+C7irDXN3CsRpGuuGwdExZPnTg2s02eBx
6HxSK43VjvSXcURtQGqjUZN7pFSgzft3zfguqIlr4t+fe/k3ZuUT9CxRINJl
pDefQgpFuoJGSyTa4BcsLKaJaok2QcADGqlUGZOAlz70WWhnnoAU8t6iB6qN
chxjXcXjolVEKkWv/r7UKKPVvFt/T2yhXeWuocOhgJXCygbuHA4qLarYgtir
Za4dZGdQ6SY8NQxhRV2VsmDDPCUiW8XTVX7ZwhOV9rufw9f4w3hb1Ob/jjmO
fRfR5H0chu9fpv83DLKcw4vATSjajQPaj8zwZAntLaTRIoUxIA7t907hVPJ4
BXx5z+BReFHGSxS8UPAehXiomhhnLjH0xbhgFDxF9yWz5/YB1ln4lVoHW9ZR
5KcNYaUKR/LgXMiCISCaEVcRhxkl1goikyNBsjYL2rkwcpRO4apwdz58jYBU
5R46+OhPndC6YbwLiqDrvgXyrf81TNzO8wxZEZWQJ+CdWaSIx8FcV4KtCEsm
7XdlWb0y8Q1lWpsgAko+xggPeG8BeMOvAmbNFjFlAnrsgWpWiFKwSJBpsAVr
A7Y9wOjB7/iochY7hnty4VyovM7ZfxAs8LjPhrsKfVw15izQfqjTVShResx1
LAzphJeyWCHpOXLPZ7bf3afQ2m8deIe+mNjn40kn7b6niVuf/Njj6YJvj+X/
AM37io4=
      "], {{0, 77}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 77},
    PlotRange->{{0, 100}, {0, 77}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
P47bj7yhfGXv9/8F8uP48w==
      "], {{0, 60}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 60},
    PlotRange->{{0, 100}, {0, 60}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
bl20Wf7B2P4/FLSf5J8NjPxXrv9/WQjbiA==
      "], {{0, 69}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 69},
    PlotRange->{{0, 100}, {0, 69}}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7396534665344696`*^9, 3.7396534946971335`*^9}, 
   3.7396536506130543`*^9, 3.7398516466604495`*^9, 3.7399961081827097`*^9, 
   3.7399961906186543`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"dd21c3a3-c858-4c5c-bdc5-3c9bf64a5654"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"class", "[", 
   RowBox[{"list_", ",", "nbins_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "/", 
         RowBox[{"Max", "[", "list", "]"}]}], ")"}], "*", "nbins"}], "]"}], 
     "&"}], ",", "list"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"d0d6445a-b983-49bc-9db8-9cec09cdd7b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listData", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"File", "[", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{"dataDirectory", ",", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"#", ",", "\"\<.jpg\>\""}], "]"}]}], "}"}], "]"}], 
           "]"}], "\[Rule]", 
          RowBox[{"class", "[", 
           RowBox[{
            RowBox[{"mxs", "[", 
             RowBox[{"[", 
              RowBox[{"Key", "[", "#", "]"}], "]"}], "]"}], ",", "20"}], 
           "]"}]}], "}"}], "&"}], ",", "ids"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7396553081046634`*^9, 3.739655373313586*^9}, {
   3.7396557168197117`*^9, 3.739655810237558*^9}, {3.7396560428634243`*^9, 
   3.7396561898622155`*^9}, {3.7396562374931126`*^9, 
   3.7396562669091206`*^9}, {3.7396563223505864`*^9, 3.739656322815155*^9}, {
   3.739656618612734*^9, 3.739656635015779*^9}, {3.7396573511586103`*^9, 
   3.7396573635032425`*^9}, {3.739657394658411*^9, 3.7396574051023073`*^9}, {
   3.7397053866227856`*^9, 3.73970541228835*^9}, 3.7397067357750807`*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"f3a6b269-a7b8-4af9-8980-3b99a24d3d97"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7396566511742053`*^9, 3.7396567370820656`*^9}, {
   3.739656791830576*^9, 3.7396567927197*^9}, {3.739657065754207*^9, 
   3.7396570733166027`*^9}, {3.739657130643595*^9, 3.739657150486663*^9}, {
   3.7396571884720163`*^9, 3.7396572180246525`*^9}, {3.7396572590140805`*^9, 
   3.7396573049882255`*^9}, 3.7398342232871227`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"da5812a0-a58a-4254-9697-04099009fb91"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"traininglist", ",", "testinglist"}], "}"}], "=", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{
     RowBox[{"RandomSample", "[", "listData", "]"}], ",", "161000"}], "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.7397053315787487`*^9, 3.739705364113412*^9}, {
   3.7397059384557953`*^9, 3.739705944887768*^9}, 3.739706722383791*^9, {
   3.7399818425632286`*^9, 3.739981855992423*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"f0f2cb69-6f8c-4c4a-922d-c3cfac06724e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "=", 
  RowBox[{"CTCLossLayer", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.739714872797659*^9, 3.739714894724581*^9}, {
  3.7397153191305656`*^9, 3.7397153722095137`*^9}, {3.739715448936016*^9, 
  3.7397154490927615`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"4d8df775-3aa9-4b6c-a8a9-59711ad1117d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["CTCLossLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.557, 0.557, 0.557], 
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"seq. of \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\" \"", "\"indices\""}, 
                   "RowDefault"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.557, 0.557, 0.557], 
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Ports", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"seq. of \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\" \"", "\"indices\""}, 
                   "RowDefault"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("CTCLossLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7397148953648367`*^9, {3.7397153573893833`*^9, 3.7397153729443007`*^9}, 
   3.739715450192009*^9, 3.739716327073122*^9, 3.7398516490354395`*^9, 
   3.739996116170878*^9, 3.740015919540933*^9, 3.7400160229846644`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"84f05a6a-fbb6-4231-b157-fd5978c68d4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classes", "=", 
  RowBox[{"Range", "[", "20", "]"}]}]], "Input",
 CellChangeTimes->{{3.739714944578579*^9, 3.7397149605199914`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"7ef86afd-ba55-4784-93a1-2bc7679795ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15",
    ",", "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.739851649192792*^9, 3.7399961162779074`*^9, 
  3.740015919556555*^9, 3.7400160230002856`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"40f4cd6b-91e0-40d7-95b6-3e3dff094f69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decoder", "=", 
  RowBox[{"NetDecoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<CTCBeamSearch\>\"", ",", "classes"}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739715034146757*^9, 3.73971506402115*^9}, {
  3.7397219152055335`*^9, 3.739721917189979*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"56c1826c-6dd7-486f-81dc-7c97f73f8179"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetDecoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             StyleBox[
              TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"CTCBeamSearch\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              TagBox[
               RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
               Short[#, 0.1]& ], "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Beam size\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["100", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetDecoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7397150646403837`*^9, 3.739716333707446*^9, 
  3.73972191876143*^9, 3.7398516492709312`*^9, 3.7399961163677163`*^9, 
  3.740015919572198*^9, 3.7400160230315685`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"9f1df57d-e150-40b1-b1f0-b0a9de84dd9c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"convUnit", "[", "c_", "]"}], ":=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"c", ",", "3"}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
     RowBox[{"PoolingLayer", "[", "2", "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739980599491166*^9, 3.739980713993923*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"35d8576f-953d-45bd-82b7-8faa1f1c3346"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"convUnit", "[", "50", "]"}], ",", 
      RowBox[{"convUnit", "[", "50", "]"}], ",", 
      RowBox[{"convUnit", "[", "50", "]"}], ",", 
      RowBox[{"convUnit", "[", "50", "]"}], ",", 
      RowBox[{"convUnit", "[", "10", "]"}], ",", 
      RowBox[{"TransposeLayer", "[", 
       RowBox[{"1", "\[TwoWayRule]", "3"}], "]"}], ",", 
      RowBox[{"FlattenLayer", "[", 
       RowBox[{"-", "1"}], "]"}], ",", 
      RowBox[{"GatedRecurrentLayer", "[", "50", "]"}], ",", 
      RowBox[{"GatedRecurrentLayer", "[", "50", "]"}], ",", 
      RowBox[{"NetMapOperator", "[", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{
         RowBox[{"Length", "[", "classes", "]"}], "+", "1"}], "]"}], "]"}], 
      ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", "100", ",", "\"\<Grayscale\>\""}], "}"}],
       "]"}]}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "decoder"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7397150852736607`*^9, 3.7397151033925858`*^9}, {
  3.739716778037756*^9, 3.7397168241828356`*^9}, {3.7399805649357395`*^9, 
  3.7399805664714375`*^9}, {3.739980727135892*^9, 3.7399807878801985`*^9}, {
  3.7399810924017816`*^9, 3.7399811006232247`*^9}, {3.740005228520829*^9, 
  3.7400052366284633`*^9}, {3.7400671609196157`*^9, 3.7400671662953634`*^9}, {
  3.740067345612966*^9, 3.7400673463884172`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"4184effd-d93c-4bea-bc9e-e5428f8d4f8c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"ctcbeam search\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{50, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {98, 98}, 
                    "$OutputSize" -> {97, 97}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{50, 50, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {97, 97}, 
                    "$OutputSize" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {95, 95}, 
                    "$OutputSize" -> {94, 94}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{50, 50, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {94, 94}, 
                    "$OutputSize" -> {92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {92, 92}, 
                    "$OutputSize" -> {91, 91}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{50, 50, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {91, 91}, 
                    "$OutputSize" -> {89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {89, 89}, 
                    "$OutputSize" -> {88, 88}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{10, 50, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 10, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {88, 88}, 
                    "$OutputSize" -> {86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 10, 
                    "$SpatialDimensions" -> {86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10, 86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 10, "$InputSize" -> {86, 86}, 
                    "$OutputSize" -> {85, 85}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 3]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 85, 10}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 85, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 850}, NeuralNetworks`RealT]]],
                     "8" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{50, 850}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{50, 850}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{50, 850}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 50, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    850, "$SequenceLength" -> 85], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 850}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{50, 50}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 50, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    50, "$SequenceLength" -> 85], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{21, 50}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 85, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]]],
                     "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["CTCBeamSearch", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19, 20}, "BeamSize" -> 100, 
                    "$AlphabetSize" -> 20, "$InputSize" -> 21], 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]], 
                    "InteriorStates" -> 
                    Association[{8, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "State"], {
                    9, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "9", "States", "State"]]],
                    NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"97\"", "\"97\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"94\"", "\"94\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"91\"", "\"91\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"88\"", "\"88\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\"", 
                    "\"85\"", "\"85\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"85\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"850\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"ctcbeam search\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7397151050800753`*^9, 3.739716341409384*^9, {3.739716788797252*^9, 
   3.739716825010519*^9}, 3.739721925572366*^9, 3.7398516494583607`*^9, 
   3.7399961183377695`*^9, 3.7400052381259775`*^9, {3.740015919619008*^9, 
   3.740015949241971*^9}, 3.7400159868224497`*^9, 3.7400160237501082`*^9, 
   3.7400671876871243`*^9, 3.740067349201779*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"028d6e47-5cbb-491a-a0b7-8d4ec36ec34d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNetTrained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"ocrNet", ",", "traininglist", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "testinglist"}], ",", 
    RowBox[{"LossFunction", "\[Rule]", "loss"}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "32"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7397155707253847`*^9, 3.739715629510708*^9}, {
  3.7397159647476416`*^9, 3.739715970154866*^9}, {3.7400858856707277`*^9, 
  3.740085898058347*^9}},ExpressionUUID->"6303fcf3-97ef-4841-a0d7-\
680ffa8b5408"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"ctcbeam search\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {98, 98}, 
                    "$OutputSize" -> {97, 97}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {97, 97}, 
                    "$OutputSize" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {95, 95}, 
                    "$OutputSize" -> {94, 94}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {94, 94}, 
                    "$OutputSize" -> {92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {92, 92}, 
                    "$OutputSize" -> {91, 91}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {91, 91}, 
                    "$OutputSize" -> {89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {89, 89}, 
                    "$OutputSize" -> {88, 88}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 10, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {88, 88}, 
                    "$OutputSize" -> {86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{10}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{10}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 10, 
                    "$SpatialDimensions" -> {86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10, 86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 10, "$InputSize" -> {86, 86}, 
                    "$OutputSize" -> {85, 85}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 3]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 85, 10}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 85, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 850}, NeuralNetworks`RealT]]],
                     "8" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 850}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 850}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 850}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 50, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    850, "$SequenceLength" -> 85], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 850}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 50, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    50, "$SequenceLength" -> 85], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{21, 
                    50}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{21}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 85, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]]],
                     "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["CTCBeamSearch", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19, 20}, "BeamSize" -> 100, 
                    "$AlphabetSize" -> 20, "$InputSize" -> 21], 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]], 
                    "InteriorStates" -> 
                    Association[{8, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "State"], {
                    9, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "9", "States", "State"]]],
                    NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"97\"", "\"97\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"94\"", "\"94\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"91\"", "\"91\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"88\"", "\"88\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\"", 
                    "\"85\"", "\"85\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"85\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"850\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"ctcbeam search\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {339., {114., 120.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400159218222566`*^9, 3.7400300494757175`*^9, 
  3.740067341660404*^9, 3.740078501978546*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"038557f3-a58d-43e3-aeb0-39dd4fe04e5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<RelativeHeight2.wlnet\>\"", ",", "ocrNetTrained"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7398798182073407`*^9, 3.73987985207189*^9}, 
   3.7399818829292746`*^9},
 CellLabel->"In[38]:=",ExpressionUUID->"bf7a9091-c01c-46fa-95b1-ed9773a6ee74"],

Cell[BoxData["\<\"RelativeHeight2.wlnet\"\>"], "Output",
 CellChangeTimes->{3.7398798529104605`*^9, 3.739996118584597*^9, 
  3.7400300511169024`*^9, 3.740067341991783*^9, 3.7400785030384054`*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"5048743c-0cb2-496a-aaaf-ccfde83f1ff6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNet1", "=", 
  RowBox[{"Import", "[", "\"\<RelativeHeight.wlnet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.7398798569435177`*^9, 3.7398798653081665`*^9}, 
   3.7399818850583897`*^9, {3.7400640304155607`*^9, 3.7400640406859984`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"4729ea9a-42be-40b9-bd2c-31e30c8bc4a3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"ctcbeam search\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["14", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{20}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{20}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 20, 
                    "$SpatialDimensions" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {98, 98}, 
                    "$OutputSize" -> {97, 97}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 97, 97}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{15, 20, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{15}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 15, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 20, 
                    "$GroupNumber" -> 1, "$InputSize" -> {97, 97}, 
                    "$OutputSize" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{15}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{15}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{15}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{15}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 15, 
                    "$SpatialDimensions" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {15, 95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 15, "$InputSize" -> {95, 95}, 
                    "$OutputSize" -> {94, 94}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 94, 94}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1410, 94}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1410, 94}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 1410}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 1410}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 1410}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 1410}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 19, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    1410, "$SequenceLength" -> 94], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 1410}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "12" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 19, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    19, "$SequenceLength" -> 94], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "13" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{21, 
                    19}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{21}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 94, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]], 
                    "14" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]]],
                     "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["CTCBeamSearch", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19, 20}, "BeamSize" -> 100, 
                    "$AlphabetSize" -> 20, "$InputSize" -> 21], 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]], 
                    "InteriorStates" -> 
                    Association[{11, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "States", "State"], {12, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "States", "State"]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "10"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "10"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1410, 94}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 1410}, 
                    NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"97\"", "\"97\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"94\"", "\"94\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1410\"", 
                    "\"94\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"1410\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"",
                     "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"19\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"19\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"ctcbeam search\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {435., {242., 250.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7398798660844584`*^9, 3.7400640422744565`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"5326c492-8185-4d88-aac1-6b2fad3e52e4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"samplelist", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"testinglist", ",", "10"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739719293563578*^9, 3.7397193007338943`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"49b2f2b5-2cc7-4e8b-a9bb-a8dfd68b628e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"predictions", "=", 
   RowBox[{"ocrNetTrained", "[", 
    RowBox[{"samplelist", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73971930505933*^9, 3.7397193454589767`*^9}, {
   3.739722097559061*^9, 3.7397221004621725`*^9}, 3.7400640604914618`*^9, 
   3.740088460424268*^9, 3.74008864995157*^9},
 CellLabel->
  "In[168]:=",ExpressionUUID->"49bd926e-e477-4501-9ee8-02d11ba4c5de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"solutions", "=", 
   RowBox[{"samplelist", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7397220280988855`*^9, 3.739722033941018*^9}, {
   3.739722104390235*^9, 3.7397221066141443`*^9}, 3.7400886521987076`*^9},
 CellLabel->
  "In[167]:=",ExpressionUUID->"51837a43-8ce2-4910-9a56-5d6d0f1b7978"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"inputs", "=", 
    RowBox[{"Map", "[", 
     RowBox[{"Import", ",", 
      RowBox[{"samplelist", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7397193250916862`*^9, 3.7397193347714014`*^9}, {
   3.739721966427863*^9, 3.739722016614277*^9}, {3.740064164420336*^9, 
   3.7400641703713846`*^9}, 3.740088658802987*^9, 
   3.7400943682183447`*^9},ExpressionUUID->"50fd8ecb-4d0c-44f4-9827-\
aa016da98f9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
            RowBox[{"ImageSize", "->", "200"}]}], "]"}], ",", 
          RowBox[{"BarChart", "[", 
           RowBox[{"ocrNetTrained", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
          RowBox[{"BarChart", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
       "samplelist"}], "]"}], ",", "\n", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Input\>\"", ",", " ", "\"\<Output\>\"", ",", " ", 
       "\"\<expected Output\>\""}], "}"}]}], "]"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7397223365436716`*^9, 3.739722372093545*^9}, {
   3.7400641280250053`*^9, 3.740064133770156*^9}, {3.740064174537998*^9, 
   3.740064175605423*^9}, {3.7400797723371954`*^9, 3.7400797732165213`*^9}, 
   3.740088474942567*^9, {3.7400899441930676`*^9, 3.740089962199954*^9}, {
   3.740094336313883*^9, 3.74009448624557*^9}},
 CellLabel->
  "In[171]:=",ExpressionUUID->"ae27f015-cbd9-4a75-a6c7-23aa89a9076b"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Input\"\>", "\<\"Output\"\>", "\<\"expected Output\"\>"},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
ULjPFDygqB8FMFY0EVwK8ViFIpAskygGFANEERcM8HACcA9+2oNRLkEGcgag
zJWrQ61tRxCDjVSmz3ZGsJWBW4NLdn3zpVkgLpUrK+SCIplInaIRp2QpRcXS
RLVJtN2q+0Yt+iZNnPzbFIFxT22aNDVt92dG4eeVVnlKyo40pWRLSpy+JOOT
b34lUW8Vij5Sqb4WpCYIFKYv5NavVbkiYXKeOskm/EoR94U20/p1ktGUVqbZ
Yc40mMLEqt83A/3gLPqdsQL5DllvFPloCF1hjBVL8rzy+fGYCXDGv7JIxBDJ
Y8VGY0GX37WCaYZrALcF9uEDsvX29Y8/fgqXR8P++tYTi16aiXItREyu0VAi
13zy4z/7+I/+4Gx5yaXjfS3VJ+qLOwY7BrMF21oLJUXaxDcvn/xOKO6feClS
y6YmhnO0H829OC0Wbr01Otza2X597Nb+1uoLlw7W1Yub2zJaDh+oae00NZwV
WOtujQypErZcb622SQVTsyufbJGcaxzKTrQ5ppc4keOnKC8k0MHwu2HFBDCv
wii0EopgG4yyKOh32wEo2odZgesmA0AV4JWX5LECLwsBjuSxgqiKR2mYIEt4
h4ZvdZ/tjQa8vrWV7KJqN09EcH4+X7pMZksQfvXjPxf+1V9cKivtqGg6tudk
k+3wg/M3srf/prtUptryi9W5Vx+lim4sOYUG9cL87bz0n9lf1yfEfTg6ev3Y
qePjL5/V7is727OvpnFXQ5ukqqE6v+GEue3i7ry6k91dGeKdN9vqisSCp4+m
tnwsOV0xmPh/hKSLJAiIbkEi6qc3HMI7bCEm6AcWdTS3g13xWHWdPGSUaLO1
1sePX2PmBp3g9ffUN+mzCyVyzdNHY4jxh/0rtc3H1FnFcTviw24nosB/Bpua
D5gyLUalfOjqFWtFrS/KD8yAJw6rk5JLEyXx/+Uvsj/84IzRcKJ4X3fTmWbb
obsn+8vjP/62Md342V8vvRz/rUg55AokaBSTr/ozjX/oWixJS/j5g9Gre+pq
Xrx6WVFZ3HW2trbli6bjKdUtNXs7h9Lqz6btaT92pitHkTjcXLNHLpm49zpx
q/5qwz39Z1m0G0djBgelKIXdzDtiFeGxKsstdkXCfkS8nhmrKssBXl3rheTo
CDeg5n75+HZZdZ0zwMzNrZTYbIhao4IOc17pvJt2rQXTVcrQ2hQZsFuLbG3H
OuK/+ro4v2D4wRMslbDewnhnKhR1qWrpT36m/clPzul0vXtbuhpPH7A2DR06
Ub7j725Wygp3/to+8eAXSeLLq8EtqSmvZy+qFD+KeK3C3T999O3lrs5T8/OL
Vkv26c7KxvbPj11ILTtQrtvTvqPqdFLt8TOXLyt3f3Hn0J7ypPjV547df6+8
UDaUscUWmAOPiUg6AI+L/LfAig37QBwcbWxx+ANhxNwevdh58gDmQxSZjIUu
dwCRq49GB8/2DeDbUaggJ4/xz1/pP3lu8AYYGcTJcquNDduvDXZ0954laKwy
crKts64AFsoMJ2ARA6lv0XZBw9Z480/+/Fp2Vk9dU2tNy7HKI/dPnava/je9
Gd9UJv9m5unI30m1F51Ektk8u3zFmvcffE6DLPEvv73W07B33+uX0zUVlYOX
mssaPqjr+LT2WG1++0Vp+80vy9paOk/nqQRPOw6U7tyx/GBG/JnxQuENy+eF
0WU8wA3610f4oPEB6t2wwm4cVEHkcEPj/JobegdYjT+8yjEX1VS3hcMgEh0P
RnpHH44DlaHv1UWlKLI4fPnUzbuPCU5bNVbVMuGFO8PdFy71YU1KoKry2rUo
uELEz0B4iIBWIWmSGxP/04+N//XHI7a88/VNJ1tPVGZXPe+/XPDpzx7Xa3O2
/ff5l6M/2y24w6KvVcrJuQGt7keE3wJY3R/uP9JyaPL5m6qy8v6BxsqWXzR0
b606Wmk53LOr+dKXVe1H+/oyJbtGD1TWJu1evTcj+I3yUslI5sf54QWWxtEc
PDKW5hTzTlh1dhzVy4QZMqFJIdudJj1x4cLow0t6TYJKIFALNWqlDWtNcvHq
QJs+PStRaEyKV5bmFQaWHw9f6djT0LozxaSUZGdrzb6VZ7eHTtbsq5KqdHFf
xudbKxbDxBJF8gk16A+JWFCZKBH8wZ8Y/+iPhy1ZbSXl7UdOHqg5eG7f/kOi
T4eLknK++vny7MMtmbmNj14pSkrrDhjqan/qXMxWCv5nXZn1cEvb5IvXVWWl
/QP7K5v/punMl1XHSi1HuuNaLm2r7jhyAWN1/0DZvsSdzntTqb9RAFYZnxSG
FzBMwOooAuW7Lox/8OZ3rTbWlEt2bVOLUkAuAK+6e9vKSvRh58r94QcZ5kq7
3YPQyt1bpy22Qj+J7o++zjNmIWbpxqWj+kzb09f+B99O5RqyocztoXalUbbg
WHt0d8JstE17cUIVovCAoh/RAmFiRYI48y8/yP3xnw5lpJ872FpT11Rkqxk5
c652169GylLzd/1i+uXI38pV7W/su83ptx52Fdj+yjFXYc345lLvmdaDbRMT
LyvKiwCrqqaPDnTu3HO0KOfIqbiWi19UnwReZUl2Pmgq2Z/4zdq9V6m/kQFW
5k+KA4vcHB1kYCy1noi9y4YFAHm0vjxbr3AGY2A1d8cup5uSVKlJVrPNbKz0
esHdLNy+cXRnYopcUxC/Q2k1ZZPO8aErbZnWUm1GjV5ZrElTeR2Pv73dkWkz
qs2ZaQnqdHPxlMe3yuBZgVAUtBedlJawV6Cs/vDj4j/56ZDReHxvffORE/v2
tY2c6yn89H88qlVVCP/+9eTIh2nCyz4iITN91jHefji1KOdXncdqRm/fOnjo
yLPJifLKvL6L+2oatrScSq47WmA9cmxXy8VtVSePXui1SHaMNRU1JH61dm9S
8JHkYtmI6R9K/YuI5LBicMr/rqLB5bBjmR3zzk0+qtrf6o2hW6MXxsf6uZwl
2nZwwOmM0KHJuanLd8ceUzgCo7b6Ztb3bP719YtXbzp9OAQ0VTXFwm/u3um4
fLMffBoomoMtZ9643X4uDLr9Ph/mVfyenWnFf/nLgj/8bzc0Oun2uPYzfUeO
nbOpNGVbPryYvj1z2/+afDr0K6l4wOnZodW8mX+2ujhUYklwOeaHh+4caD36
+NXzsioLxqo+7mCHfN+RvPwjB3e3XACs2vt6c8TfjB3Ib0jc6nzwLPm3kv6y
Ef2npV47IvB4JqS0IA0ZnCS+Uz4IvIqw/jnEBgeu3x19PnV1uKvn/H4QVKSH
KClsXXNCAJkfGT7UeOgQYOV1ohxtJgo9H75y8ERXDwlqzIVKskvcyw/HH3Ye
P9OKRzdoVJC/bzYYcGG1Bmo5BJmvQimsgCD4+z8t/L0/viFVH6mqqz/UXl7Z
dOHw8TbB1keVmuKEj1YXn32YknDV4/1CIgxHg4h0U95l6OjD8ZcNbe3jr5+W
1KT3DdbV7E051K5vOJxbeKRxd0vvl1Unj/edz5F8NXbA2pD0+erDJ0l/L+qt
GNF8Vupa2sAK1DJw/N2c+/TkpF6WWpgu1koTxerM6/efztofiUX/oBDs1IjU
udn7WXgmxOSz8a70nJwEQbpOUVSZB3FwYnH6qsaY9fHnkixD3d6SvYiafvb4
bEmNdXtiijDZVJjfMBPgBoDwAA8Lvl2nFtVuTbT83l/U/Oc/7dq2c3n8BShb
pTqHtrvKPvngVm6q9eu/efrg6q/FgitOZ5olY8W1xusWSDcHro7uO9L+cOpJ
ca2h91LdnlpJ25GspsOW4iN741vO81jlibc9asptSPps9eHjxN+l9VTeUm8p
XVtGYZp7eHQIey6SRsz/D5F/eXsxdr+ywCLe/aklQyXX57Sd6pmeeZSuT9BJ
BUaVyWrb716DfGpxdfF2ikgqUdtkwuyirHzEzr980i9Uasy59alJ6bnGHETN
2hdH0hQpqTKNRp5bkF/nxS6dH/ZiQigiFSVVxKVl/Nlf5//Zz60f/goFwpAN
jdy4iwiyIeHTS1lJTYqv5ydGPhKnDjpWt8rEdo93HSsS3bk7xvHqeUlNRu/g
vqr6hEPtGozV4cb45v4vK0+d6O21ir7awOrJ7o/TOmtuSbcWA6/w+B/LYQUq
6B1FQ8zHJXeQ2DGneq9cuHb77s3Lx1v2gDtcmHeUVx/weoLIN/Vs5HzPpau+
GPJ7UE1hZWDx0aO7PZ0X+sN49AzlW3IJ38zdO31tx4/hYTYC5WQVzXs3VgDQ
UTJKiISpxYZ0w474hF/87czwMB5LArsg/ShgrxJ80mtLrU759dRo3+9S0/oX
1+IyM1ZijIf3dyh05/bFxvqW16/mS8oK27uK649/eqDr6z1NWWWHu3Y2XN9e
03fy/EXzrs/GGm2HZTtfXLyR9IXi4L4bu77KffNklZsiCOLFKey7uivEuJmg
o+NIi96cfqSzD7xNz6n2lTcvwHCgmcVV9XiEkHbeHTx1ZmAwhDmCTrV2oODi
tYH2m2NjIW5s82BjvdM+Mfni7si9h2Fucr6mvBZkqosmsToLwbNAJoNxV9zO
1oOHJGmpeJEIHUa0H629QZTduO2DwVpD8c4PnM+vb5UqAattRv3Y0hJeDYBN
yLW3Kv1cR/fytMeSbS3fpylu+Xnz+U+a28sLD/bE7RsWNt88drpvr0l+f7+t
cMvfjhzvjvtEdPTIaGJiwa2L95EvgqgwikWhPYH1MaUfjhUkwqDep+bmc0r2
LLvDNwZ6Bk63+92eMInK9jTiQWna+exW38mePhcFjUeFmbbg8sTzsSudAwPz
PiIQiBbkZkdDy0PXe9raTwS5scDCvGK7zxfiVsIAvkF/IGF3vFar5waRYihG
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
8L1hxeAFlus1YLew4nDzLoUgAyxncUAzdt2+sCkFvS4uJNJUeNP/0Ny0LekP
RDxYVIQilCcQxjocv9eGjYshiDAvMNZR2hj/BW3MsxdMld0IdlSUDUfIdcuF
RsQo7pvGQQRfEoYojN0FDqQMIMmR3wXIk5zdh0j6PWDFcAaCHXokjOP7yup8
bU2Lx0XQTGDJ8dqgz3I5sa+4e++mQqEQpIiMGkPXyeMDA2eiVLiu+qBZV+Ra
8129NigUx6vU4s6uc3nWfE/ATrNBS17h4jK/EpgeHBzIzs5MTEy22QqseYUj
t++uOb3p5my32wvuMS8vb2VlGYq9nnqVnmFxOL18H7VqXWJ8glapWnMse9dc
cOjE8Q6lUq2QayRSVTBCc4Oy0e7TJ5KTEkpLi9VqrdcXiGHzJN4TVphXAFMQ
DzTal1+J04x+LxwPOt1TWRlFcMrtWdHqRfPz83Ajz6rboFHOzU0EA57crDLn
EgVY1eypmJ2fWHPZ7z8YVyjVjrXp2YVJgznb5cUrzNdcDqs1d2LiOcLmRotF
8sUFx5J9NSszNxSK2O32nJwcYB3QLxAKZmblhUmQuFRrW/vVyzfgjpNPJ3Iy
s9gobZ+bLy4scSxjffL6zVx6lg36PfbgYWtzo3PVEQj4xsefWG0F3mDk/dgg
H9O5CIW1jNflmTPpS8B5B8IL3sB0Vkbxq4lVMK7sHM2zZ88AT+fSarpBGwyu
OpYXtMpsuDk0XqtTMjj4+IMhUqPVu/2LVMyv0adHORcFiXB+vhWwgmcCRAJW
QIOdq3hiAqxyeXnZbDaHQoEIEVhdc9rySyZfz4NR7m9oCfjCHpd3M4JF/Fj5
hIJ4pHF21mHJK/V48arRkM/Nl5iamikoLJ6et79XrKIkN2SO1pZXXxZaG1aW
4KDbF5rOMBUH8Zp9MkI6Ozo61CqDWCDKz812uRacq0sFedXuldiKw5WVbXZ7
7SwinGteS04e2ODC0uvs3IK5RRf3LgDt93s7O08JhWKwIIM+3e3y46sycx2O
VbfbnZGREeJC3pJjWaM1cV4OKZQ6hVRj0JlVUqVepXsz8RozfM1nMmYmJYoE
Atnswhr0O+gPMFREpZSLRGkKherpsxc4jEaZ94EVw5LYX3E+HIgUJh2Zpkoc
cJB7au5enqUKO06snbBbJvDYALJkmKA5c7NvLBklkL68nJwqKMyLYO1KLi07
jab0EOlcXH5jTLeQ6+9SYc3g8+G3m0Ek6LQmkogtzC+bTVkQZMEGLRYL769e
vXkNNuh0RyDw5xeUTr/GVu91egpy88O+ENw6OzP31ctpHB+51zp4rAqtOa9f
TYIVI05fxd6XZmA4+UdvLH7GNpiabGw/0hcml1Zdk1KxEW4JjigjSzk7O4sH
K9a8erXC4ZgOh3wigTbsw0YhlqSurs0BVrNzdsDK5QP7deTll/QPDoPsdLlX
CgvzQYSAuAIi5duKfd4QfIqLyn2+wNzcHPfu5AmwwfnFBYMxk3ujHLUdPt5+
9EQkRLx4/LymvBpaGHD7001ZOKVa89+6df9Yx9kAZ4/gE+goPPHo0NDN5pZD
ILLd/tB79e1cJUGPb3H/3mPdXZfkyiShZMejh6842RL1BZbwi5AJArlINnbv
W5r226wWlSxDKckGf5VfkBuN4eE7x4qrbm/9nH1ieu5FYUmltaDSaDSC+pqd
nVarlTKZIiEh6cnjF8Cr1RV3SjJ+6QY0W319fWPjfnB6iclJ44+xEQFtQP1X
V9ampqSl681hfwBkLrRwZmo2KTHVaMgESFfWAlxSGJt89lgiFmq1apVKEwoT
m0C9D6zwm+cMHkuKsUEqGnA5CS7PwO/KUSQ3pokTXO6NM179sLTXuzQz/So7
vRgEO8RB0O0U7QN/RVLMwuISi0eDIAfAZbk/LIB1NbgstDFOiLiBr9yc/JmZ
ObT+tjhODSma9PpCsY3cB2ea7OYoK6dxA9gVgN6As25feCODW8814IfPHyRo
/BcT3ocWpSgC2+CGFuXeEORyEIZYfymFuxHY0frfQ+C0KCAJcdCks/rW8BF8
FZfj8Pkj9MnjX45Q7GaOw2cBy8v4rzTwgWx+bgmEFsvlhlwChW+BV+oxiH8L
j+9jFNJryCoIPKfGrw3g35jnH5ofz7XFopGg1+PiJD29ntJSsfeU4+A0ZCN1
53INaH+Ee9DYOoEJ3Ot7Gy9PcTnO4uIrbmEPWrWTvG6n8cJb8u0cZ721LCij
yGaO43S6NqiCIBRutgHUET/XsAlChCTwENbmmB5LM9R6IgOaDbIbpwePOgbh
Qo5XS0uL0NQozfjDJP3e8kGuq/xfTuAGHtgYn+wHg/woOsMn1/xrZTGS4vKy
73LnKAX5iJ+gPDxWXKYf4obTEbHxh0+8Xvd3OT6LwF+tf2/cGidBZJDhZjnA
OUOXeftiYiSXwqznzpAsQPP4P1dBxpgoFoWMx+mIcU8WccOG7y0Ovj1MtI4V
FQ3zdWLFhVPm2OY7kmBK3N9IwSN4oNuhNZDq4UT4LV5tYsWvWEZ4wDnIa0Ww
EbgdrjaG+PSZICg+F8YjPByvIhyCOAXmsjz8niAHVJRY/ysuJIUfGUGRIF7X
8VznG7OwYOdp+a/UV/8PELyJJg==
       "], {{0, 0}, {100, 61}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 61}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               32.486541675493726`}, {-17.08480572709501, 
               45.936269351157115`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{33.42345631062882, 
               48.071703844936664`}, {-7.466178791979303, 
               45.936269351157115`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007176, 
               63.6568660143796}, {-36.32205959732644, 45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                18.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{64.5937806495147, 
               79.24202818382254}, {-41.13137306488429, 45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895764, 94.82719035326548}, {
               2.152448143136411, 45.936269351157115`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840058, 
               110.41235252270842`}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784351`, 
               125.99751469215136`}, {-41.13137306488429, 
               45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.93442932728645`, 
               141.58267686159428`}, {-45.94068653244215, 
               45.936269351157115`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 20.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.5195914967294, 
               157.1678390310372}, {-50.75000000000001, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.10475366617231`, 
               172.75300120048016`}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5460988028072107, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
                0.}]}], 
             LineBox[{{10.453901197192788`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               32.486541675493726`}, {-17.08480572709501, 
               45.936269351157115`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{33.42345631062882, 
               48.071703844936664`}, {-7.466178791979303, 
               45.936269351157115`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007176, 
               63.6568660143796}, {-36.32205959732644, 45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.5937806495147, 
               79.24202818382254}, {-41.13137306488429, 45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895764, 94.82719035326548}, {
               6.961761610694268, 45.936269351157115`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840058, 
               110.41235252270842`}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784351`, 
               125.99751469215136`}, {-41.13137306488429, 
               45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.93442932728645`, 
               141.58267686159428`}, {-45.94068653244215, 
               45.936269351157115`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 20.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.5195914967294, 
               157.1678390310372}, {-50.75000000000001, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.10475366617231`, 
               172.75300120048016`}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5460988028072107, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
                0.}]}], 
             LineBox[{{10.453901197192788`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
       "], {{0, 0}, {100, 71}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 71}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{1.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
                0.}]}], {{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{1.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
                0.}]}], {{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJy9XHl0lFWWv0lVpbISCAQCZA8EyFZZKisBARsEEQg7YU1CCA1hlR0h4jLY
o61tt203ogIuqN3jbmPr6HTb6tjLHGf6nDn9T5/pHj2iIEv2VCqpqrz5fd+P
ev0ZBrdE7ql8533ve+vv3XvfvW9JWt32RQ2hIrIrHI9Ftfum33pr7YHFQ/Gy
dNuuTRu3baifs233ho0bbi2rsyHyBvzV488Iq8Gjzs7Orq4uBHp6eq7+xIDH
4+Gr3+9va2tjZMCkixcver1eRvp8vt7eXp29o6Ojvb0dge7ubp0LiRlAUboK
a4Lm5mY8kbGvrw+Bzz///Or2gFCRzyRrjXjlEw1Ddl3XIBJKBhp4ol4gxhr7
VcSusSUgvFobSdJZWltbdSQHgh3Hk+iBALI/SIzpM0mHlYkbWqURIIwkDh8b
r+tl23R2DMG3B+Uqunz5MgNshq6LhHHEK2pkJJrHkSUHsiV4IpLgoNnKZCdl
4ob0mj1aWlq2bNmie2flYSRDFkBK0IAhykQM67K2R5lDxrpQghVnRGrOtLLf
d0Rnz55lZ9E7tByd1S1RQTBJaBU7q5unTHAolQTH2kcmXr58OctBAlak2Q8V
kf3UF1UBe91uEuIBOOM5TJ9++iki2TA+Ea/L+eijjwYFFiuxXtbV1NS0YMGC
xsZGdnb37t1rTbrVpEWLFi1duhSR4JC6urqampoNGzYggMQrV67csWPH9u3b
EaivrwcsSLZq1arq6uqNGzfu27cPyRDzfZOUyVpIjBLmz5+PwJIlS4jJwoUL
d+7ciTAq2rx5M/KiQGQkbnv27EGNiFm/fj0A37t3L+J37dq1bNkydgTciNIQ
wMA99NBDg8tgHH3yD9rJMLA6d+4cwrW1tcpkGDSb9d5+++0YLzQY3cRrQ0MD
2QCvBGHbtm34igCe6NFtt92GvOg4KkKxGHT0BV3D18WLFx86dAgpge2BAwcu
XLiAvEADFSEls+MrsiMBhhJfEUNuR0aIKnFTpp5HFewRBohtXrNmjeaxQSGM
DvU5wps2bVLmiAMBVoe2AQG8YnzRftS+evVqfNq/fz/4BEiCwdARZAdT4RPS
b926FfEoE6UhI3gSMCI98EFiFIKMSEMEUCxe0eV169ZxaMilBJBDgHI4CnUm
oRCkR0ZUutUk6gFymh5fEFhaXTVDDZDQL86D4BnWiwZwloE4MAZtJl+h5fiE
IUZfwCroMlqOZus+AhxwDiJXrFgBANFUJEYCiDDiwQwQmfUmAQH0joKGNCgN
hQMKSCIgRQz4BxkRBuYI44lmIIBigS0+oQRyGuqlFBNkgqbFZLCA0hoYcEHM
0Vp0lh2HIkXz0DVKHDqLTiEBmBy9Jm5sPANoOcYUvIdkiEQvEAkoyBhQg5AX
lMZxR5koB4OCusAA6D6GDH1EjRggsChNC8QjAYpCOyF3KBwFckSUqQH4RLzu
EYoFzoRXfXH2GThhXDjr6RgKGj+hkbo6cJS2qTgXoF+UXzKJMsWTuo6RyuRb
69Bo+wd5daXaFtXaGMmopXVL8AQmzM5kAFmPNTiWuZiSdou2iAaFyE76FaCh
a2AMdhAdV0E2RgyVLej8+fPMS0lkJHkM0FGOqO7wVVuVLAcDgS6wUsipCtoS
KmhAWpFBFioufIKBwQkahBkQMXxlY6wEW0KZcjGIQGmiHf7ZZ5/xlUBxULRZ
RRBoerFTtJE4xDAnIC/95h0k014AFaA2ttUXNQmgQ9dY1CeffMIGcEbrR4CR
Xg9r10WhhEuXLqmgm0C4+tU4QOpnQqvgMDGyn80MLcEWom1ssNYJUBEYZXIL
mUrnBZfSECLCWkLZL626+zUMfYQMUjBRIANWRcG6UKbVSMYrpY9k/TQohOEg
P99yyy20A3VH2E4VNLChmZWFt60toa5WJshaIxFYWqdWD5EELkICTBlUa2yJ
MpEnDsiFBFqDWV1pMp52q+mFESU0G1n0Jy3XAye2CkCxdlQHQePw9Zk/v/FE
lwPezrYtdTWqu1P1eFXzReVFoFN525S/Q3U279mxtX79uvb2C+CIgELvPF2d
gNTnV77autU71q9RPR3qk7+p7hbV3aY6LqtzHxl5ezobllRtq69TPi+wAx+r
Xq/y9xqvnq71awF+AA3o7Qv0mSKgZxkgozFEyzVbWpmKgqmCzK8Hi1KpZxzN
/1c7nlpvkCs49BAuchFKMO0T5Q8YKG3edWt1fc3GnZsaNq7bvbm2seqme1Yu
eXB51bGl8x5ZevPPls/68cqZ966ecaRm7sHG+tqVi3ZuWbH/wMrV66fXbZyz
rXHl9xuqa7auqqmbd2T5zNO18x+fVfjCwspfLrzhqfkVp6rKTyyuPLlm3t2L
Z+5cNvfAhtW3VS+/vXrFnuULjqxdeufSBfc3rKtfNq9hU83mfTuW1tdubNwM
fUis+AQO38h2IoMRIvgIGh8NGhd5GIY0sXCtoDgKiNcaAw2g6QJm+uzcxfrN
m5H08+Zzqs+jLp6dmziyIXH0raNGHBoee3tc1KERzn0JYTsS7evSY1xxkWOG
2ktccTdOT3BXRpVNjZtamlRSkJRdnpKeHFI1Sh4tTz6dG/da0ciX3WNeKU9+
viTh6dIxDxcm1Qy3VUTLtDHDZg8dNm/YsPmjhy9MiJ0TKjeF24riYx645/ZL
7c1ek72h863Npp/+NVHS62960u8xSVlYkQFE6hmKMbBGaC0QSaop5oWWDvj6
jMYF1I5tO+tq1ym/T3V1qLaOApG9cYlHI+MftMf+NCTqodCIHzvC7o9w7Bsx
ZEp8TEZC2FT3sCnlkeWVzmk3xM4qGzurMsNVNjo+RmbZ5ZkpSW9VjPlNcfyv
8ob9tjzx7cKRbxenPJOTtF6kRGSGwz5PwqskbJbIkjD7aglZIJIncuLuu5TP
aAnGjoyk14W+KZGv0Eci3GUSu+w1yQoUAlyP6lcIbAM48syIrzSGe7oNzly/
oX59Xc3eLY1IpM5fqh46anfU6LtCRzwgQx6SiIfE8RMJe1DCDkRFzxgekTZc
phdHFeeJ2y0lRTIl2zmreNTUaWPT4mShU165Yez7FSPfc0W9nmn/XW7sb8ZF
/qEg8U1X+h4R4LM0IqrWMXSdRFbbwmqdETvDY2pDw4HVqX23KY/yXmzvbjeW
IrXQ9Vsk/HLSDi98B2XKHWCH6YjZGU6EljIE8IpIOBoaQzhTmHpg6ek5AtYg
EtA1UKZKR9L2Pv+yDTW1WxrWQjP7oWw7J4nMk9CV5kr2ZpFGkU0iG9FTkWkj
wxIi5JZpQ2+aartpluPGKSEz8xxz3XGl7qiJQ2WlU14ujv5druOP2fZ3x4f+
MSvy3aSQP+eNei835YDIHJHlIfZaCQc7rZLQJUaZIfUSUSryy8N3GhOF12Qt
C6Ev33SCA9SGyJhrvwhA81DE4DRxPZbeEyJpAIOFaOty3kcMM3KZDuwNYTSW
3XowyakW5a/du33V9oYW1eXpaVc+z2KXq25C7pbUrD1jx+9PyDiQkLZvTPru
5LSNmamrKifG2eXGUtvkIqksl/ICmZEls/LCywvDCuKlIUZeL4r490ny39n2
DyfZ/5wT8Z/jw/5SMPK9nLHAaraBVeh6iaiVsHX2iKUGVvZG57BKkdOHjoCv
As1dfb0+duRb2JYUJfSU60igqqoqBgARV3WUadtoOeUSLheXSPRZZs+ezVft
UICzW/1e2FWrdzW2qsCnvpYuhbb2qD6v8nYZugtGV3ur8etsVt3NqvfisXt3
pI+WmZWO0kIpK5NKt8wvCZ/nji7LD3UNkTqHvJ4X9sE4+a8M+SBR/pAqH6TL
77MiXhsfs11kush8m1RLGH6rhwxZFuZYJVIlMkHkeNNh1RugvurHSNr1+zpE
mYJVrMz5C1YuY/AkOymTwRiJipgSaFDMYfiRi/CEHuPUifRoAM0qZFvbWL9g
7fI9Rw8ZrKUQjzS9MLUMkQxgfPHr9CmPX7U9eeqeUXFSUSylbplcKZVlMtcd
PmW8TC50ZkXJulB52z3kz3nOv0wI/VOSfDg+5A+Z8l5u+KvZQ3Y7DH01Nxzg
2BZI6GSE7bLK6ayyh+WGyOP3HoXwdHuNJQg9hSFg3cX4SkLvwCHoKad4MKde
QQKXbt26laXplSikBA4ABE/UZcVZe8RIQxPa1+01sPEHNtfX16xe1bABCQLt
4CLMSX3Bn2E4wmTshQXZpTyPPH40Pl4qyhyFbimqkJISmZ5nv9EVXe6Onhgt
NWHyRmHsexnyYYb8MTXkvWR5J0N+m+14ozB+p12gl2ZFGpK4MCxyToRzTrh9
oS1kntOZhnnwRz+APkB9AzS+KTIHDhyghwVTjQwDiIAbpwkENP7kIu1QYOKj
PHI5lKMGiTamVOToDXSfu3Bg89Y79u0HaN0w/4z44E/BkA74DA4LYIrtVr3H
Hv/nuJFSWh7uKpaCCikqlamu8BtcQ0qLY8fHyBqnnCka/ptxof8xzv5BmuPd
FPlTtv3NDPm1K77RlME5MY4qR8Qcsc0Ks88IkYUhoYuio8eLPPuzH2FcBu6l
cEcPPhq4hSq9urp69erVREBzKV4RCRA0D0OJQZ9rLx7xUPhIoLWcp7PLQMbb
U7uiGs9meNNgooBqv9RsujtB/yfYhz7le+Sx++LipaQ8MrdYXOVSUCKT86Km
uOKK3HHpQ2RVuLziHvnmOPv74+zvpNnfSbG9nyq/TpB33cm7YFyZZsPysNgq
CV8cEzsTDAZ9FWJPFzl59E6YL35vtxoAXmAY9BcgQAYpRICOOyx6H0GZoopX
RMJF5SuXcyGbVOPKlF9kBFyI1BuX7Z1t4JzGxk3r19cCndaWy//AR/8CwV+f
77Hj948YIaVl0S73FawqcqMq84bnu4enxUp1pLxYPPLMeNs7Gfa30xz/lhL6
4cTw36Xafu9Ob3LIVJGbJLRKImaLbY44wWbLxbYyPHqcyHP33WMIesDX32j4
hqTtAS4TgU+glulIUs+DEOAGMbcPkB5A0Z+CL0l9BZTwld4Ql38hyS3+rpa+
7uX1a7bs27lo1Qqfqe39hsJSOmzQFcR8p44/MGq4VJRGFxSIq1SKiqQiJ2Jy
7lBX0dDUIQZWL5SMfDUj5K300DfS7P+aav9tovx6lLyYErs3RKDPl8SOqJKY
m8U5U8JmSsgae2TNkLiJIk/fc5fqbFfdXQPBiqO/ePFiHUPOIXHdAKQXEsEw
XH4EO2mu47KkFj2USQukrauzWwU6lb9hZ+Oahtqahnpo1wvNl33m5MifjyIY
xOrJYz8cHSdTSiKL8qWwRIoKpTIrbHJOTH5BLLBaES3PFw9/CQoqTc6kyutp
treS5QPXiPcrc26LtoGvvueMniHOqrD47zlibnI4bzGNLuj2p354t7FA0Tcg
vtLmPfqu1bJ2BvWciID2DQ8dOoQwBZZb59D2wJNP5gW2QaMlcPnyxa2bNlcv
XkrfEL+Az0/W6glylyJc/t6nj92bPFSmu8NLXKaPUyBTJtmnZEXm50enDZGV
wKok7sUMeT1VXsMvI+SZ4fLSOOeZiomwo6aYplSuSLmE54iUhoQUi+A3wSGn
H7m/o/Wcr697IFhZVxigjpqbm+HIaNcG+py6XVueelsKKo55gQm3hzAPausF
s6SxedDTa6jTQGDPlu2qq0d1eoOCZy6KBoEKntLAz/vE8XsShxlYlcEfLBJw
1+RJtilZEW5XxIQoWRspL7mHv5AmvzKxejVd3pgQ/osUxxtTcmtt8nLTvtNH
737x6ANPHbjr5P7DZ+67/+VDTa/cfceT993l7TzvV97OPk/fALCisBAr7lDr
6Q9Pbk3qACMxFyA9PT5l6itoM24z6WL/EYbd6e3ZuX3HakyF/gCVOTBU/edA
hjzHHj+MeRCWZ1G25BWE5ubbSrLscJ8rsu0FYfJ9u5wpSHwxLey1FNvLifJK
oryWFPpCovOtwolwLVXHBeXvNGpB8V3mr9uHvqmAYfpinLrNFb+BEJQ5usZN
XoIGjYRXfRqBOg2viERiqikoLkydiISxoc/qgLWg1blzB/Hk0hA4DTGYQfbs
2QOR/xI7uU91Pnzy4NCRwCqqKMuWne+clA/QnBVZYZDEYrtsssmZ/JTn06Jf
SHW8kCiA69Vk+wuJEW8XZBlYdV3AFN1DQLyGuXaFa/uMJVkd8a1J7x4CJfbx
5ptvZgzEjdvTyrS4tGByHiT78aALl61gKui1QYQZ4CbOwYMHlyxZQvG0Ls9e
RZ5jJw7FD5ep+THFE8OyXZGTXBH5ORFl2eFlWY58hzSEyctFaaczop5NcTyX
JL9MwS/0meSwN9wTa4BVNwTNMOkMRdlrakOLCefT88jAiBoe3T9//rzeVgCf
IEy+YkCZy/gIX7x4EVKpOYS6izunjKTBz33Js2fPciL4Gi6q59FHbx8FfZU3
pDjTme2KnuCKzMsOL8wJL8q2ZzulLlz+xZ16Kj3qiVTbU8nyTIqcTg15IsXx
WnHmqlBRPed7VEe74SuZDNQbxCpwBaOBAwWZggxqnwWSRSlDr/X5BwQ0MjTU
kV4fUiKn8Un7SvMVCeVjIJAAuH0paN4Tx+8YEyvfyxlaMj4iKy9qXF5EVo7T
levMyw2ZEGHo9ueKUx9LjzyRbDuVJE+myqlUeSwt9KWycSvtonyfdau2VtXb
roLbISSacYF/gPatgWIAHUd30NOmpiaujvK8BPmKdqYyrfrDhw/Dc9Tam0ug
yE58uM2hNymUKXTIDv2vT+lcex3Se+r4nUlDgVVcyXhnVl5Ehss5Iceek+vI
zpXMSFkTbWB1PDX8scSQU2Pk6RQ5kSLHU+TF0oxVBlZnvaqlVXnbOdkFgnOH
tn0HhhXVzoULF2gm6f0FIsMNYhDXrBjJLkNX024HFHRz9Mklrl0oU1kRFnAU
0IOQftVqrefU8SMmVkOLx9sn5YWlu2yZOZKdI1k5khkl66LlF8WJjyU7To6W
pxLk2UQ5mSSPJoe+6h6/1pDBsz7V0m7soplY9ZGhzGUrXz8D5VsSdAvwgSWg
l/sgcTxmoyzzIE/v6NN0TMZzU3rvBqyFZJgK+53dBbxEmymvrd49Jx9tGgt9
lRvtzrRNdDnSXSEGVrmSkyOwr2qioK8SIYAnE+TpUfLcWAF3PT7WdqYosw66
3fMZZptuZZh0QX1uLGJckccBK3d0Ss/j8G5aWlr279+vdxW1EmOA/EbvD3yl
u8y1L22MATTCrkvW/jVivnT3xPOzn+8fEy/TC2KykiW3OGxcoSRmGEDlTJIM
m+waI6+WpZ5IDP15jDwZJ0+NlGdTnI+OdPwqd8LmEFHt51Wgo8vbdoWXAgZW
PUF5vKK1BoAVpAPMAChgiFZVVQEoiBJlDf3Cpw6TENDiAw6E9F3Z/jM1GHIB
H5hP2kKD0aXPCUDA9+3bZ3U5r73W7Xni6X9KHCNTXJGZSZKRLak5kp4pRQXi
LpDsSIF/91zBWMyDT6dHPp8Zc2yYPDxCHh7pfLO4qBZ81XpJ9ZpOX98ViePK
mLkYZ7Efvi1BsXD3H8STY+AuwgIhYgw/aZmieQ/lBnXEc+OcLiFolE0wJ3lP
m2RgObhOZDyekb4WVo+caBoRL+U5Ee5se1aBI7MwdFKW5OdIkUuyIqUhXk6X
ZByKkGMZsU0R8si4ofckOB5MHn5mckW92FRri7k1H+hu6zAMBp+BVbe5EHPF
PR+w0cDpD4F58+Ypi3uCjlttUeKAJ81XzVfK1HhAQKs7FsI1f+p/Lh6q4Emw
a5P354/fAazyM2xFE8MzskIyskPHjZe0JElLkfwEmWuT0zNLn5zhPjY565m5
5fe700/NKXm4POenObmrQsPVJ2eVr/eKJu/5Alb+wYHKYAMeZgYz8Pii/oT4
VpOYgASB5TFgsAdPvxA94APhAkSI1GvvHAXqK81m+oDWVdT76Kl7k5ND0+Ik
aYiER8mwBEkYJQnxEj9aEofIkVlls0XmOo1lvbnDbNPCpThEbomVbclJP7hx
tgI7BQL+3sCVHZF/YBUY8ARokD4/A2UFRcQegdMwbXFVShNeOetxWkRGqHdg
yGTEAWoNeSmSEE+mBP4YBXCdXrG5NvX+5OG7K8szZ+SnT8tPLSxInDxtUmVF
RmXluNLpmdMmj1+YmaJaLqn2y8pz2f/RX1TvBeX7RHk/UR/9Tf3P/3Ix7nJz
h8FaPYbd7jN8QAOrQTsPFDwxQvOAOlkfh9Dqul8kTU2wFs/J4JXnc67eu7/a
Wb728Uvk9XRc/lh1NRtaWuHX5u+92KdaO1Vru+eccRIJln9nmwp4+vo8PYHm
HvWpCnyqPC3KmC8CbabTfGXD28TK1O1XzK0B8pa+yqEs05M+Tadtbwb63bJR
wV0bYqiVP171yQfirKcPje21moMe+jyt5goKtDQK8fQAB8Nk8vrQeYh8D0Sr
p8/YVvR1q144Nb3qovJ1IgladqkXOZWn28950JTFQN8gYTWIZJUvbTBYE2jF
bj2Fq4+N8ay1MjWOud1jBpSv+TJyBRCFLsPANb77jDMqpnPs6zbwBJe3ezs7
kLmj2+sxd+FVr7EQ4+8LdHr6X3nQZmE/TrhuZL1nRJcQyOC139EdzCPaIFFB
bxQg83Cp9bKVshwMZu/0MWY+uZekk7FALd1oj3XznVaxrprSdPVdvOtDvJao
zBUYxljZrN/AWflKNxgwavOsX0beIVImhkyvSyAmHCkrUAwwl74lp08z8sIF
j+OCsb/mWbXBJa3xeDiQaornA/mJJ7tUcLVBzyb6AK0Kaj/NY3q+0Ac1jZMS
wXPCOuO5c+eYxVjmD57LpdOhgqBx+D7++GNlOdVJd+O7RsZKmnM4djT4Ydvr
jTC0h3a7PoULk0O7TuwR7DRaIATZusivDV16+iroZSgTWxi6hw8fRoH6kI+2
qGHV8OwBGsBNXmUCBdsG5jRYEfbkd3FF98uJWpqgwVFCszle+ooH+k75ojtA
awRGHWVHm6/69pB2DfRSho5BCUSDV0h07dwXBg/TPMZX7bYjAb+iUu2P3HHH
HTykdz3JKvJcNmQY0MGC5THpgwcPKpOFOL6UCIoALy7pE+mff/45YpqamtBr
iJ6+ZEesCDiGgyDrDQLURZ9CBZEHVmA5fUmWJ50QeeTIEU46eGrOv57EkWVH
MOhaKrX4kGHQWvadF1LQfUoZl1WtmKMXMPh5cUAFOZY3Aa13siDOWk/y6hMv
+CiTwQApBwUjwtNT6ov77BDSwb36/ZXU79ryokWLlNk7NFuva+lFe73jr4IX
jnjh0VoUTFYumlnHXZscKniJDIBz31YF5ZEuKliIsBNSnoxiS5AA+GjGtrr8
142oIQEXWgUm1xBROaCF9Dcx1ugmJzWKnjIFRLdZKxOo8b///e/KhIUOFBdX
6U/t3buXNXIvAJGIWbZsGYeD0op4BPQOi55KOJT0fNGA629o6UPdwAEtBGNA
aej/D4AucMOar2AGiAlESTvvyhxikPZJtSa3bmrzLjlPX2jfijdSMQrabQcC
NHR5L483dlm7viELQlOPHj16ne12dlnfWwFfWY1GGjyQCwgRY6xXL7XToQ9X
0KgGw6DXtKYYjyz9HFKri0oZpMLst5yIBvRb5Ncq7quW1L4TokTwlCDUuLXN
7M78+fOtKZXJToSCqoMb+npzDVOktXxtliMBwv0EhyaZtka0BtBX5/o5+Mx+
9arIdSB9ZUlZ7FLrdSqqXE7TTMlAv3//QuJRJd7jIPi6HGulGA7Oevrmmj5r
wVdqRdT117/+lTF0FlTwVqYKnkYeTCy+BnGu6TaJMbx9zCZxTlQWTPS/02Hj
rXev9GYuU0J86ChpOaK/zIxMjNJYr3X5yHptUFmWhjSLXmdNRernfmpGIulN
f/KSnq//3/9nYi1K86EmfX1Gu41WP1oXZWUV2rqUPt4NsSb4+hfi/g+eK/vA

       "], {{0, 0}, {100, 63}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 63}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.16753018225064, 93.8285943049222}, {-50.75,
                45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                19.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.48241399211994, 
               126.14347811479149`}, {-45.94068653244214, 45.93626935115712}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.79729780198923`, 158.45836192466078`}, {
               2.152448143136418, 45.93626935115712}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{4.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.16753018225064, 93.8285943049222}, {-50.75,
                45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                19.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.48241399211994, 
               126.14347811479149`}, {-45.94068653244214, 45.93626935115712}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.79729780198923`, 158.45836192466078`}, {
               2.152448143136418, 45.93626935115712}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{4.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
Vdfu+PTN91zs9Bx/d/Lo0clbb31i//7hvt7I4SPDX/jiN55eX/H1NRnfeDKj
pKJqlVjJlib9WKAkIGA1hPAwj4ysmPTAUR8rHfecuXwTMaacnBzTthuJRAB6
uGXL1s3PbMvOKQC10YQqLK05eWr6xAn34FCirKwNS6M3GMGrrJyKM2fdJ9/z
nL0YfuSx2lNngu+dDV24lHj0Mdel7ujZc/NpaZUpQyVimudoOIJf6CM6rHB0
XO5eunB+8dTJub/9/GN9vbH9b/f19PiLi1siUS20y3+rslcA6oUXXoA8SAxC
hVKm3UZwETATMmL2YZQgPAIp7DliPYCMEIP72NwYNBdWEBgORRby83OrqlzF
JeXaPcByX9U+PBw7fOjKhQvzBXl1KOHK/uTa3IuX5o8cn+nqSaat39Q3oA4d
cV/qMvLztp47Fzh8aCQrqzYRN6VVJ8P0bTRcdfVb9+670Nftv3Rh6Y7bvtl1
0Xfx9ML8rCoqaAK24ZgKxTT1ce2xrCrB/+f2AgWMhovIMP6SDAqBKr1rGHbx
24Eb4LVGJcs+QwJAAa66ehd6aG3p8Pm0qS8pbujunB3s901PRG1lG6Jh7Q4h
ZWcX9w95Lnd5u7qDmZktXV3Rrq54T1dy3dMbey+Hx64YmelVylQk7VAmIqYb
pUJRVW5vHB8LXL4wfaUvePvnHxnuCQ12BXo75+2lLRgOc4FG/kggqefOUKtI
dL2gZeCdloqbJ9zhYR0ulCgEklwuuTuEmgCBEFH8uIXLVoYB2qKBkLter5+O
SkcNKE1Gla2kYWJk6crQ3MjgnL28DoWGiUBebtHgwOyVkcDQgDcvp36oPzwy
FBvuixZkt4wMhkeHAjmZlaxs9hxPGlE4nEm9q9Z6ufPKQM/MzEj4zlu+2t85
N9rnHeldqK5oTiV0zwlEvSqxeqxMpgzrhokEbtY6fFwRlavlIJTWDJ2gGsE3
v1DEfH7IVfS5rW1Olz0vu0gzllS2QtfkyNTY8JXRoWFHhWY/ZWKVn5s3NDAy
dmXmyuB0QY59pG92fHARLBdnV48NLIwPzudnlmqsjKtYJYwoff709TlT4/Pj
Q7MTg+67b7t/dnhpvHd2pHeypqJemVihPkOG1WBFB16AkjxFZWFhgb46vx6y
MlWV650sDeqDW14SkJohSzwvP72u3tnc2JoIaRtWY6+duNI3OnRxdKizyl6s
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
       "], {{0, 0}, {100, 64}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 64}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 
               35.971457463440785`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.37851467504866, 
               55.511677997303565`}, {-31.512746129768573`, 
               45.93626935115712}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                14.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{56.91873520891144, 
               75.05189853116634}, {-21.89411919465286, 45.93626935115712}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.45895574277422, 
               94.59211906502911}, {-41.131373064884286`, 45.93626935115712}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.99917627663699, 114.13233959889189`}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{115.53939681049977`, 133.67256013275465`}, {
               6.961761610694275, 45.93626935115712}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 17.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{135.07961734436253`, 
               153.21278066661742`}, {-36.32205959732643, 45.93626935115712}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{154.6198378782253, 172.75300120048018`}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{8.451201747997086, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.39075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                0.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 31.069708750998913`}, {
               45.436269351157115`, 45.936269351157115`}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{32.00662338613401, 
               45.23803799594704}, {-50.74999999999999, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                0.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{46.174952631082135`, 59.406367240895165`}, {
               45.436269351157115`, 45.936269351157115`}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{60.34328187603026, 
               73.5746964858433}, {-31.512746129768566`, 
               45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{74.51161112097839, 
               87.74302573079143}, {-17.084805727095002`, 
               45.936269351157115`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.67994036592651, 
               101.91135497573956`}, {-41.13137306488428, 
               45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 0.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{102.84826961087464`, 116.07968422068768`}, {
               45.436269351157115`, 45.936269351157115`}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.01659885582276`, 130.2480134656358}, {
               31.008328948483552`, 45.936269351157115`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{131.18492810077092`, 144.41634271058396`}, {
               6.961761610694275, 45.936269351157115`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 17.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{145.35325734571904`, 
               158.5846719555321}, {-36.32205959732642, 45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{159.52158659066717`, 172.7530012004802}, {
               31.008328948483552`, 45.936269351157115`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5507086830879317, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
                0.}]}], 
             LineBox[{{11.449291316912069`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJy9vOdzHFea7pltpqXuljRqSuqWWqIMRYkSSbjy6b2tLO8NCt7Tey9SdHAE
QXgPFAqmvC8YUuruaT/mxu69X27Mxm7Eftm/Yb/uKYAt6c70RFyN+m7Eqwow
VZWo/OX7vud5zjmJD1pPOzu/D0HQ+RfBi7PlMn3uXMtV16vgH55T53u6TnW0
y6cudHR1nDO1/gAcZMF/7eC/6s+mEv2/MIosXjHjRRnJiWhWoHIyWw0FvHJZ
hcsrfEFli2ayWH0PmpdMeQF85H/+/HCRprYkvMSjOQbJM3iBAz+DV/AzkqXh
HI3lWaIsEEUeLbDgldlRwEf+117yN8JYpP5q/EesjDkezgpIRiKyEpO3AFBU
UsI3WXydI+IclZYBQLpgqeIqqEhR+rasAAGyJNFFCc1xxjihi+NomiGKIpHj
kSyLZ7n9n40pCklV3/z/IytSX8RAGPMkuHFYhsfTwn4QuepXAvexeitzPJnl
6YzIphRiiaOXRXpNFhJWKemSNx3CksRM0cYhwviYRmY4bEkm1uz0povfdApx
B5u0MSkrm1LBZ78KJi2BoDP7oTAptfqeZPVtxAYvZhRr1iJs8PAMYpxA2QXV
kvBKWTOTEriEGfxeck0yzRPILEqtkEJS2junWo2kFZyHyKpoTsFyErgE8LWx
PK8vibqSBOfBQQXcYnAcHATx7ZKqTNQVtNiXJJqjOJASCyI+wVuibtuGz5Zy
y0mLreSQ0oqSMDtSLnXZEoj6Gyf9zn7VNW2NbEZcy03qqCvwyNIy4umaPusc
bGP7ncJE0LZ8wrVyIjTX1jjTGlzsDSz2BpfaQotNwflQYC4YXAz6lwPOJZcz
5nWvhdyxFs9yu2+xK7jYFVhpd675w6lgcMYcmpS7Yo2BEb/zaqRj/LRtyeJI
qpYZl2u20bkUcc8Hmmfdzod0aMYVWW50TgV8863h+U73fJsl0Ums+bkNl5p0
2pN2wxJpeOqrKXuwdJBYcVkzIWpFVDJOKWP7tnll2kKJCo2t0fgUxzxSTFdp
/p4Fv8WxwyI3JoqzIjwEow8xup9hPmMjo42O02bbSdFyUzbfszHXneJlh+eC
5OkTQ6fbrCeayTN29LKDvN4kXG9yXva6L3mUiz7lst982aVesqoXzeYLinJR
ka5I7BWGuc6x1xXuhk244hEveORzbv68lb4uC3dE5SJuP4+HrqvuE057U2vo
XK90izEP0ex1Vb4ZUG+Hrde84Rsu52nafVHw3bCbL1ocV32ey2Hwu4jBUH2/
io/IzgWHe95sGDHpi94jm3bdpBUbUfFRSTOAcCtmJW7/VqxAh2SLMhtXhEUr
M2gOjLeJV12B/nb5qss5GApONXsmA+JDs388FB5ttt1ynxm/6DvRGLnYEbzb
YbsVUS40B693d9xoDve6mto6G7t7beciwrmAfLrVfqo1fDIUOunzXg57roW8
V/2+q/7AlYD/st93MeC55HNf9bmueF1XAuACA5eag+cjwTMhzym/61Kz81qT
93ogdCXQeb6p83Rv09nrzVeuOfvMvksqf8Ytn2t1nepxd3dGznX5er0tF9xd
NwORi/72a22dlzv8lyL2wVZ+wCvek9oXAy3TKnlPK+a8xpiFHVWc025+SjE8
xsV1mznl/FasQM1yaQu7rFoW/cJDR9f8BefNphMTV/0AxU2/f6jZdt8t3lS7
Z051T54yn3G03ux1t0UCPZ3uy23q2SZze3PoRGfr2XCoyX669cTZ3nMtl7p8
F5pDp7o7T584eaqz52QkcMLrOu31nPb6TvsCp0KBU42Atqc3FDzd7D8Z8feC
s0Uivc0tPZHWjnBjezgITt7X5j/fHD4baW5tbGvvaTp5JdR7uq0r0HM27D3R
FDxzqqX7SlPrxa4zl1tOdTX2OdvOucK9jrZzjW1nmtx9PstnQeGOw37XfHa5
qXNCJW8ct2ec7KpkHeO74xH3upeYE5WkQ0x+uxoErNi4KizbbEth+p41NNZN
nTYHHnQol72OO6HIk07/oybbXc+JhXM9k2fVC86uuyfbTvW2nTwRvt7XeLW3
paevp6+393ykq9t7yd96MdTe1O3x9Tja2yKnWltPtwa7W92dpyPNpxqbTja3
nuxoP90DGLafPNHW3ddz6kJ337me7jN9nSdPd/ad7+q7CF67z/R2nQH/t/t8
R8+F9rauzvauE70nz504caqnJXKmq7UDpHBHX0/TlabAxe6uy809ne3nQl1X
/M1nPL1XW7uvdvovhFwPW6wDAfkGd2Iu2PJYwK98bN2UyTlUGtRGFlVpQdSN
YVRMojekb1eDeR6M8kLCZt3wM+NW62TAeIWxDHjZz1TyumgZ9lgfecnrvHTX
wt8ywyfJ4INW15mg7WzA/FnIerPR1x0J9YRd51V7D3Olt+V8Z6P/guq5amk7
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
P1tvSSA=
       "], {{0, 0}, {100, 67}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 67}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                19.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               32.486541675493726`}, {-48.68756477099173, 47.99870458016538}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{33.42345631062882, 
               48.071703844936664`}, {-18.31295339694212, 47.99870458016538}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007177, 
               63.65686601437961}, {-3.1256477099173097`, 47.99870458016538}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.59378064951471, 
               79.24202818382254}, {-28.43782385495865, 47.99870458016538}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895765, 94.8271903532655}, {
               42.43626935115711, 47.99870458016538}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840059, 
               110.41235252270843`}, {-48.68756477099173, 47.99870458016538}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 4.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784353`, 125.99751469215137`}, {
               27.248963664132305`, 47.99870458016538}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.93442932728647`, 
               141.58267686159428`}, {-3.1256477099173097`, 
               47.99870458016538}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 6.}, 
                "RoundingRadius" -> 0]},
              ImageSizeCache->{{142.5195914967294, 157.16783903103723`}, {
               17.124093206115766`, 47.99870458016538}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 3.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.10475366617234`, 172.75300120048018`}, {
               32.31139889314058, 47.99870458016538}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5460988028072107, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
                0.}]}], 
             LineBox[{{10.453901197192788`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               32.486541675493726`}, {-50.75000000000001, 
               45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{33.42345631062882, 
               48.071703844936664`}, {-17.08480572709501, 
               45.936269351157115`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007176, 
               63.6568660143796}, {-2.656865324421446, 45.936269351157115`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.5937806495147, 
               79.24202818382254}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895764, 94.82719035326548}, {
               40.62695588359926, 45.936269351157115`}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840058, 
               110.41235252270842`}, {-45.94068653244215, 
               45.936269351157115`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784351`, 125.99751469215136`}, {
               21.389702013367835`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.93442932728645`, 
               141.58267686159428`}, {-2.656865324421446, 
               45.936269351157115`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 6.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.5195914967294, 157.1678390310372}, {
               16.58038854580998, 45.936269351157115`}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 3.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.10475366617231`, 172.75300120048016`}, {
               31.00832894848355, 45.936269351157115`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5460988028072107, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
                0.}]}], 
             LineBox[{{10.453901197192788`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
       "], {{0, 0}, {100, 72}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 72}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.182123993869695`, 
               93.43900437969117}, {-50.75, 45.93626935115708}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.26541436492127, 
               127.52229475074274`}, {-12.275492259537174`, 
               45.93626935115708}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.182123993869695`, 
               93.43900437969117}, {-50.75, 45.93626935115708}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.26541436492127, 
               127.52229475074274`}, {-12.275492259537174`, 
               45.93626935115708}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzVXAl4lcXVvrWlQsgKFRABVzAC2ReyBwiENYSEJGQh+75BNhIgLGHflwC/
+qMWQQWpda1rseoP1aKyqdhaaesvvwJiAiS59+bu87/f9ybDZ1BrjX0eOs/l
Mne+mfnOeeecM2fOzOTOvAWJRTfpdLravvhKzG2YUFOTu3iOO34kz68tLZ5f
WDBtfl1hcWFNSN7PURiFfwX4p+TFv5iMRiMzDocD3yaTyWAwIGOz2XrUZLms
b7FYmDGbzd//Cvas7VM2kZmLFy+ypt1ub29v1zaUzVnfarUyD1KvJ6+jo0NW
QFednZ1owvc61NSjw38p4Y1oi290yxKCgBcxQ8rNamIF1CQZQgPd9yTUQX3Z
OSjHG8EUfl6+fPn6+m1tbUIFFq2Ql4SRWkIk8UQd1ARtpKS1tRUl5IiYaIdS
thLfJgw/JJFsbbd8CxixqUkC0oNO2QQVHN+R0FwrCfJd2vciXblyBd3yvQSH
I8VvlFvUpG2IJiwhttpEemQeIqfX6yVcP1qumMAOewNroAFMtbS0iG8OCoVc
Mo50/vz5H9IzM1q5BXdkMyUlpby8HD03NjYKFZP09PSFCxdyUFjnwoUL4puK
QymtrKzkTzwC8RxBNKE6M32XIIEvKeo/PIGX78EZNBCur7/+mq/gG9GK0EkQ
7N+RyK9eTawvpTQzM5OYFBYWJicno8OKigoyVVRUhGp4y1dffSVUESJrAFna
hIyMDIIj5Y2voJhJvihj5ELKAJpcvXr1X8WqpKQkPz+fjKelpYFaUEUW8vLy
8BNksw6ZWrBgQWpqalVVVWlpKZS0vr4ekoAKRd+d0ATNUX/+/PmzZs1qaGgA
Ozk5OegEHeKlxcXFkCV0gjcWFBSwMhBbsmRJdnY2ICWdbMIKkEZURufIg0jw
DjzRPwFBHSk26AGVIYTUXBCMmuK6qeH6BISlPHB0ysrKhKpfTU1NeCNGDZ1z
dKgLGCwwC8ohPyAVNICkOXPmoA44IoZoAl6QwSOwhj5Rgjy+0RZMoTdkgAn4
QgblaIgm6AF8ZWVlUZCqq6tRAVShE7wd3LF/goNqyOfm5nKCQLcSDcoPM0gU
uUuXLpE76gLBYR3C9T0JXEujgYa0JGyL/Ny5cymo4IUZ8ALCQD9fjYQ6wAos
L1q0CIyAI3CKcnBBkUAJWqF+bW0t2hKumpoaIIA8SiBFHGjihob4xqCjPkZ8
3rx5EJ5KNaECpA59IgN6KEiwbxwUkgc9AiOoQAEA5SAP5mLZsmVUTAwBnuIt
QJ6goed/OgNKpRbdes0MaKBeQzWEOueCeHoFCQkJrEPZplwhM3PmTELE4Qa1
lJm6ujrQBmTAOJhKSkoCYWgLJaU8oBV6oEqiJnin+CGPPiEDqIM8KqNtXFzc
xo0bMTp4hVDtA1FCW9KPyiSPOEBUMEGASEBBaaRWUiTQD3UQj1BHa2+/NRET
1KEunzt3jmMNqog56Fm6dKkEFrSBa8oA5R/fqA8EMOI0khx9fCOfmJgIqQDU
yEC5Fi9ejJ8QFbwFwkm9Qx44UBPRPzLEByOFp+gKALItmgBA1IeUohy2C29H
BpAig2+0AvhoiA5RDa0wKChERnTPODApoE2KIoCF5KMrKS3flaQ1A+BSDoEG
M+gcKg9p1xo9qDxK5LvwXowIR43DiqfaeVkmEI+pTfYMZaHpQIZzPUYZgIAM
kA0h5CPWx0iBEpJBwy6fAnmhcT8kqeSddIJCCAPFhuIhkdFOmt8vV2BKdk5H
FxMZhl58c1LAIxLDF6EVZIA0cMjwFjkzClUgwSx7kARgfCmKklnoJp+inE4p
pRFkQHeky9pjIUBwIMOkAVJH0HoMEEmFmMGGSKqAGA0v8phc5Mz4+eefi28a
pR5JCpJ0CZhIm3RaWMihATuccbT0yDoQG7pP7AHlkG1WQxO0xU92yx5ALRjX
Ukg7JjSTDicauciCxknaKPO0kxIQKTx8qeyZsEufkIVarvEK7aqhR/rWpa5c
QWhr9hhZ2hN8dxHjAIWdaFBaXmY26MGSsFsthnaL2VBaVmg0tFmMHcJmxyc/
PQPfFqz4QHmbUVhEQ0WNsAnDVbQSFoO5qrhE2EzWtovC0aG8Vm+YX7EAj4TJ
DMqEw15cVGDo6FpNKJw6xPyKyiutl4VKL/1zQEpk+E2pQ33CSO1DWzKFOmAZ
40KWyZHUfdaRQMkVh3apwlasScWUA0GlE6qJUPyENr1ZbzEZlcbp2YDCKjra
hBk4dAjrlbx8GCi96GwTX7cKo2nhvGzRaRKGDtGuF59fFVdFU9Z8cdXecf4q
cBMGsbpygei8KK6eEda/Cft5AFuSVyEMFqUVALFaFlaWOyxmIANKbBbog62i
qESYrYBRKJjaLbZ/EuL4IYm4ESLYZ4mPBA0ZCReEnAhLkZOLUxpkjo7if6JX
myJa51suLWyoe//w4bNvvvH33796/NmDH77zav2C7LMnjrSeOSE++av4+NO1
ufnPbt78P81b39q45eSuJ97f/dTa1IpTz77xxm9eeuXg828++UJtUsKFw/vF
h4f0px89e3TfX04cry6sfnLjtsebmp7ctOnAzuaK3Ow9/7Xzsf2PHnziwKHH
n3z5uRfL8woVkBx2uw0MGB3iGyP+I1CihGg9TxlRkUrKDAqlNWYJdJzxFmo3
XCaaRNSEcTajuN14+WLLmnVrM9NSiuPjm8vKt8ybtz4jtTolriY7YXl++obC
3BVxs5dOiduQlbc4IWFLdtryuGk755U2zcgsnxC/vqRqaXFFTXZ+XXrm6syk
7ZkRaxPu3Jx1b23ivQ2FGfX5xWtyCpYmJS/LzKpOS6srKCjLg9uRMb+sdF5q
WmF2btKMWcAKwgbN0xvbeomVRExoVtMGNcn1I3GQQCEDYK/XSqGuYuSMA6tl
MnYqcmV1VJSX1hQXrsjOOdSw5LdVNa+tWP72w/dnhvv/8ZH7//HMbz/bf/Bk
84Mzho4oiQgvDPMrjgiqCIupnhCf7BVcm5RWMDuhsaSgITW5IS7y902pp3Zm
fPBQxpEHCtaVJQ/V6cI9Bk4bdnvwgAEBgwd5DxuaEDsp3D8gJjJy+qTYiaER
3iM9FbmC7gs7gLIp3z8+QbmISXx8vFD1jqYGKwjYZ21AEj9RCDQkhlzWYZaX
3gKWyVxc4KfiXVAHbfaC7Iyy1JRDK1Y+X7votYqad5evemnxoroJkX/dv/fM
/Q988chjHU+/lHbHqAhX13t/rgsc0Hec64DZo3x9XTyiR94zcoBz9Jg7ggf1
n3Lrzz7YlXdq8/QLB7Pf3p5QOWmU9y91E9xcpw0eOs7FbdzgIYNv+lnq1KnT
x0+IjYyaNXlqTEjEYGd31Qhg/jUBqA6TvlehKDVxhcs5HRlwTRWD/eEMS0OE
QsgP3RIuJbio5NRM/wc1Z8+ejTWC0i1GEsDarfOL8suSE480736lqv5wQcU7
lbUX9j6aMXTIl/sePbvr/k83N3++++EiTy/x8YfCdEmYW4XBJPRWxWhb9KL9
grj6v8J0Pi/glrN78k6ui3pvdcD7W6Y054SM1ulSRwyb5Ow2dfDQmGHDR/Xr
PyUgcHpExPjA4Cnh0VMjJ9zqOoBYtbdf7T1WVCVARCcTCZwyw0ga88hIPWXU
iM4ME/xM4glhI3pAEsAqTRT5t1RXFC3MyXhmydI3axYdBVaFFaeXN9V5ep7d
vv38A3vaH3n8b1t31foHG9/7k7C2Cv1F0dahYGWxCptRONqEvUWYv5gz8uen
tyV+tD78bzsjT2yMWjvz9vBf6Cb37ROq+9l4Z/fIgbcEDPzVrODg+IiomZHj
YwJDY8OiRt46XDFRnBmF3eyw9FKuqFOUCiigjBvICIxQpYWFYJ81IUu0UXCS
sRYT3b4iwAdhUEN1FGAsFKxKSnIWF+Wsjk94vbL2jzllx3JK/75mXcO9o9r2
7T/RuOyzDdsu73087557LR+dFPY2eCLCrJhha7vBYTaofsV5YTmf5NnnzM7k
z3ZOPLb0nnfXjNuZOjpYp5vZ/+b0W4fHunpEewz0cXFOHx89wcs7JiBwZkQ0
4Bo94i7LlQ5aqU6bqZf2CpMgl3hcZCHB5jADlilCSMjQwkNPuVqB5MilDcw4
kAFiXCmwRHkEl0ZxEztLK3JrCjKeWdr4bE4hsDqSnv+/6zfWjbzz/3btPLNm
7adrN/11a3Opt2/7B8eBjAmTgUOB2aH2YBN4b5uwXkz2cjq9M/m9lf7HV415
Z3XQjtT7AnW6RLd+M/r1j+3vEu3m5ufikhQybkbQuKlB46aMC4N0Dfe4RUCU
LDZ0ZLbbVP/lxycuzLlsh5WGMgI6ZGDDYeElbsjgJ0NttE5YgDCoApHj8hb9
QCYZGk1LS1M8ZDtcQ6tZmErm59UUznt6WePTeUVH88qPZBb+Y8PG2pF3fra7
+fSqVWfWrP9ka3Oxj++VD09CXeCcmVVxtKoZs/I/fPtLid7Op3bNPbYy4N2V
Y4+uDNqWOjqgCyunWOf+0W4uAS7OSSFBM4KDpgQFxQaPg2jd7v5TYgVpAady
OS/UuR4sy1AG19ryJ2ZDLs+BBnCGrgFYShFDlygEmOzN5gBQVpMwFVbmVOan
H2xc8mROwR9ySv4wL//TjRuqRt19dvfO95pWnF655qOt24t8fVs/OGETFvgc
kFeT+ulUPhAto7C3Jvh6vL8r/eiKwKMrxr65YtyWuV7+Ol28a19iNd7dlVhN
DwqMDQycHBR8DSurIqPWXmMlVH+yqalJ/sQUxi1F0R1IEZqIilC1T6jbItRB
xqsZwcOaC8DC+4IjikedZiOw6hSmvLLs0uyU/fUL96VnvZyZ/2Jq5iebNlV6
3v3Jzh1HljQeW9r0waZtxMqhzHwKSuZrcHVj5TPwvV0Zby0PfKNx9OGlQZtS
vIHVLLe+0536TnJxivJw9nN1mjMucGqQ3+SAgEmBQTPCoxSsrMqYEateAkUr
BDsDLePanELCBLHh9ooMViPNmDGDj2QJwylSMoUaCwVoqnsFk2UuLMkuz0rd
X9+wNz37+fS8Z1PSz2zaWOE58uPmHa/X1x+tX3pqg4LVldMnFIrInF11YxXQ
7Iq1t7UmAqvm9D80+h1edO/LS/zXp3hDB2e49Zni1CfG1SlygLOvm1NCSMCU
QN8Jfn4w79ewsipYKXuyvcNKqHMfPYdly5YBLppuYkjTJDOMulNmoI+UK6yd
MTPiEUrgd3HFxPlCToVlpQULcjIOLFryaEYOsHoqKf3DTZvL7hv5wY5tr1TX
vlG9+OTaLcU+/m0njwuH3gb27F0LSRVtqzIVWlvneHu8uyPt9UV+r9Td/bsG
v3XJXv436aa794nt32eCW9+IgS7e7n3jQ/wnB/iM9/Wd6B8wPSyyW67UScLe
q0lQqKsS4MBQNlwscAfxSE5OptmB/aG9QgY/GeumPuK7TE3ogaII5aW1RzX6
ojaLyrXdvqCsuC4n+9CipfvS855JzX0yYS6wKvEcdWrrtt9VLni9YuHJVVtK
xwbojx/v8hnAnUWF2WFVFbFDWFqSvd3e35F6eKHXyzV3vlDrvTZpLLGa7Nxn
gnu/8FucvT36xYX6T/L3jvL1Ge/vPzU04qfFijFtTF6Y1+gh4JsIAD3k6bcj
g58ohAsKNPBeSJdc0dAvZfAc30CVwRmLyazGpmzVxYUN2ZlPNjT+Oi3rUErW
Y7PmAKtSz1Ent25+rqLypYrad1dvLvECVieExahoLVrZ7d2TIQCHx9WS4uXy
/vY5r9V7vlg1/Pkarw2J3kE36aa6/SLGuc94D2LVH1hNDPCO9PGO8vePDYsY
5qFiZe/CqndQXUuYCqlo0l5Bm2CurWpCRsb0gAM0DpImI2D0r4A5SpChb89D
LKDRYTdX5+c0Zs/bkpG1bVb8/pT0vfGzT65a1eDr/fbKpqfKyx/IyDy6eVtZ
SHj7u6cgU0I9mGAV+k6BtbdV3bfGavNSWfTwU/fHHyh1f6Z6yHN13utnjp3Q
TzfF4+Zol19GuvYN8XDydnOOHxcwyd83zMcr1M9ncnT0sCG3KmpsVXwGVch7
a7EuXLgA8WCAWqhGW+6ta/0r0R1M4CIIssQpT3QHyWnhWQeeLWXe5LDY7Ka6
ovxVBXmP19U9kJa+Ny3tofj4Mxs2VI/2fKtp+fMNCx+vrjr24IOz7xnZ8qdT
wqBYc3hZnaKtTXS0K+6ZitXXX84d2+/t5tgD8z2eaxhxsMJzxaRRvjrdFPd+
0c59I136hXg4+7o6zw4OivHzAVYhPr4x0VFDgRWXpTB9wKp3UJFZ2GeIAdQH
xplLGKFaZi5ekJCRQRjqF0yTjEKgCScF7qcAJYCvCJjVoq7G7PPzc2vnpjy+
aPG2Ocm7E+fsSUo6vm5dY1jI8Z07Pnli/3sPP3z0v/fkh0cYP/6HgpUFTSzA
ql2Llakt1dflnd1x+8rcf1MzfF/ZfdvmhkberIt1c4rqfzOwCvNw83N1TgwO
muTrE+o99hpWjq7hI2K9SXLqb2tr46QPhYLtor2C8HSqCRnaK24Wt7e3ow7U
sKqqSlp7dAXfHqgiA6yUk04Ou95iAoE1JcWLc3N/t3Hz5rlp66bP3Bo3672t
W1JHDKubOKEoLDQjKHBuUGDFzLgv3j1NHQRWJgUoDCSD47AIbTNH/vKd+5Me
KR20t2zog4Wj1ieNG63TTXbtF93v5ghnJwUrFxdgFePjGzZ2bIi3z6SoqNsG
D/kJsRKqBtHlhqJBrWjbeaBCBhOQ4WkEwEK54kkPAAj0qL+YPVEBMyC3QYXq
JPME2ILCogVpGQ81LF4Wn7hsWtzWlLRX167J9fMRf/mLaG2BZRTtHeKrli7v
09qFlV7oDcQKvJo7kv0HHft13oMlI5pzb32ozH/zvInQQcWzcvomVl4+oWPG
AKuYyOhvYNVr284dcCxYeJSFqzn5FFzTF5XHJER3RIIxHBpzTgqULhp8dKLs
Kzns7SZFrkqy86qzcrZU1mzKLdyeV/jrqto9VdUzPEcJo17ZrWhvwwrbcfmK
YtXNXViZFaAU296FVVtLUuBtr+3O3lXmuWHe8AfKwxpnKXIV7eoU3q9vmLNz
mLuHv6t7QmBwjJdv6H1jQ8b6/uRYASVmoGhc/QEETmFCE6RihsFAygzkkDAK
ddWDJlz7ECsuwylXILQkr6C2oLgkLjFn/OTYu0aF/GrQ5JGjou65W5hNwmpR
Ylw2u/7ry2r8RkHGoZgpAGU0cR7ESyzG1EjPF5oLntowe9/SKb9ZnV45JXDM
TbpIl/5hTk6hLq6hHgP83BSsJo71CfEcA6wmhUfddstgDVb0HnqVuKPHEyZC
Nd08LsKTSwQEGVbgWR0AwvMYPOfDGTAjIwNima+mrqNNFrNJXarMTUxpKF+w
prL2j4eeOfvGkXPH3v/zW0c+OnpUme6UfSi7w6aGYOiuqytdq7LYgX9mdRAr
qzFohGtKxOAZPropo3QFMXdEj3AZ3UcX4uYS7NQ/2NUtxONXPm4DEgJDJo7x
64GV3cqzsrZeYsUTOFiSyH1blMg9WRgl+qJyCsCMKbe/5Zk9hgSJmFBDzV0n
T9quqmIi0lMzynMKlpVViQ4AYAeIChh2bhnInTHRBYtD5U9xsfBRJ19Vrj55
59Wz7zx14fQz544dbPvz4aebVw/R6TD3xd5+x5ibbw4eNNjLfcCcsMhIT6/w
0b6hYwOmjZ880MVNicaYjNwfNBr/yRGO709SixMTEykMSUlJCxcuBGKw0kuW
LOH+FzL4yYNAkKWvvvqKpr6xsZGxGqgwnvLsHCqgGpxb8G6wKoNaVFBcW7ag
MitftJtEp011y5WX2q655uomhjL6hM5uU6JOlq5dKqUIqtoh7JeE7Qt8rOc/
enTTCp9BHsN0uvuc+t6m0/kPufU+94FxoeFR3n4RXv7BY/yig8PvGjZC0UHF
77B3f3586pqw1P19BqaUfT3VF0WhPInBzRoK0qxZs0R3xJgbr7RUAIrOlVD1
UTl4KboibJkZ8yqKSipyC7tDeN2TW3f4RWKl+VgdXbWhk3Zj22VhNwnzFUc7
sLrSeeHTFx97aMvi2kc3bzi4fetD69buWNoY4+vvf9fIuwYOuWvQ0OEDhoy5
696JEVGKC8pNZ7PBYe/V/iAszLRp03hESrLJDBiXc6Ky2dd9FgJgogLkSh6Z
hq8FKeJyktVQnzEQcG00dVaWY34tqS2rNLRcoZYRKDWU14UVdVDKmENo1oNC
3WfHOhqfTr0Cms0oDFeUb6tRiSYqAcXOFw4ceGh7857tu/bdv+exPXv37H7w
0BMHiBVQsiih+97upQIoChKXfgy5cM8LWmlUE9UThchD4+CL1tfXy+1pOrHA
ymAwoB/YNGKlHJ4xtINro6EDzNowralAdZos1mthTwUr1fgqH2v3zy6siA+s
m8UEE62cUrAqS0wHRsRsVEBzmDrbWxQ3Hw9QaLdf0zZpBBWc7eynN0B9+eWX
dEQbGhp4AparFYaR5Y48MviJQsyGPOQA3CCKsEtsJdT46uLFi9G2qampe7tf
2e11MLziULgw6Q2YjqRQGbqxklZdYsXmKoMW8qj43Q7l0zVjAhabSTH6nW1m
JUhv7TTqlcgG3mOymTo6FWsHXM0WiZXVYuyl6y5DwV30qQooTzLIayk9Cnm0
Rh5Uk0kem4GItrTAmlkNxqs2a6eiJnY7Se2BlQKEo8tboLx1H+G6hhWeW+zC
aIEBVKKm3bMmymD7LDRuVruliwtHt2g5xNWWVpup0w5HjnLVC6yk5BATHozX
3teQisaf2mMMKJGXI3oczeq+NAS5sjgoGA67Sd+hxcrUbdi7kFGxsmlLHBIu
JWaBQpNN2RKzqdJl1BtUWcNr8LEYLMYuiwfILDa7GjdW3q92olh1m1WdEG/c
hMlTr28H0Z0Go+pidgkRPpfb26RFUcIdas5is+LThbiyLMREauFFBrJu7FSe
QkLVYVLiY2aryaH6adqjd13HdWAZlWNsSolCwH9I0gqeZEoqvlaSZaI6M3go
NEdepZpz+tCWwCCwGppQR4jz91+NuUESNx+F5roTk7zHpGUBokLrR+dN3lag
s0ckqfXnzp2TUPBwo8RfCwvPLQvNIdJ/I6u9TrxDIaPNxI0gkAsg0ONQq1DX
WXKTiDf7KD89ZEMuOiSqMgNYtLZXfMfdwxsq0ZuF2y+PRsiLCRA5FHIRyqgs
KwBD+DCQE3gjXEpIXUNvaEgvhUcxW1paeJ4fvgrQlmeSscJFCZexBE0eyb5h
E/wxKhQQSEtL4+FA+q4Y+tbWVnkrgZvXvPQEX443BAEIAz4AQYaPhOYY/PLl
y9EhnspDKUKNrUlYtDu8Pc4i3mgJXMsTpHT+hWqOpHkBRLx+ggW7dO2kDgo1
ZETGZTANeDI2Syv0xRdfsBywoAQNCZo8lI5uea/wBk8MmXLtw9ANrDpvD4nu
KxVCnb+4iUYZk4tTobkCkJWVxUIIJENtvKdMdYMsyVkVT2EnMTSQSXnpTN6g
vGGTJFVoDrwxLkGpiI+PJwJSrYAq8tJJZlhDdG+jUN04BABNFgrpU5nNkDop
lpIAeRb9hk1cRWKmk/d0YKPkGRsUUjHBJgqhbiwvUZNQl6swaBRLAChvPcjY
I6pJaZGneqQO8hysVMYb3Gcg2ViY19TUyFvY3DBiHrpDAeM8iG8gQ2Hg4Teh
uagFdStWk+i+aCbUnUrUZHO8Qm4BQJHl3Cq6r9vc4IkeJlmQvAhVKeRAK0FU
zX0iqU1Cc4sKnbAr6ckzybsz/Hn9vSTpx8pZ4IZN5EtCxL8mIUuIgOhmmbcw
rvcb5V/D0PbJhpxGRfcfbRAqPjxeThsl/at/J5c/TZI3KbSRis8++4yFXL+I
b/sTE7xAR2ClBEpg5RUtoRFXXq/TdiKH5gafBGXiOQft3/RgkvIj187aO4b0
H1AiYSEgUpAAr/aqqbz1z4WzNi73HyFUPRKx4nQmcbt+elL2YTVX9vinV5ih
lOJbymGPbWVtsEKG1ySGvSH+/wEimPvO
       "], {{0, 0}, {100, 62}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 62}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.43075018208302984`, 0.}, {6.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6579999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 
               41.946366950473355`}, {-31.51274612976858, 
               45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                14.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{43.99962099118726, 
               68.10769380047472}, {-21.894119194652866`, 
               45.936269351157115`}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{70.16094784118862, 94.26902065047608}, {
               40.62695588359926, 45.936269351157115`}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.32227469118997, 
               120.43034750047745`}, {-36.32205959732644, 
               45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{122.48360154119135`, 
               146.59167435047883`}, {-45.94068653244215, 
               45.936269351157115`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.64492839119274`, 
               172.75300120048018`}, {-50.75000000000001, 
               45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.43075018208302984`, 0.}, {6.5716107793153675`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{6.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {6.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.43075018208302984`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.4107501820830298, 0.}, {7.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 
               38.52609851455991}, {-31.512746129768573`, 45.93626935115712}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{40.20944458883927, 
               60.89724896221329}, {-17.084805727095002`, 45.93626935115712}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.580595036492646`, 83.26839940986667}, {
               40.626955883599265`, 45.93626935115712}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{84.95174548414602, 105.63954985752005`}, {
               40.626955883599265`, 45.93626935115712}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 17.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{107.3228959317994, 
               128.01070030517343`}, {-36.32205959732643, 45.93626935115712}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{129.69404637945277`, 
               150.3818507528268}, {-45.94068653244214, 45.93626935115712}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{152.06519682710615`, 
               172.75300120048018`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.4107501820830298, 0.}, {7.592010779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{7.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {7.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.4107501820830298, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
heCVGJTg/iVxhv8D2PhIfA==
       "], {{0, 0}, {100, 59}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 59}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               31.069708750998913`}, {-12.275492259537145`, 
               45.936269351157115`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{32.00662338613401, 45.23803799594704}, {
               35.81764241604141, 45.936269351157115`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{46.174952631082135`, 
               59.406367240895165`}, {-36.32205959732642, 
               45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{60.34328187603026, 
               73.5746964858433}, {-50.74999999999999, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{74.51161112097839, 
               87.74302573079143}, {-31.512746129768566`, 
               45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.67994036592651, 101.91135497573956`}, {
               21.389702013367838`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 14.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{102.84826961087464`, 
               116.07968422068768`}, {-21.894119194652852`, 
               45.936269351157115`}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.01659885582276`, 
               130.2480134656358}, {-2.656865324421439, 45.936269351157115`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 2.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{131.18492810077092`, 144.41634271058396`}, {
               35.81764241604141, 45.936269351157115`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 11.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{145.35325734571904`, 
               158.5846719555321}, {-7.466178791979289, 45.936269351157115`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{159.52158659066717`, 172.7530012004802}, {
               26.199015480925695`, 45.936269351157115`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5507086830879317, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
                0.}]}], 
             LineBox[{{11.449291316912069`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               31.069708750998913`}, {-12.275492259537145`, 
               45.936269351157115`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{32.00662338613401, 45.23803799594704}, {
               35.81764241604141, 45.936269351157115`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{46.174952631082135`, 
               59.406367240895165`}, {-36.32205959732642, 
               45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{60.34328187603026, 
               73.5746964858433}, {-50.74999999999999, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{74.51161112097839, 
               87.74302573079143}, {-31.512746129768566`, 
               45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.67994036592651, 101.91135497573956`}, {
               21.389702013367838`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{102.84826961087464`, 
               116.07968422068768`}, {-26.70343266221071, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.01659885582276`, 
               130.2480134656358}, {-2.656865324421439, 45.936269351157115`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 2.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{131.18492810077092`, 144.41634271058396`}, {
               35.81764241604141, 45.936269351157115`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 11.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{145.35325734571904`, 
               158.5846719555321}, {-7.466178791979289, 45.936269351157115`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{159.52158659066717`, 172.7530012004802}, {
               21.389702013367838`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5507086830879317, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
                0.}]}], 
             LineBox[{{11.449291316912069`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
eHxPSc8fLp94/+Zrn0yfeevyqx+O/W7tgTPv3NCf+/z1y4GR9yfzCzA7th15
/e3rL79/beTDL85+9uWa7NzNeaWXZuYGX/ryTWAh3rq+LbNo55Fjb301/toX
N0+++dmZj/+0A7PNaOWJvbi+lQ7OHEJ2t0UQxYkiOCC2pRGoKFb3n7LiR2tY
rkpNtKn/HokZK+lyFepCzN64SHm7lRasMgJRYUczXU3KBQbXA+9Z6JRYWnrm
aMTZDPEdGNfRqIsymd56yTwSKAeTn1Imy5Z8Qj45x5Ta0RnCVdJxqiouVjmM
xwiY6nrKO184z71rfvUt75tvx957f+G/PbJT/cmfNNfe+oNr9PTnH1345NKv
nt7x7ifRl/8YfPvzpTc+Tb577Xbav+19+UPPexejAO/HX8T++J7/Jz9Pf/mt
yB8/+frDqysX3pnPOthQmNP6/jvxzy59++bH4dPvTB6qbtqWC3vpbctrf/J8
dDn67if29CP1O7LrTr0x8+qffK9/aHv90tXnS1cBKUidqtXeIxItR+kRqCCK
AaoABBUoyH9hhWQl0bw48q8WL1nKc5f3x7n0MZTyFoITLFE5GoXTzWxPi3KO
LrU2G7zd8lAn203Ux1hSW5fWxjYEaPo7TexQnT7CZk00ScONwjBa4EApZttP
Wox53N3p0t9l6B/vdbKPh4X8AJ430XQMX1RTh//shuO9LxyXrs5/cTH51juz
T2zetbVh/y8qfvlI8a+2YbauKVr70+cfvfDu1KdfLr30xuxbn3hf+dPso2sy
P7hkf+uD0df/+NUnn9rfeGN8zYtlr7/tf+fj5eFXI3++uLJ7JzQvk/jndxff
f//uH95L/OHjwMESwqasstc/nfnTNdcbn914/ZPLuw4XHa1qef/ThQ8+u/vB
Z4kLH1/fVLfbaJYY4mT5Eo4LRvZlTIpJFCmJQiTROlGs5j9lpYiWgxG8x8ve
LnhaHIGcX6FxryNKB/ZtVb2wXvKUytLd62VpQjSRs3Ob4Nn94nUZ/A3cq8Se
OYpxkbya+ki2cfPh4XV8B3Ygye7zcvIEu4HS28H9nc7TqTKTeiN04x282o3F
MKtgcMxrb3/5/qfmLy9HP/zQcemK47m9Lw5aDXov5/yiYcgpH57RrC/d8PE1
5+jYN5evL168mfjoK9dPf73qk0szF6+Yb95wXfrSMno99D/+x4tXR5ff/Sz5
8ei3n928W17dlZ0Jn5laeeONwLt/Tk44V17YdXRvaeW7U1ffmvjog9mPPzR/
tiFr/768ms8vLf/hrdiXV+7++YZnXfnOIYdB7GoCCoHsL6NHax7kGhSAksRq
ACsw6LMTSHYCDQbH71kpfUiFHWty0DNkqxQhNN8GyRFvllylSz2UwWXhAeFz
QFeLzYwdknWn51UGK/2MT5kv3y4Ya9/Kfwq4APFso9zRtZn3OHgnnbd6yCE2
TjOMDl62dtNAmC+yITn+fIMflY/Y1dHajSXQJ2eX33/fef1a7PNLE+k1+0DR
EDpwUkeDcAKnnSTva9j5xZTzD29Z3v+z692PLDPO5Z/+2/NfXLFd+cr2+SdT
V760XfzC9vNfrP7osnvMe/+dm/7Tf/pqU/rho6X1f/5s6ouvfJOWb9/+zLP2
YMHeuvznj/12V8OTz5b/88baJ3fXHNiRV/Dm+9NT5pXPvrgFSsH22kPqayJd
mMLwVwsXEYx49QOBBAGgJLEqMPQLEnX/b1YGX2evn95n5WaK12iDTfpQ517S
+nP+YZWXIXG2ZAqeO+mR9PnUu0Qb1bPd/Q46sHiHuVv10+Ic5W7pdJPR3613
M7LVOwbc8mzxll4rbcjN01kEewTrAEMN0O1LNVoXksCohtfikSjWF5fjly/N
37w5f+WmdVvpVq2dLosSjfMdck/zYJj/VPmjH1ybnDav3By/dWNi/k8f255b
lfnlRc+Nq6GZ8YWrF31XrnifXrXng+szH8yYX5u4+kXIkV1TnlVUMG5zvPfJ
9YvXYpenF9Mr6s9cf3XYKtRMogecLUMWjuljYwEG8cVN76efR766fO+riYWd
VVlDs0apqxUQYCch/5usNDbKy/NG1XXWdvLzp5aEUmvrIfruYUuv2snQBymH
BM/2zdK1Vt4+0fp+L63PRjrtFKd3rj3jHNjP2KSxdvX4yXoHew9zXb9dmcEB
Ax8NyEXVNG+/ZIsuROc4oeoFpMrcgOlGEDGsS1eSl6/dHR9fuXp9+dqUb2fN
Pr1X0G2B9N9jayJUpZ3xTM1zX864R8fvX7+5PDZ1/+rNW7/4tz3jY9+M3/x2
/NrXk2NfX7wS+pffPJePQ26pz9yI2rMBvms/9ChIsSlv4PNr9rHZb27Yv15/
pPj0xKsgU3Q+DDBZBlv3icnTe6qPXZmKT4x/Ozm6cm0iubf20LBZr3S3AtkD
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
pt17RLoTeISD7PWDdumQU5nF32CapQx6ePppcb5y34CHpppq3kfbVKY7coD5
TLF8U7HogP6ScGRWm8laq/VQhc5mpbcrp3fDZs6juwVP7+I8c9wn6rfxMnnr
Bh2iIZckW7gRHO+kPZchXZuh/T1jCm5MUCQBogJIiwiO4YU8YIX8IauHEyB/
Z1ZAyYMElPiRqjDREOvYJf33EwnuHv6TyonOs1HVQc5ak5ljnOb1zgoP8TcP
uaTgNE+5UTfbftzHAj49R75tKERVTuEzOJvOR/o1o60jXl6xeN/gmPTUjDSb
t0ZqbTp+h60NdUpsRK2XpHOSMmSr+j3sXisjV7qu38467uLuZTw16OT0uzhG
F3278FFloE0b6eK5MJq5Dm4AxQ7AhXOYfwRWHH+9MokT+OB8F2yv9lHuNNLo
71aaWyuP7+VeJhzgrToVVIDsG3RLcuXbQN6dCkufJfzTyShD52hPF76whfbo
UIxk8rYekq6XXO9445ac8kFZJmP1qwGj/nr3EdlaU4AksmJWU38ycksgn20a
9DN20P990MU0TJOKVFtEFwl9FkZNX7pqtFU32TngZR4d3ChxN4o9DWw7UhFv
4ocwIAf5CdQ/Qg4C1SeMIPq/JpFnyjL7nx5YpCtdLacW+OvIvxgMc0fm5NuZ
j29nP5Gr2ySb7hgM87k3UedvizdzfppjehpQPaB5mjddp3JhTs7x13T9bJ/4
1/g/ZGomW01mcoFy/U7qrw4rn0ttefJTd9AfqRncncF+esjKMI527Wp/FNaX
UShYr7veedohOKbYnM35fabgGcZNqDbeDuwtKFagtgsiKY/DCNb/I9R2IBi4
oXog0YHBAZpB4sHJvY1CCxZoBp2PJJ4l6nzdZ+/IuFNYgZmgD5LOfy2SOrBy
N4YzW68JNRsSHRI3fPBWp8iBkTlxGh9RakEBn97j7VZMNRyUPyG1YIYWqMwb
NQZvm8HdLp8knAyxjrtpZyP8TMFTmslmcKCaajQ5u3pcXcNxpinRpU60KaKN
qf9DIPpdUP2DaAbZIloyj+y0FauWiMp5YgqXD+jPBrEba5ojqcMtYi9e6MZy
7QhtvE0ZJjJmapShBokX03urE9h2mq08lb9emCKG6bnd2j1RqggQ9bEWY7RN
62/a3/MYw12ZWoVJ+QIcsDNg2AXGhGmvlobRz7DTNAuNxtstFHup9k4j8Kp0
T2VKhTrqhQEkcBBAiwKLJJpHA1vxf12LpvzCPJwTqxMtIEGvGJ4a9WITzwvT
zDcBAc/3IGRRHDgdXKGyvRDtchPdVWVYbpVFsCBBlPON4ji059sWSbyB7Ydx
w1XKWyhZgqhdaAcotIkGqR9Hs9YYV9roiXJyqIQzX9/pLlbeJzDDNeDpiOcQ
yrupY2Y0dU1noIizWMNK1gqiMOBxpHGcJIEBzlo4jwB8gCX8v+5xUt+7iOjy
HOtfIdGDVcDsgJQURBDA1UoTGGBs22aOAu9M85YBb8sIVXDj9SBhxVEscCuc
IIriKeTEarrdUMlSM2++muTJ58VwisU2UAO5gRqKrarnPpnurqV5qvV320Wx
1BwLgCkMoNkuKEix5rECzVKLIIKie2tSG0cXUZKl1LQ2wAW8NjDyoD/ge+nB
SmDw/xG8s/wujhIup4erADTQN9DUyw2piZFArWweBQIAIFLexdJCpak/8EnW
MAM1pq9JFAdMfbdTvARC5ajqazI9jOIuVnEWKjgxLCuMBb8lWYBJEniOHy2N
NwjDWJ4XJY008D0YkR8PDKY+2SnwYnXznbIoURzFy5ONQJyzgzDxAo4XhnCC
ddIFFN1XwY7Wym9jqcEywcLfsBI9YCUNY/4Dq/8Hxf1gdw==
       "], {{0, 0}, {100, 63}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 63}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 35.971457463440785`}, {
               11.771075078252132`, 45.93626935115712}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.37851467504866, 55.511677997303565`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{56.91873520891144, 
               75.05189853116634}, {-7.466178791979296, 45.93626935115712}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.45895574277422, 
               94.59211906502911}, {-36.32205959732643, 45.93626935115712}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 4.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.99917627663699, 114.13233959889189`}, {
               26.1990154809257, 45.93626935115712}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{115.53939681049977`, 
               133.67256013275465`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{135.07961734436253`, 153.21278066661742`}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{154.6198378782253, 
               172.75300120048018`}, {-17.084805727095002`, 
               45.93626935115712}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{8.451201747997086, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.39075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 35.971457463440785`}, {
               11.771075078252132`, 45.93626935115712}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                2.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{37.37851467504866, 55.511677997303565`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{56.91873520891144, 
               75.05189853116634}, {-7.466178791979296, 45.93626935115712}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.45895574277422, 
               94.59211906502911}, {-36.32205959732643, 45.93626935115712}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.99917627663699, 114.13233959889189`}, {
               21.38970201336784, 45.93626935115712}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{115.53939681049977`, 
               133.67256013275465`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{135.07961734436253`, 153.21278066661742`}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{154.6198378782253, 
               172.75300120048018`}, {-17.084805727095002`, 
               45.93626935115712}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{8.451201747997086, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.39075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
R9iZUXYGwstDe/mgx0zxi3HbklgvC7UjQG0FJw5h/DyoIzjgCfOxot2DmDsS
8PT/ZQUNzpP5QbPCrA0muNiwLT4UfK+AEO0VgEAFkZm+xEPd7MPsyHH/qQ1b
7ole6k72cOAzXcnronS/JmaFB1oobEsO3ZTgv9LHOQXB+1ZeSZSbG+7nxG4J
oZu8A/Y+qJ+LcXEJAQnSzgaxhNjtJbH3ZDEu5u6cogfaXQ4TnNj57bmdPzSB
E050cXDuYJaAejgwOzPZIyH5NPnryvxFaanXBJ3uTfbKCX55wjKz9m8jZLus
YF2VMSem+ixZDnX8ihCxKoyaY2Zt6al+Y+JtHshXqHuquFVW5j1d3I4U+6U6
+mZ3lluyN4UVvSkCpgJzVwrzfuPVH2Szf0q++lezwnt5IK5A84lzcWArDIJD
SltREy8w903lPWpL3fdacfq8iGhXEzcUaVcYvxpKjjhFKzzLDTPn9N22tSya
fz2ZTXYZCLeEuRfYvx5NDz3bipphPT+VQ7rORTvE0evcp96iZdzmpq2LE9Z5
KLcA5H+QlCI97L3JwHuOImirvnaq/0Rr+s8VuKBoNxtlZwFPhfVL4Guc9A0Z
5YoAcbKMcoHfvD5ScEn81GQu1W4qc9ses6S0LVpIb/cRX20NE6U0fyRquKgM
OUrJmZaWLekHbllCrcTEOVGuS3/Qktl0U03yGnFO+S9OZObc4uXa5UlrQqxH
AnVxY/y86ABvd93ZrqHanQaJBD1LUD9cVnu4YHYGblOSuCWHO4TZTk3xeV6U
iVh9Xd2wYG1bGMr5lFMwrytY0MBfra0+L6VP27jz41GGvPZZa+W86Re2jKJl
c9k1peiqFW6jJNjViVvGp62ZjdOalBlhyrL810ezKfMS0HJTVgRJfgXCL4Jt
CmI2+THBlZW7S6t2QaH8g0BBXD9UVqAVgL4v2slA+8QYvwzqFOYFTNXXFLG2
/EMjBYcmqI+JEtPe6c+bVadcElTO6MNsBSGabOR4aZgpr/yysuCG8tmXyjKm
ZbXz5t4PZEgrFbOuRHt04eOFA/NDSZe4BR7LE0dyaLdkeUtS7Bwb55ECVtE+
fpiP9TWrXVC+B6zAxg+ZVey24LCTjtgUo7bkEa7gGj3aJRFIR6XX1QWXZVXX
daHHy/KWDdnz6oKr8upbxtJbWtplaYgxp3vWUjdnfHyMmDQroywZ+XPBYMPN
SkkbZqyxkH5GA3amLqsen8wiXecX2jVJSwK8T44MiEOdzJgdwT+wivcNAv3A
WQG3cNg1CN8WIe7IQt38RI+qaEYW/0pN+by+2XOUdFH8yxFixpIWd1MY9kYt
8ZKQdltTuqANGye33jJkfNj/5BQ55lxf7oy88M0ewslayrol7ZIwe7QKryKT
rkjJG6bwP4CKW0xaVyQsgSJdgdqUHHYxoreDrL7JV8Flwl+zQv2AWcVucgEr
6B1R7H15iAdUMRLKqib7Cy7EmAjRJUS805w4zU9aVxL9lpRp3v6Xac9OEkNP
UUlfcPJviJrvHn38RF7kO437R3NTzYUJJjLEnFwTmHyejWF/ATI88eBJavpl
FnldnrYqQq9wcVtK5JYkzMmAbgmAldpdB8qJ9wJWLMyDVdWsHyyroDZ54c6B
yG0e9EtpOKDnFuY4NXkrysrNkZKtYdxtIWKRF7ciyNwxJC8KcpYk5CVZwbKc
tCxLXxLhbwvT1xVUt7HNPzY4Z35KjC7xWIhLisjxgs5r2oppZd5Ncd6KPMcl
w68LQW2YsC0HhgGwAmYVvuujgq7es6cgsd0JyT9QVsG15KCycNBBso26K4Jt
C5FeYZJbmm6Xx18bIKxJopYY2LtquIuXuqPArjAxywzY0iDaJcB7xKkBecwS
I+tv1rAlsJOduSz75encLK8uz2eEGBMK5uXoGU72jjnZJU1yB8tYtF+I3BJF
elkRLlB4Btdx7y2T3/vlgeD0Wi/nhxxUe1403sUCrMJ3eHHbIpRfgHDx0Q5+
nl+dsMKJ8QuS/4/t6VvNMAed+JUSttyLuy8Hrjv5S2X4Ui8oGzFfKoLz0r08
hEOAXOHEL3PwqyKy35DhVqFcssMrg8jgUgUOOCxyt/ABrGIAkE3BHihQwgMB
XJiHvun8rxY4Q7ydlezlxmxxDvsZoF6L9wlifFxQCCNudpP/3fCsvee5wAD2
bzJUgBln78n8UopzsxJ9/Ji1Pvw9+aGlrvT/YYjeGAwudXEJC/7Dil/nR1/v
zr5rCJ3pTtrWJt/XAJ6gZA7Wm9vcCB8j+BsLW8I40OiCP33wzTAIf+9nGR5y
bu2/mBUHvzKYvimE7/BDvPQ4FxtcWeCrQWNJc/BTPMJ93v6w/xLC7/Jgrt6k
u3z4WleGnxe/2pf2lTLKMZD074rwlW7s7vopjAvsZ6a7pWluKdIpxO2oMF4p
0h0Mp+hNNkAUHmCGeumxd4L1YKyDid1llezYG27aZRX8MYqHwvV/AYYHbZc=

       "], {{0, 0}, {100, 59}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 59}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
               21.38970201336784, 45.93626935115712}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.16753018225064, 93.8285943049222}, {-50.75,
                45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.48241399211994, 
               126.14347811479149`}, {-41.131373064884286`, 
               45.93626935115712}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.79729780198923`, 
               158.45836192466078`}, {-12.275492259537145`, 
               45.93626935115712}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{4.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
               21.38970201336784, 45.93626935115712}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.16753018225064, 93.8285943049222}, {-50.75,
                45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.48241399211994, 
               126.14347811479149`}, {-41.131373064884286`, 
               45.93626935115712}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.79729780198923`, 
               158.45836192466078`}, {-7.466178791979296, 45.93626935115712}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{4.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.7397223737253265`*^9, 3.739852858321954*^9, 3.740063986361311*^9, 
   3.7400641377272625`*^9, 3.740064177870313*^9, 3.740078509761235*^9, 
   3.7400797756098614`*^9, 3.740088476501647*^9, {3.740094475100935*^9, 
   3.740094489905936*^9}},
 CellLabel->
  "Out[171]=",ExpressionUUID->"2ff8e5e3-0dcf-4326-9976-39b4ddfa14f8"]
}, Open  ]],

Cell["variable length images", "Text",
 CellChangeTimes->{{3.739722799260871*^9, 
  3.739722804453474*^9}},ExpressionUUID->"2cb57278-3539-4a65-926b-\
77f4f3d723a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNetTrained", "[", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
l44O6uylo4MpoIOzYC8dHdTZS0cHdfbS0cEU0MFZsJeODurspaODOnvp6GAK
4iftuqcCPeylo4M6e+nooM5eOjoIiOylo4M6e+nooM5eOjoIiOylo4M6e+no
oM5eOjoIiOylo4M6e+nooM5eOjoIiOylo4M6e+nooM5eOjoIiOylo4M6e+no
oM5eOjoIiOylo4M6e+nooM5eOjqIa7j7r59TvoybKXvp6KDOXjo6qLOXjg4m
6HA47Ha7eH273cZPmshvmQV76eigzl46Oiiyl44O6uylm3sHV6vV/f19uBLa
F081c5+Z0Xm27aWjgzp76eigyF46Oqizl27WHQxDv/hZhOF6aF+4HoaEMYgz
+twle+nooM5eOjoospeODurspZt1B4vnGm27nj576eigzl46Oiiyl44O6uyl
u40OHg4HOkgH6eC4mbKXjg7q7KWjg6nJe7darYrrQukgHaSDOnvp6KDOXjo6
mJp8+2D+IfVv5Y2Gs2AvHR3U2UtHB0X20tFBnb10s+7gW1a9+/v7MBLMwxci
GIaH3qkaxF46Oqizl44Oiuylo4M6e+nm3sG37IiJ4lES2+32cDgYp2coe+no
oM5eOjoospeODurspZtdB/eZ4vU23unU2UtHB3X20tFBkb10dFBnL93sOviY
KV5v451Onb10dFBnLx0dFNlLRwd19tLNroPxzGnF622806mzl44O6uylo4Mi
e+nooM5eutl18PbYS0cHdfbS0UGRvXR0UGcv3a12kO2DdJAOiuylo4M6e+no
YGrW63Vj77bbLdsH6SAdFNlLRwd19tLRwdTEIwdD9fJbQhbjcfR0kA7SQZG9
dHRQZy8dHUzNbrcLvQvV22w2h8MhDgPjyWRYL0oH6aDIXjo6qLOXjg4mKB8A
5qcYLQ4PZ8FeOjqos5eODorspaODOnvp5t7Bt8In8AZ/+tOf5nUymTc6SAfp
IB2U2UtHB1MTkrfZbOIH0IcrcUgY/g1ldE/aAPbS0UGdvXR0UGQvHR3U2Us3
6w5WwlfJonvqVPbS0UGdvXR0UGQvHR3U2Us36w7G3lVWhIYmxj66pmooe+no
oM5eOjoospeODurspZt1B9vWf8aB4QdPzGj20tFBnb10dFBkLx0d1NlLN+sO
ttnv9zPaa9ReOjqos5eODorspaODOnvpbqyDYYQYRoLxKEL3tKjspaODOnvp
6KDIXjo6qLOX7jY6GA+ij59NH48iZL0oHaSDInvp6KDOXjo6mKD9fp8fMRH3
HQ1BnNHJZN7oIB2kg3RQZi8dHUxHPgCMq0Djv8HsDqJ/o4N0kA7SQZm9dHQw
BcUB4P39fT4AjB10T90Y9tLRQZ29dHRQZC8dHdTZSze7Dsah33fffRdquNvt
8gEgHaSDdHDcTNlLRwd19tLRwRTkHVyv13SQDtJBOtjIXjo6qLOXbnYdjMcG
rlareP60cCUODOkgHaSD42bKXjo6qLOXjg6mIwwDi4cKxsMlgnntKRrZS0cH
dfbS0UGRvXR0UGcv3Uw7mIvDw8qRg3zeBB2kgzp76eigzl46OpiyyvAwlNE9
RSp76eigzl46Oiiyl44O6uylu5kOHjLF4eEUj/ry9Kns6aXpzofn1/G/w146
Oqizl44Oiuylo4M6e+lupoOrTP7lNKtGX58fSuUreI/gKX/F68PZS0cHdfbS
0UGRvXR0UGcv3c108Cr7i4bANfftPZDFe95L2BLMXvbS0UGdvXR0UGQvHR3U
2UtHBzu01u09g6V7ajcMYC8dHdTZS0cHRfbS0UGdvXR0sF026Ht6eqhvBawO
By8aENpLRwd19tLRQZG9dHRQZy8dHWyX7QeT5y4b8h2/qm8QvGATob10dFBn
Lx0dFNlLRwd19tLdTAe3mav+ivPKz4Ed/KWTvXTdl+6Jb2MvXfdl3EwF9tJ1
X8bNlL103ZdxM2UvXfdl3EwF9tJ1X8bNlL103Zfuib9qdNo4zxiTx471on3s
pWM8qLOXjvGgzl46xoMpeHx8vPa4r1Wpg+wn08VeOjqos5eODurspaODKYjn
T1uv11cfGHbFjuMmethLRwd19tLRQZ29dHQwBbvdLkQwnkr0ygPDrHt53rK9
Zs6t4zj6TvbS0UGdvXR0UGcvHR1MRyhgPJXolQeGMYUN51Qr38d51arspaOD
Onvp6KDOXjo6mJSQv3ge0Tgw3Ne4J1BlLx0d1NlLRwdF9tLRQZ29dPPtYLTb
7b799tu4mrTCPWkqe+nooM5eOjoospeODurspZt1B+O2wjgkXNe4p05lLx0d
1NlLRwdF9tLRQZ29dDPt4OFw2Gw2H7fv6DXZS0cHdfbS0UGRvXR0UGcv3Rw7
GIaBq9XqQ3YZ/Qj20tFBnb10dFBkLx0d1NlLN7sO3swwMGcvHR3U2UtHB0X2
0tFBnb10s+vgzQwDc/bS0UGdvXR0UGQvHR3U2Us3uw7ezDAwZy8dHdTZS0cH
RfbS0UGdvXSz6+DtsZeODurspaODInvp6KDOXjo6aGcvHR3U2UtHB0X20tFB
nb10dNDOXjo6qLOXjg6K7KWjgzp76eignb10dFBnLx0dFNlLRwd19tLRQTt7
6eigzl46Oiiyl44O6uylo4N29tLRQZ29dHRQZC8dHdTZS0cH7eylo4M6e+no
oMheOjqos5eODtrZS0cHdfbS0UGRvXR0UGcvHR20s5eODurspaODInvp6KDO
Xjo6aGcvHR3U2UtHB0X20tFBnb10dNDOXjo6qLOXjg6K7KWjgzp76eignb10
dFBnLx0dFNlLRwd19tLRQTt76eigzl46Oiiyl44O6uylo4N29tLRQZ29dHRQ
ZC8dHdTZS0cH7eylo4M6e+nooMheOjqos5eODtrZS0cHdfbS0UGRvXR0UGcv
HR20s5eODurspaODInvp6KDOXjo6aGcvHR3U2UtHB0X20tFBnb10dNDOXjo6
qLOXjg6K7KWjgzp76eignb10dFBnLx0dFNlLRwd19tLRQTt76eigzl46Oiiy
l44O6uylo4N29tLRQZ29dHRQZC8dHdTZS0cH7eylo4M6e+nooMheOjqos5eO
DtrZS0cHdfbS0UGRvXR0UGcvHR20s5eODurspaODInvp6KDOXjo6aGcvHR3U
2UtHB0X20tFBnb10dNDOXjo6qLOXjg6K7KWjgzp76eignb10dFBnLx0dFNlL
Rwd19tLRQTt76eigzl46Oiiyl44O6uylo4N29tLRQZ29dHRQZC8dHdTZS0cH
7eylo4M6e+nooMheOjqos5eODtrZS0cHdfbS0UGRvXR0UGcvHR20s5eODurs
paODInvp6KDOXjo6aGcvHR3U2UtHB0X20tFBnb10dNDOXjo6qLOXjg6K7KWj
gzp76eignb10dFBnLx0dFNlLRwd19tLRQTt76eigzl46Oiiyl44O6uylo4N2
9tLRQZ29dHRQZC8dHdTZS0cH7eylo4M6e+nooMheOjqos5eODtrZS0cHdfbS
0UGRvXR0UGcvHR0c7+Xp09HD8+v4h7GXjg7q7KWjgyJ76eigzl46OjjSewRP
+SteH85eOjqos5eODorspaODOnvp6OAor88PpfK9l/DpZdxj2UtHB3X20tFB
kb10dFBnLx0dHOM9g6Xu1W4YwF46Oqizl44Oiuylo4M6e+no4BjV4eBFA0J7
6eigzl46Oiiyl44O6uylo4Nj1DcIXrCJ0F46Oqizl44Oiuylo4M6e+no4BgD
O/hLJ3vpui/dE9/GXrruy7iZCuyl676Mmyl76bov42bKXrruy7iZCuyl676M
myl76bov3RP/IclJ0qTrRQEAmJlJ95MBAGBupjxuAgCA+ZnuOHoAAOYoWxc6
wXnVAAAAAAAAAAAAAODsuCWycSvk8b557qx6/uSqmlnOUMMOU3EWy3Mz5iib
+iGrH6r7mbqhHcUKW/37Xo3zmevKTOkT/fr8lNQMjp4R3IDTs9/wtJ/ummU2
im7iCMz6TJz6cfHBpuYOFjRM/nyK0OsmXocl2UuwOEe1G7p+MqGndfyM4CZk
782Hh4YFYbZ0fLiFd+5tLH+qc/H+9dNL5ejSUYsXOvgxbuN1WNB0aLP4fKX1
tF4wI7gJ8b35XF8Shjsenl9K79zimoPCd8cXUWm1QlpvdmnpWrulsLoujdkp
5+r4VfnGyky0z0LpwJyX9Dv40vzSm/as9NfW1cHsTfSUj/ATnoszqevFtd7F
g6JTWv3YOyPdL7PkF4DodXwJ1IYE4bk9LmWPz2n22j19SxxFll/V5Vwm8fo+
Gt7B0iwkMz+lSYxPULmO1ests1C/K435a32m2l9dN9XBwp0Jz0VBfO10LPOr
r9jzN6c1g30z0t/BpBeA6HV6b1ZCeFzK5u/crrOe1lelJ3YquMEdrN6bygqt
wt/1lMHT+tGG+9tmofGuNN62bR1sfXXdVgfP9yU8F2XFUVBt1jpW2ic3g70z
0tPBlBeA6FUqXeNgI7u3/kI4v6mTXxYN7WB9e1kiW9DOk1FtQf5EHG/smIVk
5+5tgv+xJPfaK2rYX7RtYJvwXDQrzFtLAOJ3JNvBk8YZuaEXIRqdlzzlEUN8
FksdbNtBP/mXwdCla/OO/CnM0KlYhTHgW/7kFHPWMQvN/6VJYe4W0cGO8eCc
O3hSWcNYfB1mmz+T7+BJaUZu6EWIRsX35il25XVuHePB89gk6ZfBmA4mNPlF
503ylZ28w/Sen7bOWWA86LKEDhYnvbrCPen1onWdS4TZvgjRqPTejEvZwvJU
3j6Y9MtAWbrW9vxJaPqLTvsV1iY++9+2tIFpftsHByyCEpqZmhvrYMvsnFcd
VVYiJfsW652RwYuLlOYOivJr4Lgao7xnobK/aNIvg6bXeXnbduN8n+egviHc
J05q5a973KhR+49K8yzMbn/RjldX9/OYlhvrYGWZENV2WT7N72m7W+sGbKee
Gel5mSW/AESvynuz8oIo39uyS1XyL4Pm5U/laMjGUVJK2waPmgc8jbd2zcJ5
w80sjh/seHX1PI8JubkOvqtsia7HpLDEKC5dKl3065yRzpdZ8gtAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEje
/wPevLm1
      "], {{0, 400}, {600, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSize->Automatic,
    ImageSizeRaw->{600, 400},
    PlotRange->{{0, 600}, {0, 400}}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<TopDecodings\>\"", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.739722494578232*^9, 3.7397225162265964`*^9}, {
  3.739722549542082*^9, 3.73972256903347*^9}, {3.739722609627473*^9, 
  3.739722647910715*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"9c8c5ca1-40d4-4869-91bc-ff28942d37bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "18", ",", "20", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "19", ",", "20", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "18", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "18", ",", "20", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "20", ",", "16"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.739722641596376*^9, 3.739722648825148*^9}, {
  3.7400798033347807`*^9, 3.740079813201128*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"d61bfa88-63d3-47ea-a609-a8a20c3f05e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"BarChart", "[", "#", "]"}], "&"}], ",", "%"}], "]"}]], "Input",
 CellChangeTimes->{{3.739722658106206*^9, 3.7397226931835127`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"82155d8e-91e8-4a5b-9e7c-ab9c12a57afa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
       0.6719999999999999], Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 4.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
             26.1990154809257, 45.93626935115712}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
              18.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{64.16753018225064, 
             93.8285943049222}, {-41.131373064884286`, 45.93626935115712}}],
           StatusArea[#, 18]& ,
           TagBoxNote->"18"],
          StyleBox["18", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[18, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
              20.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{96.48241399211994, 
             126.14347811479149`}, {-50.75, 45.93626935115712}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 16.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{128.79729780198923`, 
             158.45836192466078`}, {-31.512746129768573`, 45.93626935115712}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.5487982520029133, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], LineBox[{{4.451201747997087, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
              0.}]}], {{}, {}, {}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.0195484340859432, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
       0.6719999999999999], Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 4.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
             26.1990154809257, 45.93626935115712}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
              19.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{64.16753018225064, 
             93.8285943049222}, {-45.94068653244214, 45.93626935115712}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
              20.}, "RoundingRadius" -> 0]},
            ImageSizeCache->{{96.48241399211994, 
             126.14347811479149`}, {-50.75, 45.93626935115712}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 16.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{128.79729780198923`, 
             158.45836192466078`}, {-31.512746129768573`, 45.93626935115712}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.5487982520029133, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], LineBox[{{4.451201747997087, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
              0.}]}], {{}, {}, {}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.0195484340859432, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{-0.4116533139111435, 0.}, {4.35360524399126, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
       0.6789999999999999], Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6789999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 4.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{46.61349721568739, 77.05121849439874}, {
             26.1990154809257, 45.93626935115712}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6789999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
              18.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{79.78903500073233, 
             110.22675627944369`}, {-41.131373064884286`, 45.93626935115712}}],
           StatusArea[#, 18]& ,
           TagBoxNote->"18"],
          StyleBox["18", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[18, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6789999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
              20.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{112.96457278577728`, 
             143.40229406448864`}, {-50.75, 45.93626935115712}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{-0.4116533139111435, 0.}, {4.430862345229425, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.5487982520029133, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], LineBox[{{3.4512017479970867`, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {3.4512017479970867`, 
              0.}]}], {{}, {}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.4116533139111435, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
       0.6719999999999999], Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 3.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
             31.008328948483555`, 45.93626935115712}}],
           StatusArea[#, 3]& ,
           TagBoxNote->"3"],
          StyleBox["3", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[3, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
              18.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{64.16753018225064, 
             93.8285943049222}, {-41.131373064884286`, 45.93626935115712}}],
           StatusArea[#, 18]& ,
           TagBoxNote->"18"],
          StyleBox["18", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[18, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
              20.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{96.48241399211994, 
             126.14347811479149`}, {-50.75, 45.93626935115712}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6719999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 16.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{128.79729780198923`, 
             158.45836192466078`}, {-31.512746129768573`, 45.93626935115712}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.5487982520029133, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], LineBox[{{4.451201747997087, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
              0.}]}], {{}, {}, {}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.0195484340859432, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{-0.4116533139111435, 0.}, {4.35360524399126, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
       0.6789999999999999], Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6789999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 4.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{46.61349721568739, 77.05121849439874}, {
             26.1990154809257, 45.93626935115712}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6789999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
              20.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{79.78903500073233, 
             110.22675627944369`}, {-50.75, 45.93626935115712}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
        0.6789999999999999], Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
              16.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{112.96457278577728`, 
             143.40229406448864`}, {-31.512746129768573`, 45.93626935115712}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{-0.4116533139111435, 0.}, {4.430862345229425, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.5487982520029133, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], LineBox[{{3.4512017479970867`, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {3.4512017479970867`, 
              0.}]}], {{}, {}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.4116533139111435, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.7397226944122334`*^9, 3.7400798222366095`*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"9ef80637-a0f5-4406-8e30-9732a40ed523"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combining the networks", "Section",
 CellChangeTimes->{{3.739886731960357*^9, 
  3.7398867498187747`*^9}},ExpressionUUID->"42f511f4-1745-461c-9169-\
84f343f00f56"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"readGraph", "[", "graph_", "]"}], ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"vgg16NetTrained", "[", "graph", "]"}], "/", "20"}], ")"}]}],
       "&"}], ",", 
     RowBox[{"ocrNetTrained", "[", "graph", "]"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"readGraph", ",", "Listable"}], "]"}]}], "Input",
 CellChangeTimes->{{3.739886756786883*^9, 3.7398868142569075`*^9}, {
  3.739886858332016*^9, 3.739886884575981*^9}, {3.739886994724814*^9, 
  3.7398870453762674`*^9}, {3.7398871274726458`*^9, 3.7398871314074*^9}, {
  3.739887184134061*^9, 3.739887191125452*^9}, {3.7400799972577806`*^9, 
  3.740080051556283*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"71818c6d-1b5f-4fd3-9659-cd5cb8f3aed7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Import", "[", "#", "]"}], ",", 
      RowBox[{"BarChart", "[", 
       RowBox[{"readGraph", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
   RowBox[{"sample", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.73988688783486*^9, 3.7398869248965006`*^9}, 
   3.7398869709632926`*^9, {3.7398870781409335`*^9, 3.7398871015661445`*^9}, {
   3.7398871474551253`*^9, 3.7398871644259815`*^9}, {3.7398872413288517`*^9, 
   3.7398873577666025`*^9}, {3.739887446190372*^9, 3.739887459646597*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"ac55a669-cac2-4080-ad0b-9fa284db6b56"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
emrczXtr63LP+/ETi7xbV97lH3PZkiZ7sWVyeaAgybpZKsziB2acZnqlvfj9
Va2jzzHtfLm86+MlV1x4Qm1N4DcPPZibN3bsSNOf1rk+3PH0+BuGr7i9efvT
vy4aYdp0T/7/rLvTm3U1U6K01MxgpRwGq8ElmJpQKARrQ3SiEz5sgPgVwCGs
gB6VUMgUOBNiululabR1rg+i3ulUoMbeZstfPf7mD222ST8xPdZcuHPlnZWj
Rlx1huneRf4dH71ks92i9exk8d0FPze93DL77d/X3XCm6YMN1q+2Lbz+8pPv
XrbwiTV/KDSPv3mM6c/r/Z/uWHPJOcevnFu9ZdXSwhGmV5eZP3n+Htf0a41Y
cfumcGMl8eW3OngrD1tEbhK5UhTSpPgVfgr3mzJUSLMeufSihGX2zclkpSOB
MK6Y62IRqy2/zZq3LnvmnoYaoLFhsWvbb9oXTb9uxqU/e/LB5nX/ufSmsWcX
TL4wMO3SGaeYNtTngVe3XGTa+VJg5+bWc88yNbUGHnj0vhmzrgWvNr/Y9MWn
6y895/hnlzRvXbU0/0LTS8tsHz6/3H7rdfp6R+Nx6DRWfGox2vbBYUVAgRWQ
V2w9wJPET5I9whNBgULQSZyXgzFvbW1FOQgpTjBSnAEY6tMldCAcxXg0B6uW
BGwrp0x+s7xk0gmmdfOcn6+6u3bkiMnDf/LAbfZ3Xn909PU/e/KB2v9+blnO
6aYNzZa3VraPHmba8WLj7i33XX7ZKUuW3/bYsytmFo6ZNP7Hr65v+eC91VcO
O+nZxcEdTyzPvfC4F+71blv/kHXGKKxx9IDDoVjJ6e2eofAeBETATex9G7e9
RMZ4PJgUliCiJE5ekd3jaijTTO1wWwNF2Q9Mz9oSbJp5xnGrWx3bf3dHw/jL
R5913DO/bX1t4/LrrzrplT/euXvzqqyfm9a3ezb9YdHV55re3Tjvf7c9OuLi
n9YvaHhw9SM3zbhuyqQzX1y74N03V1//q7NWzqn/K8h20Ynr7qt+/4VHS2eM
5RtmqsKxyiyZxTJ6aCJX3ykZt8DSkU8OLBXCBRWnr/WTn3wNm4Rt9zrbAp76
0WO2LF1ypcm0bmnwvRW/9o678sozjn/8/jmbX1l5zRWnvvz8svdf/F3WsJMf
ril/a93Dl5xren390o+3Pn3R1ecHbmta/tSKm3MnjB837LUXH9y+7ZV/G/bP
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
oiYyR6eD/5/T/wFTYe8B
        "], {{0, 57}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{160.33333333333294`, Automatic},
      ImageSizeRaw->{100, 57},
      PlotRange->{{0, 100}, {0, 57}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                24558.90234375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               49.140475976486854`}, {-12.426847522088167`, 
               38.74689437998483}}],
             StatusArea[#, 24558.90234375]& ,
             TagBoxNote->"24558.90234375"],
            StyleBox["24558.90234375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[24558.90234375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                12279.451171875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.902157119532305`, 61.58096019156326}, {
               12.910023428948332`, 38.74689437998483}}],
             StatusArea[#, 12279.451171875]& ,
             TagBoxNote->"12279.451171875"],
            StyleBox["12279.451171875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12279.451171875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                10232.8759765625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.34264133460871, 74.02144440663966}, {
               17.13283525412108, 38.74689437998483}}],
             StatusArea[#, 10232.8759765625]& ,
             TagBoxNote->"10232.8759765625"],
            StyleBox["10232.8759765625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10232.8759765625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                6139.7255859375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{74.78312554968511, 86.46192862171607}, {
               25.57845890446658, 38.74689437998483}}],
             StatusArea[#, 6139.7255859375]& ,
             TagBoxNote->"6139.7255859375"],
            StyleBox["6139.7255859375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6139.7255859375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 
                40931.50390625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{87.22360976476152, 
               98.90241283679246}, {-46.20934212347017, 38.74689437998483}}],
             StatusArea[#, 40931.50390625]& ,
             TagBoxNote->"40931.50390625"],
            StyleBox["40931.50390625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[40931.50390625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 
                38884.9287109375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{99.66409397983792, 
               111.34289705186887`}, {-41.98653029829742, 38.74689437998483}}],
             StatusArea[#, 38884.9287109375]& ,
             TagBoxNote->"38884.9287109375"],
            StyleBox["38884.9287109375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[38884.9287109375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 
                20465.751953125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{112.10457819491432`, 
               123.78338126694527`}, {-3.981223871742671, 38.74689437998483}}],
             StatusArea[#, 20465.751953125]& ,
             TagBoxNote->"20465.751953125"],
            StyleBox["20465.751953125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20465.751953125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 
                12279.451171875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{124.54506240999072`, 136.2238654820217}, {
               12.910023428948332`, 38.74689437998483}}],
             StatusArea[#, 12279.451171875]& ,
             TagBoxNote->"12279.451171875"],
            StyleBox["12279.451171875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12279.451171875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 
                40931.50390625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{136.98554662506714`, 
               148.66434969709812`}, {-46.20934212347017, 38.74689437998483}}],
             StatusArea[#, 40931.50390625]& ,
             TagBoxNote->"40931.50390625"],
            StyleBox["40931.50390625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[40931.50390625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 
                12279.451171875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{149.42603084014354`, 161.1048339121745}, {
               12.910023428948332`, 38.74689437998483}}],
             StatusArea[#, 12279.451171875]& ,
             TagBoxNote->"12279.451171875"],
            StyleBox["12279.451171875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12279.451171875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                24558.90234375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{161.86651505521996`, 
               173.5453181272509}, {-12.426847522088167`, 38.74689437998483}}],
             StatusArea[#, 24558.90234375]& ,
             TagBoxNote->"24558.90234375"],
            StyleBox["24558.90234375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[24558.90234375, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5507086830879317, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
                0.}]}], 
             LineBox[{{11.449291316912069`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
7u5u9A7Zf6oDvQbJyV7h6HErOn1ya/MSlgqYKieeOvz44Etb543/v7vWrX1n
1/b5E/73E6u14eP7e3SquXOqnul/3WjvWbCwcWbpfJ1KLzkQGMzSkcHzkDw4
NMj3J0DGJOwXx4rLnY2zDHyGUxgHX9r7M5N8YS4VT6QLjgdsV/htfenffXDg
EYemnoyqEOcqjRUrmGvSRKgSlFGMfbgERaM9A5RhUti4atWqYDBYvK4Ejx0v
AJBp9MRRYBsNcVVqlJebjLXLfXYWOtOlm/X6vvVnD/+q6lt/t3PV2lO7dlXe
9GfPPug+unF9t1Yxs7Ry78E3tYa2Oybe/ftDL3mNVpaJsPAFlkyXTZ9Zs7Cm
Wa6U4jsWTYBkLEm8ysG1gEN1Zsk0+Aw/tjXNx0BAszBBxKLpKEt+7Fl403v7
H2ypKxMhtxj+rtJwkTZBDclWCz+BtFjYLspQIfkMtHZAAEJnhf2nQrTG3wQX
w9wBqpM3GVxQTi1LnF3rX3B078qzxzaXf/P6Pase+ODJXU03/eWB9c639jzS
YVLeNWPJU7uP+9ruKSuZfXDTnl6TkaU+YIn34UfOmlyxc0u/QmmR/NVsIBTP
SLMSnF2SS8AyFxqnjj+581989TNYNhbh7ulIFJd4jZh62rUfvbDBpqrIpCV/
OJvMx9cS+SkVhQX5+H0UXGI3DoSF8oISZKAgstBQESkDLlooIZ8BFBoZGSF4
6XaqRh4Xf1SSB7VWT7ve6+WzM7lzyzx3Pb/Nd/rlLQu+dcOelT889USf4oZr
nr/PeWLPI36zonSu4qndr9ssbaWTpr646emH/B4WOMKyb6fPBuUV1hcOnJQr
nSnuPaT5DJ/kkCQle5SEi5sZlE0Z/972DZ11JfAREiw1woIRlAPI4Zi17Ib3
D95vU5fn0iEJq4SY4LgiVpn8dNKlBALASYD2YXQDeUh9YK4hPrSMFnyRxClt
0iCmoSZ0E6QCSrTBgPx2+Gl5T1Xq8sxIqsXkAN2HAohxLrhbvvv6gTWE1a6V
P/xw42VYlZUrn9z5skFvr5w155Xd+32Ni9VzrpeX3XRf+8pp3y5/etuRmlq9
FAFJU8dQwBz3JCSsEP0NNU6d8O6ODd1LSqC5URZ/P/phlLAaGDTMgL0aE1aQ
1O/3Ay4cCavOzk4MdpAaUR5AI6yQwSkK7VJCCYZOQEeoogRYUVMEO/Eql8wS
r1RGi7dnaSIJi3ru3s65h7b6zozC6vtuwmrGnMZdz73lcrZVzprV/6vNvTqF
t+GWV/ZusNar5k6pf7bvtWaFQ5KMT1vFwnyfG7okzA0Wd0cbJKw4r4KDGT7X
EI6wEQZfLBrzLrjx3JEf2dTzPzdWpIDQIxic1atXnz59mnxR6BrNORBWyOAU
hdAyskugGZ2KpXNQFEaS9p7lPVU8NcofqDFazR43DEUm+O4y69S3n7+XsHp6
1Q8/2NgnuzGPVYdZcfuU8t0H32hr7WgsX3DoiadW6eTNs77ywe8eX2bxyhaY
D+x5rameszoaGeE2HdqYTUtYcVbBhtXdOeGdnQ9yrNKJdDYTZ5EEC/DBMhKU
fXfcyT33OFSfHyuxORDuE21coWkESjSBUJxhhTnPYu/0kzsuGhoauG3PSTNw
GVYna9Y77Nx/zp4zVf/DWwfWnHl58zyO1Yb3nuRYHbzP/ZaE1YIK+b7+N1TN
6rIpk3731PYfuE2Nd/31mwcebW02zr2j7ulNh+tr8CbZRDiQn5LIIipMSVhB
wsCSaePffvoBjtVQIBrB8BYZCZ3hMXZkqKP8+nO/eXAsWBG1xDQdBXfnzp2j
JUsx74cMTmkbHqGEEtpbSNqHS3DPcDttZYQO5iTXKnYRcRnrXL5cYzK0yJaw
8PuPrag6tqOTsNq+ZsO7m/qaLmElmzhl9v4X3/C43PULZv9+685eTUPDtL96
7/Avlpk8FXc2/Pa5t4xqDzftKbgBORaCNYzkWCIiTU+xXLC2ZPzJXfdzrEIw
9WwoPDCr9DblnDL33Lss0/78o1+vHSOv8mNWIfqurq4WVwVVijlDWJGq0qhH
3hcMl4gX8j5DLr8qYbRbdWa932Zg6Y9X6ia+ubcXPsPcf7ph25oN72zua7zp
Wo7V7kc7TbJZc6r3v/i6Ttsyb9qkI1u2rTbINWV//+6hny41OufcUvnbX/9B
Xqth8QhLhVgCxhCgQeVjeaxYsHr6+BO77++oK1npbNcprPBS5tx967HtW9vm
Te1acN0f969zjgEruEmwNuAVrLTYMwY0ICw88+KpHpyi0GaziXiKRkZyt2jd
E6ZsxYoV5NhzlsKy8jmsrMVhtzvMdmUDS575Z9Pk49s6CastazecfKqvfvy1
B9bnsSqdVbnv4Ct2s2nh9DuObt8JrJQz//bt/se6WiwLp9Qe2nXM3Gy99Ws3
GusrVPPmsUSMJWE3gnyQjWMUCVZNv+G17euA1aI7Zj+3/bBK3lhWcstvHv/Z
ssV3u6b/xcDB9WPBisTEoAaekF8qpsph8AEgzSEjI9a/yKqLeQZW2LiIEfDi
xYs0hwyjJ+GcDQ9fhMrIVHK5rJ5hHIx+9IB56sndy84ee7Ls2zc8tW7DiS19
dcDqPi+w6gKvrojV848s1VsXTlrcv+2wTWVuLJ+586cPrLObsx+9A6KyxEBa
GkNS8XM1s8Yf37HGX3tn1aR5B7Yd0TQp5k+75fDjjy1fPH3sWIEMNKMiohJ4
DjA45PajkOZkxCYxMatAFp6IB7IJkGmfMMCXYlKQKj08dN7usXX6PcuNmuWK
uT8w3HHq2TUDHKvrN31vw5tb+mr/8dpn13tPAiujYtbMqmfyWE0pxmqVxV01
pbp/6yFNddOSWZMObX3YWT3v+3ZNp7qsVb+Y5rIYC8yeeM2/7r9vqXxG1cTy
5596RdegXDj1tiO/fHT54mnA6uP+B8Zo20EY8AQQUcQtQEM0LdYpkBEbKlAT
Nnz58uUooQUI2HlABC6JOjRvE+WTbHw1Sm9qcVp0j63oObnjx1Xjx53Y4r8i
Vj1GxWxgdeC43WyRsNolsGpv1iycuPBI3xFDbUNlyT8d2/Woe/FM45zbBl/Z
0euoy2V4eAhFrJh+3Ym9a/Wzvr749spDm18z1LdU5LG60zn9/5zpxzj4+X1R
8e0GxSmBQID2xZHRpoU/ms2jQlCLNE7sjwLCBCmxi0l71zs6OiRm8umn4cBA
R3dbU03FvTbzyS2P1N40buDZNeeOcqye/N6GN7b21Uwowqq0ev9zrzlMtkUl
dx7dvnu1XqGc+ZU8VrfPf3X/7+1NsuqSrx7ve2Rp01xv+aThYxv9ytJ0NM7n
FcMfLp75/07sXb1Wv2DxbYsPbXrLWKetnHz773/xMLCy3/WXZ/o3jAUrJi2P
Ign3QGyZg2KCHuSLUoZJ42Zvby+OFOnQHDLZrsbGRlY0ZSFtceELmIlUwNPm
6HCZf7a86+Tmh2VfH/fGk95zR5+Y/Z3rN9674fWt+wRWS/XK2aW1+5/7g8Po
WFRScnRb32q9Eli90//IGotz0aQFR3b1G2uqFk+94ciW+wCUrfQbyeMbnTW3
s1Q2FoVcgwumXfPm3ns8i26vubX2xSdPmpcYKydPymM1/ZrT/Q+NBSsxysP+
iM+CKMor9jaZNDgikXJRTRh58EcYeaghRkCoMMZWXCJ7FU8Fo4mhJkXdMp+z
W15//Ofrm7817o97VgisXtu2r3rCtfvv/wyslmtN5bchOHrGUF2hmPWNE8/8
cOmSkp7FE88f/P/rTGUIoRMxyHWhcsbfnNi3srVqUs2tdS9ufNdca6qcPPnI
Lx9eVn2n7a5rTvX/yKaq+NxY0XZxMd9VPKFK5j0iJVY0yUOnYuKLRk8qhEkX
u++kHbM0hxTzeq0mVeMyjfLN7T9dNGHcW7vWnTm2vfS7Nz7+/Qdf3tlX/vXr
dv+g+w97ft5lVM8prTrw7HGXwbGwZPqRHX29Bq1s5oS3+h/3KzVVU+cf2dOv
r6lsmPmdl3b+yLZgsqP89sy/7nEumVx6x8TaqsXKhrLaORNe2NS7VFVeJdkr
Y51+4ZTJh371WPuSu7Uz/v6dF35mVVWNZU7mP5QICpq0Qb54MhZ5UmSygXyK
BrY9l4gGz7nMLXZdc4dFe3DrL2fdcsOhnT95+fmdJTd/7Vf/8tC+TU+U3vzV
rY898PyOJ7ocpsXzKp55+tetZmf53aW/6dtvUzTXzyt9+eC+ZS7vjFunHH6m
36XRTP7GP6LELqtXL5r74asHLPL5ZdPv+M2BfRWzp1WUTnr5wHb9korqmQv3
bupzaAwzbrt5/+ZfWBrLq0u/8+qhp+uq5xOdRkaGhTpQv5NoJJRY6BlLEl8y
UryDhOGAHFFWFCSiQn19veRfXWC5mNPQ4rFqcfQ5jX6HubvN3uWxO03qTrdN
r6zHEWDq5PWtNrPPZtfJlR0Oj1HZ4jXZ2mxOu8bgNJidOpPbZLWqdTat4XvL
7mmorO50ek1qpc+uc1tVekVtm8OwsrPd77Tp5bI2u9Wu1agb61f4fT6H1e8w
mloafA6t3azs7GijxXSEbISGgIh2vIivONnlX4B+PqxGfV9W/OEGjaH0CD51
w5cSUiwVYZlkq9PMsql0bMRh0AYHP0Zep2pi6QSIZ9Wq+TRvNuX3OHRyBUtl
ujxtrQ7XyMCFtb0rlXWNIILLaEEJS+f8bq9eoUKJVaN3WowsG2116R1G1dC5
P7pMeofZwJIpO+IOlRquHcC0GbVo3GXTtjl0sAZmkw4Q0WKK+FKVtKN4DfpP
9QWrsFS0IIIMzDghJvY/AC6JY9wXHRk6l0vGXHYT8tHQ0NIOH7dn0dDynvZE
eCSdCHvsFmknZEqtaHLDdckxeV2DWW/A3U119WatHiU+l0cpk6OkpVlpUGtQ
gqPNZATUjXUVfg/clZRa3uhx2LPxeE9Hu9ROVq9SuWzm6Mhgq9vS0WYLDg9Y
LaZiZMSqMZVQLxfvjv6TYMWKGEW+PU3pNDc304YQupRJJ7lJiMdMRm1wCKNn
2qTTci87l1XIG3DMZhLd7f7BiwPIu10Ok06fTqYAlNPuACBup8tls0dCYX2L
5p4Vvel4QtWs7OnoTCWSFoPR6eAQGfRqhxWhfRrevsNmz6XSTQ2NaAe34652
fxv6SK2S6VoUqOzxuEjXaCcVK2x4Lv5akxJfWfuPLB1+MonPsQVon/wuTyyZ
YXCUHseHG4VCxndrJGJetycejyIvkzVKuzuiiyur+Ep8hk/vuxxO/hmFne8q
QRmMnsnAbaDFZOa76XJs2bJlLSo15LVZrE4nQoy0Vqdq93sDgSEAxZcvc9yF
Rju4y9faVlNTg8a7uv3orGwuqddri7ub+rdY406dOkWZq9zk8JmJRgr0BYKa
tWvX0he49EUkkxYy0EHCx8iAMG6vQtmcyeRcHncwGPa0evV6Y46HTjaZQr5s
2Yoc99ZMBhPfcpmTZj9yUiDQ3tkBtzYQ5N3hbWtFYJ6Tet/t5QNuLBF3OGzp
bMpkMkhrkbn2jq5UKpPOwDIkLVY7/OCunm5YA4z+CLhaWz2wEiqVSvjVxTMA
EAfvDHHQ13jEn+QDuuIRlhXsuXAeLl68SFaLCJyT1tNtdqfT5UE+HIlJ22b0
VpsjFk+azFa7w2UwmlHu9rSiPCdhCyIOjwQArMPlbJLL+I3RCPBJpqW17ETc
7nQAEuSVahXH2WSMxmP0rGQqQz4SmsVRqzNY7TbhOCGUI8eG1AFYCUyISPDJ
Bc2ufsMDxBcfuRNhEP4QDmQD0eN4Lq3aMymmxpvQwpDP54PzjwzQcDjdeG3A
hTwAQXfr9EazxXbFn9Pt0up1JovZbLUYzZxpbX4fOAl5UQ70UN6i1eCSzWFH
HregWTROjwDaOOIpRhO01oojygFXa5uf2tdqtaAZbTnDC0ME2mmGwB+iATf6
+FdMT9Ek52eaeuAsPBC4l7Q/mUmrzGgN7dNWBwqrBwYGYNJhoFpbW+GF4hF4
E9gWvcEEcPAjoZqVakDn8baBV1f8WfgWQLfeaOjs7iI0dAY98gANMAIinHYv
7fG1+1Utal7oagVbVGoN2lQ0q9p87YClvrEBT0E+GIqgTWTe/+Ajn78LLwDH
c8WKFZAF0Wt3dzekAHrgAE4hL05pbyckkvxDxgqzT5/yXTnteaPIhchJC82U
YFo7Ozv9fj9wE9ML4BJO0UEwCOgsgIZT9Cy0T65Q4oWRwQ8vj95Hd1/xB6yA
BlgE5QJiyEMNkYEC4pJGpwV6OAVQoFmrr81scdQ3yGGmQCdgC8pBPb1tHlAR
eVJPvAO3fnY3Hs2kGRIQBuKgTxHeQhHwqsAN749ysa+MlkSRqqow9LBP/3xM
fK1Pe2jRF0Ep0ZweHkRDBhEMGWoTD6X5Z9oSyZ/eom5r80NMjUYH+6zVQgNN
IL5Z2mg56ohb5M0KdAQgQhcDtPb2dpTwBV+Pm89a23nXAyWoDPBs9bYb+cS2
A2aNs8JqamioM1sNPl+rVg8N0nV0dSKihyRymQoDCiwK3pxMFtqBUKQCMpmM
KCF2Goj5luJvZ66Y+C6Xwl85EAmvRytiuIrewYPwemLvH+2/hX9FHYQ8dL+r
q8tsNnpcEFNnNsKUqQ06PQSx8J1Hxk8c8b8JPQ5/AM3Cc0D7cKiAPMrxOLVS
hcaNegOMpEbdAmJbzQ67DX6ZG1jD3WrzuV1Oq8Wqt1mNLZpm5I1GfavH29Ki
dTm87e2dra0+2jG1aNEivB7tBMabo4uRoRVzVvj6HlcRfUBkmhj/lCT2vxED
xTb4YgAxvBLgGP7IuNHsKBk3kDCdSnx89jS6pbMDDud56aOJmMVslLYyXuEH
LwvDVTgYgmvEV+EzWfqSKzDE954Bn2a5goY0q9kCGANDfOMfPCtyesGCZCI/
GYtfKDjEg6zCNxTRcIy+sCPVABnIsJCMBEjxR1soh8qQftFXjZ+SRhk0akQ4
n8LnLP64ieZX0fsF0vIwR6tS5DfHZlOJSNDncRb2yo76FXZlZ7IapUra15fL
b69F4NPQuLSzK5tMaVVqOPNUs7Oto93rDw0HeAiQjPE9otInXeGR8ywTlfaH
xxE1iNU38dqwS2IzHisyR+IvbIjPG9nlf3bjU5IYLsVuSTqlR4i/GzAq/Lyk
3blMODTM0ujuiLR9ke86k3YjZKRl6FHHDJGK45Og3dosHo5whz/CXf2h8xek
PbWZ/BwT37PHMimOsDT/w1sOj1zM84pvyuIlsVAQFSIBvi1Z7CIrHrau+Fcv
qFDw4b/q70HRlNrVHNmYjpc+MLj8d1md/0n/FenfAKM2J7A=
        "], {{0, 66}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{140.6666666666668, Automatic},
      ImageSizeRaw->{100, 66},
      PlotRange->{{0, 100}, {0, 66}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.27191413237924866`, 0.}, {15.430851795789184`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.569148204210816, 0.}, {1.430851795789184, 
                9873.87890625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 45.82301351913314}, {
               21.893766147768055`, 39.285013448459054`}}],
             StatusArea[#, 9873.87890625]& ,
             TagBoxNote->"9873.87890625"],
            StyleBox["9873.87890625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9873.87890625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.569148204210816, 0.}, {2.430851795789184, 
                39495.515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{46.58469466217859, 
               54.94603527685584}, {-28.779975754304942`, 
               39.285013448459054`}}],
             StatusArea[#, 39495.515625]& ,
             TagBoxNote->"39495.515625"],
            StyleBox["39495.515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[39495.515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.569148204210816, 0.}, {3.430851795789184, 
                41963.9853515625}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{55.70771641990129, 
               64.06905703457853}, {-33.0027875794777, 39.285013448459054`}}],
             StatusArea[#, 41963.9853515625]& ,
             TagBoxNote->"41963.9853515625"],
            StyleBox["41963.9853515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[41963.9853515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.569148204210816, 0.}, {4.430851795789184, 
                37027.0458984375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.83073817762399, 
               73.19207879230123}, {-24.557163929132194`, 
               39.285013448459054`}}],
             StatusArea[#, 37027.0458984375]& ,
             TagBoxNote->"37027.0458984375"],
            StyleBox["37027.0458984375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[37027.0458984375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.5691482042108165`, 0.}, {5.430851795789184, 
                44432.455078125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{73.95375993534668, 
               82.31510055002393}, {-37.22559940465045, 39.285013448459054`}}],
             StatusArea[#, 44432.455078125]& ,
             TagBoxNote->"44432.455078125"],
            StyleBox["44432.455078125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[44432.455078125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.5691482042108165`, 0.}, {6.430851795789184, 
                32090.1064453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{83.07678169306939, 
               91.43812230774662}, {-16.1115402787867, 39.285013448459054`}}],
             StatusArea[#, 32090.1064453125]& ,
             TagBoxNote->"32090.1064453125"],
            StyleBox["32090.1064453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[32090.1064453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.5691482042108165`, 0.}, {7.430851795789184, 
                27153.1669921875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.19980345079207, 
               100.56114406546934`}, {-7.665916628441195, 
               39.285013448459054`}}],
             StatusArea[#, 27153.1669921875]& ,
             TagBoxNote->"27153.1669921875"],
            StyleBox["27153.1669921875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[27153.1669921875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.5691482042108165`, 0.}, {8.430851795789184, 
                32090.1064453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{101.32282520851479`, 
               109.68416582319202`}, {-16.1115402787867, 
               39.285013448459054`}}],
             StatusArea[#, 32090.1064453125]& ,
             TagBoxNote->"32090.1064453125"],
            StyleBox["32090.1064453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[32090.1064453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.569148204210816, 0.}, {9.430851795789184, 
                14810.818359375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{110.44584696623747`, 118.80718758091473`}, {
               13.448142497422555`, 39.285013448459054`}}],
             StatusArea[#, 14810.818359375]& ,
             TagBoxNote->"14810.818359375"],
            StyleBox["14810.818359375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14810.818359375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.569148204210816, 0.}, {10.430851795789184`, 
                9873.87890625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.56886872396015`, 127.93020933863741`}, {
               21.893766147768055`, 39.285013448459054`}}],
             StatusArea[#, 9873.87890625]& ,
             TagBoxNote->"9873.87890625"],
            StyleBox["9873.87890625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9873.87890625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.569148204210816`, 0.}, {11.430851795789184`, 
                2468.4697265625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.69189048168286`, 137.05323109636012`}, {
               34.562201623286306`, 39.285013448459054`}}],
             StatusArea[#, 2468.4697265625]& ,
             TagBoxNote->"2468.4697265625"],
            StyleBox["2468.4697265625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2468.4697265625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.569148204210816`, 0.}, {12.430851795789184`, 
                49369.39453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{137.81491223940554`, 
               146.1762528540828}, {-45.67122305499595, 39.285013448459054`}}],
             StatusArea[#, 49369.39453125]& ,
             TagBoxNote->"49369.39453125"],
            StyleBox["49369.39453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[49369.39453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.569148204210816`, 0.}, {13.430851795789184`, 
                17279.2880859375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{146.93793399712825`, 155.29927461180552`}, {
               9.225330672249804, 39.285013448459054`}}],
             StatusArea[#, 17279.2880859375]& ,
             TagBoxNote->"17279.2880859375"],
            StyleBox["17279.2880859375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17279.2880859375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{13.569148204210816`, 0.}, {14.430851795789184`, 
                19747.7578125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{156.06095575485094`, 164.4222963695282}, {
               5.002518847077056, 39.285013448459054`}}],
             StatusArea[#, 19747.7578125]& ,
             TagBoxNote->"19747.7578125"],
            StyleBox["19747.7578125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19747.7578125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{14.569148204210816`, 0.}, {15.430851795789184`, 
                39495.515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{165.18397751257365`, 
               173.54531812725088`}, {-28.779975754304942`, 
               39.285013448459054`}}],
             StatusArea[#, 39495.515625]& ,
             TagBoxNote->"39495.515625"],
            StyleBox["39495.515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[39495.515625, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.27191413237924866`, 0.}, {15.734030549057383`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.569148204210816, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.569148204210816, 
                0.}]}], 
             LineBox[{{15.430851795789184`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {15.430851795789184`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.27191413237924866`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
rV/lsWG5c9Uql8qlTpXLvGu2JttjNegnmO+BFaaJR0+2CRqYu+XEBw4IVShv
QAwESYAbuQFwNXGOjIzkw5IG40sS8OIAOLkKoNao6Xazwfvxn2n++G9p//Z0
wi8fTf/VrzL/+VeKRx9Pf/JfZL/8ufI3v1Q889iHKpcUP0lTddzW9Z6V613X
l3pWlfpWrnTbusazaplr1QrfA9tTpoc+PISVeGP3wQp3DuMFSvCFSEwQYogW
+OHMzmfARzSS4qL4BQofIPDMNhNDG5CHTCrBiJ7k2KMnAEcjZb9HKLbve8BF
0Emf/c8lYcErQ4PeGjfmQ2enj51d//ri+MUuboscHRZ6jf+z3++rZoUqQyQH
KqduWDW+ap1T5RrPLWt9t5R6VJd5bV3lvmWVf93O1IhJjwzDymYhkzpcBnH/
PONkX7jqJsHhiW76SHob1OLJcPqWV7he+uabb4AVRYjU+e6dHvZAWe51mIcf
gnPOzP1Rv35yjzR+tYvLmglOaxydlzs4rHbzWObouNJhwnLXsSunOa1Od5cG
SBqqY7eWuW0td9pR4YljW6nD7nLXnWtcdpQBq5SpweRfDeor4R7E2FeE7Dsl
ISFh7ty50Ehce2NeSrHYd6MWqVTKhtLa4AlsH6kyQomcVWhyNiSwxCJq4Ska
+4WJu7G6J1zDgAJMRrhTlr7Y//PkgcT49Y7OG8c5rndwKp0wYa2r2ypHh/Lx
DqWuY9ZMdSzVuCcHShp2x20v89xe7ly93mNnhev2tQ57Klyr1zrvLPer35nM
sSJfVPDUbGQFv7NOjVngWRNnSEXDYA3ets0GZMjxpgoTRfLll1/GmQwB+eEE
F2ktgogPwvOieCKk6EZU7IMZg2+je9u9pU+MlE3M1BcvYrXByaVyvNNGJ5c1
Dg7l7h6rnRwrHJzKXMeuneZUqnGVBkmO7I7fUS6gtGuD564N7jvLHfZtcAW1
qtf5H66WQrd/H6x4jIYpUFacTBg9eqgySkBRwoEWNCmo4ZoccIGH+IrcdSoU
LtH6MhP9NDCQRwH3V1liNlJIspkH7dHdxyCYZqGbsS/+Xx4/lBRX6ey62cFl
s7PbOifnDR5eZS7Olc4u69zHl4c7r9W4pgRKju5JqK7w2r3Rffcmzz2VnrvX
O9du8thb4b57fWDDrpTwid8LK742R2hgFqgQzeCW81wWKjz3C80PLsEHQAut
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
mGet29C89r3Oze+2Vs4792FcsY/k8NsTat74z5r//m39u/9x4M1/3/XKv9b8
+fm6/3ZsfNu3ZJzk5d88dTwiqTE4+NOw4C9C3W+FedwO8/nS36Ulcur5iOBD
0b5VyY7pbpIrh2XHGid/enHalQsh5w5PuHLW7eaVgM/OeZ5o8m04NDViqqTt
ZpUg4DaDxcR6uuHY2Mij+/EKjCkHjXwPxKB4QMqsHJ0gdcKasLDVp+3anuJs
zRM/+8t/PD3vUYlWIsmVSP70tGT+byTREknRryXFv5XM/p3k4iuOs5+RnJj1
xKl5j5575bGGIsmREsnhAkldzkMX/vTbG38dV/y0ZKZE0hSScH5yzNcRUZcD
/G6FBnW+FPaVt98pZ+9Pw6Y1RU2tmuEx01XSvC/384NJTXumfHYk5uKx6HNH
wg7v8zxeP/HihZQzJ9Ijpj7UdnOXaD5MZIn1Bqhsa0fvnR8DJeADBWX/bgJ0
l1WU+uu3bhfOXxCRFNcpbN00sO7brK+jXCZV//IXe8KmXFUpL6UkHIuY9Kk8
em+418nc8NMzp+5MGaN6StLy4UuzX5BcenPMtYXjri167pM3/rVl6Xh9ZXDz
YrfTL//+/KsvzP6DZM7TvzoYqWmMlJ1PkjdODD01ZdKV6PhzL0Wej0o5kSDf
l5hUFh/28pQ/XKyee+nIzCtnZzbtVX99fn7L5QUXjqWfblKfPpZduzsz2O+R
G1drmOVOf3fXIFZ6IcYy2+6xB3JUCnQ7D4vgaA3iJuYHouKTNHm5+XOKtVmq
hPDJfy3IWSiXLpoeXpkYt9DLbUdy1OqpgaVRoR/MCHg1zPMvCcHzpjkvzpj8
RqLDnxOeX6Sd8HbaHz7IfOG15F/PjXrilfin30j53X8l/HvF/OBXY8YXBvgu
V+a/NmXaexERC6eFLo+aWpYQuyIqelmM9LXJEW+npP5ZkyyPcps9NyxW9UdF
ztiiHK98lXO+enxh5th87fOZqucWvZOgVflrFOEvzylSpSrTUjVqdfprr716
s+Urm6C+Rh8r8qZoaYycENjNjvZOy4DV0GMEXK2dnQYxVS54mPqe2rJVHxdk
fbp+zbk1S1tqt5zbtPTSvnVnqsuuNNTUrl/79amGBZnSTw5tfTk77vMjG88c
WH3pWMWNC9uund305anK5s92Xj6+4VTt8oLUsD9lZZ6srm2sqjq/a/tne7Z+
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
L4/Hgg==
        "], {{0, 69}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{133.3333333333335, Automatic},
      ImageSizeRaw->{100, 69},
      PlotRange->{{0, 100}, {0, 69}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                2272.8228515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.76695779038364, 75.87179458102209}, {
               34.209223399853755`, 38.93203522502651}}],
             StatusArea[#, 2272.8228515625]& ,
             TagBoxNote->"2272.8228515625"],
            StyleBox["2272.8228515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2272.8228515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                4545.645703125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.14100211124449, 104.24583890188293`}, {
               29.986411574681007`, 38.93203522502651}}],
             StatusArea[#, 4545.645703125]& ,
             TagBoxNote->"4545.645703125"],
            StyleBox["4545.645703125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4545.645703125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                27273.874218750003`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{106.51504643210532`, 
               132.61988322274377`}, {-12.241706677046515`, 
               38.93203522502651}}],
             StatusArea[#, 27273.874218750003`]& ,
             TagBoxNote->"27273.874218750003"],
            StyleBox["27273.874218750003`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[27273.874218750003`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                45456.45703125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{134.88909075296618`, 
               160.99392754360463`}, {-46.02420127842852, 38.93203522502651}}],
             StatusArea[#, 45456.45703125]& ,
             TagBoxNote->"45456.45703125"],
            StyleBox["45456.45703125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[45456.45703125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{4.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
HC2RWdtdmckwVraSJu6x9KTrXru7vJieC93Zo5vWaeA+HOX4PcrA4GZ1gGXE
lBAIkMktJwBqjBtLsL0BgXZgN+3m5IeNr+xR9bZeeGty3f0/zHrk/51oLDVM
qH3T43mrVs1z+z5pzDPIabWPPZv7+Pas1aXV2aRn/vv6sudzSKsPMp/aN5RT
2/XwnqTAiHGCIYYJGrLX/ar8vOr85bfmnZfhkjVlRY8Xb/mrXbkPlD/6N2sO
vnj4yMNVrb+uP7qx4sCa3I/fvvn66IUbf3AUPb6//Rdr6A8+d+Zw475/+FXO
C9l71h5+6ef76ta3lz5W75n1ORl6TB6HgWOw4lEuFqSk8CkNEx8h4qP+zJ7b
7+CK/Ru764ex9HoHgtHvbvjBV5eiHK9JZht8Re2nLEXZFqPAonl1OiWKRkne
lDCUUAfU2wXqQ7zKDQdURMpZjWr/hmdffviBd7m881yxbfp0wX3/zTsx/W51
+TWx8Mj6bfueeGXfs4cq9nQ/+8jWog0F5DVVPY/sZ++rIG+rsHGuRUR2j3j5
OuuLnq2E12m/sZwLGT52564v2PHk7v58NrVe/OBjT/zkJz8tfbK49OGCDQ++
sGvD7vMnr5w7fuOLt+aPbK1qeGidclv+REFL1j88nbV6T/7WytLnq4++eKx3
B+N3hI9Sw6EQ2RxihRBOMsnDRyj/K1bfErvHo1b8KrMpIhOb0fQeiQTLD/Fd
hgHrWM64j7uYHHCbBmyqnaMpNWh4QwFu1MyFBNuG2QcU7AoZqZZVm9fYVtrd
mtNKzO1WlvOkeRRVNlGxt1Ow/aiirPdYZWPBwaqeegGpQ7WjoLqkvFFzVKIs
ItOr2giH27n7eYoD6uHDGtZBQWseg1gh7dlLIxcyKK2MrmrCsW29ndnEtt62
6pqyvl0Efg67KqektbZxuHWsbw+9v5LbW9bTsbNIVtIoKmim5h4jVdEaD/T0
7CQMlA+R93LGK06gQ26IaUZY/ijwB2oqRUhkBviZqfv/B1bR9A7n9Cbn9H4S
tj8odC0pTKN5YxbatZBEv6TU0dfzA3IfIgyDDO/iJywq1DwV5hwc/MPgV1fP
aOmHRfwSue607Rzjc+OYWbpTahszXOJ8duP49Y5jzGNtzA/HL7w3+sfaHlp9
G+kr9ac3VRcunPwDq5nVvpN0ZXzpytgN8kE2qVzxoeab+cmlr9Sf9zeTG4qO
Lc9ab51Yam9pqK4oWZhZWp7WEZu6mw/XfC254DvtOzf6eXtxt6SFef3s+U9V
7yiruIIa6WearxdGbulHtbxcxReCqzaBDtNEEwII48TwFqArmqAnM/tz/h1W
9+arzH7azPbvzJ8yO80ybwduFhR45zhLM0UnvSLtMvFS6HV0rOAkMgxbCXpn
uw1TYG6Gw8Y3izZwjUNL5jGtaq9scIfcPWT3qz0WrnH61QmnxBo/jl6VzjWX
sHpreLbx2/ODX3Q2Uxoqes2qm5Fh4+XBjzmHGORdTMeb/m8GLvH2czn7FYZp
zyJ7zj6l7yrtqdvX6D8VWR7SHd57gNVNuDmwNKfQkup6O4vqzeLbAYXr2thN
Tr24Jbv18smLtyeuCrKYlG1084TVITcaBMvyAyO2EyEjR+vnOkOsAMaK4dMM
QgqcI8KOZbbM/VlWfxZUhlV6KRNfWloZu1Hx8UWIBzkGgma5ffRF2bmK3/av
pusGnfP9C9hgHBvEF9ydxCVsChlax/GoFp2qBeVLzLGXJTb+koWjjY2Gx7Zo
7CKrTWa9Jl9oLZb0FwuD0ptO4ZekCmLXoX63cDnCtVgntMJ8oShHdkuz8Lno
/GiJWrlnRC+woXKfV2UkFZI5VWKzzK0V67uKGnpLWz0zkRt8fW9+B6+MiI1C
Xqr5tnKBkEUFDnlp5JphRDuTOzGya9QpdzppuqDEI90+rFU7oVHESDXAsmhS
hMU6IdBK46MzTmZv9p1fndzDaoXSnYyUCbeM4eu56alIIj0/xH+RBIyGwZyY
Rwq75P6I1K/tv+UaheBTmJasC/Bcbo7BJzKgww4T7+rkLiF2xrnI+2wmRyLb
RInMOpzDeq1inrOR5Zn1Lg7r5k/auyqG6IfUUdHtuOQa+xCJWcIKCuwRjkc3
qO/ZQhwunVic1M2fui3KE2n2TNk47hDdHlG4eft4gjy5ReQzSpyqRhmlkHiV
tuQaQuQVMlWJyE7WObuNqddTgl0S4T6F+4TXKbWMb1CPbRj1MJ1A38Ic3/CO
48bhgEXqDgxGdDyPkR0MseP48DM9vUc4+Ol/H6s/AYVwYPB6nG161zq+yJhZ
xyHhU+IgDzVyXQ6pJyhz+xSOZaVlXmY+vvuET+lxqM2yV/nGwXnXpF76Kt2g
/sY8el2nvmybuj2v/pq/h849wJSXKj5Tf009yCMUC+qKBOQiGSS5EVdeJR1o
oub1ObiGoNAjyR4Qlam+UFzkFQrJ5bTuA/3zcl1kGIWEbq/YZBrTXx+8Pbx7
Zjhn+hPN59QCpn0itCAyC3IE15SXPRLb8c2TjgHbbem8aKdEq1y2iYw+sQNW
Ix6BOykKepkWxSvDxhH30E4N6KalWROa/LN6kd/CD3qEUJAPw1wY/8XHnf29
K/tyGStb2iKMMCZI2LssQFVCzBDEDqZkqfQyjR+TYSaKJyLBwgQI3w6qwHQc
25LA4J/22wYNN4XX5sd08kKNZdS6IF+8MnRbeGhwbnL59pROki+9obl+bejK
4vG5axOXrxy/RD/M6Mjr5bXIP5j5/N2J88Q2xXvv3uirEWjlH5sUH9w48wG3
irAkm9MqdMSD7HOzX1yZvcSqorc3dTdWtH0zdk2n1unl81aNbl517Yrysv51
O7tE8ZuhT8jlgk8VX5tOWa4OXZ4bu740uizZKzNNGOaH5hYm5y9Kv/SdcuhU
i19yLrtmfD61dYH1jTJPcVHxtfs1y82Ba3MzeupBxeVR/dyA2SR2wbJIRBSJ
8L+XFQAV5SCYHDN3G9/a9sbJdSecRHtYGAxJvQPrlUO7jvuGEZjnhzhuLd+k
3Dc6cWiCvpVMfqln8oiGnEdr39EjL5bycgXkYiEo7m17qdQi0Zdj16WVKk4h
j15Ip5VR6LW0luLWxsMtdSVNTbVdDXU9RYVH6xrJB3eVySv6xQcbyBUVdXty
B6rkjBx2ZwWhu6GXUt1Xd7Cq8lhNxdEakM0EhziyCpGiXCTKYbJzqcRKekXO
MWb3YHsZjV3P6TnQzsynKWoVnQcJPYVEdiGDnU9nVNAER/ldezrYJVxuvZJZ
KvxU8MexKlX//i5+JYOxp11dwyeVkAnlTO5RBStfwt8geT//g8X2BS/DnWGF
/RtWKCts7TABpzrz0mmEFwbV//19/2JlGpUvC7WahS/k3wwVjpm4t5wynaZ0
glMgnp+9yS4gS2s45yc+bCtsVxCUhINdAEhLSU9PPZPRKOkpokkbB38j+YBd
xujKbX1Hfbq/obO7saW3o7Wno7Wxoa65ubG9s6OmuamxsZFU10SpqmmpyiW1
HmE10dpK2jvaW0srCtuONLa2NJZ2lRyh1hXn57ZVNFQXVBwrPEoGOfwotbq2
poHQXVPfXVPZTukmHC0+3JXf/NmZT+uPNFfWHiEdIbSWNNVUHymtqm1p6qos
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
597Z+/+1/2v/f9n/BDkhygo=
        "], {{0, 67}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{135.66666666666674`, Automatic},
      ImageSizeRaw->{100, 67},
      PlotRange->{{0, 100}, {0, 67}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                24326.7083984375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               50.3845243979945}, {-8.204035696915383, 38.74689437998487}}],
             StatusArea[#, 24326.7083984375]& ,
             TagBoxNote->"24326.7083984375"],
            StyleBox["24326.7083984375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[24326.7083984375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                30961.265234374998`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{51.14620554103995, 
               64.06905703457855}, {-20.872471172433634`, 38.74689437998487}}],
             StatusArea[#, 30961.265234374998`]& ,
             TagBoxNote->"30961.265234374998"],
            StyleBox["30961.265234374998`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[30961.265234374998`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                26538.227343749997`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.830738177624, 
               77.75358967116259}, {-12.426847522088131`, 38.74689437998487}}],
             StatusArea[#, 26538.227343749997`]& ,
             TagBoxNote->"26538.227343749997"],
            StyleBox["26538.227343749997`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[26538.227343749997`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                28749.7462890625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.51527081420804, 
               91.43812230774665}, {-16.649659347260886`, 38.74689437998487}}],
             StatusArea[#, 28749.7462890625]& ,
             TagBoxNote->"28749.7462890625"],
            StyleBox["28749.7462890625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[28749.7462890625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 
                8846.07578125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.1998034507921, 105.12265494433069`}, {
               21.35564707929387, 38.74689437998487}}],
             StatusArea[#, 8846.07578125]& ,
             TagBoxNote->"8846.07578125"],
            StyleBox["8846.07578125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8846.07578125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 
                11057.5947265625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.88433608737614`, 118.80718758091474`}, {
               17.13283525412112, 38.74689437998487}}],
             StatusArea[#, 11057.5947265625]& ,
             TagBoxNote->"11057.5947265625"],
            StyleBox["11057.5947265625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11057.5947265625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 
                2211.5189453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.5688687239602, 132.4917202174988}, {
               34.024082554812125`, 38.74689437998487}}],
             StatusArea[#, 2211.5189453125]& ,
             TagBoxNote->"2211.5189453125"],
            StyleBox["2211.5189453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2211.5189453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 
                44230.37890625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{133.25340136054425`, 
               146.1762528540828}, {-46.209342123470144`, 38.74689437998487}}],
             StatusArea[#, 44230.37890625]& ,
             TagBoxNote->"44230.37890625"],
            StyleBox["44230.37890625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[44230.37890625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 
                35384.303125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{146.93793399712828`, 
               159.86078549066687`}, {-29.318094822779138`, 
               38.74689437998487}}],
             StatusArea[#, 35384.303125]& ,
             TagBoxNote->"35384.303125"],
            StyleBox["35384.303125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[35384.303125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                8846.07578125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{160.62246663371232`, 173.5453181272509}, {
               21.35564707929387, 38.74689437998487}}],
             StatusArea[#, 8846.07578125]& ,
             TagBoxNote->"8846.07578125"],
            StyleBox["8846.07578125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8846.07578125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5460988028072107, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
                0.}]}], 
             LineBox[{{10.453901197192788`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
Sumaxo3REIQrY93nO9s3tRWIpQ6Tt9FTlhy5ff/qobVt6/Rmj6hYsLaqNDX5
9PblYw2Na43mcoPS2NTQCsTOzjHQVDwWijBUkV6mk8ro4bFTa9eL53007w9v
8TXLPsn6Xw4bv9wgVgjz3l36L++vnj8w2s9hlQim2CGb8k2blsgV2UbznGUr
5ixZZmpoyperTK5S5IWlMXxWsQp27dlU5TLoCvPF5bWbD3SevXXlWE2ZVCLN
0RjVdm+dbzwCcnXn+H6zwyQzmICvyo02JtjfdfUbiVLKl2m8dm+t08mkJi8c
3+9yuZRKo4Kn9tjKh6NRNmIiIYgje6Ojcje7tKJeqbq9fYdhySersz/4w/K3
sgver/SKDbxlgtzFcxa+++vseV2P7hApcFPgNgbEcs32zz8s4hV7y9/LL/zl
4izb2nVL+UKgLPDPkOM/m1j13TnsUueCDkJA76po37R9z6UzBxzGPADx5LkT
QoUp5E8wqfD5PVvLqr3jscTVy3edSjPtG7773YnK2qqevv7rF29pS8Skf+TM
kT31DWte9A12X3viNlf2TUykwO5HQhgrVwTPKC1akcXE49+3rTcs/L1Jt/JX
c//L0lVz1pSLjcVL3Hrh3FUfv738ozsPbrBOfRoicAjpGe/WzQtVal5V9Zzs
1W8tW6GubchTa1QW25QpxGd3OpXu+2ZXs1rId9gqPFUdV+88/O7sQdBBqSRb
bVDprGVs9yX8fddOO0ptQo1Oq7LqRRommbh1/pRQJjC5XWa1o8pcio+NPLj6
rctlMput6hKTXuYENkmB2YewjcbG6GCRQWhTipnRkdHDf5LNnaMQf/r+H/9r
sejDze1mff58o2T124t+/Zuc3/c8vw9Y+QLjQNzAdM6ODYt1umyX6x+Xrnhr
+UpVTb3AbLd4y1mE0hAkYbOKVaqPof0MSXhAlVq3AKNevfhNa61FrSw2mLTe
2qaJyRD47Q8unKhtquHJFWqZdmtLR3xg6NbFc00t9VK1UiXVtFY2MrHwlTOd
jY0VcrlUwTesX7sDYpwAEWOdJSIZSkdFBrHDqGSS0ad7d8vf/5VS8IdPl/7D
guxfNDUpbEXzHfKcd7J+/V7+7x8+62JoNkLEOR0s37b1jzJpbqlnTl7eL5et
UNU2LhMrrFU1CYL+ewzLRB7evWIXS5wqbQhLYAy1f/f2GreVIVIPHnQZyjwD
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
M/v1mOluzSgOKs98278CeJVyvw==
        "], {{0, 55}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{164.66666666666615`, Automatic},
      ImageSizeRaw->{100, 55},
      PlotRange->{{0, 100}, {0, 55}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                12087.9736328125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 50.38452439799449}, {
               19.470922597417694`, 41.084981723281444`}}],
             StatusArea[#, 12087.9736328125]& ,
             TagBoxNote->"12087.9736328125"],
            StyleBox["12087.9736328125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12087.9736328125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                36263.9208984375}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{51.14620554103995, 
               64.06905703457853}, {-22.75719565430981, 41.084981723281444`}}],
             StatusArea[#, 36263.9208984375]& ,
             TagBoxNote->"36263.9208984375"],
            StyleBox["36263.9208984375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[36263.9208984375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                33846.326171875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.83073817762399, 
               77.75358967116259}, {-18.534383829137056`, 
               41.084981723281444`}}],
             StatusArea[#, 33846.326171875]& ,
             TagBoxNote->"33846.326171875"],
            StyleBox["33846.326171875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[33846.326171875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                41099.1103515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.51527081420804, 
               91.43812230774662}, {-31.202819304655307`, 
               41.084981723281444`}}],
             StatusArea[#, 41099.1103515625]& ,
             TagBoxNote->"41099.1103515625"],
            StyleBox["41099.1103515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[41099.1103515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 
                43516.705078125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.19980345079209, 
               105.12265494433068`}, {-35.42563112982806, 
               41.084981723281444`}}],
             StatusArea[#, 43516.705078125]& ,
             TagBoxNote->"43516.705078125"],
            StyleBox["43516.705078125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[43516.705078125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 
                9670.37890625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.88433608737614`, 118.80718758091473`}, {
               23.693734422590442`, 41.084981723281444`}}],
             StatusArea[#, 9670.37890625]& ,
             TagBoxNote->"9670.37890625"],
            StyleBox["9670.37890625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9670.37890625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 
                41099.1103515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.56886872396018`, 
               132.49172021749877`}, {-31.202819304655307`, 
               41.084981723281444`}}],
             StatusArea[#, 41099.1103515625]& ,
             TagBoxNote->"41099.1103515625"],
            StyleBox["41099.1103515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[41099.1103515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 
                48351.89453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{133.25340136054422`, 
               146.1762528540828}, {-43.87125478017356, 41.084981723281444`}}],
             StatusArea[#, 48351.89453125]& ,
             TagBoxNote->"48351.89453125"],
            StyleBox["48351.89453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[48351.89453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 
                41099.1103515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{146.93793399712825`, 
               159.86078549066684`}, {-31.202819304655307`, 
               41.084981723281444`}}],
             StatusArea[#, 41099.1103515625]& ,
             TagBoxNote->"41099.1103515625"],
            StyleBox["41099.1103515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[41099.1103515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                16923.1630859375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{160.62246663371232`, 173.5453181272509}, {
               11.025298947072194`, 41.084981723281444`}}],
             StatusArea[#, 16923.1630859375]& ,
             TagBoxNote->"16923.1630859375"],
            StyleBox["16923.1630859375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16923.1630859375, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5460988028072107, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
                0.}]}], 
             LineBox[{{10.453901197192788`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzVfFd3G1t6pWxPt1N32933tq5EEjkXqlAJhULORM4EwATmTOV4FalESsxi
EnPOOQcwSpRa6nbbHs/DzJplz/O8zY+YU4RumH7w9Fq2r7vX2qpVOASIql3f
+b69v3MoXum1SOWfnjt37tZfgEOk5GvLzZsl97P+FryIXb1VU3W1otx99XZF
VcVNdemfgUE1+FcO/jHnSS78H4cDLnzIliV50ApfsqpAFyH5GIuzwhUf8eHf
sJBfXZQd8+BVlvAdqtpmS45Zsg9s+ISrOOTAJyw4mSE7FKB7QsVGuvgYUh7J
yFW2ZEOMrItgcLIjUmwI4Q2O7C0bO01TnF5A3qejHzKwExZ6yEF2eMiWAFkX
IqsiGLxth89cyVsWdMKGwC//D73lfwtXR1xklytf4EsXFdgiis9K5eDiD3nI
exbylgUf8BULF/n7sHKNJdljyY7SoSM2csJF3/KwAzZ8zMcOBdg2G9oXoIcS
cosH70nwLTG6zoW2hYodEboHxtnoSbri7UXkNB19/w1Xe99wtf49rgBRAAf/
2Zz8K9hNly1dFI7xRCNy+QSOzSDoGke2mSbZBT8SojtSfCZDuIfRK2IE3DsY
3LsAnXKJYy6+n4EcZije8cgjIbnDRvYEeFJIHAgIcNwWYBsCdFeIg8FdNrLP
VoB3Hp8BcHXEVSS5n0NrSwAD7PH+KLhC3kOaJKxZ11lmjaYZm3XL6jiSa08k
6mmufEaKrclVMzx4R2VaRKgVObUiwlfS4D2halVILvGw9XTFvpA+wS1LQmJB
RGzJNWs8fFtCbxCGeVi1KqGWeIplrnyLj+7ysT2OAtB7xEKPOYqDs9ACdG3z
maBKcXXEgQD+YLkCF7yeAS/wsVm9uUNFNamIEZVm+aJ8LQ3pkyq6UXwe08zI
yG195oSCGpUTQ1J0FqYXVaZ+kh4gVONCdEFOb2Z6e3GqGyOndeZRMTZL6Gbc
nj6TcZjS9EuQSbFiGSI2ZeQmT7HDgpkpyUXBRAZ0gScFWAJIcv84uDqG9Fuk
eSeS/cZhbbIa59yepEBzKNUNGyxtRu20xrJIGXedoUFc1a1Q9pOaeUPmnNXV
ZjD22WyjcvU4pFr2ZzWrVE20ZtrlHZBRkxrzRHa8zWXrM1r7MOUQgi0QqjWM
XhNjm2z4kIu946DHGTCgCySub5lhqgwHJPY/YK646I5ANSuj53zhZ3r6vp6e
cHk2M6hNtnLEH3hu0w+rzQta264v3k3Sr1Xacbt7Rmsf19leavUjXv+0wjgh
VK76401KukmpWQlEx8HkVZpHsqL1ZsOQ0QF4G8CJWa12ldatQMQ65zNXJ+nw
WzAfGbrg79EFiIL+0zn5V7jaE6mnJfSk239frfzaSM8EI7tseoNFvfF6bmjJ
VoQcw/UrrlATQjCREwj3K7TdiPoRQY74Q/OoeZynXPPGGkl1A0atB3OmxOop
hbHH432goob09gWzs49STRv1qzrjEkyuchmuTrnY2zQ54OqEBehiuDr4I+Fq
g43PiOl5f6ROS98zfMfVaDTrvlXXKEOnVZZ5u++1UlNPKMfcvg13dNER6guG
hnxBEEULkGHZFXmJUg0K5YY/e06qG5Wqe1yexxr1G5Vx3RXsUVJzNsssRY/x
pZtCoDGIwzToAxs9zUDOQus7roDMY/Cfzcm/wtUWm1iU0EuecL1G9VivnvMH
9zmaLbZyNBB8atG2SNBRVD2tz+wi6XZKM+sNdSFUm0L5TKNtNRr7ePisTLPi
zmpVaZpxetUTmZRoRiG63xeoN+o7SN2MwT6k104a9VOEchpIKQG6z8NAsnrP
Upx+L66SfwxcgUqU5JBrYtWqzduqol5p6AWH+4Cr3uMop+2uHpt5DNfOk/oF
nX1EpR2k9fMuXy+p7qQ1DUb9a4upX6qchNVLzmAHrQGBN5/pGZWqBmFqJBhs
sZtbcVWfkp4DJUCpnFTgTDXkAWWFMnPwc1Ah31fpf+BzEBTuQza+LVCuaa29
hLKDUi4arPtcJSBwltTOmqybWtu22rqht89SulGEnCDUy6bMRZtz2G6bsNln
EHpORq3q7f0IOYhSi2rztJiYkJFTmY4Bk6kHwUcwasvhHoEV0zLFFqLaBI+G
hZwKiG/r4P9zMX/YXIGrBQbkgIOvK9RjMD6kwBdxdZKDH7CwOY58DdPs4PoN
RL2CqWchYpwHTfPhJYlyXaGdhZSrsHqLS2yCj8u0q1xsnU8kJep9PrXBxjZQ
3SqmmxfimwrNgck+LoHnhPAuRG1xPnN1kCE//J6++kZi/YFzBZ+mASOMbIgU
czJkBkKWpIwBAc99J016JCaAr1niQ8tiZEkEr/AgYPeW0iQgRS+xZNt8xusl
v5IxNoeFHqQzlucDX7mXJt/hoUmJEkTREabbIbTzQI4KkB1geTgK8JFjHgq8
5BlRyM43uj3F1R+yvgKp9VcZyIcMZIcDbYiRVQmyKoCSfOQtGwHjv+aCu5Ov
c2WbEsWmiJkvpzJqjS9PwtQGT54UYoDM7QwZY6XZwOghexelp2IlsNKMm5YQ
yxzpLkIt8mEg2kFW32DJD4AK5eKAqJTH2eYzHidlc5L/HloUPD7gMZnvEjJH
xm9+b2RdiAK3Dt4DvBUYAS9XRSg4AZexw/vsT1dFCHC+Z4MMwKdWzjonoOi8
ZUG/zoA/Mg0WSVKEbEuQdZ5kXwC/48IfL8o+pcuTbOmWENqHsG2ebOsrPriX
5QzRDoSvZohBMByKsM008QFbfgzmMriqi6ITKbnNlu2wZCdS5XKaaFuomLnA
O4CUwESvXhACcXUMjGG67JCr+B0/+O/C1SQbXkW1g1z5hIxYwfWTQnSCp5iH
qEkxPiVXDsnwWVyzBWmBk52FKPCyT4qDlLsmoebTpCeYfpIrnVRrB3FqSqZc
klCLYiVINWO0akgm3U7n/j1HfnpRfHheCAz+sYAhao0vPRDA+xmS9xnStyzp
Dl+6IQJ0MSeHXCm4lx0mEpDU/AVh+V3R5yO7AiZa9oAUB14mQwEmJjNJPyel
VBpHktzvRML3k1Vq/N84AccxfTIYX/VHF52+BZVtAtVMm5zzNvepP2/P4h9X
W7pk2BifWMdMe5bgYShvNjMwoXMMseF5HvYbq3/P6hp3OV6ReK+cWiIsy4Rl
xeQadtsmLdodrvA3acKPoBSmS5jaDcKPL1kXQUcikFVkTNuNy7C0LpJuC6RJ
nvSIA8DkXhAPn7soLAYHZ3cNiNpmIgRhmjlMJwE9YYG5if1OsfsPBfBZQPXV
aTXPCXJIrhmjTO0B3x1cMSSi5vjUmt47gGqGFboNnXtaQI8IqVeQctIZWqTt
OzrHFER2y5BmvXow6OsjDWsm/ziiH9OaX+qoSbdlRwx94sg+8fAkGwITc1Wm
mBPKVkXwCUhETE+PmaRgAm4IoT0eMztSfQDAKmBmQ8j0nQ7OMt7ZxIH2v0nU
6wL5sggGmQFMNKb98kMRBdDnC41l5yxUVI5Gon24sV6CNmeFnjmsE5R9HjFt
eHNaFKo2RL3ljU+jFjDYbrCPBmMdsGrd4hkj1KNmywuzttXr7FCZlh1Z3ZC6
S6W7jcvGgo5VifwtmINcbIMDz8vxaYKYhGBQ8o5AFftKDNIvuHFAyLYASjVM
QKQxdLEZrpYl8IqYuTwmtNifeylgfJsnXxHKp2XyWQgGyeqIr/jBiAKY8sdf
ovRLmbKd1A+4go0GS78/8ghTPpMr60nNUDz3qd7QpDLOhXJeKLV3ceVNWtOZ
FW9R6pc8WY1S+CWlZCxwdvg5qZlxR3tV1gGn/5FFM5UXnoeQzbN8uyLCxzXa
EathjKIW5cQRD987L2asIqgmQoaxk7N+MqAFEAWYAWE2J2OQZJrkcOpHIMOD
ornLBUElH1LIh1FoRYrsChXfpqMfAK9Q3TMwlXTObqu7LxS/h1PjWfmzuUVD
0bzOrGhrbs51FfVEQU8E4j2ReHt+XktRYV9ZxXNavxRNTHgDM/l5z+P+5oLs
Z1rzpC/3jcHb7fA9dBgHswNzKL7Dke9x8SWYHvQ6+rI8w0bjAkId85UHF+Wg
YoKqCqonSEHAj5ye+VxmVeKMq1mI4QrE0vt0hismw7Pl+xwGKyJZPw71KuUz
CLwuQ1J64IfBiDve5vDVBQK3bJaxnOKnpO6ly//AZLlHG+ptznp/6Lkls1vt
HDUHWk3u2xpDuVb/JCv61Ggd9mc9w1S3cKLWqm0syau3uYd9ub2mYLPJcd9p
bvXZ5nHqUEJtc4h5TNsR9zYn/B0m/bicPOBRJxn4hgBfOZMfIMBS9i3VmgPT
DXC1IGWmIRj8mPb5R/tseJ8FgUS3KZANYFCXSjZCQPMKOch4PxhXzynT63C8
paL0ltc9kVPyQmVuzstrLizoDmUPxwoavaEXVleX1jVqDs2GwGBuU1HJq4Ki
BxrTQCA2FskZyM17khepL8p9qLe/ccbGvPl93lhLXqzN55jDVDs8fCMDm8J1
9Xm+B0W+5wZ1r0SxyyZPMoB6JMHcBFoOcAWoAPYtpbTPcjsEkhXI3u/TkU8X
UKANmJ4heANLfpwOASU2hEk7aFkPLZ0g5KCw/mBc9YZyHpvsN7SGBybboCfW
bPPW5WdX2kz1amsbbX8TzH6ks7ygLSPe7A7K3kDbr1ucT2K5z8yuPk+kUWd5
oNVdddteFOQ90tqHvYl22vOCtt2xmto9zgkpvscHcUUNKzSPEv4bpd6ueKAX
IXa4yiMWCfzdqhBnlDAH2QZXIsT2RNgWR34iJlYvCN5Txg2W7PhL2ac0Yp8L
nKBqHfgXIbn9cz7IWuOovFnBG/GouzDBiviH42ookt/rj4+E8gAmwolXdm9r
eenLvNxBf/ZQZqQ/lvhaa3qoNo1GEgOZkQF/bkM88TJRXKezD3mjAB2h8MOs
8PO8vIca22SwZDgzZwCUzlhsJDc+D9N7XHKXTQPJcb8ocLky0JkT7EGpDb7y
kKXc5BHrQhw4u00mXcNrMmxLgm3wmKVAYGHAIBBRHwXq5EV0V0iPfilY5eHH
kPZEQO6KsXmabCVFvW6qg5YsSn84rvpM/k7SNoTZBylnlyP0yGhrD8efW5xP
afMzna0pln3bbH2st/YGs8HLr/XWKzbns2juC4Nz0B1p0doe0drrzsz6vPwn
OseYp6CdctcrLbeNxnaXY1pMHPJVeyx6BNE9KA5fqQp2JMJdhGpVqDxgK0Ee
2wYFkYsCAzgBwVMougKBcwiE04lEtXhefCDTHmOWebbikLDPsbHJr4ASo7Zk
qjGuZJRAGxDOM63wlZK/IPvhuBrR+7sIM6ALlMJ+X7zR5uqLJ145PIPZhe2h
rJbs3CuU6oFCPRbI7vHH3uQVNxWVvcopvEfo+52hyWD2cHZeXSz8OBr5GteP
ewvHnfkT4cKuRN54Xs4MsLQX4GS6agzWPSqOXK0OAa46CRXwQXtsYo+NJbmM
Q1kSQr2YvE+FLCAIw1Wa7L1cv8JBl2V0lwDuFCimhPQ2ZFnj0RuQbhpXd0DS
Qb2yRSt7bpZ2WRQ/JFetsLaeNtwP+R4E3e0Gx2MJ9jIUqgv7vlZpn2gNnbHs
BqO1j7KvOWLthOkRqb+iN7+I5TTZ/CO+GNBdXxPUNYe1sbjwhckz5ku0KDPr
MMNVnbrFaQeq/kSiPUinpyDdk8LgjYpgR16onaBmpcodLnnIrBEzhW9OIm2m
ZS16+RQmX2NcIXEoUC+J6S4Jnvjyl69tztvnfrHI1iRFljmx+oFY+FCDvNSj
9Qb5CyvcYyN+SK4mM0O93lB9UXZ9QXzcH2tXW1oTOXXZoTexeJc32BPPfkRp
2hDNhit7wh4cCeU05SSa8gvr1NYhT9aoP9obyXoUCzzNid9Xm8eDhcOunP5g
DqiDQ4nYJELusNHDdGpWpnmW679R4mnPCbQSBOAQzL6TdAXQTsC/TEvFT/WS
51bZGClbFUjfC+jtDHJComrAKAfvwn7rq+pzP1tjG/bYhgE25v/yp7ejpmta
6W1a+NgkbaOlP2S+GrR52zXmZp25xWzv9QSeGIxPs/xXLTpw8txoao6Fb5t0
TzS6IV+4SWt6YrDctDufZcVB7upzBVr0lsc6/VW35Wl+7L7WOujLa9Y6n2gs
N+zGRn/msEyxyydO0lUgHupj3psJZ1vU24xhEzJmQ8JpGvwxjVFTE5D4vkly
3yEbVjJcnbLJfZ76NU9xT6eVi375j4cbl//0/LHY/Z7vGJfp9Wk/62i9djVA
3zLLm7yqLo38h+RqXGUf1TqmXOEJTwQcm9TGzkROYyzSF8zqcQe6crJv6bT3
NdrBrGzwsjscA3HVnFvwmDYBzQDe8zorci/uf5IXBbUSlNEBZ1ZPMFKfG+rN
zwJxBZLSSYZyVqp6EfVcyXPXx/x1BDEkp9dEVKqpAvJ8F4ZfcYhueGRvVMSi
EN29ID5BjPfS4HKV+cd//idHK/PZ5360wTfusSyjkEmZ9tPppdaquLrCLHrh
0bzE4XE5ntIeIPUxPZzPTSpmyWbvbNXmbMU5BWYceKJUR+t3zNHvdHJSPv3b
d6awztIsKKztDk+fL7wgMy8httF43itfYCZaMGgNjEXzn9JGIFCnwgV9ttBk
tKQrXtidV/Jc7xiIABMUb4zH7ucEG4tynym1U87IdDDeGwo1FUS6o/5lWJM8
D4weMSVTvirOvXGpoDrq9V3IeMmlVuS2FS5+79xf3r9A3zN6sr2Ca7lEu9Y9
wtNt8NkrGFx+kT7pP/6bc1/8j+23rnPnllSmBa6xV2qxsNP6++sqitVlPuih
1wKMVSthnMCsGzLD+peydxdk/01IHJznvBNAe3zxDl8KyAEEnmZADFhM22eb
DwMTuiVAzjo/jAAGLp5ZQ+F83gKRamCe9TmRsz7nd7wtcTTjmPmp29Hk887x
tACtgeBNpwWYnSZUN+yN1tMmoEUHfPF6zPCUNNzRW1+Gs59obG982fe0put6
Y22mqTkv3qgxTbrCjXrjbQ11KVPd5Mlckeo+8XUHFxBwpzeD3qqawtPklimD
+5xy98P2SRF997+kH90evJNV7nZyqxNK+7mvav9c0Cb5eadWEueaf73wv778
kfgflo5C5/5kAEbncG+fLir76U/mV3u8UYnDzroW9RfCdLMrHjz3o74M/IPC
evyl5ON50Se+/JAv2hKKz7o9TESdGXDohM20E1O9xBRRKYqAZUghRVeq+fx5
+5bwuy40OPaaMttdrrocf0tuZAwz9xLGu0Xhwrjtsc362pg5HIw9Ueu/Nug7
Y7EWc2a9yQ6s0Iv8/AdK42ggv0Gf+coduGd3tMbjdaR2IBy7azNfchguhe1t
WeFJHvWOpf21xPT0JxcHHtwrrykd7+1J/9Mf2S8KrOf+ehi1lpz7m4/P5i95
Cjx2YXmuJirT//P0ruIvzrnlf0n+Ahlt2f/rXyjmB+euXeCOw3STyHRH5ean
fTX/btZRRpmzkdKKPBum/OfVZOjHX7yB9Mcq5wFLcZIheytCFtM5QM8vi5FV
EZqyUQwDAmiHDx18r+OaamKcZjD4tqHxbSf229n67bHf5e30e+pz/G8SsSmN
rV9jelgeqcnL7Pb7Z1yhmUD0CaW6o1X1ZkemPKEhd/BZONhWUlxHGedDhQMG
33QgvyXT/yaSW6egJ+IFzwL+h7mh+2U53cUFIyzl3pfk23TlsED5MDevtrb6
fs1lzl/9zW8PjutiBaO6UPW5jO0bg5dchaURXZYT9RO2f3n/T3kxZGetJaAK
/OPe//7xT8RHq8c5f/63HRCd+JkwX+kQKKTP5tuMZWpjQhVMZOmUun/Zfx//
kvsa0g5cgHbONhTtsCV7UgUgalEC8iFj0kHZPVsIYGLjW4q+Zen7RKW4SnU8
vr9vJIVZWDeIqxsthn6PaxbWjMlVHWHPc4dxRE5u4MYVs6NdqazXKEdcmWuk
cUJGPSPo7ki8WWNdcsSHxfpx2NKhtEx4452kZTGU6HT4n3o8N3MjrXm5MxLT
h3Tjr76iTg2RWy5wZ/F7OWUXz/34t//09wmf/5XEevWccOfmUBEdvOS33cgP
+AyhvZWkgf7lP5xOWcWG3b4PF/5M+A/Lp96ffNlo9fgvwF0PW9ga4uupZkO+
xpltiESzXOrMT+NLwZ9e7Ccz54WaAzZ5eF6yfV74VqY8W0kB3pwEWm6PAc7k
KKZX9jl9pbaPphqJ3yxbfIfD7wbhb7HJISb5aCepnDRbNoTKZT4+7sjsMmhn
ISKJ6dc1pjGKHlRTs0bDNqGdg4hupXbE4RvE9EsqxwJmmcGsY5RtVucdlxuX
9P6RzHC9zfk4HGgNRdY04WOJ/eAC9voX/L7aG9crah5XXhX+8sLJf/1VaWH+
Q9Jd9pfwp7b1EnOWl1bkhDIx1HT87u+sLvG//M+ki7Rv9R8K/kpyOrsj+9GP
Ks0m6gvBwfrhTzBx2/5kIGGLhq05gbgdMfyfX/1T7AtWF2I4VnuPOMS7r6BT
jmLrKyFwmmceikxySMBhkoOn2viAGcASQIqiVLkEc/P72EvtfOClSPu2jMJH
AhrwM6JQbumtH7iglGOLZnOPQTVvNq0bzMtK1YICX1BgSxS1YjbMWQxTFvOy
wbbOI0HdX/T4RuyONb17VabfzKCXhdq5UE6jwwXURY/RueTOAU5wm9C/gcmH
0ezLl2rC+VnnfvZnu5/2KyqL0V+ypX/yRc+Nhkt5pY6Y2V0R1Lkj2x8+6eP4
yukwjio3Zw++/HnG8vLyhQs/yY96SI60rbnz5zT0ZLK9OGqvdNsSjogPt/52
crGILXx0XjAnwJNfyX7Lwf+OTx5clDJtHB4OiDpkk0cs/JCNntWyz439lKgA
GWxLCK2LoFXxZ4BzUBHAYCq5nS0EfJ6VZ2ud5FY6NCmBd0jd6QXk4OfCDYwa
kEOTBD6DopNCyZKYaUXOCERTGDKmVPTJpUsI/p6DrX4lHrDqHuLSBVy7w1V+
ZKuX09DZcLROq+miTC0QNRvOAY5mQiYfIenmWH51Xt6tu1fKawtvVhdezo3d
K6m5l6htKL92JT8/UhEsuldWUlh1qaSmtNJbfSnwdXnl3UTNzZKqu9VVV4ri
N4EmKbtyr+xyojD39t2a2zn+uvzsmwWVddW3XxaVvg6GxnW2OQEGatlvWMj2
zzI+iPGzcoYy+wE4DFFgBgEJkVIRh6nVIj60JYAZokQwKAQrYuYIzsFIahUg
ldK/z9V//zn66SJIg8icjNmEw2jps9WBjXQxyIRrIEPyxasc0RZfBn75Mk88
B0lXJNJ3GRLAebta3qRTzMqZ3SkfOdSGgJyPRp6b6DZcOaAx9Ho8bSSxwpds
yMhXlKUhK1FjsTYVJB6ajG2+yHXc/jpec81of5zIvlwVvVwUfxksv6909+TF
b+uITn9Og97f7okBITceLXxKWzuCZXc13g5f7m2Nrr40finfd6my7EpJ2WWP
qz0c6CVV0yBmeHIgot7z4a0MwQYPWuXLN7nINlexx7SyZZs8IcBOumifBTFd
ViCuhFhSigMptcQW70jxFa40KSWSYmyHIz8UMOI2yYbeCXEmybPlJ3z0t18h
oBAAVhclqQ3zn6vAO47ivZg8kpG7QkWSj5wIsfc87Jgr3xaItwSCowzhDlc4
opAMYcyz2OfIDy7K59LFkzZLi55+TVGjVtuQ0zlAkJs88ZYYfY1bOoMFwAf1
haKvVdpZd7RZFRqLXQZq5Em293ZJ5GlB/qSvYkwZmffGWzB62h7pUdkHbb5W
UHBd8Ua5YTRc0aD2TTnjDRpDU3X2pcpI9fWK2pryGoe5y+cZJulFofyYBwOu
3oGoYEuScnJPrjyE6COp6q2QOBYgQJ3u8kQfZNQ7IXHEwZIs+Q4L3uXCx2Lq
A6LZ5+NbLNkBHz/kKpLp8DFHcczGDlnMCh24O0DaEV8xC8HAqoOpunWm3ED4
zckYrHFkgHzw5sM0KJnBPAjgSsD5r7jyU55sXyhNCiRvObL3LDnIpW956KlM
vSElNnWWBWtmt8kwHfDPa8yrsGpHDM2J5U2kGXD11GAf8ATfENS6J7te7u7x
lNw1KJ8nnA/L4w35iXFjbFBg2XDk9WLGeWuwV2vqcmU+N+r6vVlPSHOPv+CR
OvO1x3/HSNeVBcpLvTlXEsXV+VetplGXdx7T7Arxj2z040XZr/joIQ9ZTpcu
s+FNFuAEZba+p0NHaaJkuhDcy+5FaD8DPdtCj259Kd45D71lvBhj54/T0Hdp
ircXmeP7DOKEhe7zFFtcaIfDbMMYR5gVEzChUmu+6yIYsDcrQ7Z4DDkn6cwv
OeCRRyLVO4EaJP9P6cgpB94SwztC+aeLMAjLjxn4MZ9Y4sCTXHhMjI4oNY8R
uEOvf8OSzbLhLZwcksobQFwFil+4At3eQB9MrJlDTZr4m3B1g4nuys18VpHb
XFwyYcwakWYuest6dP7JTP9rs/5Zlu12wNIay3lh8ff7Sxosgcb8+B2/pS3X
9zjmrSnNuVZZdNNkHLJ7ZhBm6/thGpz8QrjHUTALH5B6BdJuiHV7As0xj37L
Vb4FCU2I7YqINQE4qt7C+ncy/S4L3b0IQog4Tic+CtTg+I5NfuCpD9JRUBSA
n93kyjf58pR6Ty2Of0yDAFJrvjuM+Effp+HvzmPJC9gWm1gVqNYFqoN0+vii
cv+8fDddviLAALZZ2F4aupeOb3KpRQk9jRtH1OZhm7tJaxh3BycI674tuGw2
dqFEC+7p8lXWZSeao9EBiJwjHa2hy23xKx0w3KWSX3aa7kaiffrAsDbcFq95
7M/tdPufOfXlJdZEqetxUVFrsKjflN9oDN4py74WsQLNPIuYXxo9DZH8xmB8
Kqdozuhbx61JuXFDSG0qrSta54ozNm+JzNH+OcS+KNQv8VWg3M8L0S2jY4pQ
D4oUEyJ0XkQuCfA1PpmUqLe45CfcvsdXHUq1bzHrGrMcoFzkK5YFcpC0NyWK
DTHyMV36KU36m4vQh3RGd6WIArXjnUS3I1DNi6gJuWYE1Q8h2lGRGtiWBTa5
KFJN4IZRlWmUMI2hhimFcZKwdqO6HoOjI9PzzGJ9YDY1eQONOtuILzIIlK3F
9MyW8zxSe7ek8nFh/kutts3gqMu69ix6qR1TdFJQtdV0JRR9aHS8yIzcKbhy
Oa/yfsh3PajPr7DlVfnvF5YBVpuNeY+s4dryeGW2vVNtHIINDcrMel/uNZf/
YTj2mLY0KrSdck2jEGsgtE915rYooDGn0Z7VqPW047ZO1NiDaRlx6HZ3WAwt
lOo1TgwRmklSOw2rp0T4nET13uRfkKmB5N4zecdhagzTjCPKWSm8Lse2wFyQ
KgBXH9KlQMeCSgpcwArwUEJ8VkqueQLDLle3093tD74JZbWGQk8iwUZwTpqH
tc6WYPB5btbzeNbzSKg+HHoZiT4PhdsSRZ0VlTeC/luleXeqi6/nxx+U5tSV
Ra7kBirLLpeUXa+tuHS5uihR6Kosjt7Kv9NQ8PXrmLO3GEROwf3aK5W5WZfK
SipKb1WU3ywpiZUXO6+U+u4Wx57GKptybz1JXL9ZUH7nWtmVyzk1lVnXy3Nu
Z+c/qrhUcanq8t2r1wsTdYn8poLCx7HY3ZLE1aqiitry8pqKmrKKG4WlD/OL
X+QWvMrPa0pkv8yPNBeGW3JDbWF3f8A/EQqO2919Sk0fqt72ZXUrVP1q/bQ7
0KqiO02Wfr1hHEY3FOQORq1BKEMU06xgpBeoaEA8LEjwYYTsd9rrM811dvNz
v/tlVqguFr6aF76bHXlpcLRnBp4W5N6tLrhdVXijPB8wc7c0v8zjuJUdfVJS
kue01daWVt2oLKwuKKzMvnQ5r7Q6UXj3blbt9cLKmpLL5aEb8bw75dVFN+8X
3Lqb53tQ4r2Sn3ut5lK8OLv8Rm1pxe3qy/cKa4vLa2J3K3OflhQ9ilU9Kbx1
tfRqcWFJTUWitCY3dD0n505JUVFBbXVNVm15/p3L+SUFtRUldy9V1ZYVlNaU
5FwuybpaEb1WnXelpvRSbU115dXysuulRTdLcu8WRp6URh9n+25a1V/r1S2Z
tjeZji6NoZ2gV8LxJoQAZXrU7XtFqzodtqFM+ziKrytVW5R6BcbessUnbPFZ
swKoVoarWRk+ipBAkz+VK15otL2RrAan65E980k4/Njre6DWd0RizWWFdwuj
tYlwRX64JpF1qzS/3OO+m5PztLjsbmFhTVFBeU1p2fWqxJWyRE1R4ZXK7Nrq
aGVlYW1toro8Wl2QuFJRWlFbWQZqfnFNeWF1eVlFRVVpZQUAGKwsqS4rKa0s
LbpUUnytuOxqUWVNYWV5aVV5RVVlZXlZdWn+pZL82rLy6qqKmtrCmgoA8MGK
irLKM5RWlRVVl6XGi6pTP6oA4+BbrpQW3oqHrmQa6oLupoj/hcX6xuubDEXb
SWZ6juls3RgFMGN19qu1YJKu+vyDsBx4ljVaPQcrjjiAKDHI8IArMAeBPZ+T
ouNyfNcdfIOp+vSWmVCs1+nrcPn6Itnt7sALnak7HOkoyHuRiN0rjt8sjN0q
ynlWUXLJ6QR541m84F4051o893JJEbj7QnC9NVWXqiovA/ldU32lqupaZdX1
qurrlVXXwOwoZXATRFLJZ9wprrhfWn2vpAoAnNwvrwH4urz6VlnlzbLK6+UM
rlUwuFJecam0DJB5s7Tsdsnvi/tFxS1FhQ0Bb0c0qz+a1WbJ7Hd4plzBdkQ5
RpsXzM4JUj9OalYtznFS3QMpVsy2eTW9QFHzGD4tkx9wmX1ieylzJIBXRUwr
A4TWls4+CivHKcO82T2oMQ8ZHROOYK/O3qky9FmdoPS3R8LNefEn8dDTaPh1
QaI5mNWTld8bLWwP576KJxpKyh5WVtwtKa7LznvoD9XHc5vyC5+Fog3RnLa8
ovpgrCWeaIsn2mOJjiiDzjOAk1eheANAJPtVNLcxO/9VPO95NLsuHH0az6mL
ZwM8ycl9np94mkg8ysl5FImCX9IZzf890RXN7QlGWmz2N27vsMfXb7BPWlzL
dv8Iqp5ANUsq0zSqnlXQqxrLBKzsFUBzSjppsS2RyimJbFos2+NL9xij9Jkr
EFqArmUxugwpp4TojEw5I1eNSMgpVDuntAxJqWFIOYjSIGK7zNYuj7fBbq03
W3rc/g5DZq/e1a12ttH2JoP7pTP42Bt4aHe2WlwvcTWw0iPg8dHAlWdOOMOd
KlOH0tSpNHaTpm7S2EOYes6O4By8p1VrbtfZXhvtnWZnu8neorcyWt1oe2m0
vDRaWzKdnZ5AVyDY5vK2mO0dlLGH1DMf/z2O3Up9p0rXjCq7leph2jCMa+Yo
0xptm4dpUAoXIGpeTMxJ8VVUC6JlAlCB0wcGyyKMTnFF86LPXQhAFIOzzWNn
f86JrPMVAJtCRrmt8BQbEuWWTL3Ewxb52IwAHRYqhlFqRGvoIuk2mBykDEsG
z4ratUg6Zkn7lNo1YfH32X39Ruc4oRvgQfOYdkNjnZSSiwr1jsY+IyHAtU2L
sGlQc4XYnAAHzhccwTl4zxhETMDUFHA6mGYSp0F4D0DYoJzog9BeOT5EqCbU
himtcZTSgho0KQYfVJx9/P9/nBJhUwp6GCLGIHIaoqYBMwIMSKx5NrIuIFM3
y+x0kijXJDiwsfukdktBLghl8xwxKHyfWRKkSPv+ygVyKMAO+CjTlOYqjvnY
ERDGXObPP4GbWOajgP9FXD0BEyMiYJSoBSG1wCXmMvBZFj7JI8cl6gEZPSDB
F6XELEu0IVIAd7bKgzZFikM5tc5lNl0DHIgZHJ3hWMQcN5ldjmfLB2J0S8Js
clgRwkt8CIiZZRG8BCBVrMqBLMcWxPA8D7hd/Ej8+wJYY8DAspTZorMuZsjZ
YCs2WMguR7HPJ5lWMxfd4sg3OPAGT74twfYgcpknBQBOfFuI/M7iTvJzDxAC
zvqIixyy5McZ8ndc+ChDenhRDNzNYZrsVETsC5h9CBsQviYDz4XZ2n0gVh3y
lUdc6pCvSorobYl6FQKggdlf50k2edItPnD6UgBmezZXusUSA2x/D7sZ4r10
8SFbdsCS7rOkB2xZqjO5z5HtsST7fDlA8huABLvLlQGPvM0S/v4A33i21ZzZ
obTPw94KlcBEH7HQjxIVMHTAKjJrExz5epp4gy3dESCbXGidDS5Yvitg/sL9
d4hKfrMPnNnAyYOP06VvWdAnPnKSJjr8Je/XPCT5Be+DAD3mMf8VAGOUJMxG
F/AsDliKg3Tks3/k4NtcbJNHbAox8Dj2peCJSDc5oqQIfKlshys+EMkPBBDA
Ef87HPPBN0Lv2TJmO3e6+F2GhDlny96ypCcZksN00TFLcrZXWXrIlgAcc2XH
zKekR4LfG2drE0c8lPkjFBb8nrGQ0P55yUc+eZwB76dD7/jYWxGzGRg45WMJ
AVhKbbM/4Cu20iX/F/5SB7w=
        "], {{0, 56}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{162.6666666666663, Automatic},
      ImageSizeRaw->{100, 56},
      PlotRange->{{0, 100}, {0, 56}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                19481.8703125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 
               50.3845243979945}, {-16.35176703734156, 40.452390631628475`}}],
             StatusArea[#, 19481.8703125]& ,
             TagBoxNote->"19481.8703125"],
            StyleBox["19481.8703125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19481.8703125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                12176.1689453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{51.14620554103995, 64.06905703457855}, {
               4.7622920885222015`, 40.452390631628475`}}],
             StatusArea[#, 12176.1689453125]& ,
             TagBoxNote->"12176.1689453125"],
            StyleBox["12176.1689453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12176.1689453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                19481.8703125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.830738177624, 
               77.75358967116259}, {-16.35176703734156, 40.452390631628475`}}],
             StatusArea[#, 19481.8703125]& ,
             TagBoxNote->"19481.8703125"],
            StyleBox["19481.8703125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19481.8703125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                14611.402734374999`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.51527081420804, 
               91.43812230774664}, {-2.2757276200990475`, 
               40.452390631628475`}}],
             StatusArea[#, 14611.402734374999`]& ,
             TagBoxNote->"14611.402734374999"],
            StyleBox["14611.402734374999`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14611.402734374999`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 
                12176.1689453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.19980345079209, 105.12265494433069`}, {
               4.7622920885222015`, 40.452390631628475`}}],
             StatusArea[#, 12176.1689453125]& ,
             TagBoxNote->"12176.1689453125"],
            StyleBox["12176.1689453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12176.1689453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 
                21917.104101562498`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.88433608737614`, 
               118.80718758091474`}, {-23.38978674596281, 
               40.452390631628475`}}],
             StatusArea[#, 21917.104101562498`]& ,
             TagBoxNote->"21917.104101562498"],
            StyleBox["21917.104101562498`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[21917.104101562498`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 
                29222.805468749997`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.5688687239602, 
               132.4917202174988}, {-44.50384587182657, 40.452390631628475`}}],
             StatusArea[#, 29222.805468749997`]& ,
             TagBoxNote->"29222.805468749997"],
            StyleBox["29222.805468749997`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[29222.805468749997`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 
                9740.93515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{133.25340136054425`, 146.1762528540828}, {
               11.800311797143458`, 40.452390631628475`}}],
             StatusArea[#, 9740.93515625]& ,
             TagBoxNote->"9740.93515625"],
            StyleBox["9740.93515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9740.93515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 
                26787.5716796875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{146.93793399712828`, 
               159.86078549066687`}, {-37.46582616320532, 
               40.452390631628475`}}],
             StatusArea[#, 26787.5716796875]& ,
             TagBoxNote->"26787.5716796875"],
            StyleBox["26787.5716796875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[26787.5716796875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                17046.6365234375}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{160.62246663371232`, 
               173.5453181272509}, {-9.31374732872031, 40.452390631628475`}}],
             StatusArea[#, 17046.6365234375]& ,
             TagBoxNote->"17046.6365234375"],
            StyleBox["17046.6365234375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17046.6365234375, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5460988028072107, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
                0.}]}], 
             LineBox[{{10.453901197192788`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
5BX8XIoV/Gms9liHqlZ769ZXedc6qza5XZtstk2mxbMzu2EzCKwgCOPyRTJ6
NVhhgJDD5D4TYoCLXB6xokTg4BKFYDcyOMlmADhkxlMCyACTGBbGLWdAuGQw
vSrKIrHwVNAnycTzxm/efO2dt3/yzm9+/O5vfvRbfv7xu7h8+7V33nzzvfdO
+QBXgnctFqKhhcKyuJGB49xEeiAWk+mKsKqpWuuq3eTxbLTZN5qW3JfZ49rF
QgIrsPFnQFcECMZOCo6lHGFaAIW5TsggI9b9afmD1tBJm9MylpDngJGWAxJc
ryXGpsZNZp3H68Dwx30TmODbnnj87iVLFXOevHXpiq8sXnbLwuyvZ2U9vGrV
dQ8/aOrqgbYIcUQDLBFgUW64EsLTEon6GEuEmBSED5Bx/1NDhv6WjfVN6+t2
rvM0bK6s3uiofd6Tfee8PmcHC6bcw4Q84yBJFr8aRUi0RPxCKEEbCtYTC3Mi
gwQtwFL+MuFMq+0k6EiskTINRyPTYT866XBaioty1arCaDKCEdyzMNO6d9/a
usaN7d05ja1rauvXerzbvZVPbN5iGdl/issu9MrP4j4WDXCrm/FxT82osQjH
kB/S4jlZw/r+XZsagFX9em/z5prajc6d272L75jX7+g8j1WSh20kmQmv0sD6
8MMPQSpEVBDXGDiBQMRDpiAyIvhPdpTwB3ELmA4kB2lPICMPPUhBBtkwSBQV
57mclppqd5xJnwR8DyxdVt7TN89gmWtxPKEzZejN8zW67NLSm559rqx/zzHA
wqAnp5g0yULnBFaTcc5FXPJEfCwGupKeu3/ukGEQWDVv2NmwobJlS23dJhew
WnLn/GuBlViWJcnMZK4U4W5Iadp6R+KayasAoDHyCkX4lOwrQo+c5Zlw39Qk
jKVz/snmlvpQcCoc8gVjIYzgGxnz9INDCyyO52yup022RQ7Pcptzjdl8W/bi
ssF9xzn7MZkHJ5k0DWkjyVoykApKcfsiAU5kGQ9l7jHubt/c2ArS2lTdtm3n
zs3u+h2V1wgriHQRcifGAXOJrYliUwFlqJDMe6pMxEZ2O+FDtj3lBV2p1EV1
tZVyGCmBEXz5sceBVZbNtcBV+azFkWl1LjRZlmp1t2YuUg/sPzaDFXhwnEXG
GPfXpUiC+SPycBOy/kzwyMzch7KGTUMdW5raNjeCqNq3NzRs9TbkVi29a8E1
4kHQDJgIrjGgIDoBXCAVEl8Ug2KyNEMhOX20lwlsC37U6XS4kSxPgAbiBGXi
8sSJExTo4zbD9m0lxflmk84XmgYOj67K0fYPLbS7F3rrMpyeRS7vYqt9pdH0
9cVLi7qHj8kcx5KTLH6aSae51EqSSotwABNgwCmWAHWxJ+/LAFadW5vbtza3
bq3r2NHYuK2yMa/6GmEldhcwOegEqoDvTDyIcoBD8oo2NVE1pVKJEop8IsE2
gIkFcIAb6JN2zDY3N6OmXwYK511tLTVeV1wKTwamgNXNTz6p7unPMNvmu6sz
nJVLK+uWuypX22y3LVmmHT50goMSY5ETzP+vLPQ+k46zOOT9OIufYcmTLPQx
C5xgcZAWy3wse8S8p2tbS8e2ll3P13flNTc9X9WUX7Ps7sxrRFciXECBTbEZ
jKXYKj0Dm5x8Z1CjWHSj5QlgKG6EFcFXQslmTMTLSlVxrgC5mQSsvjY3wziy
b5GramHVzgWVdSvrm1dX1a2yWW/JWlQxsBe4jE0ePfl/fn7m3e+cefMQzr9/
81sfvPu9f3n75aP/8DdHf/uDs//7Z4kzH7FobMGDC0ZNF2DVvL362mElxLgY
KYWtmCx5QDxEV0RFVA4RRyViLYyiCumRBzLbaCUCPo7X41IXF3FDkus4dseC
LM3gnuV1jVnV9TiW72xa4a1e560EVoaBYb7DIHF6zZPXq+Yqih9VFD+pyH9a
sfZhxZanFeXLbl0+S/HqoJNFT8K+Wnj/3BF9f19ue29eB2HVUdiwq6Th2skr
DBwOneA7CBzkiePEmg5lSExRmAuyneQYNCPJdlKjtJuCFAQPQ0mJYChiMhg9
DrtBr4VfDLq6K2uRZnBkxc6mRbXNWbUNK+qbl1fVrKuquiUrS9c7AGZj0Y9V
i299pWbZq555r1Zl/rVn3svV2Uc8mYfs88vn/+V/GbGxyFHmG8v4xiPpWHXn
twCrdmXjNcJK7I5j8nI/eEroPrLbSbaT3U7ltMOH7qL1RLKvBO3hDIOWyUFO
SQ4cOe0OZWER+hyJJ475ArfPW1C2ewQQZde3ZtY1r2zataJm57qaGmDlHN7L
JVH0g4K5ird7Nr5qfuDl8juOlN7+omH2Qd19o+X3lTymeKO3nIV/zyKTKx98
bq+utz+voy+/E4K9p6C1s6gRWF0jHoSogQ0Jttq2bRuZ30xeEgVhpBtaBCkK
aeGPMIFBBZtTxCVgWeFGaAFUE7vN+aJAgpmNFklelSB5dXtGJrDKaWpf2tS+
qKEtp6VjdX3Thrq6m7Myjb39HCv2ce4cxT/t3vRSwfWHcxUvl998SPnlg6W3
Hiq/o/wJxS8Gylj4fWC1/P5nR/V9A/mdA4XdnblNfUW7ukuaO1RN1062M3mF
HSIdA6SVQQD4WWFF99ssdqvRFAmFpwLBacj25+aXDg6vaelc3tad3dye09a1
prl1U2PTzZkLNZ39fHU2eXTH44oPDu74QemNPyy/8edV9/7A9LVX7Hf/wDbb
9Jzil4MyXQUmFtz1+F7DwGBB12BRDxhwoKSjR9nSqW5efk/WNcIKfAT2Ia4B
VmLt5up5MBbjvur42JTJYK72eA06PVQjoLhtXmbpwMi6tu5VHQNLWjvXdvSu
b2vf0tzy5axs6/BBOfx6fP39in8e3vS3ZTf+jeov/lZ3/Xe1N37X9PWX9Ler
H1W83lHIQuDBwNIH540aB3cXdg+V9PUWtu1WdfWp27pKW64dVhRCAQJnz57F
MGESAJzPRLYzigMnmMvqLFOqKGJwKird+mwGsNrQ3rume2jZrt61XX0bO7u2
tbbdmJWtH9jPt5LEj298WPG/hjf+0jPrZ47bfmq/5XXPHa/X3P9D9wMVTyt+
2qVkkY9ZNJL9UNaoYQhY7VH2gwGH1N39pbu6y1pXzFp4LbBK38PJ5KABDACy
3q/eZuB7VqI8QKcv00JUScFoOAIjkn117gL14Mi6zr7VfXuWdPSt7u3f2NW7
pa3z+oVLVD275dXKk88/o3ine+UvnHe/6brtl46b/5Pphp947nzFPVvzjOL1
XrWMVSB79tyDht3DBb17S/p3F3YOq3sG1Lt6S5tXzMrsd3bw+FWUFgUlKRmW
YMKwcPJ8LDaWOqQ/eVyQiISEfUUZklQgNsJqxr+TbQkyVsXWaFAXcEM5xY0J
wPMbzkPcyfUa7I4yg1tnlyJsOsG+nrFAPTKa3dK0Ynho5ejokt7+nO6BHX17
b1i8Sr178AwPOB3PW/CltzpWvOOZ/T+ct/yu8itvO6//VfXtP214XJOheG2o
lMXeZ8FPtjw179vGodGtnS8UDR5RDR4s7d9b3jVi6Foze2FrhUd2iaalwFlY
0Ek2fi78vsROx/hxEpdJNhFjY0nmi8TGZYUTSPBzkAfPZo5ADM5UWmyQhoZz
U1MTk+UVRBNJofSd88gIuoLFPjY2ls5xREUQ9VQHQp7w5JoiyfwTk+W5JTut
HpfWjllGb26HfXXwwLKe9uX7hrJHdmf39q3sHtzcOayYt7hi78gfeJ9PL5yl
+OBF1VuOuz5suOMfLYr3am74n7vu/buWORtmKV7pLWQS9OCJp677ykvawUPP
D7xYtPdA3sCe/J7+Qi7eF9/27EhNJ0yWhP/UkUOtD89R3Pe4YsGqGx/PUjy3
7EuPZCieXXTdw0//xbe+1+GPfgjcgGkoMhGJ+gSxRZGP+2XyuyCOSotZmzdv
FlwJx5BCwQIfZHCJQmHVAyUIcAg3okPAAgFVVVUFs1YEcJCmA37AZdEYnDqL
79QU8piqbyxaXHpwNGewJ+fAyNKRoZyRvdv2HSrcc+S6RatLOvrkV1LH185R
/L8XSn5tv/1NneLYrq/9U92Xfl3zlZ+1zSl5WvHz/RbuJ4bObpuT+aJm+JuF
h18ue+lg0aEDqkP7Kw6N6Pfm3L+yRV/LOBmczph33YvfN/YcXvfSG0X1e57q
eSF78KWcngNrevdvf3SuIsmOYijBEJeRtCQZ8icjwSRtGuHr4xcKONquyeSQ
ptjXJxYgRJyBpbazAjexvV+QpWgNkILkIO0BJjzBuOzjOGxOHqdLsOlgHHrw
r+bMKRjsy+ltXzUysHigZ+3w8PbRA/l9o381f5mma/h0IpmUzm6ff9NrdVnv
980/t/fJf3Ap/qXrtt+23f2Ljme2P6p4Y6+FRY+CXpfc8fiosu9Q0YEjpd8e
yt9/oOw7BwzfGdQeXDIrp9fdiWEzdiwjSzF4eIOm+uYCp0LTrCitVdjab3K2
3bX35c1zlwCrD0+e+WeMaWIsJEXOL1ImUkohHSuxlVG8YszS9jqKdS6RAT4U
ZhcIiz2lwJDEFJWAl5Pywg2eWaJUFxRwuz0c53T12IaNFfuG8/cN5R4ZXT8y
uGPfaMGe0dyOwZvmr3Dv+aa8V9i/8ZkbfvfN8p95Z/+u5d7fd9/zXvudv2l/
6BfdCwueUvxkj5VFTrJgYM1D8w+bd79oOPyC4cXdqv2Hzd8fNX93V+nezLtz
dtcN8Z2k7OjTCxR9h1e1H3nCM3Rj4ws31Y5e17Dvq7X9dzXtfu6xeRwrmdJn
lnWDkzNYxcLMfy5w6e4TYRQxWXoT8aSDI/b9isL0S/EOsoisMtldgmJN8gWF
yLlwwFNdYzJbna5Kv5Q8Fgh9ec4cdV93we6egr27t/b3FO4Zzu+Gzu99aM02
ZU0Hj3/GJtc9c8vf9ebBbPjHjmfe63r8v3c98d+Glvy0KyfvWcX3e0BXZ1ko
sPyBp4eNbftNvbCyekr79jm+NWA6vEs7vO7Z3DZXZzKElk5mLr++58C66oFH
6vfPajpyZ+uRexr2zjrwyqqD389/Kkvhj/2rTPiJsdNRIqrpidQugURcXv25
QF7R5liWemeWpaKd4sXz9EvakEDbkC562x2cSDYGFUKUgQcleR+y0Wqr0Oq1
OpPe4nA3t+Tb7durvJvrqrc01a+vrd3R1Ly1amdpQ/uSwnJjY3eh3mQ2qF2q
nHZ1xkH9U9/S3v/Xhtkvmx9p2HjzHnNmn3V1vXaTuWD9LrfdVaKqLS5rKzW1
ljnriuzthrYaVX2jvkO1UacrNLksNqerPF+9UG3J8LRnW1rnlFbf6e6cU2D6
ms49R2V8Wmdb464uV6oKdVpzY3332JkwUIIdFvD7ZuKK/LjYbLhoM7YIpAtB
JD4aIOQYkZNYeibDA4aW2P/Dl70AtSyyLFY7GBe2Fo/JxOIqm83d12vt67X0
D2g7Oi09/RX1LTV9wxVVDbbWzkneYKjZU/a9XsuP+ype6yj+9R7tG92lf7/f
++qQu06z4dtDTXIo3ufSKnc5zLurKoeq69ot3i53Y63W01nVUWvb2VzbAtqI
xX0Or3rwQHXLQEX7qGbo25bWoeIDL3s6BnT7XmjQW/KkpJ8oxz89sxs8FCT1
549FT10WqytLYmlMvNeQvi+XVvzln3l3fONTsmZJ+MMxi6cKEg0mDubvtMS9
Hlz640zr8PjkNYkYCzptShYHox1l4RMsdJIFTrPIBDv9h1avhYWh5VFx0qDN
45sgQAZ4OnRWOCxNQtcntGp1aBoVpEBw0uG2xLkVGoyyAI6pyJk4CwCSUHTK
6jAm08zOcMTvmxrnu5m4vcxNLG45sBmtdwXv7My8qiCvq6a/cSDWVcF6MFOh
DTnPwkoOBPFwUsGR6VDEz/eqFRWrqX/jgTApnLMT07i7XG/iy/TJ6SgLabQF
LOFn4SkWCbNgRNjaToMR/wJ8yBNGawlfIIWkmfRHzk3yPF+ziBi0Kr4HOTKV
YLEKnYbvqoWZF4nTZokTp86RzC5RKaUEb3TKd2baP0YPSCaitPnoDx98TJSW
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
vOgzIOLzINTPfwNFvmDr
        "], {{0, 71}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{136.66666666666617`, Automatic},
      ImageSizeRaw->{100, 71},
      PlotRange->{{0, 100}, {0, 71}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                33540.7734375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.76695779038365, 
               75.8717945810221}, {-17.738771810175564`, 41.88059374224295}}],
             StatusArea[#, 33540.7734375]& ,
             TagBoxNote->"33540.7734375"],
            StyleBox["33540.7734375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[33540.7734375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                21561.92578125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.14100211124449, 104.24583890188296`}, {
               3.3752873156881904`, 41.88059374224295}}],
             StatusArea[#, 21561.92578125]& ,
             TagBoxNote->"21561.92578125"],
            StyleBox["21561.92578125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[21561.92578125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                47915.390625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{106.51504643210535`, 
               132.6198832227438}, {-43.075642761212066`, 41.88059374224295}}],
             StatusArea[#, 47915.390625]& ,
             TagBoxNote->"47915.390625"],
            StyleBox["47915.390625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[47915.390625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                7187.30859375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{134.8890907529662, 160.99392754360466`}, {
               28.7121582667247, 41.88059374224295}}],
             StatusArea[#, 7187.30859375]& ,
             TagBoxNote->"7187.30859375"],
            StyleBox["7187.30859375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7187.30859375, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{4.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
hFsl/0rYE+RUam1mljnbZD10pG7354frmnseh1XnxUvHhx+BFWrZKJNMu+3H
B3uBVevlscHFO5PeRWD12/QUwUJzknRV/+jke+WV8K/WAiuGEjuGREdHVsu/
Ir+6wFqUbcp/5fWNn3915Ojxzk/3Va4KVuO+Z4oV8QpTPHQTXQOv6Kwvt0r+
lc/H74IZsnLsLn/CptQTXQMffLL/WEPX34sVvzwllXznimLVdmns7MKz5hWU
Oaw/t7wyEO3yavlXYWFZOE0sKSnbCf/qcFXDnz768nhr39NjlfogVg0DvXWD
/e1TY0MLd6Y8z5pXdBSfMYFtMayKfwWs+MXAfGsgzL2xPung4do/fvhFR8/I
0+j2Wf+yzwBdmZghue2yN57pPT7Q3zE1Njx/55JnceDbZ4oV6Wowh7QQzXRW
y78KBHj0MMeBbs+Q6yCDMIIff/bNU2IFv51hlZQhueu0N5/ubTzTf3JybHTu
zhX3s8aKegctLaz6htlh3VXxr/BGGAv47UVbtis12bs/O3Cosul7/Sv4ogwr
8tshySkSyT2HveV0b/Pp/q6JsQuzzxorZgfpCAdtUoBFq+hf4bW5eYVuX/iF
F9e1dw7+bW95RU3Hic7hfmFNRpyhpTUZURphNVk/Mtb77fRVp/teIBTvt4NX
9xzOlv5+8ApYgVdXXYtnr08liFNCwmvSJJre0Ut/LK/cVXXso1Z+DbkRWDW0
rViTAVZftLTS+tWZW/z61TJW3IpNnCfuIv0DIf6AIouEImG0QZdllMi0ySJV
ZXXrXz48UNfQd6JjpPvUxaqjbWJJprAHEVZqdTML821j52uHzw3cnhmbnb3l
dt33+3+1br0v6osq5vyBqo6Omr6eU1cvDd2/PWWb77kwojDoHN6AJwyFpu2+
cHnX5+V/OFh9sOvMly3dDaeHDx1vE8k1yIDGrReljN+de3f/of2tHa1jF09c
nOiemDza2S02GEjMY9/whNcUK3Z2Ec4VVD34Fv1CTTgPYzBapArtT3760umB
iU92H66t6+k4eeH86PSp3tHkVAXtPiRs3gRA+m9cOTrYf2Ji7D4Xvu31Dl27
JtVnIR2gbxBLbswvHO/r67081XJhZGxpbibkm/j2xsaUJL/ggK0TK4au3/5b
ZePuqqYva082n53om7je2Dvwmw2JhINYpZy8v/BpTWN5e1dd/9meicuj03eO
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
AhME9r1w/Ge5axcYqcDqx2ny/wNFhlL4
        "], {{0, 69}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{132.00000000000009`, Automatic},
      ImageSizeRaw->{100, 69},
      PlotRange->{{0, 100}, {0, 69}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                36546.56015625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               62.91905463540866}, {-37.56743403886689, 38.9431788142426}}],
             StatusArea[#, 36546.56015625]& ,
             TagBoxNote->"36546.56015625"],
            StyleBox["36546.56015625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[36546.56015625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                26394.737890625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.11823877741647, 
               90.57562050836923}, {-16.453374913003145`, 38.9431788142426}}],
             StatusArea[#, 26394.737890625]& ,
             TagBoxNote->"26394.737890625"],
            StyleBox["26394.737890625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[26394.737890625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                22334.008984375003`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.77480465037704, 
               118.23218638132978`}, {-8.00775126265765, 38.9431788142426}}],
             StatusArea[#, 22334.008984375003`]& ,
             TagBoxNote->"22334.008984375003"],
            StyleBox["22334.008984375003`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22334.008984375003`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                36546.56015625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.43137052333759`, 
               145.88875225429035`}, {-37.56743403886689, 38.9431788142426}}],
             StatusArea[#, 36546.56015625]& ,
             TagBoxNote->"36546.56015625"],
            StyleBox["36546.56015625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[36546.56015625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                40607.2890625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.08793639629818`, 
               173.5453181272509}, {-46.01305768921239, 38.9431788142426}}],
             StatusArea[#, 40607.2890625]& ,
             TagBoxNote->"40607.2890625"],
            StyleBox["40607.2890625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[40607.2890625, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{5.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
2TXv/2iw5dR0/Y6FloqBpj0frfo+YlxY8cDvUkDPfJJ/DnEmrErAJz3eFFVE
992qzrsVoz0Hhlt39d6tDNu6ys/NCci05sO/6asvHW8red6U33OnaN3anzGi
h2JlckvLta0o5c7iQeT5Lw4fg67N+dxNnTXXr54EUQAIS8uOOT0s55sb6Lt/
4MRpux8xAZScaODc848eNO489AXmTxwqKyhwLo52t985d/ni4dNV6UlpIdsi
el7MuIjYs4LP6zamaDS6z5ITP667mNxxM731Rtbb//gHOMBBc++9/r36c2nP
riY+PKvsuGHc8P73kGBFbpdq7fpP3/jlunf/+pO3/2Lte//zvV/+edSGD4FJ
bfvw9bqqoof3c+svRHRfiu68nrxp448lZIbz7VV/0X0tpfdSTN9V9ZP6gh+/
8t0AwkrrdbGIkRmP8O3Bkni/PNEc2FtWYfPjpQMT84N52xMCbt/E8FxR8WGb
k0aSc3GmL7OgGGRk4PlUeXEJ516cnRgu23cCWGB7R09pQS7Yisc9TXklJel5
hb3dXcnJyTFp23H0hWeZ8Wzm1pD3Nm/+6eVziYNt+ffORTy6m77mrf8ssL0I
DX+6+n80XkmaaExqObW2+VrEb979T4LtMeIdqcotN04W37uSdq0q8u5VTXd9
gW7r64g36za/03K1qKNO13U7rPdKSM8NXci2vxfQooDM77zxvZ4rhv5LUQ0H
1o80l61a9Zdu0e8Kbl1gkdWEvm5V8b9xiECqRU50ei6fqV6U17UIyHf65B51
pCpJn9X3ZEae+HeIjKnq0o1122K2hUWZ5maRSNkWZ4+evaZMzIqN081OjMId
MMiZuQWxCcZoRfjs7HTWzgPjNjfYQ7flOZj5BOOm1OQ1Pc3lTZc0j28nNl1U
f/rWHyEEj168vepPrpyOHmkwDtXHtdSoPnzjO4gbBuq15cOfN1yt6LyX3d1k
rLsaUXdZo1j7ChLmIj7+h9ZrhUPdubVn13ddDuu7l6FSvEaJ04w499F7P3hy
M/vpefXIDWPHpfQ33/whg/AaCNmZ2xBLIXElIaG8uoBmgVxDnZYA0BSfwOGl
44wHD4XPL2LzyIL5wdPu8lSC6JqfBolksLnBI0a77YgDd8l1Puyra2oF/AWR
1eUUgzzJa/g9nGiPUH2SoFtTdUjXezu3+6LxSW3hR7/6E9BBjh9fvfqHLXfL
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

        "], {{0, 61}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{141.3333333333331, Automatic},
      ImageSizeRaw->{100, 61},
      PlotRange->{{0, 100}, {0, 61}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                49872.11718750001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               62.91905463540866}, {-45.533436082799106`, 39.42280042065588}}],
             StatusArea[#, 49872.11718750001]& ,
             TagBoxNote->"49872.11718750001"],
            StyleBox["49872.11718750001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[49872.11718750001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                24936.058593750004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.11823877741647, 
               90.57562050836923}, {-3.305317831071612, 39.42280042065588}}],
             StatusArea[#, 24936.058593750004`]& ,
             TagBoxNote->"24936.058593750004"],
            StyleBox["24936.058593750004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[24936.058593750004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                7480.817578125001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.77480465037704, 118.23218638132978`}, {
               26.25436494513763, 39.42280042065588}}],
             StatusArea[#, 7480.817578125001]& ,
             TagBoxNote->"7480.817578125001"],
            StyleBox["7480.817578125001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7480.817578125001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                14961.635156250002`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.43137052333759`, 145.88875225429035`}, {
               13.585929469619384`, 39.42280042065588}}],
             StatusArea[#, 14961.635156250002`]& ,
             TagBoxNote->"14961.635156250002"],
            StyleBox["14961.635156250002`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14961.635156250002`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                37404.08789062501}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.08793639629818`, 
               173.5453181272509}, {-24.419376956935366`, 39.42280042065588}}],
             StatusArea[#, 37404.08789062501]& ,
             TagBoxNote->"37404.08789062501"],
            StyleBox["37404.08789062501`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[37404.08789062501, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{5.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzVvOdXG+na7okJyoGMiSZnMGBjkm2CjQ04td12O7SzySCEcs6qUkaJnE0w
OWdEFNkYd9ih3/c9Z+bMmg8z3+cvmKeg2+129z4f5uy9ds9at2tJpVJR9av7
vp/rKj3lkNfUe6WODg4ODAxY3HvFyaXTX/G+dgVvHtQwKspqSooLa5glZSX0
9NdOYOVV8K8Y/ENe72DU/7rYwqo3UIpNLLSLVYHYRkNbKOUmGt5Gq3YcFB+w
uk1n6APZtOeg/DvBsusEbznDGy7wgbvZjtfOnZKsoqAtgs6OVm9i1BtE3Tpe
s+Qgek+sWwb78TCtOCnWMaoFHLzqqp93lH7wsILv7mN1709BPzhp9h3Eh47K
H0h1qw6iHTS0T9JNO3D2vevAIf1LT/l/JTbRSjsG2saptrAAEQTeggCvD4m6
A4J21Ul+QK7bOCXfx2o3nZXviYZ1F+UOXgvCDk6KoAOnZseo9oj6VWfFPrlu
F6s5JNUtn5LukQxg/TZRt0JQr7nqbFgIrAFXYdcFPnSGfkRpfkDBBw7SI6xq
00G0h1UdedQtO4vsBAj86X87k3+YWigki7ZxGjty1tAJOnDMdlf1GkFpcxLs
uqrmsaJ5vHjWhb9Dhnewyj2U4gCtPMSpDsCWztItF9kRQbPtIP5I0OziIBCb
DoLv8Jp9BLt8BStZIcp3vHUbRMU+TrntKNpHyQ5cZB9x8I6D4HsMdIRSgD0c
EGE7SgJe7GD+vKy2XeBdtHoLp9nEqUExgtjCKjfIynGScIosXsEJ18niEXf+
oLdgwpUzTxLY3RQbeOkGVgLChhLYcOJVsnwVJ3mPkW+hxBNo7gxeuIuSHOEh
sHIGw5/B86fdBDuxlhkPkd1TYcMKlknieTyynHNmH5JVHzy0Myge2HKTpNjC
yf+0rAClPRewBKA063j1BhbawCm2Cco1D+idr2Q0SLrtKZ0nMruDOd2x4pko
6VQAf9SbP+jGnfIUTXuJxzyFs6GqyXBVD56+6SGfIwu6AkV9ofJ1H+Uijjfq
JRwJkY2ckfSHiWay6xuDWEMB/DF/0UCopC9C2hcm7fRkgv2sBmsGAmT9fpKl
QPUSSbqJ+9Oy0hw4afdRSFu24VWrWOUmXrlDUi77KCfPGUcT4B0/6RSxuuUs
rylLPJelXkiQd56mtbpSxwPEy9Ha6Uh4Nrlu/Jyhw5u57CFcCpQPXLZ0p+lW
AhWTqNqhUOlUhmkiGXqXLB0sMMHhlFY/6kSCojNZ3p2l6cnSt4YLu4jUmRDl
WKpxKMmwEKGdxHGRA/h3Y/nD2EdpPjjrDlwQVssE1QpOuU6Qb5PlS76KmSst
nbGiVS/WnHdtW55ccZHZlyYYTxSMxIoaXSsm/Hk7ycapSFl/hHD4vHoyTrlE
ZNhDlSOFjdZk8fJpgY3AmI6HhlKUwzG8gbO83utqfQK1za9yLdPQcpbfkC7p
uqTuT1b2EmvmgxWzFxsG4lVzgfIFLN+O+9OzwukAq2U8wmrHVbHoLx/OtWoC
qqaJVStn2G/v6pkXKvSRJZ2hVeu5lmbPyqHTDHuyvjeQaXAr6T4r2cxuWCTU
bgRL23M0/KCyeS/WgZ9kNkVtDqhsO13aE1nzNl/ZmMbpDqbs5Zn1ETWK2BpT
inAkUzt+mmcLhyZTjY3+rDFXziZZBrrlvx3LP2J16KQ9RBvsxLoVkgawWsPL
ACtbEDSUY5F7Fdu8mdNe1UOP69VFop6LgolU8WQa3HGG0eNT+/FKu4lUbPGn
1EexV3LqZ0m1G5HKvtsNdP/XywGC/SDZymWLzr+sL4T6NoLScw2Co8o6g6q2
c43dmYrOfE1njnYoXT3ixV6LUttyWvXkylkv4RKa9/8DViQ9YAVq8ITVSgA8
f629zo+y4skcIZR25kOC89X1UVWdIZTOKE5jAG0gVLCX12b2qjL4Vlvj+PPZ
1nFX2lKEoutmPT2gZOw0e8GLO5VZZwmjN3gWtwVVvruusSQz+yNZtky9IYom
i6yuS+K3xQq7SJTZINnCxUaje828r3SdJP3T1uBJbz9A6wGrVaJmDYeMg6C3
r/jCqzntLX6MdU/+JKFq4JLKdJ7TH8cdjxX1J8pNfvSuYMHMeeO7RNXbZFVX
uu5tvHLMVzATo+4ubBKE0fp9eUMe7NE0Y2eycihGPJggHrluqk/i9YRz5y/o
GhKEprPCxnOK7kSoz4czFaKYy2yweDGm/GTLZMmftrefaIY9jBZYlQ2CBmgG
cKhAM6x7wssJ1i43xqabCGiG2fO6oXOq5UTVVopxMkbd4sF85ycaOSNfSrZO
J5kmzpnbfXmzvrL5ENVAhsUYwh/3lYyQOONxurEE7VqyeTFBO5FW1xrM6fNh
LcXrx89qJzLMwyn6yQTdvL9iKQBaTWrsdGXPukuW8GL7n1Uz/IwLowFa1I7X
gOMEsQ2Etytk89cMYzjrRMkCmj3rrxgPkM14Cmxesik8bxLD2/XVL+LFAOkk
jr/ip1kgS+1E+RpRNu+nGnMTb5AViEz1UC55QUBz2tzENn9o1kO0RBTYPaEF
T9mCl3zOQ7rsLrPjZesY8fsA4wKKv4OV7WPku39WLfopEFuHVQNXeBInHmcJ
LdklwatosY0kt7kqZpx5SyjhBkpmR8k+kLQrDoJ9gsp2SriDh7fQcuB3tlFy
kJYg3hPUwOAANwQ8zpqLaBMj3SIi6bqDlW9jZOso8RpKvOos3HQRH6DlGw7c
78l64H0OnWXvUcp99J+XFfCqnwK51XBsooElBH52C6V872oEVhHk3keyCWx8
QNCDF+DtpqNi1UH6nbvlA7EOSUtnaA+nBXGA0RzidPt44Lv1wG6DrwBDDWIL
uRAa4KY3UNB7ou6ja90uRrmPgz+66leBKyQadp1lOyDQiv+VvALfPf46ci6g
QDaPA7zeR4Nr9/M2BygkwAs78hFyQcEAB/o2YodxiNsFFwtsAM7x5zUY8HX4
/bGyOlkDPn3vogZnChCBT7fB9T0l33OQvCdo7S6KTQfZR7xhxwk+xOq3nZQA
zkkq7uL1m87QpqPyiGQEpnsP9/ORbLjAWzjtsbODV50VG2jVhpNyH6/fxuvW
XBCqBzid3Rn4R+WhW92ig+CIoDtOJ3gfj1wXcF7g4HeRs9P8ygH9c3xeCPbf
3sDZdRR/IMBTDvRdD92am2rZDZ7BSezAcrrA2w6iPaIW7P+vLpq/obTLDpI1
gnIVw1t35AKF+RdSy4yTdN1VteHC/4CSHTlAhyjtKkm1gJPOOzD/g2z8i4Px
RwfrJmjsOM1fHbV/d1B/dFS/RyP3CvbQso+Oko+Ooh0UfwMt3MTLt4ngsDXb
jhDIB1BKdhxSbsBCAsEPDvj4AsnsLoJtJ+l7LEg/wwYaXsWI1nEiJF1/Occt
7K9h/yw+rQTbvHcB8lgDruPx5daBP3rMTQPeInG8K7AlcPprBCQ+v9+1jhEe
+OvHSfy5YPU7L/FbV14PgTPtLt330h2cNky5SucIkg+nZIeO8vUA43SIdjpI
OIang9FtB22Y9tGPBEAzp0WLBO4hSrWHUq0Fm0f95dMB0jU35aGD8e+nWjax
OtDVf0RYIQcJcgb09l2M/Ae07AcX8R5GuIEXr5GVdpJuD6Pfc1b9lpUGCH7g
uwGQA4J8FyXaRSGs9sBKjGqNIAY6HGT1F/nwCRQ43y+IIaycdSdWArjUHbRu
C/Mzrt+zWjlm9XlqTXrxN9MagSHtuGxsTFS0REuBdZo9bx6KUs1lNNWHidp8
ectYgY0smc5qMaVCzblwSwQXyUCCaii1sS4Ntl5UtEcL1jygVZJi/nxjfbKi
PldjjhDMojTf41tAbqzhFTtowAdex8M2ArSKh4AgPMKr32MgO0YBVq4TtNt4
w5Gz6cjJgNTySU/AgP5jsGOMWxgDOJdDHDgXxZ6z8rjYNZsoFXLLggSBLX/P
6hOxrd8mFdLfUMeUQA8E+8ciN0DAcgspxmNiv+zqBDWIz/Oq17NmLk3XfBHS
X5TpU4TmeH7vOWgkTdscznuXoW9NU4EXix6CrVBNb2adKIVjzJd2ZMhmvGW2
QH1HhhG6KNPlioGtmPTgrwWqBi8YtGkidZ60MV05QlDsEy1AUwFVs0iUzrnJ
Z9yV02T5Ik6xhlOBrrKNVq+g1Ta8dg1vsKP1ANSPzgbQ1n7uJyjDDsq8izLv
u4AwIprWWQVi30W16wLbXSBQhvZ/cEP4D28U/8LzV0pI3uK/wKX+oqI/38N0
EHP9gnrgnLgpgdWaxG+IYfYmifpieG99awZC2Iu55s7A2kUy/adka1cEVxtO
aUionr2o7HNnriRaLBFcUzyzJap6NRPuJ1E2zta1xwksCQxrZOV2jnUCL0YO
AydfIoqGT4sGg+XDZ5Rj3rJFgvK4rOrW0YYlnGGFZF4jGjcx6g/O6r9idAgr
pBwMANGBswXEeyck9k7pQfkcYsBQCIHhDLlvj1x93dZn/fkLMl/E/m8T5rgZ
InFSqidYvtj+U7qexHwUbzlZNhjDbo+mDWXJO1K4g5mKobPCYT/qkE/1Rp61
1btiglDx0wVrewC1IYLSGPpq84q23a1mI6PZFFJriaK0B5UcZGs7cG/sGeb6
CJopqtri+/xv19vGsDxgAPcJyhVXcV+YtDdZM5ygGQ+Ur5AVYNDfxZvWMCYb
0bLqaV1x1yOKGsM5JIhAK0OOE2U4cDafUHrvVI+wcjQdYk2HRM0uuARYnh0v
AV5gC29EUgL7B4j2/yjABieUTnB93tA+7eTT10Gxf4GrP4TyNqS63u+NMfBN
70WZ6Sy9PUvclcwdPkMfC6TPX9I3+FW+c6/cP6/vjGA2xNbWx5etFuna3KuX
0+qbkkX6BGpTXMV6rrqdWLKeYapPYGtiK02RpVtXrf1Y5hoBfo9T2siithhZ
e5Z2+Lx2MkgKTvMjWn2IrdtE160Q62ze+mkv4QCxZBj7YI7wYp3ERewtWofU
HYILIQaya8fZvIuv2yKLlnGUOUzxMr52jQxvuZqOK+g3Z7r/y5l+Eb+wQtrm
sfhBuuLucbv7XU4iff7gOD7/dDJJ1B/HBglTF0N5d12nT2a2XJJ2pYreBtPH
YoQD6VBTOH3Ul76aAHWfFWkSaupSKeMFqkZixUSMuv2yVppE1Z+jjFyWdbpX
rKUaWy+IlUk15gzW8GVNJ4Zhd9XvO8sXcCJrrLghWz2UCk8Gcu0ozsdT0iMX
7ZazGvT5RR/JO98yK7nAREhuJ11e8KQALwMIgHEWyS4XUIxG0LU2UMZ1omqR
RB1Gf/PO5cYY4emiq2TdzQCS5FMPP0mJ31M6AbV/PMCBy7dCVP6iIYHwgxHh
h/pVTB5jR/r8wfHI+Dmr7gDq9EVtey7cVKBpyoOgWGpDMn/8qnE4Sw2Wigiq
NZI1fZo95Fk7er3BUqRp/lqjTappwVNGgpTD9zoVVyT1d1WyiNLhQF6fJ2ui
qFGTLa5/oJXFghJWAsHwPUoPJEFDglyXLp66qJ30of3oLvvOgbvvIP7J3Xrg
Do+Sy1uD70r9437iVIlInoM+T23eknVXYLTVSKliYCBHt3B6u5t1GieY969Q
OcStJz42OJwbJFBWfAwnw/rvWQECH7A6EEDJ7DhDO2CJCCTlPFG+4qXa8dDN
ObCPsCqghf6OMxw6yE/GlJ9b+nH/P9Fdn+dbnxdlMFZoSOLos8SWdKkhmtmR
KOpPltf5Ud6eh3pyDNZA2jSRcZRg7k7TsGMocBbz7SXFoLdgM7HZeh7mJtG1
2fzey8phb+58CPQuywCd56hyhG1Z0Ig7vOGs/95RB7qW6gyz66Zp/YZlyLts
x42158AE7uwQq1x2ok75FuvCLk6XfvOT+fnog4wmz4Ipd/YiWWnDQjsE5S5O
AUzfJlG7SNKNkVh9nvd6/C++v/54MPhqB/7phJtkhQh/3pk/rz4A6j1Wu308
aCIEcBobEZ4N0DU61WwE1a3gpXsoBdDMhw7Svzirj5x/9ibHYgMZGY9V/W9Y
zfmwbbHQ2AX18CV991lZR5Rg/oJh7qx60J/X7cOwZTeB5SqW/T8SW9v9OfUx
vKbYmrVcYx+GsZ/U0RgiNMdwWyJq7ZdMIwTG+7NN3dEyfQjVGkzZzWmZwSq3
TxmOHPS7niZtCKvnVt1AOr/Z9cmsT63dS3zoqbU58hYcKwbc78miE//SQf2x
5/Z36q9U5NR35JppkmQRGGGiYo8A6hFxB7Nk1ZAH00q6tF308L+XvDi8/bQe
f6efwLSRlH/ICkgLAArxkigYqIstYKZIuhl3uPG0UOBS0uzKXvAFCk32PUF9
6CD+mzP8nRMoRvhEiJ6wOpGpvxkH/XmzIcLRaPFwkqIplNEcwhhNgrv9GHPB
4gE3+lpGfY8XYwnH+M/4pk4fVk+8tDOyZjfX0uVUsxXX3B4ubovltwdW76cb
h7G0o5TWrnCx3r+qPYj63eW2WWcpGPePHAy7PiZrNN+SC8RbcVdCVWNAWbMb
Zd5PPYnmb3lwG53zuDHhuy3PD99mbYguyPBxfWTKDJBhQMAjCk26hZNtkOAZ
V1WfWzWEif3u6eP/k/70x6dPdC453ZhqG0n+h6xA6Z34ynUUBOTcGkm7StYO
eCkrcMWyFKjE4VGXv3TRG1504P6I137nqACsPvwxq19x2TONC8nwaLxkMkPT
lwn1ZqtHr1vborit2OLFcPnKpfp6r2qgnY4uNA0nwrBPsSmyfClXN+jBWY2t
7zoLqcMp9ZGUtcu6QVKtPd7Yl6RQh1Z1pwoWUnWjaNEh0fodum7KmQuanvWq
oOUKve8rWbHv/ReYb2AyZ9hHs+ErbyfeKg/0mdXd+NBxbvj1aQUhfsCNueCu
XcFq9oG8JyiAigAj1wxR04ErkToH2+9d/c+qgs1bOQqH1E50+f+E1S5yyupV
LAwsho2smSPCjZ7ip5G0eubcy+Bqnk/NQDA8TRJvY2Qf0fCR86+sfulXuuN+
9SurtqDq3hj220ReT7pUn0ATR5RZ00Vd6bKeIPpiiqo3RWoGG3jWzMcqRjK1
hnhaQxpjMEvc6UabilC/yzWqkukNqcx3KbwBT+pMmHzgklqdUNudL+85Kxwi
CvZcjR/xdYMOlJYEbvs9RV0RtTbz+dWIu9V58tcESnuwaZwknA6vfuJKXDF9
/VN3xti37mpC8qiHYNXdApTqAVr5HXJPQwHcn83d3EOqhrBha7cz/1KWsZyf
rDp1YdiVvkKUf1Lv+5/pItDMt49vMNrwqmWSGpTwKFYqd6UzXnRa2o/k5QNP
fIoNQcKVGOuQA/V7Vy0oQBC/jIYIomM39Jv23nGmYihN1JEr7bipMl4S8MPf
WNO4s3esoxfh3lSx/izLHEUb8aePB7Pbs+TNRcqWQmFbBtOMLx6Lht7m1+ly
BI253Mb46j4/6miYoD9XBV+gWfP4becFg14i4P4O8JpZIqcljt52XyopKs8M
zii8R5PL54vP6sSn4V6CZDaK/dzj9Ibh0f/1Nm/xsa8Wc37CQ7rh3rThZD50
hH90QS73Nkq74tYw6s3RESN2v7n8w5uUrZsXjC4ZMz7C37M6CWQSBV4LBoUV
kmaBrJ4iQT1OvFp8BUsyy+zZhXSrRWGlVK/q4Wj9MIqzRzoRD/D+z1IWSSrg
rw9+y2rxrGwkkQ8FFxsvsHsKdXXn2OZEWk+aqCWM2p3Eb82F9JHUCU/qTryq
9YJEcp5qymF0XuS0nq5dSq83nRfJzlEBq55MXm8QbThS2HNZqUlnqDNqu7Nk
I6elMy5AjUPrfgrY95n1Jlf/XJCdXFQsaa+WTQofDxVja4d9tL1eFdTgiHlJ
4f/dXTBzz1+LSpt0l267Nmw6GPYdoI8uquPS0MxjdGPeHBgdcfik4OhJwuHd
TJ1D2pQXf40o/0Jy/2ql8dptog50qiVX1QRB1uHAKEO9KRUMf9s4XyEeKYit
LEO/bMDQdoJMNhfxJw/+qxB10X2hr+a8eO8I1QN+7OFY2cAFuCGWC+qo+Qx1
wo/Z71s7cqNBe4a67i34W7S5I0asTmTqEipmi/QtfqzBOE1nGgzFVGvjK2ev
65rcyldSza1xXG0iTXm2cuFWUz+Rv4yG9snGZR9lc0RtfQFPcJ1yJeVesbC7
hD/AetjwEv+y/hRjyKey0sdjW3/nPxpzZh/HarAXZz2lwHEjB4zTbzlDR0A8
oGU2vHramydzjNu8Xfi/F2dv56XUuVwaO2Z1Mp3jU585ccHbLqp9rHbdRblF
UC8TFWCwmPKQ1xJKn5e3VLaulfMGrpx+1hcMAeVgx6t+8Ts/S4X3LiAQaF94
50UP4epp6X6Ybj1aM5ao0gVRO9OV/XHiJQ/WnBfrXXYd7E+xuXI/Bmn7o5XG
aI4+tHgpX98dCLp3U2u0SB1UboqqXCkwd7pRVpNMvTFCU2StIbFmNheMjIJN
jHbeQTxFFrdFMhuuC2iZxeeD858yW8tFgxW3oVfkbzvw/PEASrUXYVtb9FNj
3uTjeA3mMmBlx8qAqN7F6zdQ0Aeccg8tBQp/2psjO5W8eev2/3idt5ObUuec
/TmrY1uH3DRAxi+07oSV3Um5TYBtBMUcSTrjIaPji1+VtVBaViq5QwXez6Z8
YWArdrGqY5P48z0HwAq4eMDqZJ+f45rwFc77SVbchXPe/OkLenM8t/kyDFr6
DLZyw5v3LkNtiGAuB8m2gpQj8Sp9YHVzWIUtC37nzd1KbesKE9SfobRHU20X
NUPutI1o/UScrCG4piWJMXEemnLmv8cY/ubTNu+pMPlXNBYI9Q8kD6+UVyuH
X3N6nl/hF7s/H/SGpoNpFe7YE1bjD2P/zKzGQmRg/Br2YPZ50SazjZY0kSVX
2ZWhmPGk2cNlnRmQOpI2HyIBuCYyjIYoRm+GYDRF0I2n2qJN4+d1LWd5XRmC
vkTuqDt9K1w7mwTXR9CaLwoA7Qkn3gdM3ZaLZtZd1h7F6rijkBTQc+LvvuJ1
VUqGn2Szy7xejflrp87Ulrmid/U3/6slf/RB9J+Z1XiMcjHDMpimaUwSduRq
xXFUzSVxV556IlE6nabSXpbQz5QMetVOBwoGrzeq82SNNxQtFzhv3RiTZ+Dx
/CY4jWu8KdefY/R70jYjtJMXNNpkFnRTYsyR92N4exj9qoMC1CBg1XZLxsmp
PHfm6kNqQ6ngHcirCp83w6dVY/7VpWTUe9NX/1t7wcj9qD81qyjFWCLUkSSx
JPG6slVwAs2cLWvNkvSFsYbihNY8pSisYtKXbQuRdGdpRKksbTan47K4P0g0
Ea4ZyLNw46s114RNudJOj5r1OMPgeUiVwpIVCOoLND0Evh2tPXJvmPOQg8Js
vSmV32DlJX79jNUGavBNgaTc+/U7T8WIbyXIq0PzXcDqT55XIGF63SldnpTe
M4zxVKg9gfc2D26JoY0Ry2Y8KLPZhqbQ2vUg4WGUuj+Crw2qsESXz+ZrWwN5
Y8nm9mSFOrzaHEdZyDe0elKWUkzd8SJDDE2fRJ2+YurHC1Zx2kUHGcirrlgu
qEF6VkmMV+b9akuNYhywKvV8CVhNBNZUeuD2627/t9ZrE4/i/sysJr0Yw641
88H8pUjJRJSgMaCi55KiJ5a5483YJFVvZhjMrq9nyTXfRcCTIYL+SE5rULG9
yKJ2rRxPb2yI4LXEsMy+rzbzjM0e1Ytp1qZItiGkui6kZCOvfhAnsOG1+66W
CaKwzres/hpffJ12OfYOGAdL+P2vrolKPF6A3j4bygDj4I7uxn80XZl6kvBn
ZjXqRp0P4K/EyGcjRJ3u5R3BNcNXtK3hNcvEinVC5f5FS5t3xbI364d43VgQ
ty2A0hzwev26sT6APZbW0BorNodQGoNKt66am9yrFi5YgJVujGXVR1UBVgNY
/ipRv47WrAXozAGVLTck2q9FFQ/4VNXYG24vYAXyasRXPeRTzgjw2NIU/mfz
1f/PrID1Ayp9G6+z47X/OlYzQcK1s5rxRMVQomQwit8eRm/Pkg5kSJcD2Tuh
orkLKpNXyaQXbT1cPntB2xbP7TjHGEgXNZxmTpyzdqeqjHGM9gvcgVRRuzd1
LlH/LkVhPctpyOAOZsA9GO4mqc7mqFzwUoIaBKzAOJgeXgh6+0le/VNYrZMU
J3kFPOMmcosYyatdjP5fwWo2Bl7OaahPl9VnK/rSldYYhu48t7/IMBgrWEjX
tKVJZP4lfb70kVD+cGEjnCkA46AxqbbVg74Qb+7LNirTudavYOhsTY8PfTlS
PZah1aZy1XfkqixhJ4a9TzSBADUIxkGgr3T3xWf9cwAr0K/+Waw2yMrjJzJU
G2gY+bEeq97G6vewhn+JFo2UT14wmC5IW65om+P41iiGPkPUkge3BdeOJUq6
spTKM1U9wezBGGl7jkGQRDNfEwPN0EWm2WLNPRk66AJHXygBXrLPo9YeqRtN
gTRJTDAOmnIVQDPsYw0fXesnSSIwDgJWmnvCC6HXn9CbafDUPzGvjh9g0Zz0
K1CDgNW/KK9GfAWDgfy+aOlSdn0DubQzgtVxTVeXyB5xp8y701azzEa/qp5Q
3lSqAXQnfQi1PrZ6JU/XS6KvxJh7Y6TA0ZhiqxdydcBUHsZbBsP55tAadXzV
wrX6aZRw11G95qC0+apbwulAM9RmvEkOzLtdqgda9J/Yr8DJ7uG0u0T9LtGw
RdABVv8qfeXOeefKGAmR7ud21Ds8HwzlDRVaTZG0BQ/6CoF2eLGx3rOqJ5C7
nG7pjJQ0hzEbAov3C6y9HixbghV4HEtglRmsKWzsJVQdJDf0BbNBG9eGFO8U
tc1hxFun4A1HGPR2a1A1YAW06I20pyd+8J/b2wGrHYJuh6BHfjT8l/X2ZRIf
4OoI4NqvtHegyiYD+EOZGiCTZjwYa6f59lRziyd1xJ+/lGDoT1Sbw1nNcTUz
2XC7L2cm2doeK9GHVjefpc/larvca9aSQaYJdSFV+gTK/BXzKF605qLaIxgX
vSEAsKlQZHwk//Z6dZVi6J/I6qS3b6HgdRS0DpYY1b+ut2+QxEveshZ32mZW
6zCJMeXF7w8TLaQYRgi19mBoOVbX482eD1LMBStnzlkM/rV9mfKus7xOf94s
IHNOZYigj15WDSSKer2ZC/GaofOQLqKmNZPff0He6cqcIyrXUNpZMvQ2TtJY
IFc9kqfH3nrGainn9ZfmSSrdXo36KoZOlzD9PbbVRX9vzZt4GqvG5sx5KDax
CoQVQbeOVuwSNHYMtIZTz3vylKcSNm/d+m/FVzevpP2cV26QjQCN4eUDOMkw
RjoNtsRqd/GmbRcNcO52JwhoiWUCNENGZlPQ8WXPyzsqW+1VnJFbHi8XvOGP
p+R7GATRJla3iTWAsGMMJ3dEt36ef6X5dCfZhhMukyWr/urNEIPNSzGF582c
lu7EWo5iG3ZCDXO+yhF34bibcMZPuRxlXEy1DqRp2uMEAz7csUDJyDn9RKZl
NAEGHa8HUzkbJh05r5wpMAHJMZ0Dt0czOjwYy1jjNErfHgo1FBl4j+XhEVde
8ppo3HeMy3At5tWYL28+qqyaRNhV3zlqSp0ojq0j3ZgiqkHnOcRp9kjwGkE5
h9OvuTZuuhjtHkKzS/x6Yf4PJQUrN66oHNIX/KXz7vJeskRIZNCItWoP8VsP
zSzIRkyd3dGw62Q4wFrsuLo5vHreXTdBUNCw1d9WvStvP6ysGXnqWbmCUfzk
oNg+pTwg1++gzFtoyzqmfg1nWceaEW7Hk2R+nleDzD7SrOAly1jRGlFm91St
uynnscIlknTLX4/MXPVQzLnJZtykSHjI5rwUk77ygRBpnx9/nMiacuUPB8lG
Q5SA7TSZP+cumA+WDSXIes6K2gKqhs7yO9N5beHsZbe6BZKxI0plLtQw7/Ii
Qy8Vs8x8Xi/3IswllQ750wZDHpe4kfcM3/61JXviabQOlT+Ckazg5Bto8TZW
uIoRTWE0iyTrBkq3hK02OITsFOX/V9n91fzrcoeUcR/mtJ+kI1D80q3Yeq/n
keOz1jBdnyP/g4d1H1e34aIGJbmKU6/iVatumgm8uBZT9vBVe03rAYs2/tqn
0kaS/4cLvOWiWEVB+y7GfReLHeDCgjAic+RwP89gPHAxnMzU2iYoV11ENicB
MrmOBK3hZTacZJWkWMCIFgFGsnzZTQliwVU+S5TM4YRLePE6TmLHSjdwsiWS
zEaQ7aNk+xiZjSyZ9JXOnTcNRsn6PGrGw/mDuVpzKG3GQzLlKbHEsrRXuaL8
6syA9KoqSMJpr0pl0N2ftvm+qQ+6/eSM77ql/P9ouG9/kN6MujpF4ix58ldJ
rA947iFWuEaAN70M2x7QHPmN2Tn8xxt3/p/Xr76/dEvnkDoaSu3yqRDgH6qy
JePsGX6GSHC6chhLW3VgfvRWL+N443jmIon3ASf8SBJNk2gs0gtKaau4aYND
eXvf42EruXqNxF9xFa/iJAco+Mjp+IkYlAaZAIaVb+FFOzgJcvf+l1lt70ma
LbR000W6i1McENXbeKRXAG52ArRBVKwToRWifIWoBPRWScgzknsu8o8uqu8w
msPjebM7aOgHZ9X3aM0STjbsJlrPaB+Jhgc92SPBorH8epVf1ZAnfdinti62
Un+VqbpB+yamSPRCoa9qpGcxqWFvdAkV2nPPKhJSF0VVP4lfbtwtMhCudvvX
vA2u7fGuniXVLuPY03jRhLe09wyrKfgJTI5buVj43wu/3Ui+I8NnNSSW1kW+
qSTfHC3pGKh6O04drPF9CtxHD7580pfdhSttxr7qI5UvYCvnSZRWr9IKn8ei
ila1akZc2vw09FldJK3/DHvSl7/qJtnHyI+QX1TVYHmABvpWYicI7HjR8eQQ
zUkNfsCCHgi9R6sOcar3WPUuRgk+3cMjc4a3kEnRynW0DDTYdawcmS+BBwpZ
ve+s/e6U9oOj1o7WAru3g0Jmna2TdaNE2UpSW28I1OzO6ggWTlxpqQui9/lR
B4IpltgKS4Gg7lsl5VKZpVDadkujvgHT8rjMBxLZQwF07uH4zZLpe886r9w3
Xarq/Erb/rW28aqyJ0s/ed6yGN8wkmGG70PwC6Ep78nUtdfbN+nzhXQot9T0
XAHd5sryaC0F0o4CRccttTKTpckXWwvhrquq7lTRaIpk5oJyLEvRf01df1cl
vC1hfA1JX9RDT0zcK4LG+2ZLmqgrkDPjjsxZ/SW11GBYsYP6IotAsfzy7ADS
2w+cVYco1RFG9wGN/K6966TYQyHQtpyhbRTyOMaJKgYptImG19DQBl4PRooP
jvpDRz1ogDaCwYbXLmHV6wTtPEm1Ft8ym1DfH6YajNWNp1mbTtNGfKhTATVd
AeVdwEXe1YvT2W3R7LeRHGuqhHeJR3mkkHyrakio7Dvz8m3ki/r4F9LzJZob
QnWRSJzGUMWJG8Phfl+lNUJQ/hWz6jkdTn8Jsqv/THlbTA03q4x3ny19KNEW
CY0RZU3+bxoiq8yXBNzbUsWzOkEqoy6a1hvKfBvG1CYzFNckwq9k9ByWOJml
SeDWpQhU57kNX5s154S9PpxVN+TZ3vcumiMnwwcnZMrlOh5eJMtBrBOUn+ac
7zupgJY4RGmRiSJIqJBuBjAez8HexyKTyffxekTsYTTIwO2qX3I17mGNe+g6
G0E3S9LOuiI/wNmwSJGunqnbSmmbiTPOnbVMhMGDRLoNRz8gcVZcaEt+0r5U
syVMMoBjzRN4/URaSwRXlq9QX1f1hvFHcdRFImfUi9kYTe24Iu24LLZGs1v9
lcNeukUCwMWX3hGK77HfRtVO4alrGMmUm8QcT9dfF6kLpYpoyrQvY9q5ZMaL
3hRKU97Vc24qFTGMrkDWoidn2IOuiePoCnT6Qj0czZz04q+gmAs4Rh+JCrx/
UyhQs5K/odR/cdD94GD+3qH+gyMyJoL2voj8sAjbSEqAC/R5EKCVvUdrkblG
LuoDtPYDznCA0wOwexiksuwu8IaTEgkX2A7e4rXzWNUyEVHIwHwto6FZlGwe
J0cmYJBBf5NPurBspxVj7vylIOWUO2/VVfABxflPgnzbhbfsrRqOq38bpF50
EX0kQXM45lScvOmapj5XNRGmXMCJNonaSVdxSxS1+wq/57KwJZzR56mYctPN
uEKgTCxfS1UFjN4w9jJRdoRrXMSqmyKZ1qui5pt66EzF0mn2d/6SQVxFSyiz
5V6joUDXHMqd8hOsufHHyYymKEHP9fqBPEuzDw008w84/kcP8YwXe+CivjNe
ZneVHjmIv3fUHTkaT+bF7aLMO2gDOEEwrCCjG1kO3AEoUtC1fh+g538KO/bX
AKkFqvUjVrvkwF9zER24yN47iv9KgA8xyLzEDQLPTuTanGsPyMJ5h4odb9EW
lvlfLrwjR85BQvPbMNVIeke3P/y9v2nDmbUSKR1IFTVfl3Vfg3s8KH9L6Tg6
128m0wZuw6qccmsRZzBfPeArGvKRj15u6LmtN96imW/UTtyob/UQbrg2jeGh
wev6xnsyXY5gpMi8eA7uOU2Zu2aBIqo7cuCJbN2kH3PZi7kTq54+w+/2Y9hS
9PYE3dhp5uo5TYdv9VFR67t0ifWOeux5l9XxxTpRsISTgJa742oGp7znrDo6
pfy7k/IjSjqN5gA/O+7E2vSAT2j8fvkpNj8LZOK3g2gbL58BO/eWbbvLNzDc
HbJoHs8Y82ZNBHDGPKlTntRFX/awW9VkMGfCk7qFoa65cyezrPI4oSFdJ/Ot
HQsUjp6u7Yyq0ie9gS6Xay5VqYNe9sYLe5I1wpAy9Z1aSt4DblFp3TVmfVC1
JYgKXRPw79LKUwuEOU9aHxpUMaLBoDqrG8tSJIQfsynpr1W5HMt5ujjsueme
ojzxOXSB0hBX9c63rN/zTW8M3RpWZQoq7YtiTfjTBgKrOjO5guinXQUCSVoJ
paBScIOhCX7dc4baeYbddUbY4Ssc8peNewhsnqJVIn3FlT3rK1mLMo3huate
8Kc53l8sv4gTu2QjwuOu4rWUhuW89uWr7eOJUNcZ5nAaNJJf13oVaruhtlwU
dBRC1kKl8abcfFvZkCtazFFPXlSYrikqM2t0b5qk9yH9TbE6u7r+GsVcVG54
WCN+UCZ4VCv4mqV9IJPf57JKyl8+/rr22RvFU5o2u1KRU1H7klJa8qb64T3m
gyeyNxJWPqetyGjIFsie08ufvqx4SuG+5ikfsllFpQqm6vXjSuZTuvQOpf06
rSOvxnqHLb9Nl95jq29zWtJrRgqFzY/4vMJX9S85ikdV1Y/e1D4qtz7hG28w
Dfek8Fcybh7b/I1eVyDu+ApuzKa/y5MOJEhXz1mBeVnyUX4O5Atin+LTBotk
eONsY1+UXOZZpguu7U2Rv81UWHKkzLPl4jw2dEPEvFAhvy2uusmi3BfU3mBz
L9fIw1925An0j+DXeWWMu8yXl55XFRarX/J5uU/URa/0d0uo+V9TSimvnpex
H9WyHpdTqWUvyh5RysokZUz5oxrhk8pqSsmrmqcsdnlN6ZuaN4yS21WqF0rl
M76QQn/z+llpJYVaRhe/oFG/esmtZr94WVJcQaktoYhuvtbdqVA8rKm6V/L6
JaXiCYWX9bLxJk12t+z15SLJ42Llq/JneYX0hy8ljyop+c8ET1jsx9zia+XK
UjX9bq3iKY9VCLwAvymZP3fBPOAtmPaVffEUxufL3wcQpbZw3WKiYTBMPBgp
fBfBbY1iNuZJTdcl5jxBa6EMTqWYb8tod7nMR2JpkUCXSe85x+q/IhbcYpZe
edP2UNp8iym/VaV4QGVnP62/U9NfWKu48EhazuVUsKFvGdy7byqKXz57/W3l
83LWSxr9eSX1xWvKmyclb755VPzk4auX5S+pr78qrXhUWfr4Db2ikl5dXfas
hPa4QveAqrj6AnCouPv80es3r8vLGXdfGR/Xml6wqPdLnlTUvq5mM6+X6m7U
aB/RijNuQt9WNJYyK5KutL/mSu6U1F59JiiqlBbS6BnF5kcybk6J/GY1M/tb
01cs3Vn6aLrhrR9vIlD6+6cDPo8vptOD0XM9VDcZpmjzpvUH82bipMNJopZM
oSypypLJbr/MNyVWWbI5/GtM9nXkl0RTUq0x8M1gtqz1Pqy6RjOllcGxj6UZ
r+q/FvCSnrXkMvvSmZq4l8p7HPkzIXyrBgDkf1vJel4j/JYv/lbIf0EXPi9X
PH0leVFc/rq6+BWT8ZTLfsTkvKCyn1fxX1J4T2v4T2jyB/T+Z4rue7z6rxnQ
Y3r1y2pGGYNV+FJ1s1x3j15z/fXjb8oqXrJ4ORWKzDLzA17F+XvQA6r5Gzo9
KG/ovkByrYydU1x3jd12TdJ0kTd8R2u9zGoq4mryq9vuS4E2G7xk6AoC5ldy
8kzc5wFU6xcBBO1JAI2x6K0A9TuV3Tid1zhzFhoIYw9lKfvzofar0t58xWCG
aCBT1JUvN2Vy3uUq3qZJ3uVohy9rJ89JxlO4fdm8t6Bj5Auasvhvk0XTF039
mfr2y3qgHLruG5sKJNZ8juUaq+GmzFSoM1yHTTf4DTdqOwoqOr5imp9qoW/0
0E2F4Y644QGn8QHLUMSA82i6Qh6UTeu8IWu8xoPzazV3uPL8Gl0BredrufUa
0/KVGL7Fh4r4zXfg7mx59yVp9z29PI/d/NIILl9HMmUqX/H2W6MWUDonHExU
jEZJZxKU/WCgSRPVZ7HqcwT6VN5AnqktmN93RojcJjrm84eUvmAFXM8SSTrp
r2j05QAXM+YvGvFmjoTy24JpQO20RTL7gxnd3lVABZnciwfCeO0BjNYwUWcg
f9adNetBa/Ytb46md8bxuoI57zx5Q6dlTd6irhitNYDfFiECQ157DLvxDLUr
WtgUKa8L5tWH0ZrDKrpCi/sSaKY4gTkFbjwHNacIrVEl1oji1lhm/wVF7wXI
GEpri+eZImny0Ir6VF59DLU7njWZCWv8i+FIij6eaQqp7Qjh9AZwe0ME5hAG
FEFtvaI2J/MGYvhmj5J3BRYJ8kCEeMJPuuApAX5nOkgKoHUmCMwxzOazssnL
DV0B/H5f4clcrE/L/3kAIwBcIehaC65IHNtqINVkC26yueMAr20k2aIrEuA1
8AhzbspFMvJfWKwTwErJnLsEbAbWI62PCHwEPOcKg23m3ORzv+zk5CmnKQ8Q
silP0YynYNJLtBplXYluXAk3zwdqpr3E0+7CBS+5zV9jC9TN+6mmPeXj7pIx
b9lsILwRbjyIaTi5vwHWgAD7mXWXn/yJcQJv3Es0FQEvJpvWztcvJBkHIqDe
04JpL+kSSbyGFa7ghIvu0oUgeD5ev5hinYmsmw3Rz/hqwPH8o07174pPj7Od
PDizRkCe47MR1atEDdCKm2TdGk614qJYdVaAzfZIhi2CFmy2goGWUQobWgk+
3SLrd92Nnx5N+jzAhbajJGto0QJBDACO+0PjgfDEacWMm3SVLN/CyfbQ0m20
ZA0vXXSXT/tCM/7qpdP6JU/9IvBxRNW/Hc4f4vqc1QmuJbRiBQcjb3EqxMKj
4R289oBcd/KE/snEvA2s6lN8ejrp87Dj4PdYeBslXcKIxnGCUVfxmIds2lOx
7KYEFmYfIz9EK95jkP/6aYkgnSCJR0kS4LDmSSrgSUH828n8o9T69OTaCS4Q
GyQtyBk7SYf8b1qY46uMR36+2Qb+lKQHAV4gc/5/Qff72MLC7zHQAVaxQVQs
uSpmPRQAFCjPJRLQTrIDtPwjWnmEhfbwynWSYtZVNuUqnyLI5/AQALVMUP2/
Lah3XQ==
        "], {{0, 68}, {100, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> 
        Association[
         "Exif" -> Association[
           "Software" -> 
            "Created with the Wolfram Language : www.wolfram.com"]]],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSize->{149.33333333333303`, Automatic},
      ImageSizeRaw->{100, 68},
      PlotRange->{{0, 100}, {0, 68}}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                38413.146875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 
               62.919054635408656`}, {-27.36985231691233, 40.69513688585168}}],
             StatusArea[#, 38413.146875]& ,
             TagBoxNote->"38413.146875"],
            StyleBox["38413.146875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[38413.146875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                48016.43359375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.11823877741645, 
               90.57562050836921}, {-44.261099617603335`, 40.69513688585168}}],
             StatusArea[#, 48016.43359375]& ,
             TagBoxNote->"48016.43359375"],
            StyleBox["48016.43359375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[48016.43359375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                45615.6119140625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.77480465037702, 
               118.23218638132978`}, {-40.038287792430594`, 
               40.69513688585168}}],
             StatusArea[#, 45615.6119140625]& ,
             TagBoxNote->"45615.6119140625"],
            StyleBox["45615.6119140625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[45615.6119140625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                7202.465039062499}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.43137052333758`, 145.88875225429032`}, {
               27.52670141033343, 40.69513688585168}}],
             StatusArea[#, 7202.465039062499]& ,
             TagBoxNote->"7202.465039062499"],
            StyleBox["7202.465039062499`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7202.465039062499, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                40813.9685546875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.08793639629812`, 
               173.5453181272509}, {-31.592664142085084`, 40.69513688585168}}],
             StatusArea[#, 40813.9685546875]& ,
             TagBoxNote->"40813.9685546875"],
            StyleBox["40813.9685546875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[40813.9685546875, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{5.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7398869364208*^9, {3.7398870302499733`*^9, 3.7398870508343935`*^9}, 
   3.7398871029010267`*^9, {3.7398871342105374`*^9, 3.739887173787096*^9}, 
   3.7398872052891593`*^9, {3.7398873114546733`*^9, 3.739887314507852*^9}, {
   3.7398873471950655`*^9, 3.739887370108102*^9}, 3.739887470118602*^9, 
   3.7400799018634663`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"ce2adc9c-b2f6-43d5-afbc-ac10f15b9268"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739887062513337*^9, 
  3.7398870685643373`*^9}},ExpressionUUID->"8b5e18e1-9372-469e-8702-\
f7abf0b611d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{"#", ",", 
            RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], ",", 
          RowBox[{"BarChart", "[", 
           RowBox[{"readGraph", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
       InterpretationBox[
        DynamicModuleBox[{Typeset`open = False}, 
         TemplateBox[{"List",TagBox["List", "IconizedNameLight"],GridBox[{{
              RowBox[{
                TagBox["\"Length: \"", "IconizedLabel"], "\[InvisibleSpace]", 
                TagBox["5", "IconizedItem"]}]}, {
              RowBox[{
                TagBox["\"Byte count: \"", "IconizedLabel"], 
                "\[InvisibleSpace]", 
                TagBox["1843460", "IconizedItem"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],Dynamic[
           Typeset`open]},
          "IconizedObject"]],
        {
         Image[CompressedData["
1:eJzt3VFoE3ccwPFjg9EXQXCygeiY3WBVwkRYJg0UV13nnO1KtOShCI0s00Jx
UivrVHAI7aOCom760FH0JfaxT0UYyMQHGejApxbKgntQRF1ljD3dfs3fhZlc
fz3bS36X9Pvhb7mc9d/k+u2lktzduwe+SX/9mud5R5vkQzr77SeDg9nv9q6W
Gz2Hj/YfPJz76vPDQ7mDucFtB16Xlb+/+DO/7AMAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
wslPTJ4ePVcoPOjozMqCrNmTzmX6BmVBbsrK6ZlZ47uIle3S5WuS4pFjo7I8
NDwiy3fv3Z+6cXNsPC83ZWVP70Dlv3r46PGTJ0/lY63vLlYeKU2ylCG9yc5T
ynR9yke5KStdqGUSyS7Zwba2Z2p/h7HSSKLyXO8Xd6GSpV98fpddqyzITVkp
n2B8F4FGl+0/GTjcTyJgzlvTtmHT7rKx6p1P3W/ggDmp8YOt3WVDKiVRxASJ
IuZIFDFHoog5EkXMkShijkQRcySKmCNRxByJIuZIFDFHoog5EkXMkShijkQb
Q+C76xvjLfck2gDc4Uut7Rlpck86J0NWZvoGs/0n3dEidY1EG4B0KFlKpWPj
+emZWbnpjgz1i8csW9+75SLRBiB7y7v37m9o2Skfz54fO3HqjIQqcUqrLtQy
8jlu1PyeBns+cnwut3duYH/l8Em0Icjzu9t/+sU96q3bd2RBbsrKwM+Xz3Gj
lndSMXfs0LMvPnqWbntpdKf+3L/bJ1HEwHyi3aln+7a/NNJtJIqYIFHEHIki
5kgUVZWfmLx0+VrgCDlDYycq/3sN3Dhnz481xmsr8ZfpG5SK3n7/s7IhK0PO
0NiJSo3emrbK7eM1JUm0NrL9JyWYsoTe+/BLGSFnaPhEJcjKhyDdkmhtkKiO
RM2RqI5EzZGojkTNkaiORM2RqI5EzZGojkTNkaiORM2RqI5EzZGojkTNkaiO
RM2RqI5EzZGojkSd0iFL8vHuvft+8UKftTk6iUR1JOoXN8LZ82MuztOj54aG
R9wRoPmJyRoc5kmiOhL1i5GMjed7egckSInTvYdWOY7ea0puaNnprU1F9dVJ
VEGi/n9XpXdXn5dQJUt57LJQunZtVZGojkSd0sXl//+oa3PFeRLVkai5ek+0
dG6WshHVExCJmqv3RL03WgMOLFqbkl+TIpmfRM3Ve6KB80tUJ06diWR+EjVH
ojoSNUeiOhI1R6I6EjVHojoSNUeiOhI1R6I6Eq2Bv69ffZpa/3TXlvLx8Zv+
X89J9J9ffg7ePqn1/m+//vDTdRKtNkl0/kTfZQnt2/50xyYS9V2iu7YEbJ9d
W0i0NkhUR6LmSFRHouZIVEei5khUR6LmSFRHouZIVEei5khUR6JhyPaUVGSh
ozPrDqkbGh5pbc+4A5aXiUR1JLoo6XDqxk1pMj8x6ZbHxvPuTeM9vQOBn+9G
yPlJVEeii3K70FXrUlKmuwrSrdt3JM5C4UHg0Q2yUv5J+AMfSFRHoiFJnH7x
TQvuAspSaVRvhKj3RGWe+dfQd2x6aaTWy1dZaH4SrS/1nujcwP7A+edyexea
n0TrC4nqSNQciepI1ByJ6kjUHInqSNQciepI1ByJ6kjUHInqSNQciepI1ByJ
6kjUHInqSNQciepI1ByJ6kjUHInqSNQciepI1ByJ6kjUHInqSNQciepINIxb
t++4xzs9M1soPPCL1whzF65dPhLVkeiipm7clJFIdkmfQ8Mj0szDR4/3pHOl
45iWiUR1JBqG7DndxWpDXabWa/bWpjwvEXJyEtWR6KJkF+p5b+UnJqVPCaan
d0Aeu8QplbrDQpeJRHUkuijZhUqc7tQNsly6Oq2sjGR+EtWRqDkS1ZGoORLV
kag5EtWRqDkS1ZGoORLVkag5EtWRqDkS1ZGoORLVkag5EtWRqDkS1ZGoORLV
kag5EtWRqDkS1ZGoORLVkag5EtWRqDkS1ZGoORLVkejSyMOP5AKgPokuhkSX
pqMzG+ERoPPfgnRb2VASdSPk/C8SLZu/OxVxohXzK4nK/K+caOD2IdEFPHz0
2G3hyiNAXbevNH48dPjCxuYLLZvLx8bmq1fGE8kurykZOELOf6m9I2Dyls0X
t2yVv/W8RODkre2Z/MRkmPkvJrcFz5/cpswvP+Mh579y/PuFto/8VaZvMHj7
eIklfC9kTN24adFU9GQLnz0/VrkXnZ6ZXcKYKfwRONyZJRYay5y8Xuav9vYp
G+5UHo0hqt9FAQAAAAAAAMTHSn79KA4Sya4NLTurMXOh8MDzVre2ZzwvEdW5
psv09A7InfeaklWaf3pm9sVDqNqXgE4q6ujM7knnojpFZOXksjD/8ujla5HP
XzpFsOzlqnH//WKi7tVn+RKe11yNLwGdfIvdCczd9zpaxb1oYv7Vfy9RjYSO
HBut9p5N7rb7KROr1qV4xq89iUeeKOefK0OfkDw8SVSeIv3iCagzfYORzy/T
yvwPHz3OT0xGciLrSpKoewgyf5V+HYJCtn/pvXBDwyORvxnAXU5ChvzGWKV3
GkilMr88iirt30oPQbYPu1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAwAr3L5p5AzE=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {65.5051724137922, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1: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
J6R0EL7jMUAIKXa8Xu//A9ksAfU=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {111.7655172413807, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1: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
LQb1QbCx5hCyXnWgV7GvR753vH5fWejCUyVBURpJilYRVl+ZruafVFXGKnmk
ptB7SU1iH773QbfReO/x5x88e/KJrvuxXtetNzx4+gWpP+h+dPv37+PFCrHP
YkPojX8rezo+Pg5xLSoqCpYzMzPv3LnT0dEBy0ajsampCZB89OiRwWDQ2fXw
4UMKPaRR24g438Os8R7XHhlo9+puCza2B4y2nB5s9QUPtfnBY3+zt1Hrrqs7
1a0+MSjbmnPm1/vygnylkjilNFJVmqes8laVxyiqSU2h93L6/YNPdx497JkU
syfM93BS+PGUqDOJUadjwtziwkl9JDbIPS6s3zI2OT6Bck7oto9av41aDej9
/Oc/b2hogLgWGBhYWlr60Ucfvf/++319fSjqPX36FILdsF1DQ0PEPJw/cPSs
2JCUdrRPcdws2m5qDjBdz+u7nm9ujx06lzB8PhE82BXf1xGjbw5/pgl6Uutv
lu3P9l5+lJMToGqKFklDufn06iJ/URGF3uzKjGE7fNzzm1TZHbWMa6308w2l
l9uqr3YWn2skdTSv2DMjbgjDBoYGpw5Nf1sJZ09Pz/3792/cuAFJ5pMnT65c
uQLQAVwousFTjif4sLk7pW4dhfCMH4DtHx4aw2wjmGXcnhhAz5jU4/YCnLDY
S3H6oNUsTlA/hmGa7FMm6V5T/cmepojxrvjh9si+S+n95+L7ziWazyeaziXo
O8L0zb66ejed+vCQ0oUdsmUjM50mEISpSsJkFSFSQbi8MkJGbnd+8baIgM63
30YT345bLd/OpbJQDaA1nrRa0NEGKL7+idExVCOd2WK1jIxNdZegqwWvGZn4
+k96Neobm9wf6Mdoq2ecbyps13DONpV0NBR0aIibWbDatMglrRqwbwXDPTUW
zzDxw9XothZW+6nYb0NQ2oAbZq+ZkGdi9p4dZj/lB+uJ45zErYXmZjSLxYqn
BPiADotluk88ODri7HwNQIfvIWrH0JTps1pvR20O6DWH4eh1hPddSrWjFw/o
GbtiDe1huiYfO3oHBxXrWMGbAb10Ph/QC5WWI/TCpRWkniv0CBFgjU2M2+zD
aUiNNkb3Qp2qKt/a0XkymUcn9gX4FrTWFZxrJNCjt9fDI5jZrkUubtMgzyF6
6OawRERDC89JI+cMPaIqWG3Ej4vvJ3mNsOK9ZnTQ2GIdG4HkHS9UWJit3bGj
d9Io3WWqP97dFDreFTvUHma+mDLQGYPoM3Xi6BmavPS1xw3qgwPytYDehuI0
QC9UyQyRlAVL+BD7vmvoIdCmKoD9s/FkA88krKSeinuoJRyHmIeZx4a/ncMU
pDKNjO/196G31NK7GgDA0o5GAC2/rc6RuKLWesJziN4EPvEHjg+eZtgLnDjN
R2zjeN58rtCzTf8DmedI38Bw/8DX1EM87RkH7mz2HUXb4gDOkgC9+uzjRukO
Y92x7qZgO3qh5ovJgF5fV4y5K87UFW1sC8bRqzuqV+0H9EqCNq0vSk3j8UIU
xYBekJgH6IVJykk9V+jZHIoaQ9FubAIfPOBE45CNWvH7euMbWvAKNDQxNofo
GYfH9vh55zfX5HdqAUBILIGvvNZax5m90STDaL7TuU04ZwjRhO6vR9xWj9Bc
oTc8PoanwVYbcf7Fig/Cgz6XjdSoAk1gtn7L2KBtYsg60Tc0OIv7M2JHzyDZ
bqw78qwxaKwrarAtxHQxYeBsJKLPdDbC2BZkaHA31B41KPf3y9YwA10BvdTq
6mB5UbCYEyiqhrQzVFxG6rlCD/U1zGbz6OjouL2TN2WolaRG++eQ0kP/ZQ7P
9uoHR3b5eOY1qXM76gFA6M0VttTlNKsdcQMT853OLXpQUI7HH1Dejtkpc7yl
7Nz29aY+BnZhdMI6PvHg4eeZxQUpTHoSs4DUCdm02FxaMrsgobQgi8/Jq+KI
a5QjE7PWHgN6dVlHDJKthrpDzxoDxroiB9uDAL2hs+FAX39nZB+g1xpo1Lrj
Z/eUe/qkq4sDNroUpqRUVQXJCoNEpQHCKoh9ISIOqeesr4dGg1gsKI0cGhsd
x6zDk+NE/3qG4dnRyYkRe5oKtOKjH+e0r6cbGN7p7ZHToMxpr8ttVBU31zGa
a7ObVBAB8VBoN4BJeA7RQ7dmJjp3M1ByRBL1Cucw4RyFTgfed8M/97FJ50eL
TxKw6fVSUpc0yBlaKb1Znl7Ly1RVh+an05gFE7NXJ4atOHp68RZA72mD/2hn
xGB7gPFCrB29cEDP3BFqbvE3aE8DegbFHrNkVZH/hnWM5GQuF9ALFLIBPYh9
wcJSUs8ZepMWmwXvbkCFGLCOi7Q1lbVyjlJcKK0mNbNGXCCrZitFwoaaKoWE
XV2pN5sstjkb2dvbP7TDyx2fdaqtFgAsaqotaKrJalQ6EgdIIsMGc3uYBXMY
Mk1cnkCEQpvNNgPAuTm5gNns3Qq86zFptdx79vBYQmhxZ21JVyOpSy82FJ6r
K7hYn3+xrvRqc1RpflJR3iz2QXD0sg/pJZtw9Bp9Ab2BNn9Ab7AjbMAe+BzQ
O2hQ7HJEL1DKAPT8BdzvInpWbHJ0DC9tDDNZx1LZjLRKZo6Um6qoJHVaPT9e
XJos5tBEZZGMTM+YMGgVx179bjpTT9/gds8zjujRG9WZDQrIOZEhAoIBRuTv
VF/v+Zq7S2UnbeiyAHwoOvbpkydQYpktquJ2LanZXc2lHY1lnU1FHZqcDnUg
OzuztGgWT0mPYpgmy9MsX2WuPdajDRzv8hxujDR3hQy0Bg+0h/a1h5vbwsxN
AaZ6D5PqmEm+v1+8ihmyeV1JWiy3wkuS7ytk+fEr/aqK/QSlpD7KZ2wM9+24
ccNqv6XsVDm/evTwpth+GBn+HbLY0tglGTIB52JbWWczqdnn2zhdbZyzTczO
xmhpxZGEyO7BfvwSjlnboRH8wki8/ZmYHB7FiwLDDCP2ZBedSZzAT/HaJqdO
K5mePZkXmlhUX16qkiYotRladmq7OLe+jmANjKZbRDO/nWZmQUWyH9/H7CM/
rfZP+C4OFPlOoZfRrHSGHquzid3ewDnbWNBRD+gFsLJeBXom2UpTzdGvoBfS
1x5qbgvB0dOcMSqPIvSKgzetZabGVJZ7ivMQer7cIl8+m9Rzjh78vAg9mpTP
Pt/ChvIkM+tca2lnK34M/9WgN4aZjTbTMDY0ghn6rU/HMcMgpn9q6RnHzGMY
rDcMYUa7TSNY3yg2iFmNa5Ky8lSlJUphWn0zTcNObBIXtbZ+FToKvRfWFHpo
rN2Dx4/PpMQAes5uDVlsP4lT0qGlt9dldaj8WVm02UavPtPDEb2hhggcvbbA
/rZgAj1j/Wmj6rBRtrdPtNIRPR9BiS+v4ruLng1D6KWymOkSXklXEzol/VUz
O5tZHc34MfwObZSk/HB8xOyiB33OoQF89BI2gFkg2g2PQ65vHYSds2GDVtuA
BRn/cwT/VbrvqheFhmUo2QUqQU5bZ7a2OrZelqdtJFgjpltEM79R6L2AyNHD
T56SGR9K1Fxb3Faf21aT2a70Y2elswtncW9GHNDr1gSMdXoAeqbO4P7WgP62
QHN7sKktyNTka6w/ZVQdBPTMwhVFQa5rilOiK8o8RLnefKZPdblPZaEPj0Xq
OUcPs/dnU0qKU0VVgFVRm4bUhe0NzLZGZkt9YbsmUlw26+jVlQZXJv1KEf/r
upgVsshfKBN+Xp/0uxbaW/KE1xR2KxNfUyW8VpP8Wn3yr8AaxoF5Hp75GmGW
kktracrVChNq61LVNQRrYGLuqdRaMYXeC2gSXemPn7C1Yp88enQ6OZrWpMht
qXHm/EY1o7UW+oO0NoUvKzOtdJbRq8twN0pXGNVHEHqD2nA7en59rQHT6Hkb
6twMygMG6S6TYHlh4MbVRclR5Rx3YY4Xr9i7qsy7guFdXULq7wh6ycyiJH5F
QavTu9/SAbpmDX4gsbUuQsQ5FBc+u+h90Vr3gWibSbRvUhjfJzpuUOwbELtb
lW4mBe5+xckB+clhxckRxfFh+ZER2ZFzRetdQkLoTTXJirLERlWWmpdYp02v
r0GgIafUiJCT1UIKvRcQOXrogNVXDYl9tlaR16SCyJjaJvdmZ6ZyCmex5g47
oPes3n/0rDtCr6/Fu6/Nz9QWYGz1NzZ6GepOGJT7DbIdRv4yRsCGVYVJkWWl
ZwTZntVFXlyOV3mBVxWT1N8F9EZsOHoJ1WWOJ8JmOLexht5QW6BV5TfXhAtL
p9Abm7WTC1fVdVcFS3WyHRZ1rqnB51nrsaeqAKP8uK7R39jkD3mFudG7r8G9
v96tr/aYSX3kU77rhoCgRLkiQV2e1qGmySrj1HWJ9X9gDTlJJUCm0HsBTVps
k5OYxRG99EZ5BvSayUzT4jOr5zYq05sVKa0yL1bGq0DPIFluUB0m0DOeDZpG
z8+Ongegp1fsQ+gV+K9fyUiM4LBP87MAPc/KUs8yuie3mNTfEfSSigvjuKXQ
iBHnwmY4W6vK06jpGiVgGCZgzzp6Z+vaLivnm+q32zQlpnNhz657d3ckm5r9
dOejDedjTOehfx1mbvc3NnvotCd7ao89LFu09rRfhFAdV1+ZfFaWJuTEq2ui
1GyCNXCikg9OUPDAFHovoCn00Nm9jx8+PJUU9Rz08DuJ1ElzYKFJDuh52tGb
xX0F9GppZxzRG9CE4ei1eplbve3o+QJ6+ABO5R69dLuBt9QRPY+qwj8W9GIr
2fjNWRwOzn/pQH29IrdelV+PsxnKZx2MDZtd9K5rLrxb88ZIzUZMWQidaOPb
fkOX8m3nY8ydsQOdMQNnI4faQwebfPvrTxsUR3TS/U9K39wZEJ1S2xVZWxas
ZidWF6U1aKNri78K3Q8WvTFscmrs38jopHVgEjPglxuMjNis46TGBuxHFc32
mWImMN1TvQs9KLWBlaKRkjq9UZVeJ4fMM0kjia3lexVlZZaxLM6HAX9TTWBY
I83DLFlhUh7sVnuPtRwfVPsbWr1MzR59TV4DjT4DDd4D9e596qMmOaC3dUCy
vCR4IyScIezSY9XZbtzCU1zW6cpctwoGqXexaRvCfM7dvm2zn8CaGkn76i+V
nfo57QOnxwG9UmYkrzSpwekdkdIaVRkNqvR6aapW5ldVtDsm+MmAeRbRO9/a
9Fn5mkHhXn17wFBb0Hh7tqErYrA13HQ+ynwuCr9OpCOivynQpDljUB/UKXb/
vmLDphCfaElVnIofrBRmKNnRKkmUXBSv4CHHyavBsbIq5OPFGSeTYkdsU6cF
bahiz91AuOdottCbtA3jg2/HJkeHJ4YwWx82jp8mdZg9b4ZHxw1Waz82Yh6G
AhrBnt7TuyQkJgtkyfUSUqc1KNNqZdAsJ9aLY2p4noWZ3xp65kbPKfQ0Z2ag
B1EP0DtalXWykvFHgV4iu/j56KU2KGlaJaAHzZ0vtxDQ+2Kw79tArwuMj5Ud
aAsH9MwQ9abR2xjiHSmtilXzgxQCmoIVpRQDerFKHjEDQLS8CjlKxv0Bome/
5mAEw2dCxAOaHsOMk5NDY04D/TiqFZMYnm6OjPXc//BgUSK7VZNUJyZ1cr0s
RS2BupFQJ4pWV78y9JYZlfsBvdHmIwNqH32Lh7HptLnJYwACX4MnZEF96sNG
+U69dHO/eBkzaAOgF8xiI/TcKktOVeScLC8g9XcKvUStBBJ4Uidr5OkaBX7Y
0BG98Vnbz/NtDZ+VrxoQ7NF3+A21BYy1ZRm6wgZaQwA9c1d439kIfOxQk5+p
7pRBeaBXvuODivUbgr0iJNwYFS9Qzk+Tl0QqRBFyIYEbIg45Ulr5A0TPBn0Y
mxl+6TGLtc9iuXjjbrOG1SUv4imlpC6RaKpUzXKphtdcq6mVsSs5/y/G11Ol
cTZ7c2KtJEkpgtY4rkYQparyYGRkcEpmET2oXA3pZ0ySJYDeM7XHNHpnEHr9
EPhw9NzMqkOAnk6yqU+0tDhw/YqChKAS1hFu5omKgpMVTLfy7BNldFJ/d9CL
qGYDeikAF5kT8VuVSVNqRNDc+VQyZh29c63aT8uWDwh269q9B1t9x9oy7OgF
mzpDTZ1h/R04hv0NvuZa/HBWr3T7+2Xr1gV7hooqIpVV/jJespwZJheGSfmR
ci4yMQUHuiT5B4ie/WVG+z8QQMZud3RcFZz8feUxE28DqZ+KfmMSLx3lrelW
bOznbb+Rv+d49NYqudjZPJZxKmG8jA9VAhKPSCX3laBHOwXoGRR7nqndR5oP
9qu8dM2nDY0nTY2n+xs9+rX4EW+z+qBRvl0ndQX0igJcltPjA5klhyszjpfT
T5QXnyzLOs7JJ/Uco2cfRAxpYwKrCKHnrImLU4uS1GL8CEatCKH3dKgfm73R
x+da63H0hDsReqOt6fpOfLSe8WyIuSMEQt5Ac1C/1susPq6X79ZJttwtW7sm
0D1YVB6m4PpIqxKlRcEyfrCE54ib4yXJP0D0hsewgbEHlnFseFSHYYP3NNpP
RBsx1XZiBsuZbtw+rD1sVR191ri/W7a7Nmfz6phdYXy5sxm9ouW8GHEVVIlo
ZXWEotK9gDa76I3ZbNp0N6N4IaD3VHVmpPkAjl6Lm6HpuKnJra/hdH/D6b66
4ybVPoNsC6BnFi4p9F+3LD8uoJh5qIJ2rCz/eFnRCU7msdI8Us8VepOo2jmg
F17FStCIIXkgdYxSkKAU4kcLa4TeFQWvAL3aT8uX9Qt29LZ5DrR64+h1BfW3
Bpg6As3t+Ji9/mb/Po27SX3EIN3VK978TunqVQFngoRlofJKbwk3XloYJOUF
ie1XJU8bv0xSUoZfNiLm/ADRszevn0O9GrL0Q+C7LG+5W7XMqto80BJA6qd1
IUZ19KQ0VKc92afa0Vq0cmfu9iT1l3J4R0NHO0pYmajkRymqwuUVCD3r5KyV
qR29E3b0dj1Vn7Kj54HQMzaeBPT6tKf66o8i9Hol602CxQy/tUvzYgG9g+Xp
Rzl5xziFx0szjrJzST3H6FngI/ExKfElhQg96DqROkrOi5Pz4+XV8WrBH9Cb
vWPzXS01D8qW9gu2TaHXlqrrDMTRs49bgIWBRr/+ujMm5WG9dHuvaOPt0lUr
/U/7CUqD5RUekso4CcNfWh0grkK4EcSBg0Sl4B8iemPYyPgtiHrGif4xDDur
uHZVuH6s4VB/RwqpjVfj+trjJxRhz9THjILtDalrdiUeSapqJrrMMxwurowU
VEBrDOn9q0Rvvl6+E9Abbtrfp3TvbT6ubzyGo9fo5gw9/6LiPw70LC+EXqSs
OlbGi5PhB/O9yumvBr3FOHrt7gOtntPo4YMW+lod0TtIoLc8AEcvSFbuLq6I
ERcAev4ibpCkDBwo5iAHiEqR5xA9NA2gyWTC7FNDmM1mzGEeJGIBEBsdHUUL
s3TPBfx7juL/Wcexkc6GjmcVy7qVu03NgX2twXj3uSti8Fxk37kI6E0bzoYO
dIUP1nmbGg4Py06Z6ze9nb1kY3JIgKjC2TyWwcrqVDHft6YSCtxHwNyaG1vI
Zs9iieITRKR7GcSL9YrtT5RHhxp29snderVH9DVHTDVHodffX3vSXHPUqNzb
K9vaK9loli4uDt2wOC/Kk56/j5N+kJV7oCT/aGn2IRa5NxUnrQny6Lx9C90p
DIiw2Et7YvxL9w5Dsv8KE6QmpvsYHhr/0vma58hmnwrAfpgljlXoxykIkHCc
lXNYjSBSLcDbN2XVqbLc7VEBXwB6s3eR+uWOxocVK6B339t0alB7eqwh3tjm
PdLgaWrxMbf69rX49zX59GnOmGoP6xQ7e+SbHpeuWxJy+pSAHSqo9Kriegtz
jovYEdUcdBUkcWEIMUx9d3b8saSYMfu3tlhQO/ctoQcE1dTUMBiMwcHBrKys
zMxMNNE0POXp6RkXF4eIQ2vQbYleKXrGpgBzS1Bfe+hgZwTQN4VeR0h/Z9hA
rRegNyR1M9W5AnobkoL9heXOJtMLlHNTRDwfdQU0ca8MPQ8H9Lb3yU/Y0TuE
0OurOTGN3maIeoBeUch6Ar0DJTkvh57VghFzBkC7CGR97U+AbhQ1OoozODY2
Yfsm6MWWMBB6zso5VM2PUPFxBhVcN07OK0Nva0+j24Dm5Kg2xtDqidDD6Wv2
62/wBvSMNYd0iu09UtdH7LWLg0/NQC+8igQ6NEx9DtGD3+7999/PyMiAHwi4
e/fdd1UqFaz/+OOPb9y4cfXq1cePHztu/8qjXqO/uQXvPg8Aa13hQJzxbIih
IxihZ9QeQujdzFqM0HM2mZ6/tCJJgN/UAJIKb37xlpyY2UUPnyAi3UMvWqST
b3miOgLomWXHe7WHHdEzqfFZWQC9HrGLSbII0FuUG+mRn7e3NA3Q28/MO8LO
OlhCbmfofXWyX9t0fSE3sYHjxs9n48vo+ZbSAT1n5QzZRai8ChZC5ZWvAr1L
7ZrPy5f3VW8B9PrrTyD0hrUexmZPc7MPhDxAz6xxM6kP6uTbuiUbH7LWLApy
c+OzQvgVntxKL0H2MSErjDuTODAapj6H6EF7CNlmTk4OLMfGxn7wwQd37941
GAzPnj3TarUajebDDz8E+h49evTw4cP33nvvlUe9Bj9zUwCgN9gRCvT1nQ01
tQcb24Jgob/G06A5OCg5aazdeCNz0frEID/BH3rNM+wj4sRXV3gqINNgefGK
Zh89G1abdlovXgDoPVYeHGzYapYf69Ec0tUcgBbYXHvMPpAe0NsFTXGPeK1R
vLAw2GVhToR7Xu4edup+Zva+4tzDrMwDTHI7Q298YmhicsRiHbOPM8RRQnM2
OiVvurTHx0dHRges+JwrkyOjz71rqs1+mYj9CCdCz19c6qycAyC3l1bis6jJ
Kk6WZm+L9J9d9C621X9WtsRc7drdeLxfc2xEG6VvOTOkOW1s9DA1eZobPfu1
Hn11J42qAyi7+Lxk9cLAkyeqmUHVZe4V5R68zKOCktBKliNuYGKs7Byih1RY
iF/LVlVVdeLECWCKy+WOjY2lpKQwmUyUcDpOWfZq0dN6mxt98e5ze9BgR3Bf
R5CpLcDQ5m/uCOlTe+jrDwyITxhqNlzPWOiSEOjL5/gL2aT25LNiuWVnpCxf
folndeHm7OjZRW/IiqOnE73VK9uE0DPJjvZoDtjROwhdD3PNYagPensWBOgZ
RAsYQesWZIefyc3ZzUrZV5y1tygH0NtfnEFq51EPdeJw7nASxyfx+atwTEZI
bZnEk0y7xwYH+9GdKLDnH/1H6Flw9GKYBT7sfEDPWTn7issCRGWBfBb0qY+z
MmcdvQtttZ+WLTRVrX/WcKSv/uiwJlLXfHpQc9LYcMbU6N7X4AHZJrRykNjr
JJt6xWs/Y66a73/8eFVxYBXnTHmZe3XGYV5xSEWJ49B0j8oiZPeKwrlFb2ho
iDicQvTKkdAEgJh9isX+/n4A8FWjZ9BAh86nv9l/oC0Q6MMHq7f6G1r8IPaZ
Ve66uv39ouN69fprtAXr4gN8eJDDl5D6TFVxVDn7lJjpXV3sUcUA9Bgs1iyj
l34KR0++8ZFi34B2k0l2GNDrVe81qA9MoafeB+h1S9d3i1fphfMLAtfOzwo7
nZO9qyR5b1HmnsLsQyUZ+4popHaO3qR9sufRiQmHmxFbYYMJUuNPTUxtBj/y
5OT4+MTw6NhzZwO2oZvN4Uc4EXp+IrazcvYS4B0o/2omJPbHSjK2RvjNLnrn
W1UPOAsAvafaw+a6w0P1Yb3NJwE9g9bNrD0D3PXXn4Y+tUmxSyfe2CNa86Bo
xTy/Y8e4RQHc0lOc0tPc9EPVRUFlX8INfKacgTznUW9wEP8t0HFO9CeaGBBN
vEnwZbHr1Ua9OnezxhNy+IEWv4E2/742P3Orr77ZG3JOk/IMoNcnPKZTuVxN
n782zt+7mu3NZ5L6VGVhBKfkpLDIq6rInVuwKStq1tGrSTuhE71BoGeUHurW
7O1V7zao9+GBT33Qjt7Wbuk6hB49YA2B3p7CDEDvIJOcu+eiZ58kcxJNXoTf
tHh0GJscw/tlpEYzd6Erj8ymqZtG2Xt8zuWAXnQxHaHnrJw9eHgi51dVDBHw
FaH3SelbRu66LzSQSxwarAvuaToxUH/MBP07jZu5/jR+JBmN1hOv7xWs/KRw
+Vu+R49WFvpXst1K2acq0w5WFQZypogjoDtdVoA8h+hBOEOzu8MC5CSYA4AA
F3EXdfQnwvBbRs/U4mOcRq+3dt8M9Lx4xaR2q2CElzJPCAo9uYVnKumzjt6g
BUevV/i7HtmGR8o9A9qNRumBGegZVHuhJ2hHb6VOMA/Qm5cZeio7ayczCdDb
zcgC9PYWppPa6cmFiQlIMmFlf99Ya/OlyLD0M25hUeHZwWEZ5A5IjY7ICg1K
DvSPiQiPf/vmu5jDOSNyIfQmp9DzZuUBes7K2b0a7zr5cougT32USZt19M61
KAE9Q+VaO3oH7OgdA/SMmuNmjVt/vRuBXq/IBaH3ps+RIxUMvwoWQu8Al4HQ
IyIdwd0pDn3Oo96L6/mn1IeH7R1De4YD1WNo0Pm5VRv0QbB++M8CzbbhbFNd
d/kbfeqtkMAjm5s8wH3NnsjQvplUxyZUu5/JDo9KXDpzF2+IDjpewSRasxl2
4zOhc31EVOhWST9RnruBFs5glsxiOeD316O5m0TzDNKNX0j3Dteu7xPu0am2
6WQ79PKdkP+YlTvNim0G6Wa9cEMv32VIuKgk0AX6eifzsreykrYXpu+kZxxg
pO5yYld6/Jthpy9evTFuQwNdbfYLFfGjH1bLBBTeiMXCFTUVlDYpGt9Xtt4T
a2+TWlr3gbLlurT5aoXoVlAE+87772H4jHlO69aE7Q836oLvGFGUfzwv9WRF
PpGwzbCnkO0jYLtzGW7VjL1FKVuiA7pHBrHZmwP3Yovmc87ivsp1PfV7Teod
w0ofXd3BIcUhaNkgqzfWHQOb1Dh6RtFGE39ND3vxa0Feh1nsoJKM3RVZRzk5
x5nsk5yUk5x8Um/JijmcGIXvL94JttmmbujxXdQ3Hs1Cfvs7e+NiwYawcWzc
OowNtNc19HIWDdceQN1nR/oQgAi9ceUuQG9EvO5r0Ttp71wfFjKg2hwvy/nW
0dsB6JnkWw3STTrB+h7eukHBQmbAuhno7S9I+T+iR2c3yhvuKVrec4aepPa+
ovmapPEaoBcYzppCz/mPRoreifI8Z+h5CFjefNaZyoKTVQWvFL3uul0EeoPy
gwR6htqj+JxvDuj9MsjzAIsVyKQBekfKco4VswA9Z2Nlvx/oQSIEjwMDA9CX
n5hAR78nnXE3bsYTTfxa9XF8o46a9kf0+TreDjyB155CxkdCTttUf9KoOjyu
3PlUegjQO5uzYH20/7Hy4lPlBaQ+XlUIneuDfAh5ecc42bOOHn6Tr/QzjuiZ
BbsBvV7pdp18G6BnUmwD9PQSV51wXQ9/DUIP+noncrO2lCRuY6TtyKcBejud
+AXRy2c1SDV3pY3viLXkFqnvyxqviLRXygSAXqkdvaEXRy+8MA+hd7qCQeoz
PKZnNfNUef4JLn1PYfLso9da91npgr7KNdPoeePoKQ4YVfiRZEPtYTAsG2Tb
DMINRt7qp+xF/xvosb+kJKA4fWdZxmFO9uHikhOlyc4G7H0P0INUc2hoBG1C
HMG24hfDOrs5FH6VLN7XG8aPznWomnuZi/vEu4yAWP1J1Il2xNCIT+11aEyx
7Qvp/mHR6o7s+S5RfkfLCp0lEkcq6P5sxv7qvONluUdLs9anh70K9IzCt/SS
DU8ke4ZqXAC9XuXWXtlWQM8o32pHbws8i9Ab4C8o9l8Lfb3jOZmbmQlbC1K3
56XvoyfvcOKvRW/UagX08kq0oto7wvq3RZo7pOYr3pdorwjqr3D4b/uHsm7f
u/d89Mat05PATKN3LDcF0HMro5Mb70rDr5B7rCJvNyNpc5Q/jt7s3dziQkst
oGeuXNldv8Oo2jak8IL+PqAH/WiD+oC+5hAYlvXSrXrBOkP1isesBf8d6L63
hOlbnLaNQzvAyTpUxDzKTjzMziH19wC9L2+DH1AbGx8aHumfin1f8cSgHmpR
n8UEjE5iYxea2vqqFuuEa1D2PpXD1x8HmzUnwJBX6BX7R+Vb8XouWtGR89a6
SJ8jHLqz1uwgJ9e3hL6Xm3O0NPsIO3PW0RuxYnVppx3RM/F3AXo90k29ss2A
nlGxxShztR92W93NW9nPm1/khx9mOZadsak4HtDblpu2Nz/p/4JepbAxl6kR
qG/xaq7za26Tukp6V1h7mVd7hV31tl8w6/Z79/E5RJ0fBplCz36TFQI9aL6c
XVd4vJwOOcYxFp7a7SpIfAXo1XzKfgvQe1a33ajeMqT06K3dMyDfq1fu0qv2
6mrwE6l65R6dZJOOv1pftexRyfz/8j+9s7jIuzh1Cyd9Hztjf2HRIVaCs1FD
3wP0xsfxA6RTpwVtfxis+9U7slmmrsfEv6c94uFpZ4e2aVCy7Al/sb4GH4GM
3w4ScngHDCGv0Mn3jsg3PRbvHhQub8/+3dpIz8Ol+c5as32sLK+iXMj2D7My
D7MyXNJCXwV6BsGbABe+S+p1gF6PYgtCzyDfbFRswtGTrLOjt7yvel6h7+q3
MkKOZtFci+K20FO25qTuyUvcnp9E6q9Fb8xmA/Syi+qqFTcqFZe5ihukrhC+
y1Nd4KoullTe9A1i37r7PmafY8OZxix/uJUzVMgwRu7RnGRA70ipU58ozTvC
xFO7nfSETZF+s49e6ZumimXP6rYZVJsHFad7anYPyHcDejrlnl713l71fp1i
Z6/YFdDTcZd+xpz3//xO7Sgq9CxM3sRO3cOm7WUUHiyJ31+SServAXr2AS9T
3I2NYDlZrEI6LzmBkZFfSeqsLCYtszqUlltA46YVMoN9wx+XvWGo2WBQHwQT
V8hCVxoZ8gpAb1jm+ki0Y0CwpC3r9TURHoc5uc5asz3MDA9GNmT7h0rAtFlH
b9jiDD3XXtkmhJ5Bth7Q6+GveFa9zFz1FsNn1Zu0YEBvY2Hs5vxkQG93bsK2
vERSvyB6WYW1XNm1ctnFMsk1cvPvVCkuVCouMStu2NG7j6PnPOGcQs+CTv1M
oXeMk+NsmDf4GCvncDHtIDtzR378rKN3vlmJ0Htau9mgcsXRq93ZL9ulU2zX
qXYBej2qPb3yHb2Sjb38Fb3cRZ8Wv/Ufvm7bihjujKQN7JTdrPQ9BYz9JXH7
mBmk/l6gNzEwiJ8QHBnGq0doULqY3ybhd1WKL5FaLD4vkr7DUZxTi9/OKZP5
eMY8YM37VLgKofdV+iCv6JXtGZZtcETvUGmOM/R2F9PcC7J2cGgHmbRXhF5t
6ilH9Iy8nYBeN9QBHD1X3LL1veLVM9A7kpmO0NuSnTIr6FVKr3Ik59nCy6Tm
8O5w5ecr5BeLy6/7BLK+AXrWF0IPivpoSfahovRXh94D9humiqUz0OuVb+tV
7gTu7Oht6xFvQOh9Uvzmv/meJNDbUZK2s6BgHzMW6gOpvwfooWkFrLZxm32o
xBn/hGr1DV7dPWndHVKrG29Im25VtXwskZ2nV172PONvKFvfw1uC5/B2G1S7
wUb1HmRIKgZFO0yq9abK7b2y5TcyliyLDtiTn+1sDOTusuzjBRmQ7e8thsJP
XJ4ckMcqec7IRVTgI2ODI+MD9lMHY1bLqMOIx5k2j2LarIPGymVm8Vq9ZOeo
fPuAeN1DwTq9ZJNRvMkg2mgUbTQIXQz8NXreaiNvpVmwoDDY5bdZIbvTk1bm
h7vkJ27ITdmSE7shL57UqzPCfxt04vL1tydRfj5mwdGbtJ/ttY1bLANWK1bF
a06gyYv51+j8S8W8i6Rm8a8X8lqL+ReymJc9Qwrfe3DPig3Ynnspq216hhZY
SChm7MqI2Via6qyc97Kz9hbT9pfQ9pSkb86OBvSemI2ORzjRrVGt07Lgd8ub
GBntRwtW2xgqT+h2WPAT+bAwbrHf12bCZu0fHqqr0/RyXtdL5xvl283V63sU
24ZV6/sUR02KHbDGKNtikG42il2NovVQ2nrBOl3x2v8OObq+KPVIdtqW4rx9
zJit+SlbmWnOjiS7pIUdSIzEjw9OTl3PMWGZ/G6y94LonfaLr1Jdr659T1xz
i9QKzXWx9lZl08diyYVp9NY5okfQhwAE9AaEW41KF2PFNkDvesbCpVG+gJ6z
gVi7OFnH6LTNpWmA3g56wteiZxoYHp++8mbSil8OYB83gq8jNdSbOtq+Twt+
+7Ri0VO+a79wA0TkgYYDdvRcDXbu8GNugB5/pTP0NmfHrM+NI/WLo1fEu5pX
faHIiUt41wqqWmAhs/iKRzAD0LNg/S+OXnxRwU5aNKDnrJz3sDL3FKUDeruZ
aS+CXjlXIpFrqviKaoFSIK6prJbBckWVtFKorJbUVIlrK4XqanG9QNZUKagr
KZdlZuR+XvALk2KRUb5zQOBqqNkxonYxyQ7j3E2jR5S2XrAG0Pt58BGE3uai
3L3F0T809E75xlXIr1Sq3uGr3ia1RH2VX3ujTPORQNiVV37R47QfQg/P4e3W
K3cgG1Q7wZBUAHoGxTpDBfSnliH0dudlORuItYOdcSQvzZWVsrswhUDvOTUO
9tnUPzE6gQ0M2wZHnB4dItwzhLUy3EZlG8dqXaEO9PHX9pYvecRfr5fYuROj
RhjnDmyoXmHiz2cErftNZvCutMQVeWHr8hLW5yS/HHo26xh+hzkbjl58uoxR
dTmHe66gsovURdzL+ZVNDO65jKLL7kEFdz95zwJR77kXLtgHO2BomoS4Qjqg
B5mbs3LexaTtYqRC+7arOBWh90Wf6TnoZeXLeeILfMlFeBRIL8GjWHEV/1N6
Xqi4JJBf5kkvCRVXxcqbPMkVTtU5D3ffz/J/0a9a3iPa0s/fqFdvH1Ss0ovx
aTcMdu7wAp8ubR1/dW/Rmv8KOuxSmHI4K3VTYc6eoqgteclbilO30ZNJ/f1A
D5gj0DvpHcORXOTI3oaeCKmhhCvl11k1H1TzOnM4F91P+QJ6vYLFOvk2ZD3Q
p9huAPTs7pFt7RduMijW2NFbco02b0mk165cmrPRINDQHcpJ2cBM2sVI3p4f
vyzJ//no3brzSWR0ZmgYLSIqDxwYlhkaleMVkBAUnklq/5i86J2/eFTyVnfV
gofclQPCtUPCNU9Frjoxzp1e5GIQrtULVwF3Ot5yQ/VyI29eQeDaX2cE7UxN
WJ4bujY33iU7aVNWtEtOLKlfEL3YVAm98mJGWUdeWSepC8ov5XAa88u70gsu
nQlgvPvxe5MQ9SamiCCVxYafYED3XgD0dqRHrWclOyvnHUWQVCTvKUrdWZSy
KStqCj2Hvt4M9GLTJVzpDXHtXYHqDlhU866y8UP8z9o7ovr3hHWwcFdUf0+q
/b2g5n6Z+NaZ07497DcAvUdcF1OVyxfSDUbxYp14F3Cnt3Ons5f2FHf8Fd2M
Vf8ZeGhtQdLBjGRXRvbuwshNOYmbCpO35CWS+vuH3nHPKJbwXInomrPufznv
AjwWyu5Xcjuy2OfPuPkg9PDytBs1a/gJMru7ZZv6BBv1ipX6ctduyaKr6W8s
jvTYlZfurDWD0t6fmehSlLCDnrg1N/Zr0bt772FKKquK11qjuaPWvCNRX9e2
31W3vK2ov0nqtEIFO9jVUrttQL7yMXdFH8S1iqVPql2maoJoLV4ZBDh3OHq8
pYbqt+gBawC9HSnxy3JC1uTErctKdM2MWpcdQ+rno2ez4dcgAHoxKeLcsnNp
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
/vnjBSPkIVbRrlZR3lbh3iPlEZNjXCdG++hto0OWzosIuHtH85VwBHO3BRWJ
Hh+fErer1Y8r+QLx+e677/bv308fQIGCqqysrKioQOjH74ZxxHp6jtfGemT1
5i0KlsmzPcN3+8glWmS2lzx3aXxRUFQGlPaiRa6tKXaX08Zc2zxOb2vJmNK2
0bI5Y+y1jbYNmWPgcI7x/9hGHmzY4Zwa4weH0zbS+xX50rVrP1XfVd2XgOM1
9Uu8Vwcr9wXEF/r/a1/wmnxZ3G7wBqRPb3NT5Kx2n3492fJayuv1aZM0JXAp
bzSlWXSkWFK7kTye2v+SxmmaGOuNiF1OsR6lWRDrSaoOMdarrDqqY/X4WC81
o8BDlgjRcw3PWh61W2+TRe3xjMv3VWT7yfNdFqd/uWpUR+LEuuxpmid59bXG
LZq0bd3nDm1ZDq1bp8p837aMibaU9+JwWiv9SPSmB3mK31JXM8Le08JdEXwi
0wOU2f7yXJ/oPf5xX0AheCtyfOOhzfbKlHnU4EKztuQjn+b1o5u2vs47nFdS
bTpTJ6D1pPa5hFE6Vs9ihcI23kvK6iHWW6gM79Xq0dv5KNPYhxInaBMscXFx
VVVVpaWlghj6bd68OSEhgdxLnJdZxvr6emBCH9rQ5Da1Dmf3vftqFQbvkcMZ
GJsDq7c0bLve5hq8bUlolktUvk9w6rKY3U4LlzQmTrmYPOpy0ni9rTHd5uqG
iQ1pFlc2TL2YPrZUMXqEbPHkmBAp1pUSPSk6VFSfdV6q9ArJ8gjL9Yja6a3M
dg/ftjR4u2fELr1tsTI33s2hOcnySvLI81utLm2d2JAy+uJWi6ZkS9Y0ldVJ
4xs2j0NrTR61xt36r9EeDuFBY5QekKwJ0QGTo72l8J8UH/T68g+rjhz7IcN5
685NTd205m1v97u7yOFM2pqPWI9Ezz10m962xD/VJSzTNSR1WXius8vWL1e+
cStxcsNOB81ymL52LWNqW+akes2vHYyLr7e9RUT42Ah3KavHRA+e24QIj6ky
17r2a+rOH4M9ncUFz7BU7wgNYm7BWV5Re9wjdy0J/dw9MsszItsjfAc197As
am6h2z/60K/hszH1W0ae3zzpWtL4syljrqWPaEi27UlnIvWZta+9sth5pCLU
OsbNOnq5dcTyUYpIK7mblNWDxmAOJ2K9TvU9zWNTt++Sk0waQycQ6ysgggii
M7lq1SpIXEFBAbzGS5cuFRcXl5WVXbhwoamp6erVq9gEMayrqyssLKyuroaE
lpSUFBUVlYlQWlJRcrC4orwEpvKrb/77msU7M5zkdnPj33pPobfZzI6ymhMz
3nG1w+xge+eVb1ralAW8vD94YJ7/M3rb/uAXDy4buj9oSLHXy1+EDv7U6ckB
DpOHOs4etnCm3vb0BzNedpz5h/kOAz+Y9uI8+wFO1m5uHqe/qa2UgORt+RZT
XKbOjraZHWvjqPjbQvmUuZHW/4iaOi9Wb7N0inee8qdiv6FF/k/kBT//ZeBz
B/wHfhH01D7Z76jt9RuMluc7iNqR4EFuU4cPcLb/i+OcIYvsn3X5+zDnWS84
Owx1eltve2bhOwPsLDZsTPx39bGjR6uOFBblHy47WFB8qORwWXnx4aqi419V
e8vip0z3nuYYa/u+wm5upP42J9BqQbS9Y5iD06pxE8JWuzxR5TZ4b9DzhX6D
9bbSwGcPyZ7c7TPkgN+QIq+nZ0z/4/OLXF7656zfO8/U255b9O5zzjOGLXj7
mfn2T815a/j0yfkVpSePnmCEPayFChHs54VMfz/Kdk6kzRz5tPkrbd+PtZ4T
ZTtfzghr956Smu1cBdqbljMK3QcWBD6xx3foIb+ndssGlQb/ttD/JZ7IPJ33
LvvNAOtxT37w3nBnu+ELHIY7OgxycXphod2wBTP0tsFzbUbOe/fEVzU1lcD5
yP7DpcVlpRUHimGDysvLweHgc3A7pKCjo6NvRY8kmixaZGRkdnY2TgeXsrW1
NTU1NTMzE0IHqYTbSRrghgR0SECXBGBCHAXnFh16s8QdERobGwXR5uJYsu/Y
h/pAFTYaaNDhGEGnWwKkzouTtre343B413QW9DEitb8UEOmADzDH7/Xr12kS
YEXfKARJKTTGLy5Bah4p/HE4rrSzs5PIiH/xe/r0aWPpTM5epwjk8rGTQpHi
QGwFTWg3nAU74Bc0oVNrHpsSX49sAp3x29DQcO7cOeq3tbUZwFMKQFvcJqBB
b0S/KQIwpEtrbm7GOJ0OeNK6mFFggJ87tXCTAyk5uiloHu/8wVnVfFJGaL3R
3uu7gEETQTR/8CRPnDiB64Jpw0hNTU1tba1OdClV7i41uVRGkd8H/Emcxkb4
tA9zsHEULSzyk0uRVOq8tEyJY2HK2RkN7C8FXdpSBPTZhypU3KcrqI8OaUup
eaTw10tJui9G0Zlkik2IEVYawdOfvwp+kDSzAdY1QCJBfDNkS0sL9dlqlFFA
yOASKAVBAHHoFr9KwEboayCk6IwCY/lZEtrva96ud6uLXoKp+eu4L1zv5XF9
0tJEGeIoku4fX3P0GEDvygVZEJU2fUrKTRADUlCbudz4F+qC1KDhW6YXaCtY
glHYtOQVYaViK5siQA/3vFLDyOiFnsTBCHSjCXjSWciEsRHqk+0gZiO/gnwJ
JqG94il1RiIpSATuYkvDJmBObgmjBhlQ6jP9TCeicdNE+9EBxMLpr6m6YOna
BM2bDrqEh3odKV0FyeAPU2le/iFm07RAKqJvtUo3t0wJHiD7K3DfFGO7YYT4
hGcJA/NLAWMqyAhT2prv0xkJhAA6mhoCETAt5az464IjSkxu7PzgNyK7oE2v
4fIvXrxoLJ0Z06pF4SJKkgXBhIx7ST/w8k5U6hI/yUGVFUYBSTTmB1OxyU24
Xwx53tmjWlMiDq6F5xZj5zfAukw8e+LTEzRuZuctMK7m+07dmq+waYKjO4by
M4zzaVrG2KRD1CJrGTj80UEqZwurRJxMSphuHyFDydWHuWVSZxS4r7oIJilk
Ct96zsB0KXE1jfPn0gEp/Cm8YneHOA1xt7F4ClyZrkqMhqjf/eNbHO8Shl3a
AJaKFSEyFAgYxlPqpDQ/hcM9LfjDA9BrbW3FL901iv6ILLgWZscx/jBcYRSf
GAe3hX2J6Z9v2rg++ZODteU3hXt3r3cID5eY0Usfldb363OgO8KLNjpUzIYo
TOCYmVd35M7hLhgIeHsFuolUPCCY6gixYykHQv+CAa5cuUJ94gq9JQoPA8wQ
s395nI0C0gbAjT7lJohqjUdJR7vqfJ+d6T2jgEkBFR7ToGmkZqgSnXkiQGPQ
Vrq0R+GKRwT4i4mJids3JSR8ojz0n+I24U79zesPc7UUU9NVqB/MY/D6nLIH
ekHKavd6ahUXJR0/fnzdunWbNm1qbGxcu3ZtXFwcznj27Nnly5ej8/XXXwcG
BlIKlPBkvGQUkHqnO0iyb4JokM8GXZGbm5uWllZRUVFaWrphw4bKykqojl27
dh09ehShWVJS0qpVq0wImVVcRkilzYEYSCNIzcOkhuI4dEDA5OTkNWvWXL58
OSEhYeXKld9++y1Q9fLyamhoKC8v37Jly86dOyn5aSzaDGg5TK11yNWmfhKO
OBO3Hozh5+eHO56VlaVUKjF46NAh8IMgqvH4+PiSkhIT8DTAzz0dTgPzXBHU
6yLkvq9ZBr/yxpkt6cK922pB1dHVi8dIBOF/dTxARjETVvOlWIVpQoomqE++
BHgAnAwe2LZtG6IbMDMIi63ff/99SEgI7YlbYJgxDLAosTHvShnY38A8kD6S
/fPnz0P6srOzwdUREREYAesePHhQELMEKSkpMIXGiowO9Or2G5ifJxRdLNQO
FEVBQQEoDKGDosAlrF+/ntTagQMHcnJyBK1WNMxyUuflFRqPvLF0pmNJb0Ab
w/mE0igrK6uurq6pqQkPD8ctwCVs3LjxwoULZrR6LWpNibtw/rJw6hvh/vXb
ws07oJ/pqusxAp9dYTcXQuHu7g7zd/LkSTDA3r17qWgtKCiItsrlcvLqBZP0
QB8CLZAJogBCM0DEIG64+wqFAoNnzpzJz89HJzMzE2rEjHique8Cd2urj44d
O7Zjxw4oOqDX1taWl5eHwe3btwN/Ws4LCAig/VniyIz4Uyc9Pb22thbYZmRk
gKRwKjAYGhqKX2dnZzAGfCRzIvpLAz6OgGkAS8yePTs2Nhb9sLAw0BPjdXV1
UM70eAUsC335nYp8+jA5bALmxBWenp7QDNAS4AcfHx8oDXDsuXPnTp8+jd9Z
s2ZFRUUZWI/7CfAURDUFRUEIQy3Mnz9fJpPBxu3Zswd6A27z1atXQVvYFGg8
GBcQnFKsNMmjeJ6PCMAcmMAKz5w5c/Xq1YKozeAXoQNsV6xYIYgR36lTp+Ad
mQvJXxbotVn8sqmg9QzBMO3t7aS3EYx0P/gY72NG0xDgEnQQFrR+LFWYCNoS
2Yd3LPsc2HqNwDl+tITH50vpdpD/TFEwc8gxgxnpzMJkCCBkTdCm2ghJWm8S
tPH7487G/8qA7Bf7l9bxWWKQJcbpFqgefKjQjCzN59moMk0QDTctgNI467C0
p7mAyAgaNjU18QERn/8hxqatlMxXcVUoZgQqEmMr5oL2CVPaSgELkf3xVYD8
+oBnVPT59S9aEqI+Le0J2pT1z4QlyOTpBJ4qriKLFkH45b+fHkiUuh98wpqq
OlkGo+dRLAlMWtG0THLfAhUVMB0iiEjyJc2sbKYfDIPeQjLGBqyuhtWXCj3q
D80Y6AnaTB0/QlVwbGtLSwu/6SdFjgO+7IoviOVBx0xTOlEl1p6ZMcpjKAEN
nfoHWk5l/zLf2Ixe0C8IeAVFTNvNlTwJWgMncG9Fo1yBoK2a1vFUzQVkVngO
79YuxtFWsycJu8UHT3o66qAnmTNgqBYfwBQ4LcH2/zmYPEFbvcCPAEN6FIKN
8FWd/WAAVPqKhFXaxxPYrddZgCMw+/oCST18TqYfaJzZYj7BYl6fs+f6Gr9q
wBfush3oEJZEMq+KIxNMCLMSO526TbNHH/3QD/3QD/3QD/0A+D+XjOl7
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {63.61551724138626, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1:eJztnTGI80x7rpWcJrBNCndbZdvttgq4CrgJuPIhEHCVsH/CwfAf+HUgHHw6
t28RMKm22/qttt1yu223dOnSpXuR53jwMJ8ky7KlGT+PdV18LPJYGl1+PNJt
yZ73+7t//d+zf/vrLMvyv5E/s3/5j3/4y1/+5f/+z7+VB//05/x//fuf//T6
j3/+P3/69z/95e//9X9I43/+VZb9s6z//5cBAAAGTgEAADBIyEEwx6lB23Iw
tx/zzWt+fn6Ox+M2/ZT4+vp6eXl5ODCZTErPfnx8SONoNJJdPz4+zufzn5+f
7jt19HK8d3QA0AY5COZQkoNXHzuSbv5WzGw2C596f3+v3q6RuPRR2PGA7eV4
56QBdwZDGszRMQe776jj7tyG2+12fyB86unpSZ7K81yelYcSf3LlJS3T6bTj
TnvZvMdOAPTAkAZztMzBj4+P5+dnaZG/sty8mrtFKekTPuuXF4uFrDAajV5f
X11ylS7ZqjKbzUau9WQT2VBSTB6GfZ7aUFaWxu/vb98iUeguCWu3rXbSXISL
SiQaUhN3/3Y+n+92u1oHaZeyyEWurCY5vlwuS+EOoBxyEMzRJgddfIR8fX1V
V5PGcB13OVbKQYmzcB055xfn4kzy1H3B55GH7hKveUNJTL/TMJhCn3DbaicN
r66007MlKiFRWOtQqo8gHxvOvYcAiqg9GAE0U3uWLp3k3cn59+/fsix/sxO3
Fl3uyN/tAbn8CZ91y9IoV3NyjfPr16/skGjVfkpIVroNw25dgDZvKCu7CzSH
7EsyxV9LVretdtX+1Z0tkXvhcrmX53nDCw+vYd33m3JtWPvqAHRCDoI52uSg
v7Lz+JNzuJq7avNB4y+RwjX9sxKF1WdrDd0vYfyPW1y3tQK1SJpIJLl8yQ43
RWsvZmu7av/qzpbIbyhR2PDC3TeYsq1EtuQpN0XBHOQgmOPUoK2eq2sjsuGU
fjbpWuage8onQvsADZGtJFZcyry8vNRue5FhrcbZEp3tVuKydA1bvaMLoBly
EMzRJgfdFZn7acfZ1ZqvB09t23DsXH096K7RwgmD7lrM/U6mum0pcOWFhCu4
3k69upYlavnC5Yp1uVy6W6/cFwVbkINgjjY56L78WiwWkhHuS6vaSyq3mvsG
TfLCXXxdlIOyYTVK5vN5dtX3g+6LRVF1X7fJtvISssPvOWt36u58rlYreSj+
/mc24asraVxaorMv3D2UHorjL3P8N4kAJiAHwRxtcrD6U0n3g5Dm1S7KQf/9
mv95iUciyX+755BLJPd70Qb/4nD1V/qhaUm+tFMXuFXcytVfhF5RorMvnN+L
gnUaDkkAnZwatKV2PzlOzttvb2+nVpOTv6wgsSXn8+abkKUWv2H130YrDhkk
HbrJd7LQ8JvPErKmpJtLQ/krnX9+flZt3U5FWFZ2e5EQ99FWLULz/MHmEjW/
cLmczPPctUjcyzI/lQFbkIMwZNxVm/tdh2SKmxnhb0ICwBAgB2HI1N5XXK1W
t/YCgHSQgzBk9vv9YrHwX3i523q3lgKApJCDAAAwZMhBAAAYMuQgAAAMGXIQ
AACGDDkIAABDhhwEAIAhQw4CAMCQIQcBAGDIkIMAADBkyEEAABgy5CAAAAwZ
chAAAIYMOQgAAEOGHAQAgCFDDgIAwJBJmYO73W42m40OzOdzeVgc/gdw0+n0
4YBvBAAASEPKHJS8e3t72x+QBXkojavVarFYuMY8z5fL5SlJAACAHkmfg3LF
J2HnlmVBHsrCeDz++flxjZvNZjKZVDdMZggAAAPhJjkoGSeXgW75/f1dElAW
RqNRGI7ysLohOQgAAP1ykxyUyz25BnR7lAV5WFQyrlaGHAQAgH65SQ5Op9Nf
v365rwJXq9VsNisac7B6FxcAAKAX9Hw/GN4XdQ+rG5KDAADQLzfJwcfHR7/s
vwocj8fuBmlxmFjhvjQsQQ4CAEC/3CQHF4vFer2WsHP3ReVhcZg3kee5a5Rn
5WGDLQAAQC/cJAcl6ST73Dx6N2dQGrfb7WQycfPop9NpeI+0CL4iTGMIAAAD
4SY5eDX6DQEAwBbkIAAADBlyEAAAhoyVHOT7QQAAiIGVHHToNwQAAFuQgwAA
MGTIQQAAGDJWcpDvBwEAIAZWctCh3xAAAGxBDgIAwJAhBwEAYMhYyUG+HwQA
gBhYyUGHfkMAALAFOQgAAEOGHAQAgCFjJQf5fhAAAGJgJQcd+g0BAMAW5CAA
AAwZchAAAIaMlRzk+0EAAIiBlRx06DcEAABbkIMAADBkyEEAABgyVnKQ7wcB
ACAGVnLQod8QAABsQQ4CAMCQIQcBAGDIkIMAADBkrOQgv5MBAKNknbn1K7hz
rOSgQ78hAEAJOXH9v//6vvo/znuxuUkO1n7a2e/30+n04cB8Pt/tdg22AABW
IAeVc/PrwfUBWVitVovFYn8gz/PlclldmfEAAOYgB5Vz2xz8+vqazWZueTwe
//z8uOXNZjOZTMI1uU8OAEYhB5Vz2xx8eXnZbrdueTQayZWgW5YFeVhdn/EA
AOYgB5Vzwxxcr9d5nldNah82NAIAaIYcVM4Nc/Dx8dFfDBbkIADcKeSgcm6V
gx8fH6VvAMP7ou6hX2YeDQDYhRxUzq1ycLFYuJ+Jesbj8Wazccu73U4eVrdi
PACAOchB5dwqB5+fn7+/v8OW1WqV57kkoFwVSkTKw+pWjAcAMAc5qJxb5eDD
w0N4F1TYbreTycTNo59Op6VnHYwHADAHOaicm8+jb0n1+8HqP0pzKTd8OQAw
HMhB5VjJQUcpBxlaAKAfTlbKIQcBAKLCyUo55CAAQFQ4WSnHSg7Wfj/I0AIA
/XCyUo6VHHSQgwBgDk5WyiEHAQCiwslKOeQgAEBUOFkpx0oO8v0gABjF0Mmq
zczrZpKp9oiVHHSQgwBgDkMnK0OqPUIOAgA4ul8N1Z5YDJ2sbKn29U5l5CAA
wIGOZ5VTJxZDJ6thqlrJwdoEt/J+AYAJyMFhqlrJQQc5CADxIAeHqUoOAgA4
yMFhqpKDabQ7kkwVYMiQg8NUtZKD1UQY5vsFAPEgB4epaiUHHeQgAMTDUA52
v8tEZIdd+QX951tyEADiYSsHrahGghwshvp+AZgj0pVLJFUr4WJINRIDzMHq
4TDM9wvAHJHO2IZUycEYDDAHHeQggDnIQXIwBuRgMdT3K4FqR5KpghXIQXIw
BuRgMdT3C1UwBzlIDsZggDlYvdwY5vuFKpiDHCQHYzDAHHSQg2Gf3UmjCgOH
HCQHY0AOFkN9v/rq8w6OghjE+3TRe5+GyMhBzgAR6FE1IweTaGsbrndwFMSA
qsaAHOQMEIMB5mD1g/Ew36+++ryDoyAGVDUG5CBngBgMMAcd5GBffd7BURAD
qhoDcpAzQAzIwWKo71dffd7BURADqhoDcpAzQAys5+B+v18ul4+Pjw8PD+Px
+OfnxzVOp9OHA/P5fLfb1b7wcHmA71dffd7BURADqhoDcpAzQAys5+Dr62ue
59vtVrJvvV4/Pz9L42q1WiwW+wPyrARl6SXz/WCPfd7BURADqhoDcpAzQAys
56AE39vbW6nRXxgKm81mMplUNyQH++rzDo6CGFDVGJCDnAFiYD0HR6PR9/d3
tVGuBN2yLMjD6obkYF993sFREAOqGgNykDNADKznoOzo/f396enJfRXo4q+0
91PvUbg8wPerrz7v4CiIAVWNATnIGSAGd5CDEn/u+8Ffv369vr4WjTmYBYSN
A3y/+urzDo6CGFDVGJCDnAFiYD0H5TLQ/xzU3wIN74u6h9UNycG++ryPo6Aj
vb/8O6hqDMhBzgAxsJ6Dj4+Pftnn4Hg83mw2rlFSUh5WNyQH++qTo4CqJoMc
ZKzGwHoOTiaTt7c3N0XCTZcoDvMm8jyXBHSTKeRh7QsPlwf4fvXVJ0cBVU0G
OchYjYH1HPz+/pbLPT9l3t0O3W63ko+ucTqdhvdIvR452FefHAXWq3rqZu9F
9P+u1EEODnysRsJ6Dl4NOdhXnxwF1qtKuBhSNTQAhnkGIAfTaGsbrhwF1qtK
uBhSNTQAhnkGIAfTaGsbrhwF1qtKuBhSNTQAhnkGsJKD1W80hvl+9dUnR4H1
qhIuhlQNDYBhngGs5KCDHOyrT44C61UlXAypGhoAwzwDkINptLUNV44C61Ul
XAypGhoAkc4AWWeiqpKDabS1DdeUR0H3QyClqqGqxlCNAaqGBkCk86rCCljM
wer5kBy0chSgakg1BqgaGgDkoOYcdJCDffWZ8ihA1ZBqDFA1NADIQXKwejvu
Cmq71TYGUh4FqBpSjQGqhgYAOUgOGhpaqKIaQzUG8aqq7SPrHQwAclBzDlaH
rsLCphxaqKIaQzUGVHXgqjorYDEHHeQgqqhGVY0BVR24qs4KkIN3MLRQRTWG
agyo6sBVdVaAHLyDoYUqqjFUY0BVB66qswLk4B0MLVRRjaEaA6o6cFWdFbCY
g9mRsEVbYVMOLVRRjaEaA6o6cFWdFbCYgw5yEFVUo6rGgKoOXFVnBcjBOxha
qKIaQzUGVHXgqjorQA7ewdBCFdUYqjGgqgNX1VkBizmYHQlbtBU25dBCFdUY
qjGgqgNX1VkBiznoIAdRRTWqagyo6sBVdVaAHLyDoYUqqjFUY0BVB66qswLk
4B0MLVRRjaEaA6o6cFWdFbCYg9mRsEVbYVMOLVRRjaEaA6o6cFWdFbCYgw5y
EFVUo6rGgKoOXFVnBcjBOxhaqKIaQzUGVHXgqjorQA7ewdBCFdUYqjGgqgNX
1VkBizmYHQlbtBU25dBCFdUYqjGgqgNX1VkBiznoIAdRRTWqagyo6sBVdVbg
5jm42+2yPyKN+/1+Op0+HJjP57JO7QsPl7UVNuXQQhXVGKoxoKoDV9VZgZvn
4Ofn52QyKTWuVqvFYrE/kOf5crmsbkgOoopqbNWOUFVUTVTg5jm4Xq8l6UqN
4/H45+fHLW82m1JQVo8yhYVNObRQRRVVbX2iSg62R6773t/fS42j0UiuBN2y
LMjD6obkIKqoooqqLVWdFbh5Dsql33Q6HR1w90KLP2Zc9WG1UWFhUw4tVFFF
VVufqJKD7ZH4e3t7Kw7XfXJh+Pr6WpCDqKKKKqr3qKqzAjfPwRLuFmh4X9Q3
OrKAsFFbYVMOLVRRRVVbn6iSg9ch2ffw8FAcbpZuNhvXuNvt5GF1ZXIQVVRR
RdWWqs4K3DwHn5+ff//+XRxCcL1ePz09FYd5E3meSwK6RnlY3ZAcRBVVVFG1
paqzAjfPQTctQi4DR6PRbDZzl4Hb7dY1CtPpNLxHWrUtVBY25dBCFVVUtfWJ
KjkYlexI2KKtsCmHFqqooqqtT1TJwQSQg6iiiiqqtlR1VoAcvIOhhSqqqGrr
E1VyMAHkIKqoooqqLVWdFbCYg9mRsEVbYVMOLVRRRVVbn6iSgwkgB1FFFVVU
banqrAA5eAdDC1VUUdXWJ6rkYALIQVRRRRVVW6o6K2AxB7MjYYu2wqYcWqii
iqq2PlElBxNADqKKKqqo2lLVWQFy8A6GFqqooqqtT1TJwQSQg6iiiiqqtlR1
VsBiDmZHwhZthU05tFBFFVVtfaJKDiaAHEQVVVRRtaWqswLk4B0MLVRRRVVb
n6iSgwkgB1FFFVVUbanqrIDFHMyOhC3aCptyaKGKKqra+kR1UDlYWnO73T48
PLTctgvkIKqoooqqLVWdFbg6ByXvRqNRVsd8Pm/ethfIQVRRRRVVW6o6K9D7
9WAyyEFUUUUVVVuqOivQPQfT4y88wxZthU05tFBFFVVtfaI6qBz8/ft3VqHl
tl0gB1FFFVVUbanqrED3HJQ1JQpbrtwj5CCqqKKKqi1VnRXonoOj0Wi/37dc
uUfIQVRRRRVVW6o6K9A9B9/f3xeLxW63a7l+d7IjYYu2wqYcWqiiiqq2PlEd
Qg5mjTRv2wvkIKqoooqqLVWdFeh+PXgryEFUUUUVVVuqOitADt7B0EIVVVS1
9YnqoHIwq2M0Gs1ms+1227KTi/B7CVu0FTbl0EIVVVS19YnqoHJwvV6/vr5u
Npvi8I+tyfL7+/tut8vzfDKZtOzkCshBVFFFFVVbqjor0D0HS/MmZPnx8dEt
RP0Ht8lBVFFFFVVbqjor0D0H5aJPLgndvAn5u1qt3GXgx8fH09NTy06Er68v
v1PJ0Ol0+nBgPp/XTsogB1FFFVVUbanqrED3HJSQen19lWtA2UT++rmEcp14
0b8zI8HndyphKv3sD+R5vlwuSy+5ZKiwsCmHFqqooqqtT1QHlYO98P39Ldd9
fqfj8fjn58ctbzab2u8ZyUFUUUUVVVuqOiugJAflYlCi0O80/M5RFuRhdRNy
EFVUUUXVlqrOClydg6WVSzRvW0Iu/dwVX9hn7b5ONSosbMqhhSqqqGrrE9Uh
5GCPzOfzj4+Pol0O1qatwsKmHFqoooqqtj5RJQfbs9lsnp+fSwKluRjcF0UV
VVRRvQNVnRXonoPuJ51PT09uk/AnLm1wPxMtXeVJJ25ifnH4Pao8rH3hMYrQ
V58phxaqqKKqrU9UB5WDs9ns7e1N0sptIssvLy8tt62+FrewWq0kW6VPCdn1
ei0PG1butwh99ZlyaKGKKqra+kR1UDno/9EYv8nV/4yM72G73U4mEzePXi4Y
a/8/v+QgqqiiiqotVZ0V6OV60N0IdZt8f39LcrXc9jqyI2GLtsKmHFqoooqq
tj5RHVQOysXaYrHw/57M6+trmv83PTmIKqqoompLVWcFuufgrSAHUUUVVVRt
qeqsADl4B0MLVVRR1dYnqkPIwayR5m07Ut2LwsKmHFqoooqqtj5RHUIOlhza
r9wX5CCqqKKKqi1VnRUgB+9gaKGKKqra+kSVHEwAOYgqqqiiaktVZwUs5mB2
JGzRVtiUQwtVVFHV1ieq5GACyEFUUUUVVVuqOitwdQ5mjTRv2wvkIKqoooqq
LVWdFejlevAmkIOooooqqrZUdVbAYg5WrzoVFjbl0EIVVVS19YkqOZgAchBV
VFFF1ZaqzgqQg3cwtFBFFVVtfaJKDiaAHEQVVVRRtaWqswIWczA7ErZoK2zK
oYUqqqhq6xNVcjAB5CCqqKKKqi1VnRUgB+9gaKGKKqra+kSVHEwAOYgqqqii
aktVZwUs5mB2JGzRVtiUQwtVVFHV1ieq5GACyEFUUUUVVVuqOitADt7B0EIV
VVS19YkqOZgAchBVVFFF1ZaqzgpYzMHsSNiirbAphxaqqKKqrU9UycEEkIOo
oooqqrZUdVaAHLyDoYUqqqhq6xNVcjAB5CCqqKKKqi1VnRWwmIPZkbBFW2FT
Di1UUUVVW5+okoMJIAdRRRVVVG2p6qwAOXgHQwtVVFHV1ieq5GB7ttvtbDYb
jUYPDw+yIA+lcb/fT6fThwPz+Xy329W+8HBZW2FTDi1UUUVVW5+okoPtGY/H
v3792h/I83wymUjjarVaLBa+cblcll5yyVBhYVMOLVRRRVVbn6iSg9chqScX
gMUhHH9+flzjZrNx4ViCHEQVVVRRtaWqswJ6cnC328mF4Ww2k+XRaCSZ6Npl
QR5W1ycHUUUVVVRtqeqsgJIc9N8Gfn19FX/MuOrDaqPCwqYcWqiiiqq2PlEl
B69jsVg8Pz8XjTmYBYSN2gqbcmihiiqq2vpElRy8jt1u5/Yb3hd1D6srk4Oo
oooqqrZUdVZAWw4+Pj4Wh9/JbDYb3ygPqyuTg6iiiiqqtlR1VuDmOfj8/Pz7
9+/i8HuY5XK5Wq2Kw7yJPM8lAaVxvV67xhLkIKqoooqqLVWdFbh5Dsp1n/uR
jFwJ+nmC2+12Mpm4X87Is+E9Uq9HDqKKKqqo2lLVWYGb5+DVkIOooooqqrZU
dVaAHLyDoYUqqqhq6xNVcjAB5CCqqKKKqi1VnRWwmIPZkbBFW2FTDi1UUUVV
W5+okoMJIAdRRRVVVG2p6qwAOXgHQwtVVFHV1ieq5GACyEFUUUUVVVuqOitg
MQezI2GLtsKmHFqoooqqtj5RJQcTQA6iiiqqqNpS1VkBcvAOhhaqqKKqrU9U
ycEEkIOooooqqrZUdVbAYg5mR8IWbYVNObRQRRVVbX2iSg4mgBxEFVVUUbWl
qrMC5OAdDC1UUUVVW5+okoMJIAdRRRVVVG2p6qyAxRzMjoQt2gqbcmihiiqq
2vpElRxMADmIKqqoompLVWcFyME7GFqoooqqtj5RJQcTQA6iiiqqqNpS1VkB
izmYHQlbtBU25dBCFVVUtfWJKjmYAHIQVVRRRdWWqs4KkIN3MLRQRRVVbX2i
Sg4mgBxEFVVUUbWlqrMCFnMwOxK2aCtsyqGFKqqoausTVXIwAeQgqqiiiqot
VZ0VIAfvYGihiiqq2vpElRxMADmIKqqoompLVWcFyME7GFqoooqqtj5RJQej
kh0JW7QVNuXQQhVVVLX1iSo5mAByEFVUUUXVlqrOCtw8B39+fiaTycPDw2g0
ms/nu91OGvf7/XQ6fTjgG6svPFzWVtiUQwtVVFHV1ieq5GB7np+f39/fJfgk
7BaLhaSeNK5WK1neH8jzfLlc1r7wcFlbYVMOLVRRRVVbn6iSg9chqSdXhbIw
Ho/lOtE1bjYbuWAMV8uOhC3aCptyaKGKKqra+kSVHLwOuSR8enqSBUlDyUTX
6MOxBDmIKqqoompLVWcFVOXg29ubuwVa2vupFx4uaytsyqGFKqqoausTVXLw
CuRicDqdlkxqH1YbFRY25dBCFVVUtfWJKjl4BbPZbLvduuXwvqh76JezgLBR
W2FTDi1UUUVVW5+okoMXsdls5vO5/2FMcfidjDS6ZblOlIfVrchBVFFFFVVb
qjorcPMc/Pz8fHl58VeCjtVqlee5JKBcFa7Xa3lY3ZAcRBVVVFG1paqzAjfP
wcfHx+yPSKPEoptcL0yn0/AeadW2UFnYlEMLVVRR1dYnquRgVMLE9C3aCpty
aKGKKqra+kSVHEwAOYgqqqiiaktVZwXIwTsYWqiiiqq2PlElBxNADqKKKqqo
2lLVWQGLOZgdCVu0FTbl0EIVVVS19YkqOZgAchBVVFFF1ZaqzgqQg3cwtFBF
FVVtfaJKDiaAHEQVVVRRtaWqswIWczA7ErZoK2zKoYUqqqhq6xNVcjAB5CCq
qKKKqi1VnRUgB+9gaKGKKqra+kSVHEwAOYgqqqiiaktVZwUs5mB2JGzRVtiU
QwtVVFHV1ieq5GACyEFUUUUVVVuqOitADt7B0EIVVVS19YkqOZgAchBVVFFF
1ZaqzgpYzMHsSNiirbAphxaqqKKqrU9UycEEkIOooooqqrZUdVaAHLyDoYUq
qqhq6xNVcjAB5CCqqKKKqi1VnRWwmIPZkbBFW2FTDi1UUUVVW5+okoMJIAdR
RRVVVG2p6qwAOXgHQwtVVFHV1ieq5GACyEFUUUUVVVuqOitgMQezI2GLtsKm
HFqoooqqtj5RJQcTQA6iiiqqqNpS1VkBcvAOhhaqqKKqrU9UycEEkIOooooq
qrZUdVbAYg5mR8IWbYVNObRQRRVVbX2iSg4mgBxEFVVUUbWlqrMC5OAdDC1U
UUVVW5+okoOXst/vHx8fw4fT6fThwHw+3+121U3IQVRRRRVVW6o6K6AhB13q
hXtcrVaLxWJ/IM/z5XIZrp8dCVu0FTbl0EIVVVS19YkqOXgRLy8vPz8/4R7H
47G0uOXNZjOZTKpbkYOooooqqrZUdVZAQw5+fn4Wf8y10WgkV4JuWRbkYXUr
chBVVFFF1ZaqzgpoyMHS3kvL1Ye162srbMqhhSqqqGrrE1Vy8Apa5mAWEDZq
K2zKoYUqqqhq6xNVcvAKwj2G90Xdw+b1FRY25dBCFVVUtfWJKjl4BeEex+Px
ZrNxy7vdTh42r6+wsCmHFqqooqqtT1TJwSsI97harfI8lwSUq8L1ei0Pm9dX
WNiUQwtVVFHV1ieq5OAVhHvcbreTycTNo59Op+E9Uq9HDqKKKqqo2lLVWQE9
OXgp5CCqqKKKqi1VnRUgB+9gaKGKKqra+kSVHEwAOYgqqqiiaktVZwUs5mB2
JGzRVtiUQwtVVFHV1ieq5GACyEFUUUUVVVuqOitADt7B0EIVVVS19YkqOZgA
chBVVFFF1ZaqzgpYzMHsSNiirbAphxaqqKKqrU9UycEEkIOooooqqrZUdVaA
HLyDoYUqqqhq6xNVcjAB5CCqqKKKqi1VnRUgB+9gaKGKKqra+kSVHIxKdiRs
0VbYlEMLVVRR1dYnquRgAshBVFFFFVVbqjorQA7ewdBCFVVUtfWJKjmYAHIQ
VVRRRdWWqs4KWMzB7EjYoq2wKYcWqqiiqq1PVMnBBJCDqKKKKqq2VHVWgBy8
g6GFKqqoausTVXIwAeQgqqiiiqotVZ0VsJiD2ZGwRVthUw4tVFFFVVufqJKD
CSAHUUUVVVRtqeqsADl4B0MLVVRR1dYnquRgAshBVFFFFVVbqjorYDEHsyNh
i7bCphxaqKKKqrY+USUHE0AOoooqqqjaUtVZAXLwDoYWqqiiqq1PVMnBBJCD
qKKKKqq2VHVWwGIOZkfCFm2FTTm0UEUVVW19okoOJoAcRBVVVFG1paqzAjpz
cL/fT6fThwPz+Xy321XXIQdRRRVVVG2p6qyAzhxcrVaLxWJ/IM/z5XJZXYcc
RBVVVFG1paqzAjpzcDwe//z8uOXNZjOZTMJnsyNhi7bCphxaqKKKqrY+USUH
OzIajeRK0C3LgjysrkMOoooqqqjaUtVZAZ05WNr7qRceLmsrbMqhhSqqqGrr
E1VysCPkIKqooorq/anqrIDOHAzvi7qHfjkDAACIRpg1qcMvYDwebzYbt7zb
7eThDWUAAGBo3DwHV6tVnueSgHJVuF6v5eENZQAAYGjcPAe32+1kMnHz6KfT
aXiPFAAAIDY3z0EAAIAbQg4CAMCQIQcBAGDIkIMAADBkyEEAABgyVnLw4+ND
POVv2OjNf//+Lcuz2eyiPju+8HAypvuxq58IGXvXHanu3cQY8Ci3bdbzY/W6
Qds7movZ/Qjty+SinYanhfD/JVfrE07lblgtkp6ctbbbbV89t2wMeX5+Dk+b
1fO8PPv09FQ0Fqp7xazkoLxfr6+v8jdsDOsgZ5VL++zxKJOhnue5vKdpdt0R
cjAqzXp+rF43aHtHczE1u50idN7v929vb/6jztmBEdesshfRW61WfX0Suy4H
l8vler32DxeLhZxF5a9vkWfl1FrbZ48VM5GD8onl8fFR3jX5G3566ViQfj9t
ip58vkqz646Qg1FpebpT8iqUaNSi2e0UDacFbTlYXHjWuqjnhsaQ7+/v8OpG
Lv3kYtBdADrk2a+vr9o+h5aD8pnBfSSQv+E/OOPM/WW+W/7169fLy0txeIvl
o468y/LXT8+XCzc3bV8+p/V7PShismv3UN7c8Xgse5Hgfn9/9+t7N1mWdeST
j8j42yZnt6pdoaN5qaW2aPKslEsGZ3gJE4rJU+7mhvxtf1Hc3f9Uxaq2ta8r
tl51p1mFosWgjVpebyvjUM457l6ZH5O1u5ZnnaS0yFtw6sX26BZS6xmuWT1P
ulvQggj7k2qkIVENGhmc/ikZpaPRqHQcNSzISBZDGeT+lfau5/9J51OFrR5N
p447389F51jp3NXf3wKVv+56p1S9swsNJ4TRAQnZz89PebZ0N8ZEDoq2Pxh9
WYoTBZHraPcmysW1+z/8ShH8lfXr66sElpRXFrrnYAlfeTncpMjurogfZqGb
LM/nc1lB3hd/E+DsVrUr9GLuS1FbNHlW2mW/7nxSFZNn3c2N6k2MGHiHUxWr
2ta+rth6p4pZXWgetFHLG9pK/66YfkzW7lqOHXcOkb8+HGNUuPYIrfVszkFX
YSfsrzUiDYnQRCTlE04oWXscNSy4s4R0IjXvXU9Op3KJIbtwD08Vtup86rhz
C5eeY6V/94Wg36+8HbJcHL4u9HptKnb2hCCfNp1b+HIKCzkopQj/8W1Z9t+i
1hbEf5LxiSktfvD7O6syBrrnoF+WXcgQqv2sXusmyy7Zww88Z7c6tfcu5qWW
2qKVzKuNMqjkE2BxuIkhH7euFmtJ7Ws/VWe3UPu6YuudKmaDcO0mUcvrNWR3
TiMck7W7dl9SlPqJUeHaN7rWszkH5SU4/1A70pAIP1vKqViyILyvUnscNSy4
s4RsVXuW6KjnfsYT3naoLeylv/O59Bwr74tLebkwd+d2uWZ331r6T1y1O6ou
nBILX8KpewjKc1AGcOnKxd9Pbi5IaavaFbqIlTaXweNb3G1SeSvd/YTmXfv7
82e3ql2hu3nxxwK2LFrY6L5lEL0uV6ntuaLOta8rtl5zMdsP2qjlba5b7a5P
nXZ6r/CpHbWUD8eJfH7ODmd+fyM30pBo6KpZ8uzA6FfPXcuHn7HbF7b5uLtC
211BhJ+v3M1Sf8u0tv/aN7r9ibd63LVRvQnuFzJhS/hrmea3oPYTlN9W/nZ8
4aXNw89sctDJpb18tvn5+Tn1dvgb4P6z6Nmtalfobh62NF+cFidK7d1KP+jt
ERHzH1b9J4c2dfabRxJr0Dt7pV9aaPDst7ynbH1jmHrVXTdfD/ZI7SCv9QzP
hKeGqLtd5j0jDYl+c9CdJfq9HvTL6/U6/LFoc2HD5ebj7opzrFz3yZWpu/Pg
kIfiFo66NhVrf0KoLmvOweVy6X984pHEl/bi3ClFauvv//s7q4vFwm0rC37l
5smJp+oTtsv48T/mKQ6XePKxUxrDO+Slsrtb1rLTllu5mwzuK2D34fZU0c5S
fdP9w9qitclBeVOijiWRcTf2ZTz446VNnd1C7euqrtZRT96jUK+5mO0HbXEs
r/+FebPw2ZdTW0zZtf96yH8pU911cfxCx33J4r8LOGXevrYNH89Caj2zw88e
pFGOpmph3ddGxfEHM6GwPCULpSHx/v7ufrZ0Bf3mYMjZuX5tSl1aR959901c
cbqw1W3luMvqKI5ntuo5thl3Bg7HmHunwpY2FWt/Qqgua85BGaXVT57S4o6+
5lOK//mTDGl3hLptpVGiJDwimicnniIcAPLxSQ5Ar+q+jpe9yHnm1Nvhfh4c
/latYSt3XSzjSlaQfbnfO52p3Tnz2hdbW7Q2OSjDL+pYEhlRcmJ+4m2bOruF
2tdVXa2jnvQT6jUXs/2gLY7l9afBjjlYW0y/6/A3zNVdF8HvRWVzf5vxlHnH
HKyeaWs93eEsh4acOauF/fr6kjOG68F/3+T6yQ6fLcNf5ku7W7ml9tlXUftU
m7N6dvghsZ/tfnau3xU56D5du1NQbWFrnRuOO9db9RzbjLsvEU6od18zNc+S
qy60PyFUlzXnYALOTk7UgCRgOGFEDturP686en91UrouZ4/b0pd2vJfvytty
R/1qlHZ9KV1yMAGyUzmywusOWZbLGQ0jueRwdq7fdc4dX+mpT9S2IAebJyeG
C8mmTVXx07iqnJ11eHa+VXfkhS8P+G6vm8hTW8zayV/90kb77ITE8JqlX3x5
q8Kn3tzaeWrVV3HFri/l7HV6da5Zyumo2eE3meFeZDn8duns8RXPtpqDZ+f6
VWcln5oR7Py7D9pqDlbHXsPMxIazQW3lI50NyMH2kxOTTZuq0vA58Oysw7Pz
rXrRkxEb/mL2uok8pybcVSd/9Ut77bOqMfR8eavC7ed81TZesetLac7B2rlm
Kaejup36G7wuR4oWQyLB5NmwYi3n+lVnJTccU34uc1+SxemDpXmU1p4NGipf
9H02GHgOXjQ5Mdm0qSpyOmpzLgqdw38SpHm+VY/UdltrlbWe5Vc7+euG2g2q
yQ6l8NKp5Zyv2saUqrU5WDvXLOV0VLdTOQm7KWwul4tLhkQ82yyg5Vy/6qzk
9jOCr5YsPaz23GaUtpylGOlsMPAcvHpyoqe0eSRPd6/GP5Qx4G8UXDdlJnYO
Xm1VLWbt5K+ba9eqps/Bs2/u2eLH5gqrlNNR3U4lPtwe/a812g+JeLbhB4NL
5/qF/6hp80DtPQebxdqfDWorH+lsMOQcvHRyYrJpU1VK313KceEvY89OmTk7
LagjHWf2FX+s8Km9lCZ/3Vz77ETL3mk/6e/mOVirGp7KwjLWzjWLPR3V43f6
8vIip1z/fYdvPzsk4tmGe2k51686K7n9jODukqd6bj9Ki3OVd/R+NhhyDl46
OfGiaVP9Ip9RZfzINaDs/evrSwaAv397dsrM2WlBHek4sy9cri1m7eSvm2uf
mhvY1//NraVw+zlfKXOwVjWrm+J3aq5ZddJiJPxO3S/t/adN3352SMSzLe1F
Kul/Q3Lqfa/OSm4zI7jLoG2Tg+1HaXGu8pHOBkPOwUsnJ140bap3JP7cr6fk
k56f+lq0mDJzdlpQRzrO7Cv+WOFqMWsnf91cu1bVDY++DNsIt5/zlTIHT9U2
q0zxOzXXrDppMRJ+p+6C1Nv69rNDIp5taS/u96jNc/2qs5LPzgjuOGjb5GD7
UVqcq3yks8GQcxAAdNJx0mJibNlCFXIQAFTRfdJiSmzZQi3kIACoovukxZTY
soVayEEAABgy5CAAAAwZchAAAIYMOQgAAEOGHAQAgCFDDgIAwJAhBwEAYMhk
AAAAw+a/AdS90iU=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {50.68965517241388, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1: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
4/Xla9II3fbr6x6++5dQ7Y0fdfIfH/jd9u82nDBlzuJvWmq79dME6dkFT11+
2XTL1JEzOkcum911IQwr7AfYiwrzxivb1VK3bwL5y1txbqzf+anBWQyD2Svs
FYVVnK4YWVAY96Vv1EHHFVCKybJ9Dz/42+82gtmOHXR4c2ALpbM1db24qPnd
2m+qiFqiqveav3yGCuSKF+6tru899+aHyHCgniBqqoixo059/I47mr7fctAv
zqQK6IVXlnauqWlr3jJ96gVVYBqi+v33PvEaErMFrLAfZu9254CY47Ui2raN
XJ2V9zHgCL2RRb3MiK+CYTB7kb2iMOSNUlgpO90GE8VcMQWhLF7IOnvJoqQR
L6Ji3m1PgqCWTxVy2dKOwTryCipoJbeDfTQaRTs0BBvlSjlnMKkdX9+LuXRC
y2csz0y5LMLXwn48e0thXr+IXRTd62L7Jv/YigiSTSQSWGQYzF5hLykMOd0R
wVHO3WBOTVV0m/jy5R0X8f8+wJSzdwQCKxbLmXTSHcLXiidSxb+P2ettBkJ0
vrsXikjmOVTJVYoJcFcyYcfjSW+AKTtZwA2JP4a9m8Iggu1qSIRTinb+Ze47
eAeZyWTgOL2oWPnX//4xGMxuobJXFFbxpAU+SRXLCdtKFwvItI2So6CCapue
awSJBdE4Yx86uy+U8qmyN2I9KsQzFuxAswo5t5+8M3w9KKmM0ro7zC9K7bov
DJ6ZSZfTaXwt7L8jChz85AXJW4eFFRVYJJGHdXhclJx1lqF+KoWVM+5oKqWS
9+dUnD5z/MzLxk2fNWb6pSOnXzr6vy7/85E9tIz8b681/sKTr75+4vgpw6dd
Muaaa69IpTJuYPzvM/tgMJifgN2qMPgUFyrOYPJe778dpnAXt1Fo18xezoga
BVQpFyvJZN7aNXMXKCwPzkJOc5/TiogK6ZxV3BG3nMlZkHtvl7vDXDzrjJS4
c9KUXCqr75h2rFJIx2XHYuVcLu9msx2D/7ojeexKbe5RVbzJVryJyH6mCovF
YjRNp1KpSCQC/7Usy5nSlGdFlgJV0bxkmDYfC9DRUEw0lESeo6KWKkY5hRJ1
iaMtmX1m4fw9/5cIb4T7flbctwreqUpyxpzTFr527TOvX/zMsikLl01duGza
/GUznGX51PnLvUf23DLtmTecZeHyybDMd156mvu6U59+46J5SyY+/9bkhUsu
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
/MKsyOX3hP6HwhEREUVekUFYCM19/Pny+ncq3v385Y5PFndsq2zfUd327etN
2/7Z8fXfZf95Xfbh3+s2ZhXPF4LnvYL3hCmCGxk7e/aLLhKtb38fc8rRhziO
Nrv5uEFjYfrklo4tfTzFnOB/Bej0qX/494c74E3soT48F6KThxmyeZDFoO/j
2x89Lo+hj69Y8HAwlwnjzInUlj78IkAt6BHW1eRLG+SbJTl+usSxiTDglEAi
is8n5FAul588eRKwBQfB8/J4PFBk2IAjQLGRQljo1OBm/Ez1+ZnswvH1bX9c
UZ+7ojFhRfOUFbIHVjXFrGqMXdWQtKIxaXlTwrLmmcua46OTxsP7L2+KX948
DYw/Ilxu5uK1k6rqJ695Z0ZdY1Zqdpy7L9zBShBGRDT8ihTCknMefG39B2+8
s/PvW3e8+fbhxR1HKjuOv9i4729b9j3b8lXtB/tWbv0iO28BXMHG9TkD/Bwd
uOvD7LF133Hvr15c8sZNv5uAf4D7OGR36Ow+3PvlVxaK/1C/uVEY+Iy7SAK6
YvGktfXvqBwYhfY+t5/FNLIHTH3IFQgijx3xfW9OSxA5cc1iRX5rHx/riAc1
+wJ4Xqmgiws3c6LzAWHAJigRuGCQWyGEA7bB54IMw7bdbgeiwTlAOjiNGrmI
xIEpl80WRwBPo+mcPT+uYums5ZvyVm5OXNk4dVXjxDUNU9dsnrFmkxhs1eb4
VZvjombxa+oT19THr9k8HQxfqz4Rjq9siGvYmrGiaeZK2dS6jZmFxemIn5zY
5XEPwy0iIiI6Q5FCWGr2k7VNu1596+BzrXte2XryZdnxii2qf8pOvvSB/M+t
u1/fsqu26VNxUqEwHWp4mS9cSykt1O7JM+/75sjB2+6evHPHEWSyIL8/Y85D
oovHxd9z1dyUOz76zyfgXcVm5YkuEMXdef3c1GnNWz/aKTdfdstt2UWzM2YW
mjWOp//+tOiqcSLRz2l1n82sE10oGnf9zc+88Cp9bOddN14hGnflM4vXaO0B
3IAYsAPFhBjofoRxvOG9MYkwYBD4VpA3JS+hIF1dXU6n8+jRo263+9ixY1AQ
KDUcHEEvrM8b7PPj5XJwLyZu3XXGxv960aMTCuf8tGjehSXzRSULRKXzRaXz
RKVzLi6bc/Hs2RfMniOKns2ZfcGc2aI5c7Dha82+sGwuvnpBqSgjX1S0QPTQ
k79OmDkpHIpIfDAiopFQRBAWDKKM7GdWy4680vbds80HX+lQ/n3jicUy3T+b
lc+2dz7bdmjxlv3rO3aWZj8aJocQ+YFXB1PWL3smd3aGA6FH//TCKy+8gdx9
vXv33hGTxAT8LsUnt10keuvtd9//9ujdcUkezm3v3HujSFTfsXW7grn2t5M2
Nn8YcqCOhpbk3Ew2FFq97q3ZpY+vW13z2psvsPw46A82177xzCI3XhIamfgQ
ER5hdi48nxU6HxAmkAg2WJYFbEG258+fL+J13U+vPrJ/N02pV6zdILrgogtF
opde/JtKb1bSLE1pjbSWoo0qNbVx/Qbsq0a5lg7xq+uE+ierd7mpxx5PVKk3
m0zLWMvrVssLVutfbeYXbOzLVvZ1m+l1h+kVB/uy0/RyNFKn6RWn8VWcml4E
c5hexca+bDO/aDG+6HK87g28cfzkq088WBB0I19f4H8uHhERURQUGS8siNIy
/7Sq9dirrUf/1tq5+D3DX+p7X2nV/0Om+XOb/K9vd70s21PT8GU+IMyNodHn
9vaHLBruvvVS0SUi0UUXiUSX33TdzV6tpmXNmj+9tJhfL0y+KGt8a1vHisa3
/vu1NzGCvPaylISO9/+9X6W/4ua7+Kml0N+efVZ04TjRRZdedtWNd9050WTQ
/tfvfi268MqmjneRh7nr5qtFl16zXPZvzCwc7ogbEgOnNSSOcYSBG6VSqSBv
kFuz2Qy7DzzwwMcff0RTqj6ngVUe2vHF+9f99q7t33Xt+eo/v/jJpU0f75Q7
kF4pZ5VdKp25S2VcXl2LF8gJRTvijp/sK8B/FPhJZEqLb2H1VU7Tn7ymeZyp
NGAq4UyzOOMcv2mOl4V0FhgXnVS4EN5lS7CZ8EU5nAGwUi9T6rXNtTL/KMu9
H89exj9AxA8jIhp+RQRh/hBKKfxTXduBV5r3vdh2rPwj9plmxV/fNj3/tvHJ
VsWzbV3l73W9uO4/ibkPCgONPR6X0O2x55vP77z9lkCI8wVDwJff3nb7vzu2
rF6+7P5JU+E0luq5/VfXt7a2rtnY8Pt77/V4+7w2yx23/Xpzc5NSz/zsplut
NneQC4GPkFdUKEQY8qslBjnO98XXO/5w1z14tcyQH7Z/f894j58POzz/gupN
JhOUCPLW2dkJ/IKNhQsXfvrpxwrFCaPuBNu9Y/OayunZJZ0mF/IYM8XTX1r7
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
LMte3JK6uFW8uFWyuDWMsIq2yVFJ26Yu6Yh7tXli5Tvjy7fcVdkxobw5vqph
bkbZZA55AqeNCyMIG1aNAYT9iLQ6vYqiVYxWa9BplYxardea1EYwjYFWGihG
YzRrWUpPy7XKjes3EIQRhBGNHvFOGCpblPX6mqS6LVNxOGLzlMVNk5bIJi9p
e2Bx26TFsoTFsqQ3W2PfbJv6ets02FjSMq2iZWqFLDqpLHZJU3xNW9Lq9+Nf
2fT78saJda0Z1RsWZPOzcwxywbynghIjdSsIwobUGEYYRavBGC1l0FEavVrD
IwzIBUiDbdgw6Vgon0ojDyMsuiIIIyL63woeNpsD5ZVJKzZmrdwaX9EwZcnm
qXWtcev+lVLTPrWmbXpNi6S6JbW6LaGqfUYVpG3impbUumZp1CyzriH3jRUJ
FRtilqyftLpdslpWVLv2kez8aeHOLywBYd7IdqwThA2tsYswkJamgFcUraN0
tFpHA7YYg5ah9FBILWwYKROUT00QRhBGNNoEfowfZefOWbJ87oqmnFVN+asa
8uvWZ5SviF9Wn7y0PnXpxvy6jYV19Vk1m9NrNmfVbMpfun720vXzomTL1i1Y
ve6hpcuKNjeXNG8trW8pqazLqa5+oqQoDX+zwy2HQZ5fnnBzYoQoRhA2tMYw
wmjdKRN2DVo9EE2P97W0Tm+gGdjWqJUEYQRhRKNLIcyB+Olxjzx1X+FcUW6x
qHj2BXPmX1Q2VzRrPm9zLymbe1nZPFHpAlHpfFHpvEvK5lxdNvvaKNmsWdc+
Mv+GsvxxxQWi/HxRbo6oqOCSF/6SmpkyHgU53OiJeYX7wvgxzmR2juHTmEaY
nrd+eGn1NPbL1AxFY9cMHDQ9padojUqNEUam+SUIIxpF4oIe28I5k1TaFxy+
PzndfzRbHnHYHrWZ5znssx22uQ7LYw7L4w7rIrt9vt22yGp7yG59xG59LErm
sDzidzzptS7yu2ejwMJg8Emr+Tn5yTcWlP0OIQMKebDTyHteQi9eIHJd6wRh
Q2vsIgyYxQxCmBE3IdI4wMOoMzAYZ2q9QQOHdEotQRhBGNEokxcFjY/N+Y1J
/4TdXmRn8836DJ8112+R+sxiHyvxGXPAvGya1yzxmNN4S4meec0pbkMSXNrB
TLLoJ7H6RJdlkcNY/sjcXyKkRCE7CgldYBheXAh/WwjChkdjGmFGWsdgz0tH
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
TKtYV1rdEl/d9gBGmGxGjWzGaEhrmlJrNszNmzOJQxZcu5+GMM8PIewcX2yF
V0nuRJe2Kkg9iejHkfZhpHocaZ5G6ieQ5gmkewpRTyB6IaIW4l3tU0j3BKIe
i6LBFbWPIe08fEXVw0j7kkezYV7e7xAyw60OhPnFK3L8QgRh/5MihTANTWms
hqPHdyPDCUR1K9QGtQX1Kvr0lEOr/s7vPqk5+qVe13PMEdzLBB12RPdoDdrI
IAwy5nQ6wRGDDfDFIIfLli0TicaNnzAFQEYpji2vW/Lwk//Q0A696vCfn5j1
6NMv2fqQRvGdsmtPo2xr85YP6urqgoG+KH/lCcJGVlz/Ss3o1I9kwQLhyp8L
egtnT6tcX1DXMqW2/e4aWUxNc1xtc9yoSBulFZsWZc2d5kFOvGBnAPVXZvDc
unC5QmE0h2l8ji95GeALli1NfClr2pKUO15Puvnl+OvfTLnlDcnNryXe9ErS
LX+X/OqvKbe8lHzTy+IbXhbf9A/JTX9Nvem5tGjZX1Jv+pvkxldSb34t7qdL
En/+esIv/iG57bn8qbmJ98HND/tfp/2KiNjNJwgbWhFEWJdB7Q9Y3N999FD8
/Vdf9cuvDtkYBzp6gmLoTkb1tU391f3jf3Pl+IQv1cHeboNDazT88DudtTS8
gFaQWyEc0WKxgHv1r/c+uvDCC/dt/2jtipoX31hzrNtg1Bx6/ulZi554qUfr
YbTHOafq0LHuwyep+vr66K9ySxA2shpA2KmVmsM1/imE+cMIa51U1/6HWtlk
cH9qm2eMhrSqKW3JpkWZc2PdyO1DyBf8IYQFBwrEBcYEwkozM1dnz9maXtyS
nt2YntqSm9Gcnf52QcGWwqKm0pKGspLW4pKOoqK24vzWkvzm0oKmsoKm0qIo
pQ1lRR2zit/Oyf0gr3BrTu7mosLlDy94vDAHHi1O4JfwEQQIwoZVEUWYtldx
2Nv50X1Xil7429K9JwJdao/V5TdSSjN12KL5vKGpUvTT321ToYP7uznWHimE
GY1GvV5vMpkYhjGbzZDJkydPKlUatUZ/++237//2s5deeH5aQq6SsgecuuSZ
965Yv6Vb6zBoTvTZVAo1rbd4+XFhBGFjG2HBcJ/RaeJwWxyPAzAeYdMr1xXW
tcRgL6x1fFXrxJqWiaMibRYvqV/wIwjzjD2E8W2k/odTUzuy5nydUbYtu/CT
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
6IURlhJGWN8aOgjrHXJ/0fIdlwojDCMMI2zQCyMsJYywvjVkEXZ1imGEYYRh
hA16YYSlhBHWtzIKYaq+BLzUdagwwjDCeoQRlmHCCEsJI6xvDQWE9YDsCotQ
XUEYYRhhGGGDXhhhKWGE9a0MRNjV1BOLiMM5MMIuE0ZYhgkjLCWMsL41hBD2
ZYURhhGGETbohRGWEkZY38IIwwjDCMMIG3zCCEsJI6xvYYRhhGGEYYQNPmGE
pYQR1rcwwjDCMMIwwgafMMJSwgjrWxhhGGEYYRhhg08YYSlhhPUtjDCMMIww
jLDBJ4ywlDDC+hZGGEYYRhhG2OATRlhKGGF9CyMMIwwjDCNs8AkjLCWMsL6F
EYYRhhGGETb4hBGWEkZY38IIwwjDCMMIG3zCCEsJI6xvYYRhhGGEYYQNPmGE
pYQR1rcwwjDCMMIwwgafMMJSwgjrWxhhGGEYYRhhg08YYSlhhPUtjDCMMIww
jLDBJ4ywlDDC+tbQQ5iT5XtM3XKFYxnOySJjKRaOOcHJik6O5QTAmQAI27tn
l3L/pVMYYQMrjLAME0LYIxPG7clZ8GbOotqcufppMw7lzaieNvXtqTlvTpuh
z5mlz3ng0LQH3pg6p3b6zNqcGbXTZyk2J01p9bTZb8x44I2Jee/kPADv7M+b
s2XhwiUTs+V4NJXjiQv3WPz6VReMsL6VoQhDVOo29Z0ebNGciIyVaNbtZCX4
gOCkXDTvolmBtXEcwbEemvVSPMtIDMtJFMW8vuc1BJa0UgwjbGCFEZZhggvr
HPWH3z0797EHRj0wc+yDsyY9PGf6ogdyF86aNGf2xLmzJjw0a/yjs7MfnT3+
4VkT590/ae6siQtmTXgQvZ+W9KG5k5bkjFwwf+JjcyYsnpn9YM74+Y8+/OzI
EeNT55tMKIYO46liuT7CCOtbQw5hYi+EeZ1ON6sgzE3xbpoROEsKYU6/Q2BJ
F8vwKsJegfoiXz/f/0o3IkbYgAojLMOEEDZjRs6OvW9u2ffhpsqzqyvPlBw4
WvD6u+urj23QH9+kqdtU1bipsvklTcMG/Ql4Z4Pu1AbdmZe0Z9KRgm3RNax9
/dRWPfrF9ZVflO/5+6b9781e/Fyq1UB9iTFEMeXUMcL6TRmKsCvKyfXyxRSE
IUeMQ7zzUKyHojjO5uRJ3ukCtBEC73DxLCfQJIURhhGGETbIlEgku6bkztyj
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
Ec4YYX1rCCOMsJuCHt7LUKzdSkkswTu9TreX9xFudxNFBj0h2kpzbrfVSaW8
sEQyfUqgxd5RO6mmYO1JOXv2X17SfrZKWwcNZj4wRU8u09MAMgVhqO6oAR5f
Mi07RD27vwXSkkNkfpW5qIZYXmkqrnVc8fPwc0triOdr0QTnZb0QBjh7ocpQ
UmNe9vqp9TV12fNfcCsrEie7a1DGKi7DU0OyKylHE2jzbOWi1ODnboT5YvLI
mU+t135RtP9kcXeM6JfP/2UVxhWHKXhQX1pphFTNeSiLay3HK6aAsE2aj8fP
ebhDeb5HriQaxUPBA3BtqnuZCiOAK010IUvGBzrP/+cCDPji8oQFz6ze91n5
wZbig/bSGm6ZznQJwvK14jI9s7RWXWfGcsXcQ96TUhYr33I+/3qLWkbLNOZr
yn9klbYVWseL+9rWHHYWHWwrr2zeUn3uvpwnO5PKLg4JZSMKFBeEsh2Vz3WS
rEQyx2Kp5d2UGS7ytm3bBrqBHSwaqgjjWKYz5La01AVoezzoN9HUebMlwEmW
VpOzM2L2eF2cW3A4Oa/f4mRf3f5Kz9JDaVJqanN3qu4dNjz34Q1Vn5RWnS7Q
NC7TGF/UWMGgchVUGgsr2wqq2vI112DF1anZyqWH7PAS0gKtUT2+3JZp2p7X
GZ/TG1/Qtb2obc3XpAzeBy+s7LBlhfb8xkMNw2c+JUXR2frbO9KYO/0hdZ1l
9Qm59+wwOdLZFe6MxZUOoLEzn9xac3qN7uzqQ4aCqtZryn/UAVtrQ+DTGuEA
ch6t3FVjvaYvuZqVVDZsrPxoZO68iLpUZWr+cnSoemExZVRp7ANPrK/8Yk1V
W7mOKjvE5OvbimoN+drzBZrmgkprQQWZX0G/WOV4Xtf2gq552dXrhVoukKpF
o1aTa8p/qIylGssqnT1/byukRfsaV1c1v6w/N2rGMxHlWeiiSWHXtUcnpkg9
7urq6uyE+1Tev3//QDexg0VDGGEsaYl4Wb+9zU1Zi9dtuPN7P7o1K6u8oPCM
nWsWA1ajSXQQTq+fED27duxUF8q7Xg9OlyuRTO3a3JGQ22OpXZvvnbJwa+2J
ddVny2taSmuhAbSU1ljKatpWVRvAymsM5dVtX96Wv1637g3r0j2nS7Ut+fvr
y3StBQcaVmiar/jh0tq24kOmosNtKw4ZSg+1lNW2wDnAL8Kv51edL9I2lunq
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
AQEyW7M=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {48.413793103446764`, Automatic}, Interleaving -> 
          True]},
        SelectWithContents->True,
        Selectable->False]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Chart\>\"", ",", "\"\<Interpretation\>\""}], "}"}]}], 
    "]"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740079977903285*^9, 3.7400799819814296`*^9}, {
  3.7400800621065817`*^9, 3.740080135927894*^9}, {3.7400801707969465`*^9, 
  3.7400802141989737`*^9}, {3.7400802646536713`*^9, 3.740080265262828*^9}, {
  3.7400803377308025`*^9, 3.7400803426778717`*^9}, {3.740080376298521*^9, 
  3.7400803808318396`*^9}, {3.7400806233155413`*^9, 3.740080624018498*^9}, {
  3.740080669840968*^9, 3.7400806703667316`*^9}, {3.7400813945072603`*^9, 
  3.740081400674756*^9}, {3.7400816260196867`*^9, 3.7400817558185*^9}, {
  3.7400950996150436`*^9, 3.7400951916195173`*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"2d989d1c-5515-4e43-9579-7c7695300414"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Chart\"\>", "\<\"Interpretation\"\>"},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzt3UFom2Ucx/EXBellIExRkE3cFKxSHIJxNDC0zjp1m6Oz5FAGjVjdoEyp
G04dKIP16GBjm85DpLhL3HGnUhCKY4chtEJPKwzDPGyMdU5EPMVf84wwk3f/
vm5v8n+TfT88ljdp+yR58+37xrVv3qfe+2jogweiKPqkRx+Gip++OjFR/Gzn
w7owvPeTPR/uHXv/zb37xj4cm9j43oO68rdb/y0vVwEAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAwEouLl76eP9kWN534PDc/EK681+5em3r0JjG
8Mh46pMH0zOzml+P4vr1pVbMX38IWj8tugnYoqhvbe9mDS2kPnmlcrl/oFCt
hVQYnUh9fk2r+VVR+cxZjdTnr9Z+isND0PxaS624CdgOTR7VE62hhdQnV6Iq
vy+3XR/1XKc+vzae585fSH3a2+luD24rhuVVT+TZkLafKtJToB1ZKxIKk2uh
NFU+eep06vNrzvCTpXJacf+rtUS1csJNRNH6VtwEVqStXIt2YbWt6MPaUWor
2qLNnV7lLr9K6cm1aH4leushtOwmgHvH/h0AAAAAAHSfFv12G0jF4LbikWOl
0lS54fqLi5fuYixWfo8d+lSlcvlO4x4n75T5W71+Goa+0aWodF25eu2LL7/W
Qvgd3O1Onjqtbv/X+Hb33uPr1h/vfb5xrFv/w3dTy79J78nFjoTznxwYjJm8
9/kTG17UZ6OoL3by/oFC+czZJPOfyG2Mnz+30ZhfP+MJ5//u86/utH70qcLo
RPz6ifru4rnQmJ6Z9WgqfVrDYQ3c+1R///jD0pYNN4Y2NYyl156r/vVncc/B
tc+99eyLO5pHwvlv7t99Y0e+cf4d+T92vaXPrnry9eaZdYv1vwZcef7xXbHz
3xzbacwffsaT+Ofnn+64fn795Zvvf3z8mTeabyJavek+/92THn5ar0WV6I23
X7rx7isNw0j06Rfe0Ug4/61EG+Yf2pRyok3zG4kqqv+daPP62bKBRNuDRG0k
6o5EbSTqjkRtJOqORG0k6o5EbSTqjkRtJOqORG0k6o5EbSTqjkRtJOqORG0k
6o5EbSTqjkRtJOqORG0k6o5EbSTqjkRtJOqORG0k6o5EbSS6onCgVvgbey1f
uXotXJ/W2xKSqI1EVzQ9MxtFj5XPnFWTCmZ4ZFyPfevQ2KHJo6m8BTGJ2kg0
CW08lUppqqxKz52/UH+L1+YjQKvL7wG+Pno0n/wNwEnURqIrCm/o3Zfbrj73
HTisZsK5AFI8ApREDSSahLac4fHW3wpAF9N6c2AStZGoOxK1kag7ErWRqDsS
tZGoOxK1kag7ErWRqDsStZGoOxK1kag7ErWRqDsStZGoOxK1kag7ErWRqDsS
tZGoOxK1kag7ErWRqDsStZGoOxK1kag7ErWRqDsStZFoQuFgz/rxSufOX0i+
km2dnqjmWcqv0b39z8iv0a3caX4STZdWpjpZ9URecSpUVao+h0fGK5XL+w4c
bv56Xalvif1UrE5P1EaibTA3vzA9M6vk1GdYVquhQIUa+/VhJJyfRG0kmkTY
kFZrZ6cNx84r0f6BQiqnASVRG4m6I1EbibojURuJuiNRG4m6I1EbibojURuJ
uiNRG4m6I1EbibojURuJulOiy7/j3rKhcbz8CIlWQ6Kx6ye/hkSzgERtJ0+d
JlFfJGojUXckaiNRdyRqI1F3JGojUXckaiNRdyRqI1F3nZ5o9FC/EmoY0aP5
5AfO2EjUXacneuRYKXZMz8ymMj+JBvVT097+qOtXtlSnJ9pqJFqtHZ58aPLo
4LbixcVLwyPjW4fG9Ni1oF1VWpsCA4naSLRai6Q0VVaT2j0lOk1tT25t72a9
3Err1knUQKLV2kpQnCpzbn5BZWrjqVAVp7auur7Vt06iNhINtEMPJ6UNoVZr
L0TbsJevkuhKSNQdidpI1B2J2kjUHYnaSNQdidpI1B2J2kjUHYnaSNQdidpI
1B2J2kjUHYnaSNQdidpI1B2J2kjUHYnaSNQdidpI1F1hdEIVNR/+oysTztD1
iarGmMOjenIk2h7hTE+xI+EM3Z1o+Avz5nHkWIlEO0V3J4ouQKLIOBJFxpFo
19Or7tJU+eLipeptBzHpYjilcjN9TRjtvJOG5UTffklN/mfsyJNo1yjuOTg3
v7C2d7M+6v8Tv/jy63AEqCIMhyo3qL/hRtvvabw/D39+c2znzfFdzaNKol1B
KSpI1Ri2pbpoH0ffWUi0C6hGjf6Bgvb4ajJkWRid0NY1O3vzu0ai3SH2H4G7
41+GSRQZR6LIOBJFxpEoMo5EkXEkiowjUWQciSLjSBQZR6LIOBJFxpEoMo5E
kXEkiowjUWQciSLjotWbFGTDULckiowo7jkYO5K/2wkcXb++VD5zVgv1M9Ie
mjwanjtd1JXd8Yf36FwqMBy4dOXqtcLoRGmqrDLDR13Ulaq0+bv6ctsHtxX7
Bwrtv8O434QjPcOrMtWo5bn5hVBpiHN4ZLz5u5Su2m7P2epxnwtnoq9ULmur
WD8qWdvPam2PH85Q73wXAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABw9S+X8QMx
       "], {{0, 0}, {225, 225}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 225}, {0, 225}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                33060.553125}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{37.461672904455895`, 
               62.91905463540865}, {-29.318094822779145`, 38.74689437998485}}],
             StatusArea[#, 33060.553125]& ,
             TagBoxNote->"33060.553125"],
            StyleBox["33060.553125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[33060.553125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                41325.69140625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.11823877741645, 
               90.57562050836921}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 41325.69140625]& ,
             TagBoxNote->"41325.69140625"],
            StyleBox["41325.69140625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[41325.69140625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                22729.1302734375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.774804650377, 
               118.23218638132977`}, {-8.204035696915398, 38.74689437998485}}],
             StatusArea[#, 22729.1302734375]& ,
             TagBoxNote->"22729.1302734375"],
            StyleBox["22729.1302734375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22729.1302734375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                18596.561132812498`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.43137052333756`, 145.88875225429032`}, {
               0.24158795343010553`, 38.74689437998485}}],
             StatusArea[#, 18596.561132812498`]& ,
             TagBoxNote->"18596.561132812498"],
            StyleBox["18596.561132812498`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18596.561132812498`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                30994.2685546875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.08793639629812`, 
               173.54531812725088`}, {-25.095282997606397`, 
               38.74689437998485}}],
             StatusArea[#, 30994.2685546875]& ,
             TagBoxNote->"30994.2685546875"],
            StyleBox["30994.2685546875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[30994.2685546875, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{5.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJztnd9PG0mCx3N3L/dwD/cH3Mu95OleTxppb+ducrqTstod3WWVaFYoGgYY
8G6SGQfIJJDNkYz5EcXiRyZhjRIPDIQkEFlk5jAhA6sEMs7MmhyxN8nAxqvA
BiuRl8wh45vAyivU9+0uaIxtbONuaLf9/ajTKZfb7XLTn6rq6uqqvy/5cF/5
X+7atavqr7Ha997xtyor36v56d/ixf4Pqn5e8cH7ZXs/qH6/4v3KN0r+CpG/
wr//+Itdu+RwMBh88uRJgBCS73i9Xvi+uLgoEULyHZTs9F0jf9p+9PoiYw8U
MRz6rp1IJLK4zYgv0ms/pGCh79qJ8z32ZUQhNqySuaTYWHxRYjx9J1uCvmsn
TvBQKBQbFocXBBXEu1hvZmtibpDUd7HzFMonzVWMPVDEcOi7dmK1klbCjsrK
wdk/InI+OFJRYnXYaq2tfS8m3Var1dHSuG9vTVe/7fi1aVxNJ0qKSNGCGpeH
iC+KjcGWRUVFWCdVHpGiPTbuW4w9UMRw6Lt24nzvqzkC3yHa+MC5ug43Di8U
ln1XrC8ra/Dcbk3qO2Lw54DFdrs9tuyO8111GVtiHZc5iA0QaVGIe9fYA0UM
h75rJ1bM8Ku57gsW+w1/WJLge3nV2f6LtW/8yzH/zISj6QLCB991wPfStnFJ
iiZKCoX3KED5zXxHtuBUwGZYu1yu2KxD1PNRlxD7QSA26zD2QBHDoe/aUW16
vbTg6bT1P3qJ9ad3AlIkCMFRpe/0PJFCPlTsj1aUICtAKX+mqhhFf2I9PBRD
rMLii2JrAniJzEFSbtJluB/+lQl9147wHevH7o76T75EyQ67T5fb5tfumIum
M/UmuBpO9DRpA/5m7XWjo6OpG/0Sm+wMPU7EeOi7dlSn4lrmk5qYBbwfR/SC
vmtnsxby7OxOuivxRdp3ZeyBIoZD37XD/nXELNB37Wjv1p5hv3e99kMKFvpO
SOFA3wkpHOg7IYUDfSekcKDvhBQO9J2QwoG+E1I40HfwbOzSm3vfsVgsdR3u
10sLQw3lRYeODAeWxZsX6wfm1zZEOGxcOuO41XQA6USy5WdzQr4zVcXlVWf9
zxfk96L+c+2D+C1tpT/ENhUl1ocLRid3lWhskl5Muo9WlBw8eV28h5f9j14i
4Om04Xep8UQv6LvMcsDRdEFIDfftN/yI+ch2VVH7WaPFsep71I9w7vguzd2v
b+sV6YEgyKCQ+BNd38ivo/76T76UFIN6XB4jE5nAepJWwuKwT3RVdzz4XlIO
vniucGjsAV76uj8U8UQv6Psqa8rj3Lvi+zNORbvdvrC0ssF3JZxDvkuy8ijH
kbz+i7VyCR7yIZuS49d8lxS/UG8xMpEJrCYpElzNr2YHlAEB1nwXRIIOW+1a
LYvoA31fZzkAR8YHzqm+48j4/jAkfA+/mhPh3PJdcQeOqL6LEXWQVNV3MHLZ
njP1+VWQpOGnz+G7/OJR1/Fr03P3J+48uKb6DveLq9vnU+2DbBn6LimnFuwQ
w87MB0dwEt7zfKHUOaPQ/+C7Svm+Ekad+W1rb+74jvQgkT0XqnAB8tjd4egb
vjfYKfuyEnY3HFUq9lEUkV6vt650f84UlHKSRkdHz1QVw3ekE2tXa4uSHT07
/uZPzv9Grs87jp2anpvCOteyKbND3xXg9XWchEoFXpqevIvrRxEGgUBAdRxh
g1KYjJUwkr2W1OjGZEfxZ5WUaonL5RKXwznChiRFgjjsavJeLy2EQiE5FPJh
m9W2R6IfeeC7eBzV6FRsGZzYZnxgLbdyvIwxabJ1h74bBX3fSUyabN2h70ZB
33cSkyZbd+i7UdD3ncSkydYdE/ku5mYSUy0E09HpefLpnYD2xf98oWfipvbF
PzORNs1AlzQPjT3QJc1YHgam0qYZfw5dko1lem5qx5K92jBYYJjIdwHKxEz+
Uu+5w7suf/d3n/2vlgV7+GpGeut+5T+MV7zx1ZGsl91jZb/6vSuTX4dv/JtP
NSUbe7ji+/N/fXtRY5pFssdCk2nTvLC0ov1Qi5T//v+e4Uu1J/vl0qtMjnYB
kq++H769iFNod4+mBerB9/0TNVBey4KTMEPftacZexC+40s1Jhs5Rua+a0w2
FuE7vlR7sun7ZuSy70MN5RaLRe7tFgN9p+/0PWty1/dHXXKf6pVw8+E6teuL
RN/pO33XQM76/t3tMyfvyPMsjFy2x/azou/0nb5nTe773n+xlr7Td/quCznr
uxT1l5U1+Gcmuttvxj6iQt/pO33Pmtz1XXnS0+VyxT0hRd/pO33PmkTfM5kN
zcAE03f6Tt+zhr7Td/peOKT2XQ3HZQIGJpi+03f6njUpfBcBrF8vLQQCgVjl
DUwwfafv9D1rNvMd62djl4qKit76WW3o9fcTXdWlbeNwjb7T9zjou4nYzHeU
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
       "], {{0, 0}, {336, 150}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 336}, {0, 150}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                35980.26953125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{90.83685801696474, 
               119.10262931249184`}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 35980.26953125]& ,
             TagBoxNote->"35980.26953125"],
            StyleBox["35980.26953125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[35980.26953125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{1.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
                0.}]}], {{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
0U4uOavX2V2O+JfW6L+oC/9bUrVG//cO/79rjfrrSwH/0hj7V6Wn/vwXuzb9
3YlD/+C6h1T/5czufzmx559P7vqLMzv++zGnX5za4u3t+/nHn123YUxhw6qt
Zx0PJdsdotidSNvumrr1SOKWA0mOxyikWncq02Xr/7oU+nft4X9WF/2PTZF/
3xb+F41Rf1Mf9n8iqUP/ClQX8pdIN6P/0tvxn37h4vT/njj8125O//Xs/n9w
OfjfXHb93amdpPpb172/cFhFL6+8ffeDW7du3Gxpb7h2uaP5UlfntctXLl27
0X7n3t3AsMytzoE7TlDsj6c5HEkk1+HIzaeTnU7E7TqVt2Z9XP7ZP7vh/Vfq
qH9sCf0rUnVH/teusD9XBf91W+hftwf8l93O//qPbmf/h/vB/8tlD6n+3m3f
37vs/ofTO//2pNPfHN72T86bGq52f3LrQyJjr83ZVYs5HYtxPp5kfzjR7nDq
jpM59scpWw4n2Z9MJTLW4Wg6kv2RNNDqdbtbfP6iOfLPakP+riv0b1Rhf9kd
/Z9bwv+HdSZb57Pa/z/9YsuaPz9z9J9cHP7p9K5/OrHrL8+e+m+uDv9wejep
/uqI3TvH9n1478GD65Dmm63Xui9d7r7adunGjRtXrlyBEg7lHEo7UDDvlqX/
uKGeARRsZGRkwC/Cb2EWv1NVVUWj0QA3zOLxiSAQ4lKz5fYu49zsCBxeMzQu
Z8wm2AntTOzkhbhIijIgsc4zTkwqr2ihR6zkbFJDcDTbP0V1ytXjeeXW75jv
PmWsJdVznl0ffcMz7qpeuuN3vJXdae+/HXZxU0rMhtQQUq3PDHdKiXBMCV2Z
GWyfGPhvqZ7FxaXmKZu10NW7X7l4pgfESHzjanyT5IHpMp94oWe02C9BQaqL
6TWZ3rv6Get6me98w9n8hLPhGev97zirepjrCD2HZDPWPqtaAxpkvlvgs+X/
T/bdFR+1It13bVrY+uSITcmBttK/MTPqt0Hnbtz8wIRXoyZsbBIqXPMUNjON
zRgnpo3DkOMMToNPaEVgksIrXuITKySVRzj7bJzAK4btH1/jcpbTlPPeWOWm
Z/JdfQI7Umn4jlrBxsf4q0M/Y0tIoNOqhPiVCT4bU0LIlRmxKT1sS3rohtSg
9Qm+jmFej/Qa88gfAi0UvxEBpF8cOzABT5h3tCQgqdYnUeERK/JJlPglyHzj
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
zyHVUVqWV0nuIUbWKVrmKVrGoqM3brKF3s5+yS6EnlbiDOj187b1cjYNVa8s
9t22IiME0HMuidtdkALoHc5L3JefRKqXRC+7pLZadpspu86S3SYVg/8xR3GF
pbhaxrxjQe8zHD3b86Fm0TPhke3kHHpnKnNPl9vU2fK809SMUxXZBwoSFh29
Ky01CL2e2r0axS4cvZpDBukhaJIMyA8Dev3KY9AY6Rc6D3C3DbA2fEtd+a9+
5/eXFHsWJ++kpx6mU44UFZ8oiz9WlkmqnwF63z8Gj5snp0bHxoctp0Si6ZFB
KABDRnwMaAabvNLUNsReN8C3s8YN3caiV58FAYmDsmMT0j1PRYdHBZs7clY4
RPqcrihwoeeS6kRFrm9ZwRFWjkt59ml65vb0sDeBnpa/YlDkhCepxhHQ65fv
QejhY5Gy3Th6wu0W9PBZ1iV+diszQ12zM3aWxu8pTN2bm3YkP2l/QTKpfhC9
CZMJ0MulqnnKe5yaD7g1H5KKLX7AV13nqG7Q2Xf9gmkffvI5vmSkbfSmLPer
EeiFF+e55qYAemcq8slVVXC+qtCVlnW6MudgYeKuKP/FR4++Qs/c0lO7T6vc
PSr36FcdNkiP4B0CiiPQDAENyg8PiHYCeoPsjY/LVv0v/wsHSku8S1OhpX+U
nnGsuOQkLcFWdPQzQG9sbGJ0FK1CaSJ6J0zmcWzGSC7A0wghzQTyfB2K5n7q
uiHhQW2dG0inPoekrz+PpK09q5GfnJTtfSY+NibY1pG9yjHKz6Wy2K0in1Sn
GQX+9KJj1XlQbFzKsxYdvQkzVpd+0Ro9Pe8QoNcv2TMg3Qvo6WR7ddLd8OkA
H2JOOwN3dam/PaB3JidzFzUB0NuXl37UBncviR5L0JRXVi9Q3efX3RWo75OK
K/tMVH+DV3ejgnvXP5T24aefWpbwsXles+hZIhYCvbNVeecqC8jFKr7IhKuQ
68rIO1SU9AbQU31bvhrQ663br1XsHZV59auOjsiOaxRHNMrj0AwBwfageA/e
n1y9+Qlt9b8Fuh8po/qWpu2toByvyDpZQnWhJ9qKjn4G6GF4zInHKgaDARp9
09OTsw7OcsvLi5rST5im8FATLhMc1FHT/rhg1QBnvzVuQw0XCOkAScWpKfmB
5+KT40KHSzmrt0f7u1aVQpVLqjPs4qDK0hPcAig2rhXZTpTwN4GeTrBSI97x
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
Wovne2iS1yDAyspKl6InB/6FD1Q/gfk8J+PdcZHx+RlxC9LjA6mxuenxBdkT
AumNfkamzen4cb/0ZYXBB3MEP78eNOmdYPjf6SwQlN6vJ00RdroX7ZHi93r/
2EfgNhV+x8Ts9LdjIuML5sfnZcZkpUTzWZTh3gUQ8hmVPhfppS0t+B/p2bNZ
TiCQWNeuXT/66CMcX1RUVKdOnRjN6Ym4kZGRw4cP979YljwM9yoqKvRmZ88C
zqOGPmpWIK1H7LAJSwMT8gOf5mbg9cYuyvi9z4jUpE7/6p+5fNl/pWcB5wkH
g7uUlJTy8vIhQ4YQTBYUFOzevbuqqiozM5PtjRs3VldXl5SUsIG/I/P69ev9
zwYMd/OPDw7u258USO8dMzwhLwPdTV4wf+LCLMZ68YuzGv1EzJ3RZfCA3JXF
/MqH9h20yywnHnridN++fWtra0eMGFFcXIziSCkrK0N3hYWFa9ascZl1tdPv
9Wxy4Wg56KUvyO4dPXR0yqyRs6fHfpkUl5o8KmX2mC+TGv0MmDX5zaGDlpSt
5ffdV7/Xc4/0NE4UiCH79+/frVs3tqOjoyMiItCU3lRIINqrVy9l05iOdESn
eT29jlYp5vv+P796ufl5vUdHDJwyvm/MJ5ETEyKn/Lv/hLiPosc0+un32YSu
wyOWrS9Hej/v2mPSM2xK3TDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJ
zzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJ
zzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8w/iqQ
T1FR0YEDB2pqanJyckgpKSlBWWvXrl23bl3I421//vnnqqoqbevFQ+S0l54Y
RlMpLS0dP35827Ztq6uru3fvPmnSpIKCgq1bt+7YsWPq1KnTpk3btm0b6quv
r9+zZw+6++WXX8ipsnpItUnPMI6NuLi4hIQEdBQVFbVhw4YVK1YgJfQVCAQK
Cwu3b9++JUhdXR1/9+7dW1tbq4J6CRHSs7DTMJoKKiO8fPLJJ9nu169fbm5u
Xl6e3FxMTEx8fDzuz/O9vBKF7tq1S9tSnL1zwTCOmcTExN27d5eXly9evNjp
aEkQ6Wt/EAJOpOre+Cw9mvQM4xhwL27+7rvvpKA9QXB2bgS3c+dO5/VQot4x
5Go4HOTvbbVhHPdIRy6G1Ov2BG7O7+BceOn55Ga6M4xjxunrxx9/9BpUhjd0
4uLrgQMH/NJzji/EAxqGYTQVBdjqiFxX41APo6hAkTkjX69hhkXbuuTrCiqW
IFx3RVwMr7eCuspDhs+qxyUqRWNqSu3bt0/1hBxOKex1naHeu+0yMI5QM8hD
PRpr8NffNnbpuCrlyrrBiL+ndXsppQz8pR4b+xtHDxaFyTl7k/lhRW7boTz+
xPr6en8lXtAUZcmMoLVLMtEiBAdmTza/Br3GlgnJnj3fu31VjyxcKlbE4q/Z
tVCHRjX6+v3337ts9CQhDfa3wX92IbENibSQRPocC3uMP4+ThryY3JYsHCv9
6aefvAbR+aURIhZlmDZtWuvWrWtraynuRO01+E3lcZ7C5fGPtXVFS57OHdTZ
uRsROOF7QZX5PQ4Ztm7d6r6yS2fEiTjv5jVcvvZ8GmcX2/oRdBSXWYmuhV5D
B+LOPaR7MYw/RmGh57vQ5Ia6jcZ1GJuM0IVwuBUZsHIOHDiwRYsWfi04/6I8
chx1dXX+ZujoqoecUp//6BwFU9dXhZcu3e+I/Ze/OLUQx+3HLQuU32zUxeso
zjv73Zx+HC/YAzgB2hILo0lIfXgEQrKNGzcuXry4srLSC4pL0RqJciI1NTXb
tm2TgSHA9evXOwls375dQebIkSNPOukkzJWcy5cvJ12ZEc4333zjDzLXrl27
YsWK8vJyL2i0freivdXV1Vu2bNm8ebMqUT2yc0qVlJRIsJs2baoPsmHDBs5F
nYOrzXneHTt20P6VK1cWFRVRp/b+8MMPXjAWpSqK6HQ4LxqvX6C4uLigoMAL
CpCfSNVyIuxCfe4onMjSpUv/QOmGcSSy5z59+px77rknNfDCCy9IkklJSWec
cYbMr1u3bu3atfOC/X/Pnj3PPPNMGf+cOXMogmbZHjVq1Omnnz5s2DDVc9ZZ
Z61evdoLepnmzZsPHjyYbQy7TZs27CLl5JNPHjRokJqBeSMT/mLbNIYMLVu2
PO2001TV+++/rysk8fHxONZTTz21VatW7733HrtKS0txXqR07NjRaxgbujBS
oSn9AHXSNvKTs1+/fuorOE1S3nrrLS8YQ0ZGRl5wwQUSOz/C2WefffPNN99z
zz1du3Y95ZRTcNacJonJycn69eidqIoaKFVWVvb3/uuM4xh11J9++inG8+qr
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
YRiGYRiGYfxJ/gNcdul7
       "], {{0, 0}, {297, 170}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 297}, {0, 170}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                38003.70703125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{90.83685801696475, 
               119.10262931249187`}, {-43.31360670393819, 41.64262979951681}}],
             StatusArea[#, 38003.70703125]& ,
             TagBoxNote->"38003.70703125"],
            StyleBox["38003.70703125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[38003.70703125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{1.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
                0.}]}], {{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJztnTFoK1GX3ydJE1CTQp2ruHXnKqAqoGZBlcJCQNUu/rIEwbfwzcISlE6t
i4DYyp1rV25dunOrUqVKleqHnOiim/tmRqOxNPfqHM3vx+Mxupaufjo6M3/P
SPe9//yP/zz9H/8+y7L8P8pf03/41//6t7/9w//6b/9Jbvz9X/P/+U9//cvL
3/31X/7yT3/523/5x/8gg//n32XZf5f7/79tAACAnlMAAAD0EnIQAAD6DDkI
AAB9hhwEAIA+Qw4CAECfIQcBAKDPkIMAANBnyEEAUMVgMBiNRvv9/tYirbBl
C7WQgwCgCsmUxYFbi7TCli3UQg4CgDa22+3T09OtLdpiyxaq9DkHpXWrVzNk
xLW0L4vf2O120+l0MBg8Pz///Pz4wclk4gbX63U82+/v79FoJE/0+Pj49vbm
xz8+PmTk4eHh9fW16hwajsdj2a7e4UrkVctrdxXYbDYtrWq3a4spL1zeEdeo
Mq0S7VpV1x5dGbYRPvvmni1+MlWprTzvcDhcrVZeQHY38ZeCu5/6GWT/kpuS
L1E9i6AU8lyy7W39+NmWiGdbehZx84esU+/75+en2Eof+iNbbaOGM1/ZtCXJ
5p3lbJcW5yof6WjQ5xxcLBZS4dLgcrl0lziqPT+fz6XNpMGk/v7Xv5eXF9dd
kk2SU5FUZReQA8j7+7s8u3SC9IaYuB9Jd8luKN0lJrX7qYzLkUceKIaz2ax6
hyuRVy1Fk/mlmNLnLa1qt2uLKaV2DV86VN5Wu1Y16qG7Vvjsm3uTHKxVdQcu
GczzPNyn3O4mG6GVPFxuykuL6lkEpXAHW3ne0vjZlohnW3oWqaQ/8p9636WM
MigHBymyv2dto4bPck3TtsnB9l1anKt8pKNBn3NQ3n0JlHBE3ikZcV1R7Xn5
UfX8sTRDJKSr/R5aHHrAt7RsyE+l86Xba/dTMXS/g4m8hGn1DlcSzu9/sTxr
VbvdUEy3E3VY7Su1a02i7kq1wmff3JvkYK1qeHYQltHtbu50zM/g3gg5iYjq
GVrJ6ZKcGfnfb/342ZaIZxs+i+SI6Pmbp953V0wZlDMpf8/mma9shjY52L5L
i3OVd3R+NOhzDgrSutmf+Gau9nxtoUoPj+Qpu2d40VXaQM4N3bY0mESk7CPS
+e0TJ5JqeKy7zKpaTJlK9gi56X4/VKJdq5psVzrr1nIwARdYufSU98IfM2Pr
bTYb94zyt7s02r4l4tn6Z3EXoPwVxaJFMcNfP5obNUEO/qohmysf6WjQ8xyU
XzbCi5my7a83Vt+v5vNBeYP872CdI296my9mh85+rxEr/8uYt42dg2etSttu
o7aY4/FYfjn5+vqK99X0X2k3qKbPwVNvblW4djClau2xzp8PSvqEh313NdW9
7wn05Hj78vJSHK7guQsv7Vsinm2YX3IEmM1mfhc49b67EA8HTzVqV81QzcHq
zG26tNnHD0Y6GvQ8B4tDn7jmkb/DE+3q/iv7iL807a+fzOdzf/ndX5PvnIYP
st0Fc3ehILzmsFqtXGuJob84L9ulF9WVnltC5ac9ZeU+v5AfPT8/u4+Qwuv8
tcXMjp+8uM/NO9T2tNc+qxpDr7pCLdSofXOrwrWDFzz1b2nOQZc7Mn/4GZB7
UcXhYmC8fSo08d98k79LX5NruX/FsA0rJkenxWLhP1w79b67rJRf5v1gwz7l
/DvPwdqdpblLa48GDZUvuj4akIPSXa49Sp/BVfdf/31ReYP8Kbm8TW4w/I5W
58g77r/JVkJM3PdIJcT9xVJxfn19le4qgi9ryd+Rzgj8Eio/7Skr19KC7Kry
S538NAu+91VbTLdrCFL27+/vDrU9bbTdxZkG1dKlpw6prlALe7L2zRV5KXIo
XPsqLnjq39Kcg+Isv+GLv7iFpw/+V9PY6xHcOVT4LO4ziLMt4feveLalXgo/
XDv1vrscD7+WWbtPef/rm7aag9XeO2XbfDSorXykowE56L4tE35DxqGqLPKL
U5jR0gBuH7yYzl+dW0Klqmjt6Uo73ssvrVBrfqJuNa5cHNde5ibNkx2+Ixp+
1VO2w9/obkg1B5sXOFzm3Pn54DWz3QrlOfjbJX7ha6ldOFO7XklGXl5eSl/3
OluWLEB+pZHTyfAU5uwytOpKn4ZHubCWNJQ7yHO5X5zO1O6cee2LPbvaqPbl
FMclVPF6KcZyv+rdrtSTeWoX99UWs33TFpUValfmYPuliNWnLn65kPaaHMwq
nPKsXZzoN2oXnbl5ssNHb+GZhYxf8xtdwwOb96PaDWlsdxol9XdfGrnsqU/d
x30s27wmsfrYhv3OzVa7JrQBF/HhJS/3IUvtiUnDxmXLlgv1OfjbJX7ha6ld
OFO7XkkiyQVT+CynDvjVOxSHFvLXV4t2y9CqK32aH+U61l0lcN+YOlW0szTk
YJvVRtXB4riEKl4vxVjuV73blXryHpUW9zUUs33TFpUValfmYPuliNWnLn65
kPbKHKze7dRitOriRL9Ru+jMCcuPZKPUEu/v7xdfb+k2B0NcGl721KfuI+++
/0c52q/yk/2u+iuKz8FTa0IbcEfgsMfcOxWOtKnYZcuWC/U5+NslfuFrqV1d
cmq90gWUHi7F98/YZhladaXP2Uc1LKi5xjwcab/aqDRJ7AVfMZb7xdZrLmb7
pi26Lm/7pYi1T51sIW1tkzcvRgsXJ5YeXlp0Fqklus1Bd5QIjy0d6rVck1h9
bPN+d8ExVmJLktf/SibITXELu65NxS5btlyoz8HiiiV+1d9Vqne4Rqy6l4U7
Y/vVc/5AdPZRtXe43rz4s4AtixYOplzwFT71lcv9Yus1F7N900Ytb3Pdap+6
toAxKnzqiVrKh31SXXQWqSUapmqWPNsY3epdsCax5X53gba7qhD+fiUzu3OE
8Ls9ZzcuW7ZcWMjBXy3xy4J1KLULZ2rXK11G+HB5CvnlqvbrBLVuWd1Kn7OP
OvXs15iXRtqvNsqSLKGqpfnwWGubZplnmye9oGmjltdr1C7yqn3qZAtpa9/o
s+thqxWuXXQWqSXCbJVfHuRMJzyS1+5HDRvuKNHt+aCn5ZrEliv7wrb/1TFW
3he3eFPyyx3bv7+/3YmqX6pW+0S1SVcrdnahov4cLH6zxC/7c11PdeFM7Xql
y8gq+C/3nl1zlNWt9Dn7qNo7dGLuS3FqtVHterQES6hO+buNK5f7xdZrXmPY
vmmjlje0rS7yqn3qZAtpa/fQs+thT1W4+HPRWaSWCE3cJ7Bn13U2bLijhEzi
kqJbvZZrEqvOp/Y7t/HbY6z7uLk4vBHueeXtcJ9aynj1k8qGjcuWLRdGcrB5
iV94JM+CdT21C2dq1ytdRvhwdz7uv9Jzds1RVrfS5+yjau9wpXlp5NRqo+rS
syzJEqpm/2uW+yXQa1hj+KumjVpeb1u7yKv2qZMtpK3dQ8+uh60eHmsXnUVq
iZJz6dyqdl1nw4Z0svunDGovCnWid3ZNYnVvOrXf+Xl+dYz1Fz+lx9xvKfK3
//pE9ZS/YeOyZcuFkRw8u8TvspfQYQ4WLVb3dPjUV9KQgyZQbtusd2XTdo4S
jVo0u52i4bDQsjGics1R61czNwyGSHKFX4aRBHQLyvyI/LS0Xj7GHmQiB4tz
S/yyi/4vqm7PB+Vctf3v6uTgNSi3PXu4c716WdN2juZianY7RejsLtD572Rq
y0HRO7sm8bKZmwdDFotFaUmOHEX9Vdmi7rOAPudg8xI/d93jt2/o9TnocRcT
Tv3TZ50/9ZWQg1Fp1vO9elnTdo7mYnZ7xSYNpcPCbDb77fdMompXj1pd/Y+Z
l+WgpF542Kwe5/3F0jbXRS/GSg4CAADEgBwEAIA+Qw4CAECfIQcBAKDPkIMA
ANBnbp6D2+3WLbp0X16KvcYZAAAg5OY5uFwu8zzf7XaSgKvVKvznYgAAAGJz
8xwcjUbh/wRa/b/hAAAA4nHzHBwOh+G10NJ/7wIAABCJMGtSh19A6dlrZcJB
2f7f//Zz8Z9T818zZ6RpUUUVVVTtquqsQClN/AY5aKi1UEUVVW1zokoOXkl4
XTT8T0BCyEFUUUUVVVuqOiugMwdHo5H73zCLwz+p6v7za092JBzRVtiUrYUq
qqhqmxNVcvBKlsul+8+ChTzPF4tF9T7kIKqoooqqLVWdFdCZgxJ/7j9BLv0f
JSHkIKqoooqqLVWdFdCZg20gB1FFFVVUbanqrIDFHMyOhCPaCpuytVBFFVVt
c6JKDiaAHEQVVVRRtaWqswLk4B20FqqooqptTlTJwQSQg6iiiiqqtlR1VsBi
DmZHwhFthU3ZWqiiiqq2OVElBxNADqKKKqqo2lLVWQFy8A5aC1VUUdU2J6rk
YALIQVRRRRVVW6o6K2AxB7Mj4Yi2wqZsLVRRRVXbnKiSgwkgB1FFFVVUbanq
rAA5eAethSqqqGqbE1VyMAHkIKqoooqqLVWdFbCYg9mRcERbYVO2Fqqooqpt
TlTJwQSQg6iiiiqqtlR1VoAcvIPWQhVVVLXNiSo5mAByEFVUUUXVlqrOCljM
wexIOKKtsClbC1VUUdU2J6rkYALIQVRRRRVVW6o6K0AO3kFroYoqqtrmRJUc
TAA5iCqqqKJqS1VnBcjBO2gtVFFFVducqJKDUcmOhCPaCpuytVBFFVVtc6JK
DiaAHEQVVVRRtaWqswLk4B20FqqooqptTlTJwQSQg6iiiiqqtlR1VsBiDmZH
whFthU3ZWqiiiqq2OVElBxNADqKKKqqo2lLVWQFy8A5aC1VUUdU2J6rkYALI
QVRRRRVVW6o6K6AnB8Nn3G634/F4cGAymez3+9I9S4YKC5uytVBFFVVtc6JK
Dl5A+IzL5TLP891uJwm4Wq3kZvP9FRY2ZWuhiiqq2uZElRy8gPAZR6PRZrNx
25KGcrP5/goLm7K1UEUVVW1zokoOXkD4jMPhMLwWKjeb76+wsClbC1VUUdU2
J6rk4AXUmtT+yBMOaitsytZCFVVUtc2JKjl4AS1z8NT9tRU2ZWuhiiqq2uZE
lRz8FV9fX8WfuRZeF5UNrouiiiqqqN6Bqs4KaMjB5+fn9XodPuNoNJIRt73Z
bMbjcfVR5CCqqKKKqi1VnRXQkINyxjeZTMJnXC6X8/l8fyDP88ViEd4/OxKO
aCtsytZCFVVUtc2JKjn4WyTvHh4ewpuSjG4d/Ww22+121YeQg6iiiiqqtlR1
VkBJDl4AOYgqqqiiaktVZwXIwTtoLVRRRVXbnKiSg1HJjoQj2gqbsrVQRRVV
bXOiSg4mgBxEFVVUUbWlqrMC5OAdtBaqqKKqbU5UycEEkIOooooqqrZUdVbA
Yg5mR8IRbYVN2VqoooqqtjlRJQcTQA6iiiqqqNpS1VkBcvAOWgtVVFHVNieq
5GACyEFUUUUVVVuqOitgMQezI+GItsKmbC1UUUVV25yokoMJIAdRRRVVVG2p
6qwAOXgHrYUqqqhqmxNVcjAB5CCqqKKKqi1VnRWwmIPZkXBEW2FTthaqqKKq
bU5UycEEkIOooooqqrZUdVaAHLyD1kIVVVS1zYkqOZgAchBVVFFF1ZaqzgpY
zMHsSDiirbApWwtVVFHVNieq5GACyEFUUUUVVVuqOitADt5Ba6GKKqra5kSV
HEwAOYgqqqiiaktVZwUs5mB2JBzRVtiUrYUqqqhqmxNVcjAB5CCqqKKKqi1V
nRUgB++gtVBFFVVtc6JKDiaAHEQVVVRRtaWqswIWczA7Eo5oK2zK1kIVVVS1
zYkqOZgAchBVVFFF1ZaqzgqQg3fQWqiiiqq2OVElBxNADqKKKqqo2lLVWQGL
OZgdCUe0FTZla6GKKqra5kSVHGzPw8ND9icyuN1ux+Px4MBkMtnv97UvPNzW
VtiUrYUqqqhqmxNVcrA9X19fz8/PEnzh4HK5zPN8t9tJAq5WK7lZfSA5iCqq
qKJqS1VnBW6eg8Jms5nNZuv12o+MRiMZdNuShnKz+ihyEFVUUUXVlqrOCmjI
Qcd0OvVnhcPhMLwWKjf9dhYQDmorbMrWQhVVVLXNiSo5eAFy3jeZTEomtTer
gwoLm7K1UEUVVW1zokoOXsbb29tisSjIQVRRRRXVe1TVWQFVOSinhI+Pj8Wf
10VlI7wu6iEHUUUVVVRtqeqsgKoc9JE3Go3812Y2m814PA7vlh0JR7QVNmVr
oYoqqtrmRJUcbM/T09P7+7skoJwMzufz2WxWHNZNyPb+QJ7n7mJp9YWH29oK
m7K1UEUVVW1zokoOtkfO+9ySeTkTlBCUNCwOJ4aTycSto/eD1RcebmsrbMrW
QhVVVLXNiSo5mAByEFVUUUXVlqrOCljMwexIOKKtsClbC1VUUdU2J6rkYALI
QVRRRRVVW6o6K0AO3kFroYoqqtrmRJUcTAA5iCqqqKJqS1VnBcjBO2gtVFFF
VducqJKDUcmOhCPaCpuytVBFFVVtc6JKDiaAHEQVVVRRtaWqswLk4B20Fqqo
oqptTlTJwQSQg6iiiiqqtlR1VsBiDmZHwhFthU3ZWqiiiqq2OVElBxNADqKK
Kqqo2lLVWQFy8A5aC1VUUdU2J6rkYALIQVRRRRVVW6o6K2AxB7Mj4Yi2wqZs
LVRRRVXbnKiSgwkgB1FFFVVUbanqrAA5eAethSqqqGqbE1VyMAHkIKqoooqq
LVWdFbCYg9mRcERbYVO2FqqooqptTlTJwQSQg6iiiiqqtlR1VoAcvIPWQhVV
VLXNiSo5mAByEFVUUUXVlqrOCljMwexIOKKtsClbC1VUUdU2J6rkYALIQVRR
RRVVW6o6K0AO3kFroYoqqtrmRJUcTAA5iCqqqKJqS1VnBSzmYHYkHNFW2JSt
hSqqqGqbE1VyMAHkIKqoooqqLVWdFSAH76C1UEUVVW1zokoOJoAcRBVVVFG1
paqzAjfPwc1mM5lMBoPBw8PDYrFwg9vtdjweDw7IT/f7fekllwwVFjZla6GK
Kqra5kSVHGzP09PTx8eHbEjYSQ4ul0vZlr/zPN/tdjK4Wq3cYAlyEFVUUUXV
lqrOCtw8B0Mk+OSsUDZGo5GcJ/pBuVm9MzmIKqqoompLVWcFtOWge97hcBhe
C5Wb1TuTg6iiiiqqtlR1VkBVDs7n86enp+LPjCsqkecJB7UVNmVroYoqqtrm
RJUc/C3uqzLC9/d30ZiDtYMKC5uytVBFFVVtc6JKDl7Abrd7fX2dTqfFn9dF
ZYProqiiiiqqd6CqswJ6crA4RJ6cEhaH78ms12s3uNlsxuNx9c7kIKqoooqq
LVWdFbh5DkrkyWng/kCe5y7ylsvlfD73g35dYahHDqKKKqqo2lLVWYGb5+B2
u51Op8PhUM4EZUNuFocTQ/+J4Ww22+12tS883NZW2JSthSqqqGqbE1VyMAHk
IKqoooqqLVWdFSAH76C1UEUVVW1zokoORiU7Eo5oK2zK1kIVVVS1zYkqOZgA
chBVVFFF1ZaqzgqQg3fQWqiiiqq2OVElBxNADqKKKqqo2lLVWQGLOZgdCUe0
FTZla6GKKqra5kSVHEwAOYgqqqiiaktVZwXIwTtoLVRRRVXbnKiSgwkgB1FF
FVVUbanqrIDFHMyOhCPaCpuytVBFFVVtc6JKDiaAHEQVVVRRtaWqswLk4B20
FqqooqptTlTJwQSQg6iiiiqqtlR1VsBiDmZHwhFthU3ZWqiiiqq2OVElBxNA
DqKKKqqo2lLVWQFy8A5aC1VUUdU2J6rkYALIQVRRRRVVW6o6K2AxB7Mj4Yi2
wqZsLVRRRVXbnKiSgwkgB1FFFVVUbanqrMDFOZg10vzYTiAHUUUVVVRtqeqs
QCfngzc5eSQHUUUVVVRtqeqsgMUcrJ51KixsytZCFVVUtc2JKjmYAHIQVVRR
RdWWqs4KkIN30FqoooqqtjlRJQcTQA6iiiqqqNpS1VmBi3Mwa6T5sVdSfRaF
hU3ZWqiiiqq2OVHtQw7eHHIQVVRRRdWWqs4KkIN30FqoooqqtjlR7VUO7vf7
+Xz+8PAgD5G/X15edrtdy8deAzmIKqqoompLVWcFrs/B6XS6Xq/9w39+fiaT
ScvHXkZ2JBzRVtiUrYUqqqhqmxPVXuXgYDAoPdyP/BY/w3a7HY/HgwOSqnLK
2XDnQmVhU7YWqqiiqm1OVHuVg3I++Pb2ttvt3ENk+/n5ueVjq6/FbSyXyzzP
ZU5JwNVqJTcb7txtEbqaM2VroYoqqtrmRLVXOShRJZn1+PjoHjIajdxl0pbI
6V72J26SzWbj7iBpKDdrX3iMInQ1Z8rWQhVVVLXNiWqvcvBKJO+enp5KAsPh
MLwWKjerDyQHUUUVVVRtqeqswM1zUJjNZp+fnyWB8A4lyfDM0Q9qK2zK1kIV
VVS1zYlqH3KwdOcSzY8tsV6vx+Nx0S4HawcVFjZla6GKKqra5kS1DznYLZPJ
5Ofn/8uE10Vlg+uiqKKKKqp3oKqzAkpyUEJwNpv5Jw2/bLPZbNzZYglyEFVU
UUXVlqrOClyfg7vd7uXlxf97MvP53P17MnIS9/Hx0XKS4vjFUbe9XC5lnv2B
PM8Xi0XpJZcMFRY2ZWuhiiqq2uZEtVc5KCdrq9XKZZ/8LRHmTt8+Pz8fHx9b
TiJ8f3/7J5X4k1h06+jlPLH2H2ojB1FFFVVUbanqrMD1OVha4yDbclboNi7+
h2XaQA6iiiqqqNpS1VmB63NQTgZfXl7csvftdivb7+/vcgaX53nt53pdQQ6i
iiqqqNpS1VmB63Mwq0NOEqfTqcRiy0l+hX+WcERbYVO2FqqooqptTlR7lYO3
ghxEFVVUUbWlqrMC5OAdtBaqqKKqbU5U+5CDWSPNj+0EchBVVFFF1Zaqzgpc
fz74/v7u1wymoZq2CgubsrVQRRVVbXOi2qscLK2bSAY5iCqqqKJqS1VnBa7P
Qbnnr/7dmK4gB1FFFVVUbanqrMD1OSghmFVo+dhrIAdRRRVVVG2p6qzA9TmY
nmraKixsytZCFVVUtc2Jaq9y8FaJSQ6iiiqqqNpS1VmBi3Nwu90Oh8Osjtls
1vzYTiAHUUUVVVRtqeqsQOfng5KPUf957drnVVjYlK2FKqqoapsT1V7lYHr8
iWc4oq2wKVsLVVRR1TYnquRgAshBVFFFFVVbqjorQA7eQWuhiiqq2uZElRxM
ADmIKqqoompLVWcFLOZgdiQc0VbYlK2FKqqoapsTVXIwAeQgqqiiiqotVZ0V
IAfvoLVQRRVVbXOiSg4mgBxEFVVUUbWlqrMCFnMwOxKOaCtsytZCFVVUtc2J
KjmYAHIQVVRRRdWWqs4KkIN30FqoooqqtjlRJQcTQA6iiiqqqNpS1VkBizmY
HQlHtBU2ZWuhiiqq2uZElRxMADmIKqqoompLVWcFyME7aC1UUUVV25yokoMJ
IAdRRRVVVG2p6qyAxRzMjoQj2gqbsrVQRRVVbXOiSg62Z7PZjMfjwWAwHA6n
06ncLA7/qb0bFCaTyX6/r33h4ba2wqZsLVRRRVXbnKiSg+15enr6+PiQDQm7
1Wr1+Pgo28vlMs/z3W7nBuVm9YHkIKqoooqqLVWdFbh5DoZI6skJoGyMRiN3
YihIGsrN6p3JQVRRRRVVW6o6K6AqB4XhcOj+Dq+FukFHFhAOaitsytZCFVVU
tc2JKjnYHsm4t7e34nAy+P7+/vLyEpqUxE4NKixsytZCFVVUtc2JKjnYntFo
NJlMhgfm87k7DSQHUUUVVVTvT1VnBW6eg5J9chpYGgyvi8pGeF3UQw6iiiqq
qNpS1VmBm+fgarXK87w0KCeJ6/XabbuFFeFPsyPhiLbCpmwtVFFFVducqJKD
7fn6+irFXHFYN+GukQqSkovFovpAchBVVGOrXglVRdVEBW6eg7vdrrrvSPxN
JhO3jn42m8l9al94uK2tsClbC1VUY6jGgKr2XFVnBW6egxdDDqKKalTVGFDV
nqvqrIDFHKxedVFY2JSthSqqMVRjQFV7rqqzAhZz0EEOoopqVNUYUNWeq+qs
ADl4B62FKqoxVGNAVXuuqrMC5OAdtBaqqMZQjQFV7bmqzgpYzMHsSDiirbAp
WwtVVGOoxoCq9lxVZwUs5qCDHEQV1aiqMaCqPVfVWQFy8A5aC1VUY6jGgKr2
XFVnBcjBO2gtVFGNoRoDqtpzVZ0VsJiD2ZFwRFthU7YWqqjGUI0BVe25qs4K
WMxBBzmIKqpRVWNAVXuuqrMC5OAdtBaqqMZQjQFV7bmqzgqQg3fQWqiiGkM1
BlS156o6K2AxB7Mj4Yi2wqZsLVRRjaEaA6rac1WdFbCYgw5yEFVUo6rGgKr2
XFVnBcjBO2gtVFGNoRoDqtpzVZ0VIAfvoLVQRTWGagyoas9VdVaAHLyD1kIV
1RiqMaCqPVfVWQGLOZgdCUe0FTZla6GKagzVGFDVnqvqrIDFHHSQg6iiGlU1
BvGqeiUpVbXNmVJVZwXIwYbCKty5rO8FqBpSjQGqhhqAHCQH42lr64GUewGq
hlRjgKqhBiAHNedg9WyLHLSyF6BqSDUGqBpqAHJQcw46yMGu5ky5F2RdQFXT
qMYAVUMNQA6Sg/G0tfVA4r0gBj2vKuFiSNVQA8TLQc2/CZODabS1tWvivSAG
Pa8q4WJI1VAD9PMIYCUHq78V9PP96mpO9gLrVSVcDKkaaoB+HgGs5KCDHOxq
TvYC61UlXAypGmqAfh4ByME02tralb3AelUJF0Oqhhqgn0cAcjCNtrZ2ZS+w
XlXCxZCqoQbo5xHgJjn48/MzGo0GB2az2X6/l8Htdjsej93gZDJxg6FnybCf
71dXc7IXWK9q1gXdvyt1kIM979VIWM9Bybu3t7f9geVyOZ/PZVA28jzf7XYy
uFqt5GbtCw+3e/h+dTUnewFVTQY5SK/GwHoOPjw8+G1JveFwKBtyhrjZbNyg
pKHcrD6QHOxqTvYCqpoMcpBejYH1HBwMBpJ0btvnoPwdXgt1gyXIwa7mvI+9
4Eo6f/l3UNUYkIMcAWJgPQfliWaz2Xa7leB7fX19eXkp/sy4ohJ51WNXP9+v
rua8g70gBlQ1BuQgR4AY3EEOvr+/Pz4+ht+TacjB2sF+vl9dzXkHe0EMqGoM
yEGOADGwnoPD4fDn56c66K+L+oulJcjBrua8g70gBlQ1BuQgR4AYWM/Bp6en
t7e30uBoNFqv1257s9mMx+PqA8nBrua8g70gBlQ1BuQgR4AYWM/Bl5eXPM/d
54Or1UpisTism5jP524xhfx0sViUXnLJsJ/vV1dz3sFeEAOqGgNykCNADKzn
oCSdxNzDw8NgMPCngTI4mUz84nr/hdLSCw+3e/h+dTXnHewFMaCqMSAHOQLE
wHoOXgw52NWcd7AXxICqxoAc5AgQA3Kw6Ov71dWcd7AXxICqxoAc5AgQgx7m
IJ8PdjvnHewFMaCqMSAHOQLEoIc56CAHu5rzDvaCGFDVGJCDHAFiQA4WfX2/
uprzDvaCGGRdEGPa9KXokIwc5AgQgQ5VM3IwiXaMdo1xdDVUVbACOUgOxqCH
OVg9dPfz/UIVzEEOkoMx6GEOOshBVMEc5CA5GANysOjr+5VA9UqSqYIVyEFy
MAbkYNHX9wvAHOQgORiDHuZg9XSjn+8XgDnIQXIwBj3MQQc5CGCOyy+yByRT
tRIuhlQjQQ4WfX2/ACAehsLFkGokyMGir+8XAMTDULhEOss2dLDqYQ5W37h+
vl8AEA9DOaizAkZVreSgw24Odv5rGwB0DjnYT1VyEADAQQ72U5UcBABwkIP9
VLWSg9UrhIbeLwAwATnYT1UrOeggBwEgHuRgP1XJQQAAx2++vHaS2mmtHKxs
qXb1TmXkIABATAwdrAypdoiVHKxN8B6+XwBgDkMHqw5PsgxhJQcd5CAAmIOD
lXLIQQCAqHCwUg45CAAQFQ5WyrGSg3w+CABG4WClHCs56CAHAcAcHKyUQw4C
AESFg5VyyEEAgKhwsFKOlRys/XzwSm74cgCgP5CDyrlVDg4Gg/1+H45st9vx
eDw4MJlMSj910A8AYA5yUDm3ysGnp6efn59wZLlc5nm+2+0kAVerldysPop+
AABzkIPKuVUOzudzCbtwZDQabTYbty1pKDerj6IfAMAc5KBybpWDn5+f4/E4
HBkOh+G1ULnpt/lQDwDsQg4q54bfk3l4eNhut1WT2psNgwAAmiEHlXPDHFyt
VnmeV01qbzYMAgBohhxUzg1zUHh+fvanhOF1UdkIr4t66AcAMAc5qJzb5uD3
9/d0OnXbo9FovV677c1mU/r0kM8HAcAo5KBybpuDxeHqqPvi6HK5nM/n+wN5
ni8Wi+qd6QcAMAc5qJyb5GDtP+0i8TeZTNw6+tlsttvtGmwBAKxADirn5ueD
v0K/IQBACXJQOVZykM8HAcAo1Stgv+XWr+DOsZKDDv2GAABgC3IQAAD6DDkI
AAB9hhwEAIA+YyUH+bwYAABiYCUHHfoNAQDAFuQgAAD0GXIQAAD6jJUc5PNB
AACIgZUcdOg3BAAAW5CDAADQZ8hBAADoM1ZykM8HAQAgBlZy0KHfEAAAbEEO
AgBAnyEHAQCgz1jJQT4fBACAGFjJQYd+QwAAsAU5CAAAfYYcBACAPmMlB/l8
EAAAYmAlBx36DQEAwBbkIAAA9BlyEAAA+oyVHOTzQQAAiIGVHHToNwQAAFuQ
gwAA0GfIQQAA6DM3ycH9fj+fz4cHZENuyuB2ux2Px4MDk8nEDYaeJpIaAABs
cZMclOxbrVa73U7Cbrlcyk0ZlI08z92g/FRuNtgCAAB0wk1y8OHhwW9L6slZ
oWyMRqPNZuMGJQ3lZvWB5CAAAHTLTXJwMBj4y56yITdlQ9IwvBbqwrEEOQgA
AN1ykxycTCavr6/7A8vlcjqdFpWMC29mAWkMAQCgJ9wkBzebjZwDumeUDXc5
tCEHmwcBAAAu5iY5OB6P397e3Pb7+7v7KDC8Luo/NCxBDgIAQLfo+XxQ0nC9
XrtBOUOUrKw+kBwEAIBuudXng3I+6D4flA25WRzWTbi1hEKe54vFotYWAACg
W9Ln4G63m06nbh39bDaTm8XhxFAC0a2j94MAAABpSJmDAAAA2iAHAQCgz5CD
AADQZ8hBAADoM+QgAAD0GXIQAAD6DDkIAAB9hhwEAIA+Qw4CAECfIQcBAKDP
kIMAANBnyEEAAOgz5CAAAPQZchAAAPoMOQgAAH2GHIQ+s9/v5/P54+Oj2xEe
Hh7yPL+1FAAkhRyEPjObzar/RfVyuby1FwCkgxyEPjMYDKT/Pz8/ZXu3272+
vsrNp6enW3sBQDrIQTDHqaYtjUu6SaLJyOPj49vb26m7fXx8yB0kEKfTqUSh
/Ei2Tz1ROOIfOB6PqzLr9VomHByQjc1mc9bfIfeUs9ThcCj3kb9l8q+vr6qt
e1IRlju7ZxmNRt/f36eKIH/L9mUlan7h+/0+z3M34i4sy8ipVwegEHIQzNEm
B30ieOToffZuEiXhT5vjwH+qOJlMSiaSZe5M0yMBsd1um/2LQ665BDwlX3rS
2uu6fnLJ4oaftizR2RcuKV+aZz6f1746AJ007JIAOjnVtOG4OzjLAVnOTd7f
32X7+fn51N3keC4hJeH1qxx02/JACa+SiYsnOV3aHpANufny8tLsL8h9nOrP
z4/clMfKS8iCS7WlJ3WhuVwu5ab4ywupvrqSxm9LdPaFu5syQ3HMVrGqfXUA
OiEHwRxtclDOv2S7mlC1d/MXLf0J1Kknav6px00rs4XTyuDZB7pTLf/A4nCG
mJ2+VOtu+uuQ8kLCO7jZTr26liVq+cIlAReLhYta/0oBTEAOgjna5GBWx6m7
+RkkUDrJwVI8nZ22FnnUx8eHO0U9dab2K8NajbMlOjut5Kz7kNEhJ4Pue0cA
ViAHwRy1B/DSkdx/huWpPR1z1xWbzwf9T9vH2cXng4739/fJZOI/YZQNOduq
fWxzYDW/urMl8g9056SnXrhLannsfD6X4OZLMmAOchDM0SYH3Ydf7osf8ncW
fJslvJv7QM19Plj9BM1ty6Akghze3aoK/+FXw77jPua74PNBuXPp3ErCpeG7
ps052PzqzpbIvXAJwTzPG164y2v3gab7nJHromALchDMcappw/HqVyVrT6lK
35n0p0jhPUvfh3RxVpq8ZCKhU/rap9x03xdtfqD/oos8afXqYvWx1UkaXl3p
Sc+WqMRsNqt14PuiYJ3anRFAM6eatjReWjrXfDe3Gk6iKvyp35YDu9xBskxC
0F33q02WEDmTkoCQh8gDJd38OV3zA8NzK4dLK/c9mepjq5M0F+FXJRINqYlb
nCghGH47NHSQcSmLnAPK3eQXicViwaVRsAU5COZomYPxnujKp3MPlMzdHwh/
5E5I8zx3J48Sgu7Tt9qLuhc/9cUP73ASAD3Q0mCOK3Owfc9HykH3LRqHnDOG
P3Kfr5WQ8yz/lRtyEKBzaGkwh5Ic/Pr6kpO1NvOU+P7+fn5+dtcbq/8m2+fn
pwy6jxclMWezWbic8OIndXSyv1/pAKANchAAAPpM9SIMAABAr/i/qN3SJQ==

       "], {{0, 0}, {600, 400}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 600}, {0, 400}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.4107501820830298, 0.}, {7.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               55.68754991522334}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                21230.73544921875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{57.10463427312716, 
               75.3305112838946}, {-41.98653029829738, 38.74689437998485}}],
             StatusArea[#, 21230.73544921875]& ,
             TagBoxNote->"21230.73544921875"],
            StyleBox["21230.73544921875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[21230.73544921875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.74759564179843, 
               94.97347265256586}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                15643.699804687501`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.39055701046968, 
               114.61643402123713`}, {-20.87247117243364, 38.74689437998485}}],
             StatusArea[#, 15643.699804687501`]& ,
             TagBoxNote->"15643.699804687501"],
            StyleBox["15643.699804687501`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15643.699804687501`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{116.03351837914094`, 
               134.25939538990838`}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 
                18995.92119140625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{135.67647974781218`, 
               153.90235675857963`}, {-33.540906647951886`, 
               38.74689437998485}}],
             StatusArea[#, 18995.92119140625]& ,
             TagBoxNote->"18995.92119140625"],
            StyleBox["18995.92119140625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18995.92119140625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{155.31944111648343`, 
               173.54531812725088`}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.4107501820830298, 0.}, {7.592010779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{7.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {7.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.4107501820830298, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzsvQd8HEWa9y92YWFZbsPt3cb3f3t7/7tN//u/m1gWdsHZkiVHyTljMCbD
EowtWZIly9nYxjbgjG1JEyTZpAXWgDFgnGXZSqPJPR2m4+SRNBpN6vep7pEs
Y1uHP69G0sj1+zwUPa2x1F1dVd96qp+q+vlDz+Yt+VpGRsYLd0CSt2jZyOef
X5Q/9bvwYfozLzz+6DOPLM5+5sVHHn3k+Xsf+jqcLL0lI2MkfB8dY2FhYWFh
palOnTrV3Nzc2Nh4/vz5ixcv1tfX1ymqxcLCwsLCGgRSqQR4AkgBqgBYgC2A
FyCsoaGBUmS1WkmSZBjG4XDAAY+FhYWFhTUIBEgCMAGe4ABQpTIL4KUizOl0
CoIAqSiKbrdbUOTEwsLCwsIaBFKpBHgCSDm7gKUiDHw0oBvHcTRNA+zUH7Es
O8BXjIWFhYWFpUhFEuAJIAWoAmABtgBegLALFy6AR6aSS3XZ4AvgrwlYWFhY
WFiDQIAk1ckCqSwDbAG8AGF1dXXwU0mS4DygDWAHP2KwsLCwsLAGjQBMgCeA
FKAKgAVnAF6qFwZ0E0URzqgum/rNgXpth4WFhYWF1VOqb6USClAFwAJsXe2F
qYyDVH1lhoWFhYWFNeACJHXjyXmlF1ZbW6u6ZvAjQRAAbUJXRAcWFhYWFtaA
y6m8/1LxpH4EbKnhHBhhWFhYWFiDWRhhWFhYWFhpKowwLCwsLKw0FUYYFhYW
FlaaCiMMCwsLCytNhRGGhYWFhZWmGkCEcc6k9TyTvCruiu/cnOqZP9fJBKYr
RQeQaU6WR4Zyj++vy8RKCuX/leWWc/Lqg1B/1PVThlNsoK7zphGj1BrmS3Un
WUdwBRkqGiiEQbnyiS6nlWAp2u/1uUTJbrVRdoIkHHYHIXrcDOt0OBxuQeRo
VAgFtIojpBwYTZMU5YCPJElKkiSKonKdXDwu2+0OhmE9Hp/DQcE/h39lt9td
Lhccwx/1eDzqweAXuuUu47pStekTBc7JUHD7Pr/LYjG53DwvMBRD8i63g+Es
BMXwAi+4RcktuTyMk8MVth8EeOI9oo2G8kvZrYTf7ZE43iP4BNbt9fvsFGkh
HG5/AB6Fg7C0el0SS2OKpUJcVw+BYynBiVKOpgi7FVoJg8Hg8fo9gTaSFWlO
xJViaGgAEUYYTH5e6mxt5xmnoaHR5/F2tIfQ35JEqPLReAwtfuUg4byTZiSR
h0/Nhnqnk3a7Jb/fK0mC0Wj0+/0WiyUYDNbXNwK2oNMLdyDw0KyLbrcXgBUO
h61Wq7pMFhwA8vrk+lOtngi7zDKlblrMRo9bMpmbm5ovtYcCgui0WA2cwJjt
pK8t7Pa32kiGkzwEzVptBM2wGGH9IEAYxTOEk/QFoGwGoFQTJhtppZ2UUHvh
ouD2uAIBpyQQpB2+2OZzE+YWjLBUSK0jAuR7l/EMmYh3XrxQl5DlZoO5tr5J
8rXbKBZXiqGhAURYJNRBGi2kwRwNtltajIFAwELYCRotwwjHzc3NFptVdEng
anW2hxxWC+mwy3LUZrO0tDSLIg8HcD1AJfg+gKmtLQTOF0UxYFYL+GgiQZDq
IpDgiEUiEZ7nTSZTR0dHn1x/P6h7IPGyKdUz3NFOUw63i/e4BZ9XsttMXg/w
jQQXTPAEmowWyRs4e+ESK7p9/qCDpDHC+kGAMOAX52L9ATf0+Zvrmn2CLxqK
gEcGLWegrfNic6OJsADgUA2iSDca7sUI63tdjTCJY1oMDSIvkDTlZEXB4+fd
Qd7tx5ViaGgA34XZrbZWj6/+89M/vet7drMFPC9CZIWAl6Xondt23JKR8U/f
+fYd3/t29dtvnjz+2Yg/32uzmknKtnz5Sz//+c/g8v70pz/abDa4nk8++SQD
6Wtf+9qtu3fvtdsd77/34W9/+3tgGXxh/Pjxr7/+OkEQLpeLUNRX199v+hLC
jC3NLYYm0mEFhDEO29OPLxk76gFRcPIur8XBLHx4yaS86TFZtjpoQXRhhPWP
nBzDSlyLtVkQ4MmYfveL334j47ZbMzKgGBcVrTPZWDHoMTiM0M3geJeL56Bp
vWlf8qZUVyNMZGmasne0h57527MZGbdmfP0bGbfcvnDxY7hSDA0NIML8wQBN
OM699/E9P/tl44WL7qC/yUk0k7YPjrx9R0bGx+//w2y3OVu9BspuaW4Z+ac/
280m6OIKAmc2G61W8+OPPzpv3jy4yNtuu62iogLcrvfe++COO+786KNj1VVv
/uIXvyJJdMF33333zp07wQULBoNwO+ptpoWujAFAUqun3+2KhNqhb2kzGTiK
ePdI9f1//qOpucFidZgJ+j9/9f+VrdvI8JKdchpaTJLLgxHWL2K8fo83IHBO
o7n54q/+128+evNYwON86y3dd779b0fe/tQXCRIS4XBKDOfjoT/CpMc72bTT
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
BgfwEfoalCRyQt/kBDS5gDCv10tRFPDLbrcDztJl38N+0BBGmEDaRWt9B3Vu
Xf5Tj7+0roVpa+UMf3t89oPLX70kyC6esDZ+UX746IHDn6xcuVJXvm/Xztd2
plC7X3t192s7dh3ce+DVV7Yd2PPG3t1v3D88c97iZ8fkLhqRt2TY1MfARkxd
PCpv0djc+WBwMDLvoZF5i79imjP36d+Pyhsz/dGcuU9mz3kKUjjOmvXY9b4/
bBqykVMXjcpbODYXbNGY3MWjcpcMn/xY5qy/5cx+Zvqi5+4fMf7AgUOHdr9e
uW93ivMn1Xpt187tYHDw+q6dr+7a+/rO3fBQ4KYO7t2l2b/34M5dlQcqho3M
yZv9+Ljpjz0w6QZyXk3HzYYMf2Tigr+Nn/fU8CkPZc95Yvy8Z/4weuqN/p7r
pdMfXfqH0RN37NPs2n9w+yvbDsIT2bF116vb4N5e3bX71Z371JuCO9r7+naw
tH5er+/a8fq+7fcM/8uMB5/KmfG3rFkvjZj2bObsx7LmLBozdVZW7txxkxaP
m/RY1qQnx05ZAgV45LS5UJKvmW9QCybMfxqeDtSI342cCjUCakrmzEdvNP/h
gY6d9eiYmY8Nn/bI8GmP5sx/auLcJcOyJil5vmPPzlfAoIC9vuu1Hbt370gW
sD7Qvn37Xn/99crKSjjevXv33r17NRrN2rVrB7qJHSwawghzMaSfsbQTF6r2
vnJ/zkzC3eljjGP++ofnNh5s8cp+F9vuohqsaAZPTU1NpD0gy3E5ZUrIciQq
R+LoAP2XQMfT5j26fpd+u/b4Fv3nm6pObdKf3qL/YqvuczgDtlX3KZyHj18x
3XDoY0hLd/99s+4zOH5Z++naN46uL//4et/fVIVsc9WnW/XHt+nAPt2m/Xyr
9tSG8s/XHTyOfsMb701f9GxHVI5HY3JCvfT0FTzciGJxuI+YYkjwIQp3GI92
hMMd8QcX/23bvjdfKf9o/f6jXz3nk/lZ8cmaA0dfrjwOOV+29/21Bz+E8+sO
fXSjv+eaKTygtburJy18PATXq152IirHwolIh9x1OzFZfUTwpCLIUlmeUy24
kWA0NPORJa9WHF27+8ON5WfL9n+2tvyjzfoPt+k/2K776LXKL16tPLu98vw2
zektVcc3Vx/bor92fYFasElzfGP5MagLkG6oOLb+4EeQ3lD+g63Z8/6mg59s
OPTJ+oPH1uz/cHPFx+ter5nz8PNdBSmOnohSuqKK9WF1iUbRM49EIurHzs7O
I0eODHQTO1g0hBEmOgne0hAVLHWfHf3Rf/3/H3xRe+nk8R9+9079p3VEu8zT
jlaJJXivVfDv2bMn1VVeLdidShpR0rAsPzBx3pbyj9ZUfFpacbq48lxxZW1J
xblV5WdXl58EW1VxurTiLHz8imlZxbnXj9oL953YeLhhdeX5TUca12hq11Vd
vOb3SyrPFmmQFWtOl1bC31IN/cXNb7dsqKnfUF277tCx+8Yv7Ohu7dNb3QiL
XoUwADRgWu6IyKMnzN/yxvuv6E9urj6/uvzG8n9jdX2Z5vw6XR3k3lrthTW6
C3AGnsVX/w29pGvKP9tS8cEDk2aFVYRBSwkNJkIV+jT0EAb3AgVv5NT5r2hO
rD1w5uUa8xpd82r9+c1vX1hV+cnqis/WHahdc6B+9cH60vI6KMPFmhOl16kv
8CzWV1+C57Kq8ty2d4xQI6B2wDO6ofwH21B+fsdhw9aapm1HDJu1F3fU1G3a
91HW1MehUqN8jye7pmA9nkXfSEVYLJYss62trVu2bBnoJnawaAgjjCUtYS/r
t7e4KWvR+o13/fCnt2dklBWsOGfnGsWA1WgSHYTT6ydEz+6du5QGIZZImaDJ
gaIOXej2uNwWldsTcrss3z9x4baak+urzpdVN5XUmFbWWEqqLaXVLaurDGBl
1YayqpavbsvfqF3/pnXp3rMl2qb8AxdKdc0FB+tWahqv+eWSmpaiw6bCIy0r
DxtKDjeV1jTBNcBfhL+eX3mpUFtfqruwQX/mL1MebVPIi6oktJppLOBUJ5ji
/iaS/WR0R8lmJ6Hc5vAJCzcdOLr20Kcl5WdWVzXdUP4XVzYUll+CPC+qqIds
Vz9CekO/5HoGDe+r1Z+rCAvH5WhnBPlfsTDcCtxbVAFz0geAO413IktleU61
AMBQ8O6dNG/9wROr3qhbrbcVa83LK+qKq+vKai6urm5Yq7Os1jnKdFRJlb3o
iGHlkYbSmmvXF3gc8BRWHLoIlWKV3gAfe6kX17PVVS2lhxrXa00rD0DPsKV4
f+0GTd2mAyeGT3ysA/o/8cvdCPDG0LNIKL2MPlJPnKkfDxw4MNBN7GDREEZY
qNVtaaoN0PZY0G+iqUtmS4CTLM0mZyhs9nhdnFtwODmv3+JkX9vxaqoHynp6
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
tgvuDMsd4NQgIEye/uQu3dmN5RfLKs1oQK+SL6oUwUoqePSKSmtW1ktPlXWv
VI8+6huL9I2FVchWVjcXlp/bWHlup/ZUZta85ArcbR1yDHthGGH9JoywpDDC
ehdGWL8hTFnvPYKaHbTdpezvQFOb12k+WVVdl3/Y+Pyb5DNvsUl72/niEbqw
iizRpcqKq8jlNc6lh+llh+nlNWR+DQG2/DABxyvgT+ss6w/btuqaHsh5ujPS
9RovrZtEjLA0E0ZYUhhhvQsjrP8QpixnFE9ACxSBI7Ej/MCM+aWa9wuqvnih
5sJTR5oefcuomOHxt5qePmxYprWsqCBSZMs1xAs66jk9+aKOXKqFjzawZVoC
7IVDtmWHrKsPk2sqm0ZOK25TZmMn0r1JxAhLM2GEJYUR1rswwvotnAO8r3b0
BiwcRpuXxFtleeIjj26seW/1m8eL3j6V/8755e9cWP7u+fx3zha+farorfMr
D7esrLGl0KodJVX2Mr19rc62XmsBW6e1rdXZ1+jJMq1t02GqaN/5YTMKhajs
isj+cPcC7+kpjLA0E0ZYUhhhvQsjrD8jEjvQGGI0imYKR6G4T5u3YNXW17ZV
vLWl4r3NFUe3VBzdVv7eq4fe2XXwyM6D72w7+MmWQ59vOXQiFekrB09sO3Dy
1f0nd+47sXvv5/v2INu758SuvSd3HTq/bf+p1yrOrn3tvVmLC9qVK4+me4uI
EZZmwghLCiOsd2GE9efUZqR4HEV0tLXL7R3zxk5cseiZh8fNXpw1/9GxC54c
Pf/5kTOXD88rfGBS/vCJz42e9GTmpCfHTklJOnbKE5nInhkzCf7Q86OQPTcq
7+kx0x4alTt35KSHJ896cEru5BH3ye1OOUrJnYzySixthRGWZsIISwojrHcN
DYQpO6rwyVQxZWsVJM755ZRnOfUYEIY2b6aofXv6A2HRzu5WMy53dMrtkWdG
5KydNHfX9CX7pi45mLu4cvJD1RMXvj1+7ns5s/4+flrVlLzKqVMqp6YkrZia
d3B6Xvk09FGXO6UqF6XaPDgzrXLe/NdnTNs5b9b62ZOfzhsuxxk5RskRRglM
TFt9uWHv2mlF2URGXXe5TZb/mrsE2qUyXW2xvlFFmLqFx4CnqzX1WyuOj81d
FFY2m4uhrlA0Hk/ucd9tcuJKS2NhhCWFEda70g5hzi5I9TSaQxtcdqXI4IBz
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
L1EUgxGGEYYRNsgENxaaOjV35763tu7/aHPF+TUV54oPHit4470NVcc36k9s
1tRurqzfXNH4sqZuo/4knNmoO7NRd+5l7blUpGBbdXXr3jizTY/+4oaK02V7
/7H5wPuzFj+fbDV6ICyafCx9I4yw3jXkEMb3QJjbyUpqjKKL5l00K7C2JMJY
L8WzjMSgvZsRwl7HA4kYYRhhg0kIYaP+/Mfn5j42Z9Sc6WMfnDn+4dlTFs3J
Wzhz/OxZOXNnZj80c9yjs7IenTXu4Zk582aMnzszZ8HM7AfR+ZSkD80dvyR3
5IL5OY/Nzl48PevB3HHzH334uZEjxiWvF70FS+Z7DCOsH5WmCOtFV+6JmZwy
hvZ3Rls8U+CUofdfLIrx4AQWjimK2rd3d2r5JWOEDbQwwtJMcBvhR7Iz9+Yu
eCt3UU3uXP3kqYenTa2aPOmdSblvTZ6qz52pz51zePKcNyfNrpkyvSZ3as2U
mYrNTlFaNXnWm1PnvJkz7d3cOXDmwLTZWxcuXJKTJcciyRyPXy5jeCCx3zT0
EPY/CkUhKuJ5Hm3cTFF79+7to+LWS0HECBtQYYSlmRDCnsga+2bOjHNZU09l
5ZwYO/xc9oizo/9ycfSIutEjvxg3+sQ4qCZjlY2tR5/JHJnS/If68kXmqHPZ
mbXDh9VnZsKZ9ydkH5iV92zWcHgiyhCicskxNfPjsb57K4ER1rswwjDCMMIw
wgafMMKSwgjrXRhhGGEYYRhhg08YYUlhhPUujDCMMIwwjLDBJ4ywpDDCehdG
GEYYRhhG2OATRlhSGGG9CyMMIwwjDCNs8AkjLCmMsN6FEYYRhhGGETb4hBGW
FEZY78IIwwjDCMMIG3zCCEsKI6x3YYRhhGGEYYQNPmGEJYUR1rswwjDCMMIw
wgafMMKSwgjrXRhhGGEYYRhhg08YYUlhhPUujDCMMIwwjLDBJ4ywpDDCehdG
GEYYRhhG2OATRlhSGGG9CyMMIwwjDCNs8AkjLCmMsN41hBDGd6Xddm1hhGGE
YYQNemGEJYUR1rvSEGH8tc0pJtNuuw7FMMIwwjDCBr0wwpLCCOtdQwFhPbGV
NAkjDCPsCmGEpZkwwpLCCOtdaYWw6/hf1wMZRhhGWLcwwtJMGGFJYYT1riGL
MPwuDCOspzDC0kwYYUlhhPWuoYOwa9i1hRGGEYYRNuiFEZYURljvGooIY3vh
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
/EZrYs3mBVmzpnLIy50aDc8RhI2wxgDCGIYBbGk0mp6enpMnT7rd7mPHjlls
5ler/5GaGaNXHmcZ5V8qKyUXXnK5RLKxbmm/wdWrd/jMdqNCcaxf0aPVL12+
LPJrtROEERGdiYIotyBmVUtBQ+v9DW3TwBerbo2paY+pbo+qap9eJU3F1h4L
5Kpum44NNtqja9oikoLrt6Q97x9N6Uu2Jr/eGbukI+GN5tyaTY9llceJM0Sf
hjAywdQIagwgzOFw9Pf32+12k8lkNptpmlaC1IralVU5BYkOtnfv7s8u+vkv
+/TW3n07f3fDz786ovpW49L195kU/SqDTefglq9c4fc5CcIIwohGkYIor3Dy
Kmlmg/SehvbJtdKp1dKpNR1TqzsmgltU3RaHrX1KTftEsLq2KTVt02ukcRGy
ail4eZmvNMdVvxm7uGvKks6Yyua0ms0PZpdP5xAXIAg7exoDCAOfSyaTGQwG
yCHs3nHHHddee+0FF0okF0kkF0pK86OWNbycWvZAN2XXfLs7Ny5qecunGidi
VTIXLT8up79VmppamkOdsBEUQRgR0RmJzyuauEqa2tD2+4b2ibXS+6vbJtd0
Tq7uvLeqc6LoedV0TKjruLu+/e76tol1rXE1rakRMsBlbdf9r7f/uu7dX1W9
dX3Nm7dWSe+rbSnInX0Hh0wBPBYMTysVaswhCBtBjQGEgf8l8kuhULAsu2HD
hoqKCqPJULWiOn9mCq3cvmr5K2WP/23nCR0KsI9V5BQuevmkEen6jquP7Wps
f29F63u19XVCKBFBGEEY0ShSbtHklW2ZdW331LdPxkGJbVHVndHAL9w/1RYL
Vgf+V8fdS9swwmqkseAr1bQmRyIFF6+ua8Litpsb/nlzzZs/r996S4303vrm
/LxZdwQQKwQl4kHNpy3ZEyYRhA2vMYAwmqb7+/sZhoHsgUcGu8XFxf96/92G
dcumxN6plX8mbamb84dXDT50cs/7Lz4194m/b5JZkEnTg2yqkyrrca1n7fp1
Qc4eWvQwUiIIIyI6A0FtnVU0Y7m0qFY6taY9Zol0xhJp3JKO+MqO6Kr26dVS
DJe6tiig2FLpxPq2STXtU6o6puCesgik1e3RDW3JSxqnLdsypa79XtywuTm5
YdOCgrKpQeQWkMULjphXMDI7x8hpDCBMzJLJZFIqlZACwr744ouYGdOff+X5
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
15bVy5fdNzkKTmOpvtt+dV17e/uajU2/u+cet9fjtZpvv/XXm1tbFDTzsxtv
sVhdPBfcuH5DYWkJJwbqY0bxHOf7/Ksdv7/zbuR3o6Aftn939wS3X4iBDAoR
/gMrxAkSQyXHLMLEqVRgg2VZ+KkA2Z4/f75I/Gt/etWR/bt1lGrF2g2SCy66
UCJ58YW/nqXZOfDb+/wCCYK4ldjpoh59LFGp2mw0LmPNr1nMz1ssf7Ganrey
L1nY16zG1+zGl+3sSw7jS5FIHcaXHYZXcGp8AcxufAUb+5LV9ILZ8ILT/po3
8Prxk688/kAx70I+z4/+NCIiIoqowtOQyKOMnD+uaj/2SvvRv7Z3L35X/+fG
/pfb6b9L1X/qkP3lrZ6XpHvqmr4oynsECaOLPC4vRogXQKK/65ZLJOMlkosu
kkguu/Ham7wadduaNX98cTFuSfTJFuVOaO/oWtH85v+8+gYHf+O1VaQldL33
r/1K+vKb7lTTOOrxr888I7lwnOSiSy698oY775hk1Gv++7e/llx4RUvXO8jN
3HnTVZJLrl4u/Re8YQBH+zsQ7wxdHOdd/AXNCT/9xybCxKHNkDeFILEgPT09
gDNxjPOxY8fE+SHhoDisW/zDkZ2pHnm8vEdAmJ8TPhfkiIn/9aJHJpbM+Wnp
vAvL5kvKFkjK50vK50nK51xcMefi2bMvmD1HEjmbM/uCObMlc+Zgw9eafWHF
XHz14nJJdpGkdIHkwSd+nTBjcmjwCPHBiIjOhsITkcij7LynV0uPvNzx7TOt
B1/uUvxt44nFUu0/WhXPdHY/03Fo8Zb967t2lgPCPAP+j08I6/AoGpc9XTA7
247QI398/uXnX0cuT//evbdHJzEBv1P+8a0XSd586533vjl6V1ySm3PZuvfe
IJE0dm3dLmeu+c3kja0fBO2oq6ktpSCHDQZXr3tzdvlj61bXvfrG8yyPL/X+
5vrXn14E8DIhZOQEZgVsYFBHus4bhAG2oEQGg0Gc1pISwuxNJhNkGLZtNptM
JoNzzGazOIfz2UJYcMBMZnsADy90zJ4fV7V01vJNhSs3J65sjlrVPGlNU9Sa
zbFrNiWDrdocv2pzXMQsfk1j4prG+DWbp4PhazUmwvGVTXFNW7NXtMxYKY1q
2JhTMjMTHiPIs9Pt+t9LSEREFG6FK5wjPe+J+pZdr7x58Nn2PS9vPfmS9HjV
FuU/pCdffF/2p/bdr23ZVd/ySXJSCTg//qDADr9gDoWZ2j1lxr1fHzl4611T
du44goxm5Pdnz3lQcvG4+LuvnJt2+4f//pj2oJjcQskFkrg7rpubPq1164c7
ZaZLb741r3R29owSk9r+1N+eklw5TiL5uU7lsZq0kgsl46676ennX9Ed23nn
DZdLxl3x9OI1GlvAGxAR5gCEec4bhAGbRBJRQj7F0WEnT57s7+8Xp4V0u91Q
ZLziQH//WfTCgsLojGDIoeE8fiavZEJjxx9WNBasaE5Y0Tp1hfT+VS3Rq5pj
VjUlrWhOWt6SsKx1xrLW+Mik8fD+y1vil7dOAxOOiJebsXjt5JrGKWvejm1o
zk3Pi3N58IMUIH4YEdHZULgQlpL/wKvr33/97Z1/27rjjbcOL+46Ut11/IXm
fX/dsu+Zti/r39+3cuvneYUL4ApWzuMI+PAQZxxZb3Jbe2+/51cvLHn9xt9O
9IuTU9nsWpsPRxP6FSXJv2/c3OwSnKYgMC+gnZk8eW3j20o7ciJk87j8LHbo
bAGjBzkDPHLjyEQ3oNHMIweuWSzIb4G3siJ8vssXEBsSudMaEoVYOH7M9oWJ
CwpAVsXJLSGHwCm73W6xWIBuBw4cAEgBvMRFq2H7bCEM4dF8Tr9f7Ffyezl9
YvqttWtmL92U3dA8o6H1/gbpfQ2tkxtaohqa4+qa42pbZlRLp1W3xkQkbY2p
ks6oksZUtU0FE44Il5NOW7YlqVoaVd81uaopI6c0iRNaFJx+N0EYEdHIK1wI
m/vYc5WNb1e989lLXR8v7tpW3bmjtuOb11q2/aPrq79J//2a9IO/NWzMnTnf
J6DEC+AICBN1BAE3tu6+/ZKLJOs738PjuOwexHE6k0uYVcpQkjmlrWsLMMji
5R1OMwroMqN+/68PdmB+BT0BeAsHrkE4ZHUjs54WfhAjt9Ot9wgVC7IzyGmE
t1I5kMosdLrzbrCA8KpQ2rGPMHCvxLwBwmBXLgiO9Pb2siwLR5xOp3iOOA/w
WURYIBDw+XwOB/wQ8QaRqXxBVOOWJ+ubsupbY+vbJtW1T6iDtC2qrjWuRhpf
1R5b2RFd2TE9MilY7OLO6Yu7plR2ToFduFxVezTY0q0Jla2TazonLmlOy5uV
4hOeJS/OcKQjNomIiL6r8CAMoZikjPTy+UnzFkWXzo0tWpBU/FBa0aOpMx9P
mvNU6sI/Zi14ImfuQwVlc3UWsx0PMeIDDjf8mcft9IFbhOwB5LcLrhYcdBtY
TnhPp1mJeAsn8MsnXsehQQGbz4d9KB8mJwf/Bey822+E1/BQM3gjtwn+FGNL
b8bACnoZq9sptBx64C+CXrAQP0P3YIxHJIK3Be4V4AmYJYZzsILA7YLCAqGM
RqN4JqANjp8thAkTtgifBW5idnOIySi8/fUVRfUt2bXtMbUd99d23lfTeX9N
x9TqjhnV7fGVXTGVXdGVXdMikb6xZdobXTE43Tq5cstkuNaSzpglXdHVndGL
Wya/0Txh6ZuTqppS0wunQUa9Qb+fIIyI6GwojNP8ijEaHBqYr15oqrPb8Sod
fh75AsiJG/IQoMvqtgtT2YdcMc5nCiIvgMcQmiKY9wsvuR0sJN5gAN7W7ef8
PhcKOAFsSPD7LDYrEr05PMzZa7bp3U5xPmG312u1eHBcm9NqQkEO/tzoCgpv
wp+HQfX9/f1QIrGdUDwiLrwihnbAcZlMBvCy2+0isM6eF8b7vPCTI8AFwDd3
BpEht+Kupc1za5vSq6XTqtonLOm8a0nHfYs7Ji9uj3kDrCPqjY6pEbLXOsGi
cNp1/xud98O1FrdPW9I+dUn75Nr26MqWiQ2dE2qb0/LLEoQHiQuGAhOJiIhG
VGFBGB6OFfAipwVBFeTzIo8fuTjEupAzgD0r3FjoQZ4AxhYf8PjcGFwu4BHv
8gvNfchtsRpsCDGia+RxITHkA4dYcBzibX5hno0gbzfoBQYJM+ALs987LexA
aIhfWNPK73NbIBXhyAszDIs+ncXpHZxkKnha5/sYR9iZ6qwhDI9qxh8aD54y
cnKILpx7X+2mirrmjJq26OqOCVVdd1d2TVjcNQm373UIrYidUyJmUfD+izuj
4HKVnZOq2qOr26Nr2qeA1bVOrW6+b2XXhIamlPyiGUJEvRgfRBBGRDTSCg/C
Av6ymKjn8jKfTkl8JiH+rwmJf46Z8WJC6vMxyS8lZj4Xm/xsau6fcgrmpWZg
IgHIAhxuTQxwTq+IML/X5wSEYf8KagPwugSECUGCnNPv5kRgCZzhOB6/CZ7v
KEQul9MK2xx4dkBQh0g0zuaww1/bvEFxMLWf48Vot0AoigN9p8IhCBvUWUeY
sJDB/4Kwyo7Yqo6o6vYpETJ4c9zzBSnwq3MS5ldbdF3blHrplIaWqXWb71vV
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
ohP+/Or8Z9+ZvvDNsc99MH7xu+MWvzNm4epRL3x8+rMfjH1i+aSnli0YP+3X
hVLWrf/lFLIpxZ8hUCz4VSytGdNnTzx3Gvwrl3dnaPB80rcYL5nek4CFrKQs
5FKWn9VeFgoVL5m9nU664VjFyeXUZIqAzcoVLw0H9Ciy5OSL8aSjwwMUyMbP
X58847o20lcY3FTMFNNulFf+JSvMj8JkWYYVkiRVVV2xYkWP7l1rMGz6lIkg
tXw+f9+990CLarv1efovS/3Xl+JlVlQEnuVIpDCkMARiH2U3KSw56YKjFi2/
+Ll3pzy47PjH3jrh0TePffzt4x97+4hH3z7kyXePe+Dl015Ydd2MuWfm3YG7
sp0yXH+V0uVSLpe1hwzpVVWF1dU2nPLr01VNhN4slapcdNGC2rqGgYMOGjR0
eHNz61dfvldXhfXt2vm0k0+8/95bCDI6bsysbNrJ5jPnTjrn/ff/Dvv+2uvP
1tRiDz5wUywR7trvMEMrOBn53WefxBpGXHLPM06RNwNfY1ivD9bF3BNgbpfj
CrTkj5H9chUG8oIoDHbMNM1wOLxhw4YhQ4a0tLQQePycM0e/tuTFzZs29uhz
QJRgNm7c2KdPny3NQZxT4DiwDAXugzs+s+gJdF0YUhgCsQ+yu6KwSXOOX/T6
5U+/c95jK055bs24x98+8cE3jlv4wa8Wf3jso28et/CNSY+9dMXUWWeX/Bnt
7vOUC1kIr1IjRgy+954/wS3prPr68pePP+7XpYLzzfpvDxjQn+fNYJDq2Wdg
INB2+61XPHTvDXAnCBwevP+2ltbt5025XFMcyzZnXTD93Xf/Cvt+3vRxr694
wnG0YCjQa8jJHG076fhFo4Y//3kbDU+okt8s/fOCBTdOnndT2nFLvpSttFMs
Fr1osOg15BepMGgO/DQMA1ba2tq++eabGTNmRKPRtJ168rGH//T7G+675w/T
L7wyTEgcFZ45feKzr65qjnAST9gqLcm6kcwvW/KXknsJOVIYUhgCsW+xmxSW
nj7vlKeWX/X0qhmPvH7acx+ds+jd0x9bdfIT7530yJsjHn7juJc/mvv4y1fN
njel5M3QyGXLpqGBOjZt+vLww4dkUllPaplyJTNr5sWvLnnzi7V/P/GkE2y7
XCg4w484/quv1jqO0bsbVo9hdTXYA/fdKoj0qFMmegOJ5bMnjH311ZV2Kn/J
pTM++vjVSllhBP6gYyfThOnYLXdeNOre5etIePiUeeagzhu++7b/ESeSlmOk
vPmKhaJmu7XJvEvUfpkKC4VCkiRBoyCksizr4Ycfrqqq4nmxpTkwecL4h+/+
zZ8fueeG2x5nlQpP7bhuwcy7Hnq1gy5ockxhW9s7CIK23n7j9Xxa3eX5PQRS
GAKB+JfZXVHY9HknL3ztssVvTnng1ZMXrR6zaPUZ8GF/7M1fLXr/xPuXHfPc
6pkPvzh/xtyzc2V39kXJvRC6UMzZTy1eOH/ehZVKxk5q+Vw5ly395oZrVr2z
ctv2lqOP/lU2V8rmCkOHjWhvDxYyiuNYEIX97oZr7rnrZoqODxk04vnnl5lJ
Y+SJx/71sy9S6ey4cae8unRRuahHY4nq7sdIfNaRN90447iH3viCcZzAt+vH
DumVS+tX3nzbrQ+94FZ7ybvz8otebsVfsMIATdNisZhpmhB8ffDBB1OmTOne
vWeXzj2OPnwEE9/64L233ffIax3xJMdsu/XmeefPuyNCO8WCyJKbX1vx7kuv
vLdo4eP++cc9+U5ECkMgEP8yu3c6x9NvT3/0tVEL3xq36J2zF68+57GVo5b8
/ZwHl4189NVzn1q2YNqc0aYtu9GWK41cPp1satxx4gnH70zfUXEvWJ4+Y/In
n34ACjvyyBNYTsgXC8OPPGbLlm0CHR82sHeXKqwGw0r5VFt70xlnjPn97Xd1
7d5t8NBBkiK/+fbKHj3qqqqwZa88GwiGDjx4lCrnvl3xSD+QTd0Bdzzz3oRf
n/Lu04+V8snmSOzwUybgXNa9WM0dSCyzlvwLVhjskn9dGKxDFLZp06azzjor
Go0TCdrQVVUK/+Uvi04fPTtB2qkMdfKpw1969a+M4OBEq6aGGEahSH31O296
VbWRwpDCEIh9i92lsPPnn/T4Sxc9//achSsnLFo56Yk3Jj69asYTb5y78O0z
F6486+GXJ7+86qbZl5xZgUjKTTBlubnlK+V0yuzbp9fvb709bbs6eeON5fX1
XVhGTGdTfm5eUdJy3nT5Si6XUuW8pfsZfeE5TUtxc3dU/BS+RehDJk8av+aj
97K2O4Ox6M1IzLLBaWce/9f1m22IImTRSWnpVBI6SMV2Zyd41zRDWJgrOsVf
cIIp2Mm2tjaQF0VR8XhckqSxY8fedNNNPMvFoh2iGP92/doD+h7S2BhuCmwZ
MnzgRx9+zTJ2ggxpFsPQQjgYf/ml59GlzUhhCMQ+yO65tNlJX3r1xEeeuWLx
0osXvTbn8VfnPPji+U+8dumjr1zw+LKpSz68/NEX5z60+OrzZo6DLcFfmazk
zuawXRPlsuljjhxZX9tQDfFVFWaZafcqLU9JvCBVfkgp7+WVcucRVorFTEFV
VZBSvmzkCyX3CuZy0s4o/yidUq4MGnDQG8vf8i5aLvoXSvuxHvxTkO2KeyU1
xIFuJuGyU9BN5RecYMq27Ww229LSkkqlEokEKAzH8QvmzOrepa5Pj64tgXaK
oZe99FJDXT1WUzv/2utFRkiZVjBB4AKvCLwhcC+/8CyaVI8UhkDsg+wmhRXG
Txw7e/742ZedMnfBKbOuPH3KRb+efcXZ5192xrjzDp51+YkXXD5m3pUzL79i
gSqn/XS7aSvpeKmAfekkTfuHXUomTbcACqiq7NZJsTJJuBHiJzdflW2Vcmm/
qyiU5YKjlL0s9xUHojbb2ZW5N2/bTs59IvdkFzgzrzt51r2ArJgtehcyu/1N
pchbml5MeXb7JedIBG2RJAn+isVinDc1EWIxjqV5muA5hmQFTTfZRIiMRxK8
JiXzDBE3ZD7OSASvCgxpiPRTixfu+Xein92y6Be/cUeVK/bs+acsfuWqp167
4Knl0xcvn7F4+cyFy2e7y4oZC1f4t+y5ZeZTr7vL4hXTYFnoPvVM73lnPPn6
+U8snfLsW9PgC9v0WeORwhCIvchuSjDlZ0ksZEtiyVGLjm0X9aI7fd4uOVre
kUsQMRVzqeROxRTSO0tZZlJuXsSd6XnBJeVS2Q2UirtyRhUz+aR7FXLJyzOV
9TIxemkS3Sd1H9zNxJhMF2DFdiM7N1Ir50pOpeCUUylTc/NzuE9kORW15NVY
yfvpfzNZpwR/lrNudsSSm7Gq/Is9F/bPAH/BT5YTuF2FL2legkXgWb8IJkTB
sE5TxL+larP7PshkIDD3Xm6X4qw5E+dcPGHW3HGzLho966Kx/+/y32/ZQ8vo
//JcE8876Yprp0ycPnLmheOuvOrSVCrjXZmB/IVA7AV2l8K832VvpC7nOai4
K89hwVu8mQA/FJ4EI2UKII5ixbbzxs6s8q5/Cnm3kJibWN4dAvRKqBR3Rmru
EKIbYZUc7wFzVjab31UfDHSZyqo7KzxXCmlLdGfQlXO5fKVU2nkZmpvUd2ed
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
phIfr3ltePe+4448BVQSJrgYnWKkPCtKuiVqBsuQO9jgX6+4aEK/Q8fc/9yn
pKgQwUalcfOg2oZOg0Zu46CnbsqK27dsbobeEavGOtfXdqsZVlczbO22zVE+
fMF5U8AnC594Et6TGoQegbavP3oFzDF28vwO2elQTMG2OwIRiIZS2YooMGtX
PQWWmThz3raYxvBawdSTVOut183Hqrsu/ejzuBTeuP7LEd2OHnnQuE0RQnWc
IBFSVD6ZMiAKE0RGYTqW3L8AIkqsUxes/6FYTVVVFdalS9WVV10SxyPN27f0
74Rdd/GFWjbTFHf56P1PMeyAu+9+LEk2Thl7JNap6/0vrDYtx+D0wOava6vd
GRsXXH1TUhSMWIuTp1Yvf7amYcgpk67gy8737e1lO1kU6buuvxiM8NhLoK3i
zVfO6V+LPf3MizFOSNCNFBXsUXNY/36jPmtqp5xCVLMIWlGirB6N0yTEoJSe
TVGRJodY986Tt2B1B13x0DKbCk4/aRiGddkWSEiRxqmjjjlx1OiWcPT5B38L
8d1lt/0xKGbVBDn+5F9j9T02xchAsLl/9841WKebbry1UEi2tm8pFAoCTbz/
yqK+tdiosWfH1TybckI4q3N48/frqmtqqxu6d+7WE6uqxWp7UBTl8G03zJ2E
dep97f3P13XvO3z44Y1bOhiKtpJtzS0f9+rae8KYC/CgmTRyejKy8p1n4fvB
9Tc8HIiKZqqMpnMgfg5IYYg9ASvgMXYzRW7vjdX9auCxoLAIxRBckRaKrKgw
fCya2JZKRnLStpuvuRirOgirP3J7S3s5pfzlT/d0xaoPHzVxM8HkbOLZR29e
s+YTzSrQNNnU2NpQPeiIEWfQutwab5p2zliIwk495eT21jZQmJO2Pnz9yfpO
2JlTLgkpTiMpsMkkz0oCLfGKBeED0/bdaUceCCr84yN/phmBIxNfvL+yzg0Z
um/tiHN6bOPGv/evG3bqsdM2h8l2iccFmqQTOEMkaFxSeI0LL3v4+j4YtuDW
O1uFpKApH374Jlisc5eaL79ZG40ERw4bCvvz+DNPy7lcAidnTp+LVfV7evHL
emL71LHHYA29jhp93rpv2jTO3L7+74P6dpk4czYu6IbAff3xex+/u1xgEwcO
GAJ9+BU3/4HRTYkivnx/NfirZ98+G1oiUUr4zcVTQGHdu/VuiyYIpu3PT97f
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
       "], {{0, 0}, {577, 385}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 577}, {0, 385}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.4116533139111435, 0.}, {4.35360524399126, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6789999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                9858.206250000001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.72770487231088, 
               89.5144845316672}, {-12.426847522088146`, 38.74689437998488}}],
             StatusArea[#, 9858.206250000001]& ,
             TagBoxNote->"9858.206250000001"],
            StyleBox["9858.206250000001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9858.206250000001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                4929.103125000001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{91.8574453664967, 118.64422502585302`}, {
               12.910023428948367`, 38.74689437998488}}],
             StatusArea[#, 4929.103125000001]& ,
             TagBoxNote->"4929.103125000001"],
            StyleBox["4929.103125000001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4929.103125000001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                16430.34375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.98718586068252`, 
               147.77396552003881`}, {-46.20934212347015, 38.74689437998488}}],
             StatusArea[#, 16430.34375]& ,
             TagBoxNote->"16430.34375"],
            StyleBox["16430.34375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16430.34375, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.4116533139111435, 0.}, {4.430862345229425, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{3.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {3.4512017479970867`, 
                0.}]}], {{}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.4116533139111435, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.7400801257315083`*^9, 3.740080137976597*^9}, 
   3.740080216592903*^9, 3.7400802683875446`*^9, {3.740080345730857*^9, 
   3.74008034779074*^9}, 3.74008038285362*^9, 3.740080627245714*^9, 
   3.740080673833147*^9, 3.740081404337924*^9, {3.7400816621136003`*^9, 
   3.740081728799054*^9}, 3.7400819047414465`*^9, {3.740095179397406*^9, 
   3.7400951947721977`*^9}},
 CellLabel->
  "Out[185]=",ExpressionUUID->"9b01f4b3-c541-485a-802f-116d25c7fc0a"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{822, 781},
WindowMargins->{{-5, Automatic}, {Automatic, 4}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 405, 8, 28, "Input",ExpressionUUID->"cb8286a2-8840-4446-b2a5-abe7799d0399"],
Cell[966, 30, 175564, 3329, 1032, "Input",ExpressionUUID->"63b8e25f-7356-46e3-b236-39a553e32113"],
Cell[176533, 3361, 680, 16, 48, "Input",ExpressionUUID->"61de63bb-f346-4bd1-be19-65a28ef8bd9b"],
Cell[177216, 3379, 94942, 1919, 84, "Input",ExpressionUUID->"d426838d-573e-445d-b4f2-35b03a471d6d"],
Cell[272161, 5300, 388, 8, 28, "Input",ExpressionUUID->"63104c4d-cdec-4ce8-ac2a-23805560cf83"],
Cell[272552, 5310, 97691, 1973, 84, "Input",ExpressionUUID->"8f82f178-76db-492f-b6ac-e5def2ff7ba7"],
Cell[370246, 7285, 437, 9, 28, "Input",ExpressionUUID->"d21d311a-fa60-4ce6-acd6-40509e86fea0"],
Cell[370686, 7296, 99098, 2001, 84, "Input",ExpressionUUID->"0ebd5bb8-c1af-4c2b-b217-bbe287163a60"],
Cell[469787, 9299, 441, 9, 28, "Input",ExpressionUUID->"585257b9-8351-42eb-b74e-ec2c5b3a6bfb"],
Cell[470231, 9310, 101786, 2055, 84, "Input",ExpressionUUID->"d20ab0e2-ed0a-4d86-bbd4-0344fbdf9e72"],
Cell[572020, 11367, 488, 10, 28, "Input",ExpressionUUID->"5985fdff-1e24-4b06-acc1-22d7334a39b5"],
Cell[572511, 11379, 104452, 2110, 84, "Input",ExpressionUUID->"808013a5-7175-49c5-bc56-f5ccf812903a"],
Cell[676966, 13491, 489, 10, 28, "Input",ExpressionUUID->"71714920-5cfd-42e4-bb4b-f7d40221c53c"],
Cell[677458, 13503, 107092, 2162, 84, "Input",ExpressionUUID->"024694a1-a2a0-4db3-8717-961ce77bb6dc"],
Cell[784553, 15667, 494, 10, 28, "Input",ExpressionUUID->"3c87d700-803c-4c81-acdc-4c8acb256078"],
Cell[785050, 15679, 109761, 2216, 84, "Input",ExpressionUUID->"26b73a4b-6edb-4a4d-8f20-5800b9b6c622"],
Cell[894814, 17897, 442, 9, 28, "Input",ExpressionUUID->"cef161da-39fd-4485-86b8-7845df1f07cb"],
Cell[895259, 17908, 112334, 2265, 84, "Input",ExpressionUUID->"4bad8638-2128-4541-b539-774cc9e7f9f6"],
Cell[1007596, 20175, 488, 10, 28, "Input",ExpressionUUID->"ef0458aa-31c5-4ebb-b079-3659a26333ea"],
Cell[1008087, 20187, 115072, 2320, 84, "Input",ExpressionUUID->"3d15a193-84ee-4a19-abc3-0602a0f7d2c8"],
Cell[1123162, 22509, 440, 9, 28, "Input",ExpressionUUID->"4026c716-cb33-4cf1-bbf7-e447d5e7e207"],
Cell[1123605, 22520, 117720, 2375, 84, "Input",ExpressionUUID->"a58c5dd0-2fb7-40b3-b5fc-33e39d9eb80c"],
Cell[1241328, 24897, 438, 9, 28, "Input",ExpressionUUID->"fad25924-67aa-45a5-8acc-300def0a160f"],
Cell[1241769, 24908, 120354, 2426, 84, "Input",ExpressionUUID->"cc0fd74d-9fb6-4ab9-9783-582bc4ec85ae"],
Cell[1362126, 27336, 464, 9, 28, "Input",ExpressionUUID->"7d6b3340-aa00-4689-9ca8-2cf52cfb9a59"],
Cell[1362593, 27347, 122969, 2478, 84, "Input",ExpressionUUID->"3e23f4f5-492a-4936-af2f-856a3d28e07a"],
Cell[1485565, 29827, 441, 9, 28, "Input",ExpressionUUID->"130e9531-b97f-4774-b31f-27afc9223c59"],
Cell[1486009, 29838, 125652, 2532, 84, "Input",ExpressionUUID->"3efee658-6e8b-4a3e-b2c3-4e14fd93b514"],
Cell[1611664, 32372, 690, 12, 28, "Input",ExpressionUUID->"a7853ad9-ced4-4b0d-b8a8-a12b53ce11eb"],
Cell[1612357, 32386, 128303, 2458, 908, "Input",ExpressionUUID->"79e09fda-6e27-4eea-b0ef-49051fb2f057"],
Cell[1740663, 34846, 404, 9, 28, "Input",ExpressionUUID->"3635ed9d-90c6-450b-8ea7-eaabfcbf54b4"],
Cell[1741070, 34857, 591, 14, 28, "Input",ExpressionUUID->"e85c3804-5308-4667-9d6f-d56b7fe4929a"],
Cell[1741664, 34873, 156, 3, 28, InheritFromParent,ExpressionUUID->"6426a8c2-e446-467e-96dc-9dc5f283ff60"],
Cell[CellGroupData[{
Cell[1741845, 34880, 309, 6, 28, "Input",ExpressionUUID->"54b9e02e-4a2a-4457-a150-0d1debbe907b"],
Cell[1742157, 34888, 244, 3, 32, "Output",ExpressionUUID->"9cb85ade-1de4-4411-a33b-e3860a3ea32b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1742438, 34896, 275, 5, 48, "Input",ExpressionUUID->"e070dd6a-371c-40c5-a4f5-fdce87c091d9"],
Cell[1742716, 34903, 184, 3, 32, "Output",ExpressionUUID->"0a57aa74-1e3a-4646-9d98-a0587a811030"],
Cell[1742903, 34908, 184, 3, 32, "Output",ExpressionUUID->"55c2569a-c7ec-4fcb-9f93-316cade921da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1743124, 34916, 312, 7, 28, "Input",ExpressionUUID->"2543a9e4-02ab-41d1-a8bc-33ff30a21a79"],
Cell[1743439, 34925, 8025, 208, 142, "Output",ExpressionUUID->"4e6020f8-d57f-4c76-86af-aa49081ebf48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1751501, 35138, 308, 7, 28, "Input",ExpressionUUID->"50c6b4aa-a51d-4c1e-b14b-0c8263194d44"],
Cell[1751812, 35147, 8367, 215, 140, "Output",ExpressionUUID->"09bb7db9-e46a-48b0-8443-eec57e055e69"]
}, Open  ]],
Cell[1760194, 35365, 682, 17, 28, "Input",ExpressionUUID->"c619a705-fbce-4a1b-92b0-efc5a82c196c"],
Cell[CellGroupData[{
Cell[1760901, 35386, 362, 8, 28, "Input",ExpressionUUID->"0482bcae-c1a5-4dc6-9e1e-575f9e3ada79"],
Cell[1761266, 35396, 222, 4, 32, "Output",ExpressionUUID->"5bcd7c45-f7c2-40a9-955f-404844bb0380"]
}, Open  ]],
Cell[1761503, 35403, 1412, 31, 86, "Input",ExpressionUUID->"e36ddc51-ff0a-4a57-be3a-8090dfdf0efe"],
Cell[1762918, 35436, 595, 13, 28, "Input",ExpressionUUID->"6094b7ad-5beb-474a-8c95-3c7cea3e30bd"],
Cell[CellGroupData[{
Cell[1763538, 35453, 273, 5, 28, "Input",ExpressionUUID->"ba54f65f-9acb-46a2-a481-ff22b53d76e5"],
Cell[1763814, 35460, 2853, 75, 264, "Output",ExpressionUUID->"26cef51a-de5a-4cad-96b4-fdf3f48503da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1766704, 35540, 863, 14, 48, "Input",ExpressionUUID->"c2c6c75e-a14f-4858-98cb-ce736e067e86"],
Cell[1767570, 35556, 72641, 1372, 88, "Output",ExpressionUUID->"98c87a68-b03f-42b4-baab-19f8210473a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1840248, 36933, 392, 7, 28, "Input",ExpressionUUID->"689c0b34-7992-4c36-9d19-5c29e53b3225"],
Cell[1840643, 36942, 221, 3, 32, "Output",ExpressionUUID->"aac6240c-80db-4572-9173-7594190152d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1840901, 36950, 342, 5, 28, "Input",ExpressionUUID->"2aed812a-ad0f-48a6-831a-7c3bb30205c3"],
Cell[1841246, 36957, 72593, 1371, 88, "Output",ExpressionUUID->"9331a828-c89b-4c5b-84c2-c7564c2388fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1913876, 38333, 684, 16, 67, "Input",ExpressionUUID->"29507aea-3559-46b0-a1d9-bef1b68fe4ef"],
Cell[1914563, 38351, 782, 16, 52, "Output",ExpressionUUID->"a122fc04-41a9-46f7-86b2-6d5d13a2f1c3"],
Cell[1915348, 38369, 686, 16, 32, "Output",ExpressionUUID->"c1c5bbf8-64ad-4765-a670-1b389c17fd87"],
Cell[1916037, 38387, 152485, 2569, 186, "Output",ExpressionUUID->"dd21c3a3-c858-4c5c-bdc5-3c9bf64a5654"]
}, Open  ]],
Cell[2068537, 40959, 439, 13, 28, "Input",ExpressionUUID->"d0d6445a-b983-49bc-9db8-9cec09cdd7b1"],
Cell[2068979, 40974, 1357, 31, 105, "Input",ExpressionUUID->"f3a6b269-a7b8-4af9-8980-3b99a24d3d97"],
Cell[2070339, 41007, 452, 6, 28, "Input",ExpressionUUID->"da5812a0-a58a-4254-9697-04099009fb91"],
Cell[2070794, 41015, 528, 12, 28, "Input",ExpressionUUID->"f0f2cb69-6f8c-4c4a-922d-c3cfac06724e"],
Cell[CellGroupData[{
Cell[2071347, 41031, 334, 6, 28, "Input",ExpressionUUID->"4d8df775-3aa9-4b6c-a8a9-59711ad1117d"],
Cell[2071684, 41039, 15619, 309, 72, "Output",ExpressionUUID->"84f05a6a-fbb6-4231-b157-fd5978c68d4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2087340, 41353, 234, 4, 28, "Input",ExpressionUUID->"7ef86afd-ba55-4784-93a1-2bc7679795ca"],
Cell[2087577, 41359, 468, 8, 32, "Output",ExpressionUUID->"40f4cd6b-91e0-40d7-95b6-3e3dff094f69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2088082, 41372, 366, 8, 28, "Input",ExpressionUUID->"56c1826c-6dd7-486f-81dc-7c97f73f8179"],
Cell[2088451, 41382, 2124, 49, 88, "Output",ExpressionUUID->"9f1df57d-e150-40b1-b1f0-b0a9de84dd9c"]
}, Open  ]],
Cell[2090590, 41434, 501, 11, 28, "Input",ExpressionUUID->"35d8576f-953d-45bd-82b7-8faa1f1c3346"],
Cell[CellGroupData[{
Cell[2091116, 41449, 1666, 35, 86, "Input",ExpressionUUID->"4184effd-d93c-4bea-bc9e-e5428f8d4f8c"],
Cell[2092785, 41486, 79331, 1519, 88, "Output",ExpressionUUID->"028d6e47-5cbb-491a-a0b7-8d4ec36ec34d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2172153, 43010, 593, 11, 48, "Input",ExpressionUUID->"6303fcf3-97ef-4841-a0d7-680ffa8b5408"],
Cell[2172749, 43023, 78099, 1491, 88, "Output",ExpressionUUID->"038557f3-a58d-43e3-aeb0-39dd4fe04e5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2250885, 44519, 299, 6, 28, "Input",ExpressionUUID->"bf7a9091-c01c-46fa-95b1-ed9773a6ee74"],
Cell[2251187, 44527, 274, 3, 32, "Output",ExpressionUUID->"5048743c-0cb2-496a-aaaf-ccfde83f1ff6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2251498, 44535, 342, 5, 28, "Input",ExpressionUUID->"4729ea9a-42be-40b9-bd2c-31e30c8bc4a3"],
Cell[2251843, 44542, 52765, 1057, 88, "Output",ExpressionUUID->"5326c492-8185-4d88-aac1-6b2fad3e52e4"]
}, Open  ]],
Cell[2304623, 45602, 299, 6, 28, "Input",ExpressionUUID->"49b2f2b5-2cc7-4e8b-a9bb-a8dfd68b628e"],
Cell[2304925, 45610, 485, 11, 28, "Input",ExpressionUUID->"49bd926e-e477-4501-9ee8-02d11ba4c5de"],
Cell[2305413, 45623, 393, 9, 28, "Input",ExpressionUUID->"51837a43-8ce2-4910-9a56-5d6d0f1b7978"],
Cell[2305809, 45634, 554, 14, 48, "Input",ExpressionUUID->"50fd8ecb-4d0c-44f4-9827-aa016da98f9b"],
Cell[CellGroupData[{
Cell[2306388, 45652, 1421, 35, 105, "Input",ExpressionUUID->"ae27f015-cbd9-4a75-a6c7-23aa89a9076b"],
Cell[2307812, 45689, 306892, 6547, 1382, "Output",ExpressionUUID->"2ff8e5e3-0dcf-4326-9976-39b4ddfa14f8"]
}, Open  ]],
Cell[2614719, 52239, 164, 3, 34, "Text",ExpressionUUID->"2cb57278-3539-4a65-926b-77f4f3d723a5"],
Cell[CellGroupData[{
Cell[2614908, 52246, 13273, 224, 75, "Input",ExpressionUUID->"9c8c5ca1-40d4-4869-91bc-ff28942d37bb"],
Cell[2628184, 52472, 637, 15, 32, "Output",ExpressionUUID->"d61bfa88-63d3-47ea-a609-a8a20c3f05e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2628858, 52492, 282, 6, 28, "Input",ExpressionUUID->"82155d8e-91e8-4a5b-9e7c-ab9c12a57afa"],
Cell[2629143, 52500, 24916, 662, 267, "Output",ExpressionUUID->"9ef80637-a0f5-4406-8e30-9732a40ed523"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2654096, 53167, 169, 3, 67, "Section",ExpressionUUID->"42f511f4-1745-461c-9169-84f343f00f56"],
Cell[2654268, 53172, 898, 21, 48, "Input",ExpressionUUID->"71818c6d-1b5f-4fd3-9659-cd5cb8f3aed7"],
Cell[CellGroupData[{
Cell[2655191, 53197, 731, 16, 28, "Input",ExpressionUUID->"ac55a669-cac2-4080-ad0b-9fa284db6b56"],
Cell[2655925, 53215, 233422, 4662, 1240, "Output",ExpressionUUID->"ce2adc9c-b2f6-43d5-afbc-ac10f15b9268"]
}, Open  ]],
Cell[2889362, 57880, 154, 3, 28, "Input",ExpressionUUID->"8b5e18e1-9372-469e-8702-f7abf0b611d3"],
Cell[CellGroupData[{
Cell[2889541, 57887, 140816, 2327, 60, "Input",ExpressionUUID->"2d989d1c-5515-4e43-9579-7c7695300414"],
Cell[3030360, 60216, 165621, 2948, 747, "Output",ExpressionUUID->"9b01f4b3-c541-485a-802f-116d25c7fc0a"]
}, Open  ]]
}, Open  ]]
}
]
*)

