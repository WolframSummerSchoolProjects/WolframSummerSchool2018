(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3179453,      64459]
NotebookOptionsPosition[   3168074,      64263]
NotebookOutlinePosition[   3168446,      64279]
CellTagsIndexPosition[   3168403,      64276]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"lenetModel", "=", 
  RowBox[{"NetModel", "[", 
   RowBox[{
   "\"\<LeNet Trained on MNIST Data\>\"", ",", 
    "\"\<UninitializedEvaluationNet\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739470862363715*^9, 3.7394708656421075`*^9}, {
  3.739471303203131*^9, 3.7394713615066433`*^9}, {3.739471396470501*^9, 
  3.739471400681695*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"dcec3747-edc5-4019-896d-e03e162d923c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 1, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {24, 24}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 20, 
                    "$InputSize" -> {24, 24}, "$OutputSize" -> {12, 12}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 20, "$GroupNumber" -> 1, 
                    "$InputSize" -> {12, 12}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 50, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {4, 4}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 800}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {800}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
                    "Biases" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 
                    10], 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"24\"", "\"24\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"24\"", "\"24\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"12\"", "\"12\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739471564154654*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"a58738c6-eab5-4320-8112-be557761c10d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lenetModelConstructionNotebook", "=", " ", 
  RowBox[{"NetModel", "[", 
   RowBox[{
   "\"\<LeNet Trained on MNIST Data\>\"", ",", 
    "\"\<ConstructionNotebook\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7394714265764775`*^9, 3.7394714321098394`*^9}, {
  3.739471585130535*^9, 3.7394716205180674`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"0ed7d521-01b5-41f3-96b8-5556756158b4"],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["ig3ix_shm", 3, 1]],40,
   "FrontEndObject[LinkObject[\"ig3ix_shm\", 3, 1]]","40","\"Untitled-1\""},
  "NotebookObjectUnsaved"]], "Output",
 CellChangeTimes->{3.7394716313900285`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"5573f78a-37ae-4921-a448-e01cba0c09be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lenetModelConstruction", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "500", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "1", "]"}]}], "\[IndentingNewLine]", "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", "100", ",", 
        RowBox[{"\"\<ColorSpace\>\"", "\[Rule]", "\"\<Grayscale\>\""}]}], 
       "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7394716898107433`*^9, 3.7394717827668743`*^9}, {
  3.7394718719071326`*^9, 3.7394718847859325`*^9}, {3.739481965895543*^9, 
  3.739481989465378*^9}, {3.7394822518291254`*^9, 3.7394823467676954`*^9}, {
  3.739483761112973*^9, 3.7394838091585517`*^9}, {3.7394839859192057`*^9, 
  3.7394840103353834`*^9}, {3.7394840660050507`*^9, 3.739484067654222*^9}, {
  3.739484373480154*^9, 3.739484384293268*^9}, {3.7394844386284957`*^9, 
  3.7394844402844934`*^9}, {3.7395668967057347`*^9, 3.7395669292376857`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"6179f547-abdf-43ba-8635-d4b9fe148553"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 1, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {96, 96}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 96, 96}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 96, 96}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 96, 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 96, 96}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 20, 
                    "$SpatialDimensions" -> {96, 96}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 96, 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 96, 96}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {96, 96}, 
                    "$OutputSize" -> {48, 48}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 96, 96}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 48, 48}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 20, 
                    "$GroupNumber" -> 1, "$InputSize" -> {48, 48}, 
                    "$OutputSize" -> {44, 44}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 48, 48}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 44, 44}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 44, 44}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 44, 44}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 44, 44}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {44, 44}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 44, 44}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 44, 44}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {44, 44}, 
                    "$OutputSize" -> {22, 22}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 44, 44}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 22, 22}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 24200}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 24200, 
                    "$InputDimensions" -> {50, 22, 22}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 22, 22}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 500}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"96\"", "\"96\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"96\"", "\"96\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"96\"", "\"96\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"48\"", "\"48\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"44\"", "\"44\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"44\"", "\"44\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"44\"", "\"44\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"22\"", "\"22\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739638685416049*^9, 3.7396387463101625`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"550e7511-f5a6-4360-9b4f-62073c14d464"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"resNet", "=", 
  RowBox[{"NetModel", "[", 
   RowBox[{
   "\"\<Dilated ResNet-22 Trained on Cityscapes Data\>\"", ",", 
    "\"\<UninitializedEvaluationNet\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396405916851406`*^9, 3.7396405928378096`*^9}, {
  3.7396408940872555`*^9, 3.7396410130742607`*^9}, {3.739641128403448*^9, 
  3.7396411327787266`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"406b5950-0236-4da4-822f-6850d3b6e419"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"input_0\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["84", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 1}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-77., 
                    4.7148901767173095`*^-15}, {-76., \
-8.061147045445209*^-14}}], 
                    
                    LineBox[{{-76., -8.061147045445209*^-14}, {-75., \
-1.6593783108562146`*^-13}}], 
                    
                    LineBox[{{-75., -1.6593783108562146`*^-13}, {-74., \
-1.5178820871037684`*^-13}}], 
                    
                    LineBox[{{-74., -1.5178820871037684`*^-13}, {-73., 
                    1.3236765325370588`*^-13}}], 
                    
                    LineBox[{{-73., 1.3236765325370588`*^-13}, {-72., 
                    9.849577038258688*^-13}}], 
                    
                    LineBox[{{-72., 9.849577038258688*^-13}, {-71., 
                    2.4059819430061117`*^-12}}], 
                    
                    LineBox[{{-71., 2.4059819430061117`*^-12}, {-70., 
                    4.409651225509637*^-12}}], 
                    
                    LineBox[{{-70., 4.409651225509637*^-12}, {-69., 
                    6.228579396715536*^-12}}], 
                    
                    LineBox[{{-69., 6.228579396715536*^-12}, {-68., 
                    1.3930801420015064`*^-11}}], 
                    
                    LineBox[{{-68., 
                    1.3930801420015064`*^-11}, {-67., -0.7418229381147897}}], 
                    LineBox[CompressedData["
1:eJxF0mtIk1EYB/A1a5Fi5BSrtWSrkQVqRJpK6MnRxYiNJ5OcXSy6SaGpUOqH
liSWWssvCyq/zLzUB7UwJ5av4qOUl5w6XeSaOHVbTLO81ERdFr3v2Yf9OS+H
H+flnD+HI72UlXSVz+PxItiPmz05ifoeYYCq8nXcxyatYXUVcD47KCvdXkJu
Fic/rloB3H/B1GA+Wk7+3pLLXYuAOec0ec3t1STr7vmZ2QXAzh310Yx/Pemq
qinR/gQ8tualgRE0Ev43kcg2BTiljlTmjjeTnfI2ncUOmLi+UOIf0EZ2M5qt
aivgW2W3FBUdRAilxb1mwBBJ/Wg6+UA+MYMjh02ARr+D4sC5LhIsmFjL9AMO
bE+4MqLoJcsRLRvDegBFp9sb9Wf7SMaBtMWnnYB6fZNv7ZZ+kis2vPvXCvgs
Vna9pWiABE76pF5sBuxz+A7adIPkSNG6L60NgLLRyBBhlJH4CYb2BtUB+qZU
qNpzjKT8ORfAO+rPwSv3jYRMa+OntYCVY1+pHTFl9pgyQIvBSv2whAug9ISd
OsJcGG4uBMxXOalNoerhUDWg1fWdOj+PC2CyZJZa3J3DDnY/yzx1R3AGOwCz
Zb+paZ9Utk/NMnU81+cU4Azf7e2jBJy0eFzK1UkEPBP+x9tHDpji9qwPc33i
2PMS3N4+0YA2nxVvn32AmYeWvH3CAAuWXNTXuOwCDNrzi/ry5jcFVgkgEz5H
venRk3uvtgHy035QZ9INAJ3vpz3ntUSRMCHgjQTP/UTmLrid/oAal4O6wnVc
59oAqDDZqLnfkwSAdWMT1A9ih17wfABrA8epPe+ZfX+3x6j/A5Apebk=
                    "]], 
                    
                    LineBox[{{-67., -0.7418229381147897}, {-66., \
-0.7418229383503916}}], 
                    
                    LineBox[{{-66., -0.7418229383503916}, {-65., \
-0.7418229384129762}}], 
                    
                    LineBox[{{-65., -0.7418229384129762}, {-64., \
-0.7418229382746621}}], 
                    
                    LineBox[{{-64., -0.7418229382746621}, {-63., \
-0.7418229379182254}}], 
                    
                    LineBox[{{-63., -0.7418229379182254}, {-62., \
-0.2010036163385782}}], 
                    
                    LineBox[{{-64., 0.25817706330220286`}, {-63., 
                    0.25817706299152504`}}], 
                    
                    LineBox[{{-63., 
                    0.25817706299152504`}, {-62., -0.2010036163385782}}], 
                    
                    LineBox[{{-62., -0.2010036163385782}, {-61., \
-0.20100361633320654`}}], 
                    
                    LineBox[{{-61., -0.20100361633320654`}, {-60., \
-0.7806722857010547}}], 
                    LineBox[CompressedData["
1:eJxNk31MU1cYh4uljSJu0ozhRyVSnQ0LrG7MwAp6JKhhuedccCI4K45B2JDq
RkHlY210QKkWwmTTSItDspS0umywdZuu093Xsq7WsjqcscQAQ4qyqSsDXYao
0/bsj/aX3Jw8yc3Jkyc5CcXvv1E6h8fjrQ98wZPuIAu1X2U1q20urjrq77jp
WhbeNCyR8GVO7pjeHZtYxYJuXrtlPO8nbvvBjx+YlCw8jjgXn5B0gbPf2dBX
WsLCB4IF81S7fuAG+scqldtZOBI3ad06bOWaVuye+10uC3V7M9Sj75q50cnR
ho2bWBhX/pYhKNdxv7+ceXNxOgvfyFXrxq8bkPbPlqQUGQsbZrUTj6p70YoU
59unVrJwnO9N8LnPImf1Kla4hIV/ch0X1SJAFWdOT73+LAuflucu7crsQ+Lp
LXhvJAt2T8shxT0H8kglO7UPCJRp6hb2SC8i3bZYqcZPQL9/sdU44kJZjclm
hY9Akm1XRfwiNxJ+Xj6yfJAAzlZmy6+6UUpwVgLLHqWm+0X9SHNFqrliJiCc
n0XZqRI7VScIzM0glEUxgbURkHyUT3lHr0DRqyWwJfItyqacWVNOHYHOjnco
T/oDe4/Ak7w9lOWtvrTWEgK1q6soNyYP1idvIxD9Ug1l6pNCgO1opKwO+kgJ
7OzXhXzEBKT/HaYcQ0fAtLo55CMgcK2kOeQzi+HH4/qQjx8H7jtEOS3o48Pw
dUQT5Yagz2Dg/9T6kI8VwwG9KuRjxjB0SRnWB8P5ZaVhfTDENxSG9cEw52Fe
WB8MZVomrA+GXEkm5ddoHwy2gTWU62kfDJZPEim/SoUw+GyP5UEuSmj33JBi
uM9bJFvjcaOCL4aje8QYHHH186N4bvScl+83xmBQPEn/dbfFhQydUZXdQgy9
ZzZqCp1OdJM/3e55yIBz/UnR0A4HmhHaip+fYqDLmH3kjzI7umouvqy+xUCV
vuGuwHse1dy6MxIxxEDSh7GH813fojH71rbuAQYuvdJ6V7v5FLJNqBRtDgaS
aySFBfJ9yCazGNbaGDB62ZwBw2fcmHGGOd3DQEvXC8UTaVZOllhS6e1m4Ox+
y/f5Fec40/WJaMcJBl78N66go9bOZfY0La06ysCX/JGTfUU/c5Fm1HmjhYHb
RatSTX+5OP8F0bGFTQwMPzMlXrv8F+7/986AbsG6za0zl7mn45PyHg==
                    "]], 
                    
                    LineBox[{{-60., -0.7806722857010547}, {-59., \
-0.7806722859561538}}], 
                    
                    LineBox[{{-59., -0.7806722859561538}, {-58., \
-0.7806722860263129}}], 
                    
                    LineBox[{{-58., -0.7806722860263129}, {-57., \
-0.7806722859334593}}], 
                    
                    LineBox[{{-57., -0.7806722859334593}, {-56., \
-0.7806722856558502}}], 
                    
                    LineBox[{{-56., -0.7806722856558502}, {-55., \
-0.24977282492555394`}}], 
                    
                    LineBox[{{-55., -0.24977282492555394`}, {-54., \
-0.24977282492643507`}}], 
                    
                    LineBox[{{-54., -0.24977282492643507`}, {-53., 
                    0.15785261895813432`}}], 
                    
                    LineBox[{{-54., -0.24977282492643507`}, {-53., \
-0.8421473824809421}}], 
                    
                    LineBox[{{-53., -0.8421473824809421}, {-52., \
-0.842147382712039}}], 
                    
                    LineBox[{{-52., -0.842147382712039}, {-51., \
-0.8421473828019654}}], 
                    
                    LineBox[{{-51., -0.8421473828019654}, {-50., \
-0.8421473827644488}}], 
                    
                    LineBox[{{-50., -0.8421473827644488}, {-49., \
-0.8421473824822355}}], 
                    
                    LineBox[{{-49., -0.8421473824822355}, {-48., \
-0.2963958483237518}}], 
                    LineBox[CompressedData["
1:eJxN0lFIU1EYB/BZGFIRmjAKjMqHTMhRZlkLVjGD852HVntpuBTcVmQuL2YD
zWZl2cuGIIkQC6GxJlHJxEEiS/9GpA9KpRnaS5S9CMMSkmJGtfPdh+3jXC4/
uJf7P/97drs0+4V1BoPBlL7UneeWhG8gZ/ROxevjq8GaxN9WibnuDexgz+1+
Z7NE8vcm9iujd9zolRhbLGA/KNyxcb9Hguzb2PkB9YJEV9VOdql/psRvlwiM
7GF/Wfr4JyYkTsZNbPP7RwarRWLwQCW74qAaiU/lJ9jt6ddnSiQ+rAn2ZFPR
RFORxPC7M+zCAjUSnYPn2Odjuc5YroS5r4b92JaK2FKEhV4X+8eyGoIrdJF9
pGsxvQizT+vZd8vmO8rmCabJBjbHGSJcbWlkt6k8/YTPWzT2G5XnIWHYp2Xy
dBPWnumuVnk6CdG4lslznZAI6v6u4jQSLIe0TB43Ye+A/r0OlcdB8P+6ktUP
ITx3mX2D+yFUn67P6ocQiuv728r9EDx5braT+yEMUS07yv0IBFocWf0IJHvO
so9yPwKzfZTVj4C1V/8/01NqBMxth/U+TLX/EuMC4eJ97F3G0vW2FwKeumL2
gtrQc4GbldvZK9ca2h0RgZVIPvtS8uvq25DA6JM8tmXpfnoJfDuln0+fejwo
4G5NvVTe3By25twTOFb1k62fZwFvdJn9HwF1Zmo=
                    "]], 
                    
                    LineBox[{{-49., 
                    0.15785261892351643`}, {-48., -0.2963958483237518}}], 
                    
                    LineBox[{{-48., -0.2963958483237518}, {-47., \
-0.2963958483244056}}], 
                    
                    LineBox[{{-47., -0.2963958483244056}, {-46., \
-0.8730830244287632}}], 
                    LineBox[CompressedData["
1:eJxNk21MU1cch+sCDLWUlUURYRHdBiZYgSETRvQgnHMuMhgry2RaNhxVXMLL
1immvuAYULcxbLYMB9EqEBA3p6MrNhaonj/GFqxYWdmHTpZsjOiGQ17ChyoU
WTn9QH/Jyc3z5Z4nz81dX/hx7v7nRCJRqucsPvkqBRjItmdGPXEw15nYyekj
ApzOfV4t1f/K6gduf7rxoADWrBPl8tRB9lu9vba1WIAuddHJAfld1jWzbatS
KYA+Letm09BtljYWqj6wR4BDrivnIwKsTFWen61/W4CAhq/D08d6GW5ceW0b
FeBWmk0VNdvNzPJXjcEpAqyRlT8Oq/6FOVt+FKJiBfC7WvBDlfEcW8j9Kb7p
FQEsdbg2o7gMxUTKP38WJkBI3cZpTUczUiw/+zoOFsA+mf/A8NkVdErylfwT
PwFE3c2GczFXkTU23FH1lMIucbEp+KwJiUrlpmMTFB6WBdXESswo1Rrjpxil
YBj5YtV8zQ2kSblkjHRS6N53v0S9wNCWBM86KdgehVsGtwOqcERXOC5S2NQT
xblfFdGn0lGY+SaOc4jUs28prCtJ5qzQ+yv0GgodWTs4X8iZbcs5SqHttQzO
UxOelVFwv/QW52TtaJJW6blf8g7napmzSvYehT/88jgn8FEo1BUs+URTaDB/
yLlv0SeCwq1I5ZKPlMJ//V7es+jjTyHQqFzymSWw7kEh5wk+Apt3e9+XtOgz
SiBRWrDk4/RwUD5nbx8C3y3P4XyC9yGw4kmmTx8CtQuU84u8D4EXItM55/M+
BHS7kU8fAnGXUzhP8j4EbKFJPn0IlOi2+PQhsOqNeJ8+BFwXvd/H/abN/Gc0
gTWB84/2zjNky2u3tEcQGHo5LKjp+A3UuKsv+0spgbWtLVOKuR5UlCF7tyaA
wLjm+9MNR0xoq8w5fGYOw84B15zc1YkC/ftH7kxhKBmvFVaPXUb377mLQh9i
6JQ8SxBbmpD+1OHiimEMlZsqxko/UCDN9sTJ+UEMx0u1phZZM5vWuv8RWzCI
WVKyfb+B9ealxTu7MBx4/LcqJcTMZhoD7hR0YPj3rw3pYu1NVpW709h6AcOG
83E9hl4rO1izYqpVh6Hw57XrpW02Zt2ceWxvPYZL0pFD0Yl2ppYH5v1eh8E9
umP4aPcgqxvH1ZKTGNo/WjZzPd7BvP87hqHVHcverxxi/wMeawBk
                    "]], 
                    
                    LineBox[{{-46., -0.8730830244287632}, {-45., \
-0.8730830246720246}}], 
                    
                    LineBox[{{-45., -0.8730830246720246}, {-44., \
-0.8730830245986967}}], 
                    
                    LineBox[{{-44., -0.8730830245986967}, {-43., \
-0.8730830246212493}}], 
                    
                    LineBox[{{-43., -0.8730830246212493}, {-42., \
-0.8730830244088824}}], 
                    
                    LineBox[{{-42., -0.8730830244088824}, {-41., \
-0.30470967449614966`}}], 
                    
                    LineBox[{{-41., -0.30470967449614966`}, {-40., \
-0.30470967452788256`}}], 
                    
                    LineBox[{{-40., -0.30470967452788256`}, {-39., \
-0.8586518327892894}}], 
                    LineBox[CompressedData["
1:eJxF0l9IU1EcwHGtFHI+aP6lLF2FsmAqU6kVefScEUazWWBc0LI5jUrZXFk0
cbk2zUZhhdAfMh/GVkEwZj4MTbo/97CV+a+pOEcYOhPMNDWUWoXtnj3sx7lc
PnC553sPl1+pOl29JSwsLDNwcffgSGB8xB5+VjfGzuYXd6/8JrDh/bp0Pt3N
FpQXGPb9JBD5+sRunmmU3clMqZ4sEuDp3Kn2+SG2VpSskfkIzOVo75pzB9gj
i387i7wEnqkfa6eFTrZF3zpjGCWQJeZvVLn72eO/7AXhTgIoIe+bStLLGqVt
fdBLwPsxct162MZKmqJKHVYCNmZalLLnETtYHC8uMRNY6xlY/TRkRNm6f1GO
pwTmk/mXO+YtSJXoHEi6T6B++/BkrqUL3Y5R3jjVTCB/WJ2ulNmRRrkep9IQ
GPP+SfOvvkXHssuf1ykJiLJqXZ57LFouNcWfURCwVs9ER8T0o7ovLk0qQ+DV
5CbPNdGPcnO4IbC39YD8TZIDad0ZgUXAIM2jfq9OcalTCGwrRtQ7YrkhYLlT
RF1uiyizRRCo3Cyhtsj8ZpkfQ2EXQ72yzA2Go50V1OI236E2HwbGWU1tEHr0
Qg+GdkENNc3pxtBzUkPdyPW8xPAgQUvt4no6MBStNYV6HmL4PHeLuozracEg
XdKHehowdPAM1D+4HCWGD0gf6lFgGDfqQj0MhncLwf2GBgMjxdBc0UDtzDy3
2VeI4UXjdeq0RMFW2UEMJvcV6ik99wIMGrkq+P31NTeZ/RgyBLXUF7/Pro/s
wmATXKJGC+35C3EYYhUXqK8FHjdHB/onFNS8qyYSHolBrpNTB/9nDLKq4Hn+
B0lNYNY=
                    "]], 
                    
                    LineBox[{{-39., -0.8586518327892894}, {-38., \
-0.858651833059381}}], 
                    
                    LineBox[{{-38., -0.858651833059381}, {-37., \
-0.8586518331489947}}], 
                    
                    LineBox[{{-37., -0.8586518331489947}, {-36., \
-0.8586518330363737}}], 
                    
                    LineBox[{{-36., -0.8586518330363737}, {-35., \
-0.8586518327933398}}], 
                    
                    LineBox[{{-35., -0.8586518327933398}, {-34., \
-0.2673317481479792}}], 
                    
                    LineBox[{{-36., 0.14134816889307664`}, {-35., 
                    0.1413481686459214}}], 
                    
                    LineBox[{{-35., 
                    0.1413481686459214}, {-34., -0.2673317481479792}}], 
                    
                    LineBox[{{-34., -0.2673317481479792}, {-33., \
-0.26733174815286787`}}], 
                    
                    LineBox[{{-33., -0.26733174815286787`}, {-32., \
-0.7983224263919035}}], 
                    LineBox[CompressedData["
1:eJxN031MU1cYx3EcwpgU37ZFAXOZEDuK4OaaOdh9OZeJTCSmBiUBNRvggMSX
IQUMzGR2iA42MFF8SZwKNCA1osEoEIqX8xNYW16qbjMTkTknukzRtDhkhS1k
5fBH++Q5Ofkm549PbnKXZ+WlZL/m4+Mju8/MzcYgY9j5+7mJ0J9o+bi421Ei
44VG+Quf36KDH/jmcgUytOTYmZSYAeow65yVu2QcXk7SjbU2aq+MCOB3yHh8
u5trbu+hetPXlyO3yti08Z0X+4tBHwRljqRuknE85kJ5oLmNLlL6znetkyG3
lB5dc/YiVbV2uL782P1+ftKd2KIKandp721dJePZ5LSvMbmW6Nrii6YjZISk
2US/xCvElbAw/2CwDGfj6W8yNrcTW13NwNP5MoQ1HTljahDF7vh29VwZgz9f
WmgJ6SZXj85JbHlJMKBpkFYd+pHEqRv4vmGCYL7OqcmxElV6n7POQtDpb1S3
KzYSE5WfLTQTXK9sfHj/+16Sw4ag+L2b3LHbvWSyXjdVryM4tGWIddVI7JGR
WIKm8iesw9kQjPY7WLdmBLqXQOImWW+oGU+qGZdw4cCcsJl+8NvMSIhxBrDO
X2Z1rwRb3gLWftua3Svhq+m3WM96JKx1hrN2MY+EJfVq1keYR8LzQg3rCOaR
gKyVYR6PhOo90ayTmUdE9oloL4+Ij4Zm3+uZR0SAEMXan3lE3DO/6+URMdQS
Gub5PiLe2LfEyyNiKnOxl0fE5RKVl0cEp/ixTmIeASnR05zHIyDR+orzeARM
VT3nPB4Bew2PWOcyj4BBbSfrFZ9kpHXoBHy4LCqy6EQv4dP2+4txAtR7yhK4
xzZiMrXtHQ0XcF5tL6i6biU7tW+fsqgEXFs/t7WLs5AyV3XJzQkeKb9oAjvn
9ZC//9Eu9f2DR6lFLDhguEHMq1/pv+h3d4JhOMhHIb823K142cIj3J7pMi1u
JUlb7m+/VMuja6NcWJvfRLabRkoXVfB4quQGBd+pJofjDa//qeeRd7Lp0/qx
KmoJu/Is6jMeY/RMKm400pC1+6IfbuDhX/y+8T/9VVp28daAXxyPiaFQR0Wh
mfqmK/0/RPLYkWAL6NGDnkomGmMwD0W2lv2b1U3jD6Y+WariUf7ou12j8yx0
9ofn0aN5U6neaaP/Ax9l/J4=
                    "]], 
                    
                    LineBox[{{-32., -0.7983224263919035}, {-31., \
-0.7983224266330192}}], 
                    
                    LineBox[{{-31., -0.7983224266330192}, {-30., \
-0.7983224267245798}}], 
                    
                    LineBox[{{-30., -0.7983224267245798}, {-29., \
-0.7983224266516356}}], 
                    
                    LineBox[{{-29., -0.7983224266516356}, {-28., \
-0.7983224264294632}}], 
                    
                    LineBox[{{-28., -0.7983224264294632}, {-27., \
-0.19075247509165483`}}], 
                    
                    LineBox[{{-27., -0.19075247509165483`}, {-26., \
-0.19075247509300494`}}], 
                    
                    LineBox[{{-26., -0.19075247509300494`}, {-25., \
-0.7063960037694115}}], 
                    LineBox[CompressedData["
1:eJxN0n1Ik0EcB/AlzUQzV9qLYVIOM1K0TO+eG8T90ZuZJGiFb0WGSc2pZUKU
VGZhb75kxpaDNqGBWRpTpCLM55f5mjVtkfbixDLnnEKkUm0Oy+eef/xyx/GB
4/jecRuO5SYcd5NIJOHzU1jFKKBzzPdlpbKLf6t4stYyTSAr5lJFyPl2/n5d
b3+0lUD5Lm1WfWgrf+ZgRpTnAIEjLd3q2Llmfn+0altKBwH15pb0wPEmPixu
7ENwE4EKvfxUXcRDXqb9uDK7mkBbbrDpduJV/m8gdkTcIlA0YfiBXTo6+sXr
Yk4+gWb7M8mjtkba/y7RsCmNQHX6mCu9uIWqLKvPlu4hEJrpGkyaek07wltL
GyIJfJ1unFX5ddHvrxJsd9cRsCRrUrJre2irursYexAIv1frSG4w0cz6jSer
pjhQDuSr/NV91CRVlr8Y5MBqCnXNlrynTn2lQ9vBwc1Gx+MD283UVvCgRmHk
IKloqEBeY6aZLBzYcuxZJ96YqcMQ7zTEcwC7fzGXj3BlIxwHUco/zPIgIRzs
+OxifnrUa35wMFm5SCV4n35mr34GwxatlHnIIgSDz6QHc15A5+mATgzXb3gx
u6capalGDLo8b2axDwbrHRmzk/XB4Ld+OXMZ64PBsEI0qxOEQaMU94t9MNhD
fJhjWR8E1bHeC/ogeG72XNAHQSQsWdAHwTLfxczaKiEI4nr+sfuWHG6eO3cF
Qd+hWWYaluCuy0FwWS6+T4NUOABB2tZp5uHxfpcxBkFG4U/m3k/tE3qMQCOb
ZL5gDpkfCH5/szHbhe3+CApnRplXWXdec1uKAMWMMIv/GcEayzDzf8HYe20=

                    "]], 
                    
                    LineBox[{{-25., -0.7063960037694115}, {-24., \
-0.7063960040518097}}], 
                    
                    LineBox[{{-24., -0.7063960040518097}, {-23., \
-0.7063960047664878}}], 
                    
                    LineBox[{{-23., -0.7063960047664878}, {-22., \
-0.7063960048701561}}], 
                    
                    LineBox[{{-22., -0.7063960048701561}, {-21., \
-0.7063960043205655}}], 
                    
                    LineBox[{{-21., -0.7063960043205655}, {-20., \
-0.11330533905163398`}}], 
                    LineBox[{{-22., 0.29360399756429123`}, {-21., 
                    0.293603997393363}}], 
                    
                    LineBox[{{-21., 
                    0.293603997393363}, {-20., -0.11330533905163398`}}], 
                    
                    LineBox[{{-20., -0.11330533905163398`}, {-19., \
-0.11330533906116952`}}], 
                    
                    LineBox[{{-19., -0.11330533906116952`}, {-18., \
-0.6405839792703307}}], 
                    LineBox[CompressedData["
1:eJxNk3tMk1cYh2u1pooryM0aQC0MRr7evu9jExaVFyeX1C1DO4hCMTjixMuU
i8hIVpxDCdnkYqQSo5iySBw3sSgIrWjfFqwycWKBVlQqUUa8ABo0KrqMtad/
4C/vycmTk/Oe55zkiDKylD9wORxOjHO4ZncisOm+IVQz54rRZy7scbxisSfy
2ryiuHZjxy1v0aoxFl89XmkV9uuML9N/DvC3s5iMywNbks4Y9fqCtCwLix0W
brFPq9rod3/haHwri4HDKzpbw08Bt5u5UF3D4vP1039O+emgKG/Ckn2ExWLB
IdZTaADN+JrgrjwW+SZl5todZoiUhHRXpjnPV9JXzy6/AUtfKAIeJbA4yT3T
tqG9FxIPF6imWBarz09GJWf0weDz5sPdQSxaL2ZND4VYoTF0omozn0VheVL1
ypp+sDIRx5qnGMyOPi3abR+Ar71+zbc8YHCoW/HbTz2D4GuyrauxMKgUpfar
8m0gj/38/Sodg47v/p5Z4rDBdhIGz2GnoIljh/e1ic5iUPi9hXD54yhnMbhY
dZtwMAmDVc12wpe2ejiLwXrVQ8Lrta8V2tc0JmSMEXYMu0JjnnmccG7g9ZzA
6zRK1VOE56t0PJXOuV7xlrDbh8aRL3iesz40fsVb4DnrQ+OXMYsIhxAfGrvG
BJ6zPs7977wIa6KfVkY/lePRfG/CnZddkeNAug9h0q5cjg2tbvYgDeTou9/N
t3pdkaF3kLuf63YKrQw/63OfF+S6To4M7aGfEI6LdUWGny7zILzb5P+jyV+G
fD2f8HHiI8WyN7yPfKTYaOMSHiU+UtyWMkPeYxHxkaL+wAfBrI8E89MnCP/C
T03crpWgX+Tern+f2EBhSiuJypWg+sj0yOQfNgh/O5C3Lk6CtWkVmUViGwQ0
mJeUCCV4tEG+qb14EMLuhWbPHRdjzP5758t0A5BQ8l9hh1GMbZ0VObymfihs
+Wbt2UoxTh5MrF5WYIW/NnsZejPF+My0lB7yvQOSQsUT8WoxJs88SNk17zbc
3RLetFAgRnnu8EaN+iYI72Tsqn9E4Zt/DpRqqRswbnsXzDdQWJdqWlAquAZJ
Wc8GwzQUxvbV9qSEm+Hbk5GHeDkUnihTnlj88io4No1QtRsoPKg+Hcx+0AOn
brSXG0Hh6j0U65fbBpd+j90pElLYlz5tMSS1gPu/U7ivztccF98I/wO/aeA0

                    "]], 
                    
                    LineBox[{{-18., -0.6405839792703307}, {-17., \
-0.6405839796558571}}], 
                    
                    LineBox[{{-17., -0.6405839796558571}, {-16., \
-0.6405839798417351}}], 
                    
                    LineBox[{{-16., -0.6405839798417351}, {-15., \
-0.6405839798310771}}], 
                    
                    LineBox[{{-15., -0.6405839798310771}, {-14., \
-0.6405839796722708}}], 
                    
                    LineBox[{{-14., -0.6405839796722708}, {-13., 
                    0.05327051157139886}}], 
                    
                    LineBox[{{-13., 0.05327051157139886}, {-12., 
                    0.05327051156093961}}], 
                    
                    LineBox[{{-12., 0.05327051156093961}, {-11., 
                    0.05327051155583785}}], 
                    
                    LineBox[{{-11., 0.05327051155583785}, {-10., 
                    0.053270511550693456`}}], 
                    
                    LineBox[{{-10., 0.053270511550693456`}, {-9., 
                    0.0532705115459896}}], 
                    
                    LineBox[{{-9., 0.0532705115459896}, {-8., 
                    0.05327051154225209}}], 
                    
                    LineBox[{{-8., 0.05327051154225209}, {-7., 
                    0.053270511539551965`}}], 
                    
                    LineBox[{{-7., 0.053270511539551965`}, {-6., 
                    0.05327051153763344}}], 
                    
                    LineBox[{{-6., 0.05327051153763344}, {-5., 
                    0.05327051153616966}}], 
                    
                    LineBox[{{-5., 0.05327051153616966}, {-4., 
                    0.053270511535032726`}}], 
                    
                    LineBox[{{-4., 0.053270511535032726`}, {-3., 
                    0.05327051153418001}}], 
                    
                    LineBox[{{-3., 0.05327051153418001}, {-2., 
                    0.05327051153354047}}], 
                    
                    LineBox[{{-2., 0.05327051153354047}, {-1., 
                    0.05327051153312829}}], 
                    
                    LineBox[{{-1., 0.05327051153312829}, {
                    3.2618780718872*^-18, 0.05327051153292928}}]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-76.4, \
-4.6480926201984324`*^-14}, {-0.25, 0}, 
                    Offset[8], {1., -8.53263606311694*^-14}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"3", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-75.4, \
-1.318072868331537*^-13}, {-0.25, 0}, 
                    Offset[8], {1., -8.532636063116938*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-74.4, \
-1.574480576604747*^-13}, {-0.25, 0}, 
                    Offset[8], {1., 1.4149622375244624`*^-14}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-73.4, 
                    1.870530846807279*^-14}, {-0.25, 0}, 
                    Offset[8], {1., 2.841558619640827*^-13}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-72.4, 
                    6.439216835970036*^-13}, {-0.25, 0}, 
                    Offset[8], {1., 8.525900505721629*^-13}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-71.4, 
                    1.8375722473340146`*^-12}, {-0.25, 0}, 
                    Offset[8], {1., 1.4210242391802429`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-70.4, 
                    3.608183512508227*^-12}, {-0.25, 0}, 
                    Offset[8], {1., 2.003669282503525*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"16\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"16", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-69.4, 
                    5.501008128233176*^-12}, {-0.25, 0}, 
                    Offset[8], {1., 1.8189281712058994`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"256\"", 
                    "\"512\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"32", "256", "512"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-68.4, 
                    1.0849912610695253`*^-11}, {-0.25, 0}, 
                    Offset[8], {1., 7.702222023299529*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"256\"", 
                    "\"512\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"32", "256", "512"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-67.4, -0.4450937628633015}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.7418229381287206}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"256\"", 
                    "\"512\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"32", "256", "512"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-66.22222222222223, 
                    0.2581770633062829}, {-0.25, 0}, 
                    Offset[8], {0.17777777777776294`, 
                    3.4297842343988805`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"32\"", "\"256\"", 
                    "\"512\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"32", "256", "512"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-66.4, -0.7418229382561509}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.356018713456365*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-65.4, -0.7418229383879423}, \
{-0.25, 0}, 
                    Offset[8], {1., -6.258460416574962*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-64.4, -0.7418229383299877}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.3831413792075864`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-63.4, -0.7418229380608}, \
{-0.25, 0}, 
                    Offset[8], {1., 3.5643665796669666`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-62.4, -0.4173313449704371}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.5408193215796472}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-63.4, 
                    0.2581770631157962}, {-0.25, 0}, 
                    Offset[8], {1., -3.1067781680604867`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-62.4, -0.01733134460653689}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.4591806793301032}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-61.400000000000006`, \
-0.20100361633535518`}, {-0.25, 0}, 
                    Offset[8], {1., 5.371647571195126*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-60.400000000000006`, \
-0.5488048179539154}, {-0.25, 0}, 
                    Offset[8], {1., -0.5796686693678482}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-59.355555555555554`,
                     0.21932771580307225`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888857, 
                    2.0114826471129277`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-59.4, -0.7806722858541142}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.5509905299259117`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-58.4, -0.7806722859982492}, \
{-0.25, 0}, 
                    Offset[8], {1., -7.015910075125475*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-57.4, -0.7806722859706008}, \
{-0.25, 0}, 
                    Offset[8], {1., 9.285361368682743*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-56.400000000000006`, \
-0.7806722857668938}, {-0.25, 0}, 
                    Offset[8], {1., 2.7760904686147114`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-55.400000000000006`, \
-0.46213260921767246`}, {-0.25, 0}, 
                    Offset[8], {1., 0.5308994607302963}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-54.4, -0.24977282492608263`}, \
{-0.25, 0}, 
                    Offset[8], {1., -8.811285034937555*^-13}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-53.4, -0.005197558595693444}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.4076254438845694}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    
                    0.3333333333333333}}]}], {-53.4, -0.6051975594591392}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.5923745575545071}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"64\"", "\"128\"", 
                    "\"256\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"64", "128", "256"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-52.400000000000006`, \
-0.8421473826196003}, {-0.25, 0}, 
                    Offset[8], {1., -2.3109691937861498`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-51.4, -0.8421473827659949}, \
{-0.25, 0}, 
                    Offset[8], {1., -8.992639966010074*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-50.400000000000006`, \
-0.8421473827794554}, {-0.25, 0}, 
                    Offset[8], {1., 3.751665644813329*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-49.4, -0.8421473825951208}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.8221325276689413`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-48.4, -0.5146964619871454}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.5457515341584838}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-51.22222222222222, 
                    0.15785261915765095`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777774872`, 
                    1.123434678618196*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-48.4, -0.1146964614248445}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.45424846724726825`}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-47.400000000000006`, \
-0.29639584832414406`}, {-0.25, 0}, 
                    Offset[8], {1., -6.537548280505234*^-13}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-46.4, -0.6424081539870201}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.5766871761043576}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-45.355555555555554`,
                     0.12691697717186642`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888889568, 
                    1.9670542972249905`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-45.400000000000006`, \
-0.87308302457472}, {-0.25, 0}, 
                    Offset[8], {1., -2.432614110148279*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-44.4, -0.8730830246280279}, \
{-0.25, 0}, 
                    Offset[8], {1., 7.332789930813988*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-43.400000000000006`, \
-0.8730830246122283}, {-0.25, 0}, 
                    Offset[8], {1., -2.255262643302558*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-42.4, -0.8730830244938292}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.1236690184167628`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-41.4, -0.5320590144612428}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.5683733499127328}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-40.400000000000006`, \
-0.3047096745151894}, {-0.25, 0}, 
                    Offset[8], {1., -3.1732894090197306`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-39.4, -0.6370749694847266}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.5539421582614068}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-38.22222222222223, 
                    0.14134816883400403`}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777004`, 
                    3.4988067998398265`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"128\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"128", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-38.400000000000006`, \
-0.8586518329513444}, {-0.25, 0}, 
                    Offset[8], {1., -2.7009161573943175`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-37.4, -0.8586518331131492}, \
{-0.25, 0}, 
                    Offset[8], {1., -8.96137608563663*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-36.4, -0.8586518330814221}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.1262102361797588`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-35.4, -0.8586518328905534}, \
{-0.25, 0}, 
                    Offset[8], {1., 2.430339263170822*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-34.4, -0.5038597820061235}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.5913200846453606}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-35.4, 
                    0.1413481687447835}, {-0.25, 0}, 
                    Offset[8], {1., -2.471552407179445*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-34.4, -0.10385978143041896`}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.4086799167939006}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-33.400000000000006`, \
-0.26733174815091243`}, {-0.25, 0}, 
                    Offset[8], {1., -4.888645044331952*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-32.4, -0.5859261550962892}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.5309906782390357}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-31.355555555555554`,
                     0.2016775751622077}, {-0.25, 0}, 
                    Offset[8], {0.08888888888889213, 
                    2.2091134477264518`*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-31.4, -0.7983224265365729}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.4111568297513486`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-30.4, -0.7983224266879556}, \
{-0.25, 0}, 
                    Offset[8], {1., -9.156053693004651*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-29.4, -0.7983224266808132}, \
{-0.25, 0}, 
                    Offset[8], {1., 7.294420623082942*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-28.400000000000002`, \
-0.7983224265183322}, {-0.25, 0}, 
                    Offset[8], {1., 2.2217239159516566`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-27.4, -0.43378045562677814`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.6075699513378083}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-26.4, -0.1907524750924649}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.3501144646710372`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-25.4, -0.5001385922988488}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.5156435286764065}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-24.22222222222222, 
                    0.2936039976450503}, {-0.25, 0}, 
                    Offset[8], {0.17777777777777004`, 
                    4.209982362723963*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"256\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"256", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-24.4, -0.7063960039388504}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.823982159227967*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-23.4, -0.7063960044806166}, \
{-0.25, 0}, 
                    Offset[8], {1., -7.14678094482224*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-22.4, -0.7063960048286888}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.0366829616970108`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-21.4, -0.7063960045404016}, \
{-0.25, 0}, 
                    Offset[8], {1., 5.495905952557223*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-20.4, -0.3505416051592066}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.5930906652689315}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-21.4, 
                    0.29360399746173427`}, {-0.25, 0}, 
                    Offset[8], {1., -1.7092821602560093`*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-20.4, 
                    0.04945839552636483}, {-0.25, 0}, 
                    Offset[8], {1., -0.406909336444997}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-19.4, -0.1133053390573553}, \
{-0.25, 0}, 
                    Offset[8], {1., -9.535539025051776*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-18.4, -0.4296725231866662}, \
{-0.25, 0}, 
                    Offset[8], {1., -0.5272786402091612}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-17.355555555555554`,
                     0.35941602173831033`}, {-0.25, 0}, 
                    Offset[8], {0.08888888888888857, 3.502148571143948*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-17.4, -0.6405839795016466}, \
{-0.25, 0}, 
                    Offset[8], {1., -3.855263885910176*^-10}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-16.4, -0.6405839797673839}, \
{-0.25, 0}, 
                    Offset[8], {1., -1.858779796748422*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-15.4, -0.6405839798353403}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.065803001409904*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    
                    0.3333333333333333}}]}], {-14.4, -0.6405839797357933}, \
{-0.25, 0}, 
                    Offset[8], {1., 1.588063014423824*^-10}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-13.4, -0.22427128492606901`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.6938544912436696}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-12.399999999999999`,
                     0.0532705115651233}, {-0.25, 0}, 
                    Offset[8], {1., -1.045925152043381*^-11}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-11.4, 
                    0.053270511557878555`}, {-0.25, 0}, 
                    Offset[8], {1., -5.1017592928026545`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-10.4, 
                    0.05327051155275121}, {-0.25, 0}, 
                    Offset[8], {1., -5.1443918569482605`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-9.399999999999999, 
                    0.053270511547871144`}, {-0.25, 0}, 
                    Offset[8], {1., -4.703855360776998*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-8.4, 
                    0.053270511543747096`}, {-0.25, 0}, 
                    Offset[8], {1., -3.737510301249358*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-7.4, 
                    0.05327051154063202}, {-0.25, 0}, 
                    Offset[8], {1., -2.700124845933516*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-6.4, 
                    0.05327051153840085}, {-0.25, 0}, 
                    Offset[8], {1., -1.9185278365974057`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-5.4, 
                    0.053270511536755175`}, {-0.25, 0}, 
                    Offset[8], {1., -1.4637804857109415`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-4.4, 
                    0.053270511535487494`}, {-0.25, 0}, 
                    Offset[8], {1., -1.1369308272612955`*^-12}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"19\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"19", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    0.0532705115345211}, {-0.25, 0}, 
                    Offset[8], {1., -8.527137329572554*^-13}], 
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"19\"", "\"64\"", 
                    "\"128\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"19", "64", "128"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.053270511533796285`}, {-0.25, 0}, 
                    Offset[8], {1., -6.395439733353214*^-13}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"19\"", "\"512\"", 
                    "\"1024\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"19", "512", "1024"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.053270511533293166`}, {-0.25, 0}, 
                    Offset[8], {1., -4.1217723678599327`*^-13}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"1024\"", 
                    "\"19\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "1024", "19"}, "\[Cross]"], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4, 
                    0.05327051153300888}, {-0.25, 0}, 
                    Offset[8], {1., -1.9901441605796322`*^-13}], 
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"512\"", "\"1024\"", 
                    "\"19\""}, "RowWithSeparators"], TooltipStyle -> 
                    "TextStyling"], Annotation[#, 
                    Row[{"512", "1024", "19"}, "\[Cross]"], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-77., 4.7148901767173095`*^-15}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"input_0\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["input_0", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-76., -8.061147045445209*^-14}], 
                    Offset[{10, 10}, {-76., -8.061147045445209*^-14}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-76., -8.061147045445209*^-14}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution0\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"16", ",", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", "7"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "512", ",", "1024"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution0", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    16, {7, 7}, "Stride" -> {1, 1}, "PaddingSize" -> {3, 3}, 
                    "Dilation" -> {1, 1}, "Input" -> {3, 512, 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-75., -1.6593783108562146`*^-13}], 
                    Offset[{10, 10}, {-75., -1.6593783108562146`*^-13}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-75., -1.6593783108562146`*^-13}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm0\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "16"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "512", ",", "1024"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm0", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 16, 
                    "Input" -> {16, 512, 1024}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-74., -1.5178820871037684`*^-13}], 
                    Offset[{10, 10}, {-74., -1.5178820871037684`*^-13}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-74., -1.5178820871037684`*^-13}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu0\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "512", ",", "1024"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu0", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {16, 512, 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-73., 1.3236765325370588`*^-13}], 
                    Offset[{10, 10}, {-73., 1.3236765325370588`*^-13}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-73., 
                    1.3236765325370588`*^-13}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"16", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "512", ",", "1024"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution1", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    16, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {16, 512, 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-72., 9.849577038258688*^-13}], 
                    Offset[{10, 10}, {-72., 9.849577038258688*^-13}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-72., 9.849577038258688*^-13}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "16"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "512", ",", "1024"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm1", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 16, 
                    "Input" -> {16, 512, 1024}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-71., 2.4059819430061117`*^-12}], 
                    Offset[{10, 10}, {-71., 2.4059819430061117`*^-12}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-71.,
                     2.4059819430061117`*^-12}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "512", ",", "1024"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu1", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {16, 512, 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-70., 4.409651225509637*^-12}], 
                    Offset[{10, 10}, {-70., 4.409651225509637*^-12}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-70., 4.409651225509637*^-12}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"32", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "512", ",", "1024"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution2", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    32, {3, 3}, "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {16, 512, 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-69., 6.228579396715536*^-12}], 
                    Offset[{10, 10}, {-69., 6.228579396715536*^-12}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-69., 6.228579396715536*^-12}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "32"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "256", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm2", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 32, 
                    "Input" -> {32, 256, 512}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-68., 1.3930801420015064`*^-11}], 
                    Offset[{10, 10}, {-68., 1.3930801420015064`*^-11}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-68.,
                     1.3930801420015064`*^-11}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "256", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu2", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {32, 256, 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-67., -0.7418229381147897}], 
                    Offset[{10, 10}, {-67., -0.7418229381147897}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-67., -0.7418229381147897}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "256", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution3", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3, 3}, "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {32, 256, 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-64., 0.25817706330220286`}], 
                    Offset[{10, 10}, {-64., 0.25817706330220286`}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox["\"\:2217\"", StripOnInput -> False, FontSize -> 
                    20], ImageSize -> {11, 28}], {-64., 
                    0.25817706330220286`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"32", ",", "256", ",", "512"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution5", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {1, 1}, "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Input" -> {32, 256, 512}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-66., -0.7418229383503916}], 
                    Offset[{10, 10}, {-66., -0.7418229383503916}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-66., -0.7418229383503916}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "64"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm3", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, 
                    "Input" -> {64, 128, 256}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-65., -0.7418229384129762}], 
                    Offset[{10, 10}, {-65., -0.7418229384129762}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-65., -0.7418229384129762}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu3", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-64., -0.7418229382746621}], 
                    Offset[{10, 10}, {-64., -0.7418229382746621}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-64., -0.7418229382746621}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution4", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-63., -0.7418229379182254}], 
                    Offset[{10, 10}, {-63., -0.7418229379182254}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-63., -0.7418229379182254}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "64"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm4", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, 
                    "Input" -> {64, 128, 256}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-62., -0.2010036163385782}], 
                    Offset[{10, 10}, {-62., -0.2010036163385782}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-62., -0.2010036163385782}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add0\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add0", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{64, 128, 256}, {64, 128, 256}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-63., 0.25817706299152504`}], 
                    Offset[{10, 10}, {-63., 0.25817706299152504`}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-63., 0.25817706299152504`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "64"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm5", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, 
                    "Input" -> {64, 128, 256}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-61., -0.20100361633320654`}], 
                    Offset[{10, 10}, {-61., -0.20100361633320654`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-61., -0.20100361633320654`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu4", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-60., -0.7806722857010547}], 
                    Offset[{10, 10}, {-60., -0.7806722857010547}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-60., -0.7806722857010547}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution6", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-55., -0.24977282492555394`}], 
                    Offset[{10, 10}, {-55., -0.24977282492555394`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-55., -0.24977282492555394`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add1", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{64, 128, 256}, {64, 128, 256}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-59., -0.7806722859561538}], 
                    Offset[{10, 10}, {-59., -0.7806722859561538}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-59., -0.7806722859561538}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "64"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm6", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, 
                    "Input" -> {64, 128, 256}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-58., -0.7806722860263129}], 
                    Offset[{10, 10}, {-58., -0.7806722860263129}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-58., -0.7806722860263129}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu5", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-57., -0.7806722859334593}], 
                    Offset[{10, 10}, {-57., -0.7806722859334593}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-57., -0.7806722859334593}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"64", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution7", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    64, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-56., -0.7806722856558502}], 
                    Offset[{10, 10}, {-56., -0.7806722856558502}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-56., -0.7806722856558502}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "64"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm7", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, 
                    "Input" -> {64, 128, 256}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-54., -0.24977282492643507`}], 
                    Offset[{10, 10}, {-54., -0.24977282492643507`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-54., -0.24977282492643507`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu6", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-53., 0.15785261895813432`}], 
                    Offset[{10, 10}, {-53., 0.15785261895813432`}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-53., 0.15785261895813432`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution10\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"128", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution10", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    128, {1, 1}, "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-53., -0.8421473824809421}], 
                    Offset[{10, 10}, {-53., -0.8421473824809421}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-53., -0.8421473824809421}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"128", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"64", ",", "128", ",", "256"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution8", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    128, {3, 3}, "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {64, 128, 256}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-52., -0.842147382712039}], 
                    Offset[{10, 10}, {-52., -0.842147382712039}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-52., -0.842147382712039}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "128"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm8", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, 
                    "Input" -> {128, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-51., -0.8421473828019654}], 
                    Offset[{10, 10}, {-51., -0.8421473828019654}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-51., -0.8421473828019654}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu7", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-50., -0.8421473827644488}], 
                    Offset[{10, 10}, {-50., -0.8421473827644488}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-50., -0.8421473827644488}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution9\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"128", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution9", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    128, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 31), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-49., -0.8421473824822355}], 
                    Offset[{10, 10}, {-49., -0.8421473824822355}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-49., -0.8421473824822355}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"batchnorm9\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "128"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm9", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, 
                    "Input" -> {128, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 32), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-48., -0.2963958483237518}], 
                    Offset[{10, 10}, {-48., -0.2963958483237518}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-48., -0.2963958483237518}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add2", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{128, 64, 128}, {128, 64, 128}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 33), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-49., 0.15785261892351643`}], 
                    Offset[{10, 10}, {-49., 0.15785261892351643`}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-49., 0.15785261892351643`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm10\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "128"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm10", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, 
                    "Input" -> {128, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 34), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-47., -0.2963958483244056}], 
                    Offset[{10, 10}, {-47., -0.2963958483244056}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-47., -0.2963958483244056}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu8", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 35), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-46., -0.8730830244287632}], 
                    Offset[{10, 10}, {-46., -0.8730830244287632}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-46., -0.8730830244287632}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"128", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution11", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    128, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 36), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-41., -0.30470967449614966`}], 
                    Offset[{10, 10}, {-41., -0.30470967449614966`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-41., -0.30470967449614966`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add3", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{128, 64, 128}, {128, 64, 128}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 37), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-45., -0.8730830246720246}], 
                    Offset[{10, 10}, {-45., -0.8730830246720246}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-45., -0.8730830246720246}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "128"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm11", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, 
                    "Input" -> {128, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 38), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-44., -0.8730830245986967}], 
                    Offset[{10, 10}, {-44., -0.8730830245986967}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-44., -0.8730830245986967}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu9\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu9", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 39), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-43., -0.8730830246212493}], 
                    Offset[{10, 10}, {-43., -0.8730830246212493}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-43., -0.8730830246212493}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"128", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution12", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    128, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 40), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-42., -0.8730830244088824}], 
                    Offset[{10, 10}, {-42., -0.8730830244088824}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-42., -0.8730830244088824}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "128"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm12", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, 
                    "Input" -> {128, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 41), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-40., -0.30470967452788256`}], 
                    Offset[{10, 10}, {-40., -0.30470967452788256`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-40., -0.30470967452788256`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu10\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu10", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 42), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-39., -0.8586518327892894}], 
                    Offset[{10, 10}, {-39., -0.8586518327892894}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-39., -0.8586518327892894}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution13\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"256", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution13", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    256, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 43), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-36., 0.14134816889307664`}], 
                    Offset[{10, 10}, {-36., 0.14134816889307664`}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-36., 0.14134816889307664`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution15\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"256", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"128", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution15", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    256, {1, 1}, "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Input" -> {128, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 44), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-38., -0.858651833059381}], 
                    Offset[{10, 10}, {-38., -0.858651833059381}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-38., -0.858651833059381}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm13\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "256"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm13", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, 
                    "Input" -> {256, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 45), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-37., -0.8586518331489947}], 
                    Offset[{10, 10}, {-37., -0.8586518331489947}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-37., -0.8586518331489947}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu11", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 46), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-36., -0.8586518330363737}], 
                    Offset[{10, 10}, {-36., -0.8586518330363737}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-36., -0.8586518330363737}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution14\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"256", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution14", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    256, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 47), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-35., -0.8586518327933398}], 
                    Offset[{10, 10}, {-35., -0.8586518327933398}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-35., -0.8586518327933398}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm14\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "256"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm14", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, 
                    "Input" -> {256, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 48), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-34., -0.2673317481479792}], 
                    Offset[{10, 10}, {-34., -0.2673317481479792}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-34., -0.2673317481479792}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add4", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, 
                    "Inputs" -> {{256, 64, 128}, {256, 64, 128}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 49), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-35., 0.1413481686459214}], 
                    Offset[{10, 10}, {-35., 0.1413481686459214}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-35., 0.1413481686459214}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm15\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "256"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm15", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, 
                    "Input" -> {256, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 50), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-33., -0.26733174815286787`}], 
                    Offset[{10, 10}, {-33., -0.26733174815286787`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-33.,
                     -0.26733174815286787`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu12", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 51), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-32., -0.7983224263919035}], 
                    Offset[{10, 10}, {-32., -0.7983224263919035}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-32., -0.7983224263919035}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution16\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"256", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution16", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    256, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 52), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-27., -0.19075247509165483`}], 
                    Offset[{10, 10}, {-27., -0.19075247509165483`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-27., -0.19075247509165483`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add5", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{256, 64, 128}, {256, 64, 128}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 53), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-31., -0.7983224266330192}], 
                    Offset[{10, 10}, {-31., -0.7983224266330192}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-31., -0.7983224266330192}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm16\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "256"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm16", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, 
                    "Input" -> {256, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 54), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-30., -0.7983224267245798}], 
                    Offset[{10, 10}, {-30., -0.7983224267245798}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-30., -0.7983224267245798}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu13\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu13", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 55), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-29., -0.7983224266516356}], 
                    Offset[{10, 10}, {-29., -0.7983224266516356}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-29., -0.7983224266516356}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution17\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"256", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution17", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    256, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 56), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-28., -0.7983224264294632}], 
                    Offset[{10, 10}, {-28., -0.7983224264294632}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-28., -0.7983224264294632}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm17\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "256"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm17", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, 
                    "Input" -> {256, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 57), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-26., -0.19075247509300494`}], 
                    Offset[{10, 10}, {-26., -0.19075247509300494`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-26., -0.19075247509300494`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu14\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu14", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 58), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-25., -0.7063960037694115}], 
                    Offset[{10, 10}, {-25., -0.7063960037694115}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-25., -0.7063960037694115}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution18\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution18", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 59), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-22., 0.29360399756429123`}], 
                    Offset[{10, 10}, {-22., 0.29360399756429123`}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-22., 0.29360399756429123`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution20\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"256", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution20", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {1, 1}, "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Input" -> {256, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 60), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-24., -0.7063960040518097}], 
                    Offset[{10, 10}, {-24., -0.7063960040518097}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-24., -0.7063960040518097}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm18\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm18", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, 
                    "Input" -> {512, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 61), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-23., -0.7063960047664878}], 
                    Offset[{10, 10}, {-23., -0.7063960047664878}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-23., -0.7063960047664878}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu15\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu15", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 62), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-22., -0.7063960048701561}], 
                    Offset[{10, 10}, {-22., -0.7063960048701561}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-22., -0.7063960048701561}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution19\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution19", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 63), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-21., -0.7063960043205655}], 
                    Offset[{10, 10}, {-21., -0.7063960043205655}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-21., -0.7063960043205655}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm19\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm19", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, 
                    "Input" -> {512, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 64), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-20., -0.11330533905163398`}], 
                    Offset[{10, 10}, {-20., -0.11330533905163398`}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 
                    14], {-20., -0.11330533905163398`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add6", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Plus, "Inputs" -> {{512, 64, 128}, {512, 64, 128}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 65), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-21., 0.293603997393363}], 
                    Offset[{10, 10}, {-21., 0.293603997393363}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-21., 0.293603997393363}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm20\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm20", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, 
                    "Input" -> {512, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 66), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-19., -0.11330533906116952`}], 
                    Offset[{10, 10}, {-19., -0.11330533906116952`}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-19., -0.11330533906116952`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu16\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu16", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 67), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-18., -0.6405839792703307}], 
                    Offset[{10, 10}, {-18., -0.6405839792703307}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-18., -0.6405839792703307}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution21\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution21", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 68), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-13., 0.05327051157139886}], 
                    Offset[{10, 10}, {-13., 0.05327051157139886}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-13., 
                    0.05327051157139886}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"elemwise_add7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}], 
                    "}"}]}]}], "]"}], HoldForm], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["elemwise_add7", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, 
                    "Inputs" -> {{512, 64, 128}, {512, 64, 128}}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 69), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-17., -0.6405839796558571}], 
                    Offset[{10, 10}, {-17., -0.6405839796558571}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-17., -0.6405839796558571}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm21\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm21", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, 
                    "Input" -> {512, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 70), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-16., -0.6405839798417351}], 
                    Offset[{10, 10}, {-16., -0.6405839798417351}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], 
                    TraditionalForm], {-16., -0.6405839798417351}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu17\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu17", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 71), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-15., -0.6405839798310771}], 
                    Offset[{10, 10}, {-15., -0.6405839798310771}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-15., -0.6405839798310771}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution22\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution22", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 72), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-14., -0.6405839796722708}], 
                    Offset[{10, 10}, {-14., -0.6405839796722708}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-14., -0.6405839796722708}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm22\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm22", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, 
                    "Input" -> {512, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 73), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-12., 0.05327051156093961}], 
                    Offset[{10, 10}, {-12., 0.05327051156093961}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-12.,
                     0.05327051156093961}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu18\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu18", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 74), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-11., 0.05327051155583785}], 
                    Offset[{10, 10}, {-11., 0.05327051155583785}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-11., 0.05327051155583785}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution23\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution23", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 75), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-10., 0.053270511550693456`}], 
                    Offset[{10, 10}, {-10., 0.053270511550693456`}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-10., 0.053270511550693456`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm23\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm23", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, 
                    "Input" -> {512, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 76), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-9., 0.0532705115459896}], 
                    Offset[{10, 10}, {-9., 0.0532705115459896}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-9., 
                    0.0532705115459896}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu19\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu19", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 77), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-8., 0.05327051154225209}], 
                    Offset[{10, 10}, {-8., 0.05327051154225209}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-8., 0.05327051154225209}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution24\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"512", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution24", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    512, {3, 3}, "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 78), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-7., 0.053270511539551965`}], 
                    Offset[{10, 10}, {-7., 0.053270511539551965`}]]}, 
                    InsetBox["\"BN\"", 
                    Offset[{0, -1}, {-7., 0.053270511539551965`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"batchnorm24\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"BatchNormalizationLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Momentum\"", "\[Rule]", "0.899999976158`"}], 
                    ",", 
                    RowBox[{"\"Epsilon\"", "\[Rule]", "9.99999974738`*^-6"}], 
                    ",", 
                    RowBox[{"\"Channels\"", "\[Rule]", "512"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["batchnorm24", Bold], 
                    Style[
                    HoldForm[
                    BatchNormalizationLayer[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, 
                    "Input" -> {512, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 79), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-6., 0.05327051153763344}], 
                    Offset[{10, 10}, {-6., 0.05327051153763344}]]}, 
                    InsetBox[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzN0rELgkAUx/GjGhpbG9uaC6q1qQInpalJ65QWA42irX8m6r+0+xWKlZXW
4+594Qk6PD6c1/E2tl8TQsRN9bDd/TiK3IPTUi/zMF4HoVzNwq0MZDTy6upj
W01XTUOQZ1EtksvzkWpXLhIfbL68JBS7nvrbl9o4+vI2bv9Xgw395NNkQ5V9
Gm2okk+zDf3k02RDpX0GbKiUz5ANffUZuHP5PvoM29BbHwMbKvQxsaEXHyMb
evAxs6FCHxMbynwMbejmY2pDFsM7lzUcLE7UtnQfxUwnO/Jzw06q6fecBGco
7veQYqgj33kFmdwbNg==
                    "], {{0, 25}, {40, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                    Interleaving -> True, Magnification -> Automatic], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSize -> 20, ImageSizeRaw -> {40, 25}, 
                    PlotRange -> {{0, 40}, {0, 25}}], TraditionalForm], {-6., 
                    0.05327051153763344}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"relu20\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ElementwiseLayer", "[", 
                    RowBox[{"Ramp", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["relu20", Bold], 
                    Style[
                    HoldForm[
                    ElementwiseLayer[Ramp, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 80), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-5., 0.05327051153616966}], 
                    Offset[{10, 10}, {-5., 0.05327051153616966}]]}, 
                    InsetBox[
                    PaneBox[
                    StyleBox[
                    "\"\:2217\"", StripOnInput -> False, FontSize -> 20], 
                    ImageSize -> {11, 28}], {-5., 0.05327051153616966}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"convolution25\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ConvolutionLayer", "[", 
                    RowBox[{"19", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    RowBox[{"\"Dilation\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["convolution25", Bold], 
                    Style[
                    HoldForm[
                    ConvolutionLayer[
                    19, {1, 1}, "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Input" -> {512, 64, 128}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 81), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-4., 0.053270511535032726`}], 
                    Offset[{12, 12}, {-4., 0.053270511535032726`}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    GrayLevel[0.7]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.4]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, AspectRatio -> 1, BaseStyle -> GrayLevel[0.4], 
                    ImageMargins -> 0., ImagePadding -> 0, ImageSize -> 15, 
                    PlotRange -> All, PlotRangePadding -> 0], {-4., 
                    0.053270511535032726`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"broadcast_add0\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
                    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["broadcast_add0", Bold], 
                    Style[
                    HoldForm[
                    NetGraph[
                    Skeleton[3], 
                    Skeleton[4]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 82), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-3., 0.05327051153418001}], 
                    Offset[{10, 10}, {-3., 0.05327051153418001}]]}, 
                    InsetBox["\"D\"", 
                    Offset[{0, -1}, {-3., 0.05327051153418001}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"deconvolution0\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"DeconvolutionLayer", "[", 
                    RowBox[{"19", ",", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", "16"}], "}"}], ",", 
                    RowBox[{"\"Stride\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"8", ",", "8"}], "}"}]}], ",", 
                    RowBox[{"\"PaddingSize\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}]}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"19", ",", "64", ",", "128"}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["deconvolution0", Bold], 
                    Style[
                    HoldForm[
                    DeconvolutionLayer[
                    19, {16, 16}, "Stride" -> {8, 8}, "PaddingSize" -> {4, 4},
                     "Input" -> {19, 64, 128}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 83), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 0.05327051153354047}], 
                    Offset[{10, 10}, {-2., 0.05327051153354047}]]}, 
                    InsetBox["\"T\"", 
                    Offset[{0, -1}, {-2., 0.05327051153354047}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"TransposeLayer", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "\[TwoWayRule]", "3"}], ",", 
                    RowBox[{"1", "\[TwoWayRule]", "2"}]}], "}"}], ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"19", ",", "512", ",", "1024"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    HoldForm[
                    TransposeLayer[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}, "Input" -> {19, 512, 1024}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 84), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 0.05327051153312829}], 
                    Offset[{10, 10}, {-1., 0.05327051153312829}]]}, 
                    InsetBox["\"S\"", 
                    Offset[{0, -1}, {-1., 0.05327051153312829}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"softmax0\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"SoftmaxLayer", "[", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"512", ",", "1024", ",", "19"}], "}"}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["softmax0", Bold], 
                    Style[
                    HoldForm[
                    SoftmaxLayer["Input" -> {512, 1024, 19}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 85), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{3.2618780718872*^-18, 0.05327051153292928}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 86), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    Part[CompressedData["
1:eJxVz31IE3Ecx/EzCQqM0jKtJB8qSxlhpZbP82EunTo3NezBp9JcZunyKSPr
oMIsKMv+kIKooDKs5cIohOVHkVwaaioI+Qya8yETU1Oih+Vdu6+DY7zu/f19
787xaJYybRnDMAeM17//xZ84Bm8v5M4O+8z6cjdiICrycK2s8tQtEko4Og4e
vHZIyplV4sWlp5trj0g4i5XQb7htZ/EwyI87r4Qhf2Hsc4yaMxSQxbm5NLlc
4cwqcOuH+nRHahlnsQJFDTJ9Xeo9/rwC1Xory/hHGv58NA4vj80z143Ucj0a
0rze9QtX2gK4fdHoOZ4rdLHRTNGS+YTfJwSzciSYeZEuR8Hj0Ovnaz6YumT1
VbI/CoXaYKEzUeiP/6MO+Wng52UoXuWvuDHfyjsSSSqnM6bORGLAQiSYjcBg
mD3pEUhxWhD2MTKUlNB94cjTmL275N4Q8N/HEiSW/dNj/LzRDmmC2TCknleT
bnRsJun7MXyNnt+PZvuWcOf5dlPPfDKpE54nxcdI0hkp0ivKWmVT4/x8CDrW
vzRLYDt4hyLd5rXQmVCozCvJvAQGOw3pEoxOlBKHoLP1DdkXjLGkm6q15/73
IMhTk1Je2dRz78cEY/xCtdDZIEy0Ysl8ZpyW9ECcmqT7AvG5vO/+3KZPph55
uSvZtJ8Vo2eqX+iMGJPFDoXd10d5+6DBZa2uLEPPOwBZlYGk++ObOIrYD9ne
IcS+UGu3EXujcYTu88J03/um5rtfeHvCtnfgpKqpnf/+ffiu+Ur6XuQY5M10
fmZ7IrEHZu5bEbujIqlq2x0znanbDGrJ/j143l1D+m7MdbksPLs4xNsVORXr
6iWhlfz8LhR0JpLuhoLks8Q7cXY0n1iEeesU4h3IqPhVJ+xzRkr2NPFWxDuM
EDtBru8hdoC0tJPYDv4PWoht4aFqIl4HkVsj8RpsqWogXoGNbfXEDKxUdcRT
tStZLLq//IZ8yDrK17hi0X8BOLvrZA==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 24, 20, 
                    20, 20, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {2751., 89.13746662436172}, PlotRangePadding -> 
                    0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], ImageSize -> {800, Automatic}, ImageSizeAction -> 
                    "Scrollable", Scrollbars -> {True, False}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "input_0"], 
                    NeuralNetworks`NetPath["Nodes", "convolution0"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm0"], 
                    NeuralNetworks`NetPath["Nodes", "relu0"], 
                    NeuralNetworks`NetPath["Nodes", "convolution1"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm1"], 
                    NeuralNetworks`NetPath["Nodes", "relu1"], 
                    NeuralNetworks`NetPath["Nodes", "convolution2"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm2"], 
                    NeuralNetworks`NetPath["Nodes", "relu2"], 
                    NeuralNetworks`NetPath["Nodes", "convolution3"], 
                    NeuralNetworks`NetPath["Nodes", "convolution5"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm3"], 
                    NeuralNetworks`NetPath["Nodes", "relu3"], 
                    NeuralNetworks`NetPath["Nodes", "convolution4"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm4"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add0"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm5"], 
                    NeuralNetworks`NetPath["Nodes", "relu4"], 
                    NeuralNetworks`NetPath["Nodes", "convolution6"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add1"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm6"], 
                    NeuralNetworks`NetPath["Nodes", "relu5"], 
                    NeuralNetworks`NetPath["Nodes", "convolution7"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm7"], 
                    NeuralNetworks`NetPath["Nodes", "relu6"], 
                    NeuralNetworks`NetPath["Nodes", "convolution10"], 
                    NeuralNetworks`NetPath["Nodes", "convolution8"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm8"], 
                    NeuralNetworks`NetPath["Nodes", "relu7"], 
                    NeuralNetworks`NetPath["Nodes", "convolution9"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm9"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add2"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm10"], 
                    NeuralNetworks`NetPath["Nodes", "relu8"], 
                    NeuralNetworks`NetPath["Nodes", "convolution11"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add3"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm11"], 
                    NeuralNetworks`NetPath["Nodes", "relu9"], 
                    NeuralNetworks`NetPath["Nodes", "convolution12"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm12"], 
                    NeuralNetworks`NetPath["Nodes", "relu10"], 
                    NeuralNetworks`NetPath["Nodes", "convolution13"], 
                    NeuralNetworks`NetPath["Nodes", "convolution15"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm13"], 
                    NeuralNetworks`NetPath["Nodes", "relu11"], 
                    NeuralNetworks`NetPath["Nodes", "convolution14"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm14"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add4"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm15"], 
                    NeuralNetworks`NetPath["Nodes", "relu12"], 
                    NeuralNetworks`NetPath["Nodes", "convolution16"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add5"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm16"], 
                    NeuralNetworks`NetPath["Nodes", "relu13"], 
                    NeuralNetworks`NetPath["Nodes", "convolution17"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm17"], 
                    NeuralNetworks`NetPath["Nodes", "relu14"], 
                    NeuralNetworks`NetPath["Nodes", "convolution18"], 
                    NeuralNetworks`NetPath["Nodes", "convolution20"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm18"], 
                    NeuralNetworks`NetPath["Nodes", "relu15"], 
                    NeuralNetworks`NetPath["Nodes", "convolution19"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm19"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add6"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm20"], 
                    NeuralNetworks`NetPath["Nodes", "relu16"], 
                    NeuralNetworks`NetPath["Nodes", "convolution21"], 
                    NeuralNetworks`NetPath["Nodes", "elemwise_add7"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm21"], 
                    NeuralNetworks`NetPath["Nodes", "relu17"], 
                    NeuralNetworks`NetPath["Nodes", "convolution22"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm22"], 
                    NeuralNetworks`NetPath["Nodes", "relu18"], 
                    NeuralNetworks`NetPath["Nodes", "convolution23"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm23"], 
                    NeuralNetworks`NetPath["Nodes", "relu19"], 
                    NeuralNetworks`NetPath["Nodes", "convolution24"], 
                    NeuralNetworks`NetPath["Nodes", "batchnorm24"], 
                    NeuralNetworks`NetPath["Nodes", "relu20"], 
                    NeuralNetworks`NetPath["Nodes", "convolution25"], 
                    NeuralNetworks`NetPath["Nodes", "broadcast_add0"], 
                    NeuralNetworks`NetPath["Nodes", "deconvolution0"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Nodes", "softmax0"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["input_0" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {1024, 512}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.29010095242892997`, 
                    0.32808144844279574`, 0.28696394422942517`}, 
                    "VarianceImage" -> {0.03347218471762876, 
                    0.03480672701194479, 0.03403105878800664}], 
                    
                    NeuralNetworks`TensorT[{3, 512, 1024}, 
                    NeuralNetworks`RealT]]], 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19}, "InputDepth" -> 3, "Dimensions" -> 
                    19, "$Rank" -> 2], 
                    NeuralNetworks`TensorT[{512, 1024, 19}, 
                    NeuralNetworks`RealT]]], 
                    Association[
                    "convolution0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{16, 3, 7, 7}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {7, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {3, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]]], "batchnorm0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 16, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]]], "relu0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]]], "convolution1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{16, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]]], "batchnorm1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 16, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]]], "convolution2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {512, 1024}, 
                    "$OutputSize" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{16, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 256, 512}, 
                    NeuralNetworks`RealT]]], "batchnorm2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 32, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 256, 512}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 256, 512}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 256, 512}, 
                    NeuralNetworks`RealT]]], "convolution3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "batchnorm3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "convolution4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "batchnorm4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "convolution5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 32, 
                    "$GroupNumber" -> 1, "$InputSize" -> {256, 512}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 256, 512}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "batchnorm5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "elemwise_add0" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "relu4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "convolution6" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "batchnorm6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "relu5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "convolution7" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "batchnorm7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 64, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "elemwise_add1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "relu6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 128, 256}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]]], "convolution8" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution10" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 256}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 128, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "elemwise_add2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution11" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu9" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution12" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 128, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "elemwise_add3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm13" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution14" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, "Dilation" -> 
                    {2, 2}, "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 128}, "$OutputSize" -> {64, 128}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm14" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution15" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm15" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "elemwise_add4" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu12" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution16" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm16" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu13" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution17" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm17" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 256, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "elemwise_add5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu14" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution18" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm18" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution19" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, "Dilation" -> 
                    {4, 4}, "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 128}, "$OutputSize" -> {64, 128}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm19" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution20" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm20" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "elemwise_add6" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu16" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution21" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm21" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu17" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution22" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm22" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "elemwise_add7" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu18" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution23" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm23" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu19" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution24" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, "Dilation" -> 
                    {1, 1}, "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 128}, "$OutputSize" -> {64, 128}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "batchnorm24" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.899999976158, "Epsilon" -> 
                    9.99999974738*^-6, "Channels" -> 512, "Interleaving" -> 
                    False, "$SpatialDimensions" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "relu20" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]]], "convolution25" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{19, 512, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 19, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {64, 128}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT]]], "broadcast_add0" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantArray", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association["Dimensions" -> {19}], "Inputs" -> 
                    Association[], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Replicate", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "deconvolution0" -> 
                    Association[
                    "Type" -> "Deconvolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{19, 19, 16, 16}, 
                    NeuralNetworks`RealT], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 19, "KernelSize" -> {16, 16}, 
                    "Stride" -> {8, 8}, "PaddingSize" -> {4, 4}, 
                    "Interleaving" -> False, "$InputChannels" -> 19, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 128}, 
                    "$OutputSize" -> {512, 1024}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19, 64, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{19, 512, 1024}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19, 512, 1024}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1024, 19}, 
                    NeuralNetworks`RealT]]], "softmax0" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 1024, 19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1024, 19}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"input_0\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {242., {65.5, 71.5}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7396414212984977`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"4b66a52d-b7c9-4386-b2f4-ca6ed6ecb7a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net", "=", 
  RowBox[{"NetModel", "[", 
   RowBox[{
   "\"\<VGG-16 Trained on ImageNet Competition Data\>\"", ",", 
    "\"\<UninitializedEvaluationNet\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739641689552908*^9, 3.7396417127535486`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"cb8286a2-8840-4446-b2a5-abe7799d0399"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["40", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], 
                    "fc6" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, 25088}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop6" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc7" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop7" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1000, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "prob" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association["Labels" -> {
                    Entity["Concept", "Tench::q9r2d"], 
                    Entity["Concept", "CarassiusAuratus::f73xs"], 
                    Entity["Concept", "CarcharodonCarcharias::st7pj"], 
                    Entity["Concept", "GaleocerdoCuvieri::h7238"], 
                    Entity["Concept", "HammerheadShark::cky4t"], 
                    Entity["Concept", "Crampfish::6369q"], 
                    Entity["Concept", "Stingray::4cts3"], 
                    Entity["Concept", "Cock::2s2xh"], 
                    Entity["Concept", "Hen::49q38"], 
                    Entity["Concept", "StruthioCamelus::7fgc2"], 
                    Entity["Concept", "Brambling::47bpt"], 
                    Entity["Concept", "CarduelisCarduelis::bv5y9"], 
                    Entity["Concept", "CarpodacusMexicanus::zq6w8"], 
                    Entity["Concept", "Junco::sjqs9"], 
                    Entity["Concept", "IndigoBird::6365d"], 
                    Entity["Concept", "AmericanRobin::wf28w"], 
                    Entity["Concept", "Bulbul::4x6vd"], 
                    Entity["Concept", "Jay::9g7qw"], 
                    Entity["Concept", "Magpie::62kfm"], 
                    Entity["Concept", "Chickadee::qmsc9"], 
                    Entity["Concept", "WaterOuzel::n32d7"], 
                    Entity["Concept", "Kite::y2jjm"], 
                    Entity["Concept", "AmericanEagle::z2fqr"], 
                    Entity["Concept", "Vulture::r2nfy"], 
                    Entity["Concept", "GreatGrayOwl::97vk2"], 
                    Entity["Concept", "EuropeanFireSalamander::t6v33"], 
                    Entity["Concept", "CommonNewt::9nx3s"], 
                    Entity["Concept", "Eft::t3bv7"], 
                    Entity["Concept", "AmbystomaMaculatum::qnd2g"], 
                    Entity["Concept", "AmbystomaMexicanum::k9j45"], 
                    Entity["Concept", "Bullfrog::r9cvc"], 
                    Entity["Concept", "Tree-frog::m988r"], 
                    Entity["Concept", "AscaphusTrui::qr2np"], 
                    Entity["Concept", "CarettaCaretta::768y9"], 
                    Entity["Concept", "DermochelysCoriacea::ypc4b"], 
                    Entity["Concept", "MudTurtle::47p9w"], 
                    Entity["Concept", "Terrapin::5j9b2"], 
                    Entity["Concept", "BoxTortoise::hksb9"], 
                    Entity["Concept", "BandedGecko::38zhr"], 
                    Entity["Concept", "CommonIguana::66q43"], 
                    Entity["Concept", "AmericanChameleon::67k54"], 
                    Entity["Concept", "Whiptail::sb62k"], 
                    Entity["Concept", "Agama::22vdx"], 
                    Entity["Concept", "ChlamydosaurusKingi::stq3k"], 
                    Entity["Concept", "AlligatorLizard::k6335"], 
                    Entity["Concept", "GilaMonster::k8q26"], 
                    Entity["Concept", "GreenLizard::2fkzv"], 
                    Entity["Concept", "AfricanChameleon::x82fs"], 
                    Entity["Concept", "DragonLizard::s68v6"], 
                    Entity["Concept", "AfricanCrocodile::zw55f"], 
                    Entity["Concept", "AlligatorMississipiensis::s7582"], 
                    Entity["Concept", "Triceratops::p997c"], 
                    Entity["Concept", "CarphophisAmoenus::35dfs"], 
                    Entity["Concept", "Ring-neckedSnake::2f823"], 
                    Entity["Concept", "HognoseSnake::k5k58"], 
                    Entity["Concept", "GrassSnake::pv2xf"], 
                    Entity["Concept", "KingSnake::t9m8y"], 
                    Entity["Concept", "GarterSnake::892t9"], 
                    Entity["Concept", "WaterSnake::y627x"], 
                    Entity["Concept", "VineSnake::9kywz"], 
                    Entity["Concept", "HypsiglenaTorquata::6869v"], 
                    Entity["Concept", "BoaConstrictor::qq73z"], 
                    Entity["Concept", "PythonSebae::dmhh6"], 
                    Entity["Concept", "IndianCobra::2sv7h"], 
                    Entity["Concept", "GreenMamba::c9qn3"], 
                    Entity["Concept", "SeaSnake::s529y"], 
                    Entity["Concept", "Cerastes::6575z"], 
                    Entity["Concept", "CrotalusAdamanteus::8ynrx"], 
                    Entity["Concept", "CrotalusCerastes::m382t"], 
                    Entity["Concept", "Trilobite::3qyq3"], 
                    Entity["Concept", "Harvestman::545h3"], 
                    Entity["Concept", "Scorpion::9rx48"], 
                    Entity["Concept", "ArgiopeAurantia::633xv"], 
                    Entity["Concept", "AraneusCavaticus::thm3g"], 
                    Entity["Concept", "AraneaDiademata::4jvj8"], 
                    Entity["Concept", "BlackWidow::4682d"], 
                    Entity["Concept", "Tarantula::mc462"], 
                    Entity["Concept", "HuntingSpider::q7898"], 
                    Entity["Concept", "Tick::xw6hc"], 
                    Entity["Concept", "Centipede::s8w7r"], 
                    Entity["Concept", "BlackGrouse::9w35m"], 
                    Entity["Concept", "Ptarmigan::tv6c8"], 
                    Entity["Concept", "BonasaUmbellus::bpbr3"], 
                    Entity["Concept", "PrairieChicken::2ws9g"], 
                    Entity["Concept", "Peacock::kd2y4"], 
                    Entity["Concept", "Quail::7462f"], 
                    Entity["Concept", "Partridge::t22mp"], 
                    Entity["Concept", "AfricanGray::84css"], 
                    Entity["Concept", "Macaw::ntx97"], 
                    Entity["Concept", "CacatuaGalerita::tfz9w"], 
                    Entity["Concept", "Lorikeet::4f725"], 
                    Entity["Concept", "Coucal::z95g6"], 
                    Entity["Concept", "BeeEater::376h3"], 
                    Entity["Concept", "Hornbill::6389h"], 
                    Entity["Concept", "Hummingbird::vz6gt"], 
                    Entity["Concept", "Jacamar::v7428"], 
                    Entity["Concept", "Toucan::2h2d5"], 
                    Entity["Concept", "Drake::5cdfw"], 
                    Entity["Concept", "MergusSerrator::5t86m"], 
                    Entity["Concept", "Goose::82x27"], 
                    Entity["Concept", "BlackSwan::6ft7p"], 
                    Entity["Concept", "Tusker::dqq7d"], 
                    Entity["Concept", "Anteater::8t864"], 
                    Entity["Concept", "Duck-billedPlatypus::b8867"], 
                    Entity["Concept", "BrushKangaroo::493r2"], 
                    Entity["Concept", "KangarooBear::hvf3s"], 
                    Entity["Concept", "Wombat::m5rqr"], 
                    Entity["Concept", "Jellyfish::fs9rf"], 
                    Entity["Concept", "SeaAnemone::5n98x"], 
                    Entity["Concept", "BrainCoral::v7844"], 
                    Entity["Concept", "Flatworm::h957w"], 
                    Entity["Concept", "Nematode::hz536"], 
                    Entity["Concept", "Conch::44pfv"], 
                    Entity["Concept", "Snail::3r58h"], 
                    Entity["Concept", "Slug::d4638"], 
                    Entity["Concept", "Nudibranch::dq2vh"], 
                    Entity["Concept", "Coat-of-mailShell::h3tp5"], 
                    Entity["Concept", "ChamberedNautilus::tspc6"], 
                    Entity["Concept", "CancerMagister::5r562"], 
                    Entity["Concept", "CancerIrroratus::d69mr"], 
                    Entity["Concept", "FiddlerCrab::4mt9n"], 
                    Entity["Concept", "ParalithodesCamtschatica::pfzy2"], 
                    Entity["Concept", "HomarusAmericanus::n2j65"], 
                    Entity["Concept", "SeaCrawfish::x53g2"], 
                    Entity["Concept", "Crawdaddy::946y4"], 
                    Entity["Concept", "HermitCrab::4k242"], 
                    Entity["Concept", "Isopod::4z747"], 
                    Entity["Concept", "CiconiaCiconia::wkt3m"], 
                    Entity["Concept", "BlackStork::5v349"], 
                    Entity["Concept", "Spoonbill::4939q"], 
                    Entity["Concept", "Flamingo::28r7m"], 
                    Entity["Concept", "EgrettaCaerulea::9965c"], 
                    Entity["Concept", "AmericanEgret::43jz8"], 
                    Entity["Concept", "Bittern::722qw"], 
                    Entity["Concept", "Crane::9wrg8"], 
                    Entity["Concept", "AramusPictus::964mw"], 
                    Entity["Concept", "EuropeanGallinule::c7jfx"], 
                    Entity["Concept", "AmericanCoot::c7452"], 
                    Entity["Concept", "Bustard::p3zj5"], 
                    Entity["Concept", "ArenariaInterpres::3rbq4"], 
                    Entity["Concept", "Dunlin::4mj52"], 
                    Entity["Concept", "Redshank::yvbj8"], 
                    Entity["Concept", "Dowitcher::47w6h"], 
                    Entity["Concept", "OysterCatcher::9drpt"], 
                    Entity["Concept", "Pelican::jpfg7"], 
                    Entity["Concept", "AptenodytesPatagonica::f85wf"], 
                    Entity["Concept", "Mollymawk::r8386"], 
                    Entity["Concept", "EschrichtiusGibbosus::2c8q9"], 
                    Entity["Concept", "KillerWhale::26sj4"], 
                    Entity["Concept", "Dugong::ss39b"], 
                    Entity["Concept", "SeaLion::bs87w"], 
                    Entity["Concept", "Chihuahua::8hmhf"], 
                    Entity["Concept", "JapaneseSpaniel::h55d9"], 
                    Entity["Concept", "MalteseDog::trsv6"], 
                    Entity["Concept", "Peke::b9n5f"], 
                    Entity["Concept", "Shih-Tzu::kc9k8"], 
                    Entity["Concept", "BlenheimSpaniel::cd3nm"], 
                    Entity["Concept", "Papillon::zhn7j"], 
                    Entity["Concept", "ToyTerrier::k3s97"], 
                    Entity["Concept", "RhodesianRidgeback::jph75"], 
                    Entity["Concept", "AfghanHound::6845m"], 
                    Entity["Concept", "Basset::n769x"], 
                    Entity["Concept", "Beagle::2bdvt"], 
                    Entity["Concept", "Bloodhound::pc454"], 
                    Entity["Concept", "Bluetick::fs5sw"], 
                    Entity["Concept", "Black-and-tanCoonhound::84k6y"], 
                    Entity["Concept", "WalkerFoxhound::z3y7p"], 
                    Entity["Concept", "EnglishFoxhound::5v343"], 
                    Entity["Concept", "Redbone::j6h4x"], 
                    Entity["Concept", "Borzoi::v43t8"], 
                    Entity["Concept", "IrishWolfhound::8m3gw"], 
                    Entity["Concept", "ItalianGreyhound::s4gq3"], 
                    Entity["Concept", "Whippet::57r47"], 
                    Entity["Concept", "IbizanHound::987kj"], 
                    Entity["Concept", "Elkhound::62q39"], 
                    Entity["Concept", "OtterHound::3442w"], 
                    Entity["Concept", "GazelleHound::7k449"], 
                    Entity["Concept", "Deerhound::btsv4"], 
                    Entity["Concept", "Weimaraner::476j6"], 
                    Entity["Concept", "StaffordshireBullTerrier::883y3"], 
                    Entity["Concept", "AmericanPitBullTerrier::kw55q"], 
                    Entity["Concept", "BedlingtonTerrier::98h82"], 
                    Entity["Concept", "BorderTerrier::gh5h6"], 
                    Entity["Concept", "KerryBlueTerrier::t9c62"], 
                    Entity["Concept", "IrishTerrier::qmsm4"], 
                    Entity["Concept", "NorfolkTerrier::b7z76"], 
                    Entity["Concept", "NorwichTerrier::9v483"], 
                    Entity["Concept", "YorkshireTerrier::bn4jn"], 
                    Entity["Concept", "Wire-hairedFoxTerrier::pn5qb"], 
                    Entity["Concept", "LakelandTerrier::b729b"], 
                    Entity["Concept", "SealyhamTerrier::5jz56"], 
                    Entity["Concept", "Airedale::w6gf4"], 
                    Entity["Concept", "CairnTerrier::67c37"], 
                    Entity["Concept", "AustralianTerrier::q2h6g"], 
                    Entity["Concept", "DandieDinmont::ff47s"], 
                    Entity["Concept", "BostonBull::6662j"], 
                    Entity["Concept", "MiniatureSchnauzer::848y9"], 
                    Entity["Concept", "GiantSchnauzer::8fwv6"], 
                    Entity["Concept", "StandardSchnauzer::q9j3y"], 
                    Entity["Concept", "ScotchTerrier::2f2jw"], 
                    Entity["Concept", "ChrysanthemumDog::y9tps"], 
                    Entity["Concept", "SilkyTerrier::xyfw3"], 
                    Entity["Concept", "Soft-coatedWheatenTerrier::474j2"], 
                    Entity["Concept", "WestHighlandWhiteTerrier::4h85y"], 
                    Entity["Concept", "LhasaApso::cr28m"], 
                    Entity["Concept", "Flat-coatedRetriever::866mk"], 
                    Entity["Concept", "Curly-coatedRetriever::pb8yt"], 
                    Entity["Concept", "GoldenRetriever::t59tg"], 
                    Entity["Concept", "LabradorRetriever::7g587"], 
                    Entity["Concept", "ChesapeakeBayRetriever::s8567"], 
                    Entity["Concept", "GermanShort-hairedPointer::k3297"], 
                    Entity["Concept", "HungarianPointer::7555p"], 
                    Entity["Concept", "EnglishSetter::ps793"], 
                    Entity["Concept", "IrishSetter::h5pp3"], 
                    Entity["Concept", "GordonSetter::yvx65"], 
                    Entity["Concept", "BrittanySpaniel::435gz"], 
                    Entity["Concept", "Clumber::2ddvk"], 
                    Entity["Concept", "EnglishSpringer::f4dq6"], 
                    Entity["Concept", "WelshSpringerSpaniel::qyng2"], 
                    Entity["Concept", "Cocker::7284r"], 
                    Entity["Concept", "SussexSpaniel::sbv42"], 
                    Entity["Concept", "IrishWaterSpaniel::m9zkp"], 
                    Entity["Concept", "Kuvasz::z4sxp"], 
                    Entity["Concept", "Schipperke::7778z"], 
                    Entity["Concept", "Groenendael::5854s"], 
                    Entity["Concept", "Malinois::k8y57"], 
                    Entity["Concept", "Briard::dtm5k"], 
                    Entity["Concept", "Kelpie::k6795"], 
                    Entity["Concept", "Komondor::p8q9b"], 
                    Entity["Concept", "OldEnglishSheepdog::4zdy3"], 
                    Entity["Concept", "ShetlandSheepDog::sffh8"], 
                    Entity["Concept", "Collie::999kf"], 
                    Entity["Concept", "BorderCollie::463w2"], 
                    Entity["Concept", "BouvierDesFlandres::h7txf"], 
                    Entity["Concept", "Rottweiler::zywt3"], 
                    Entity["Concept", "Alsatian::fh5zw"], 
                    Entity["Concept", "Doberman::zgqf4"], 
                    Entity["Concept", "MiniaturePinscher::jvy9c"], 
                    Entity["Concept", "GreaterSwissMountainDog::t7642"], 
                    Entity["Concept", "BerneseMountainDog::y32v5"], 
                    Entity["Concept", "Appenzeller::j96dj"], 
                    Entity["Concept", "EntleBucher::y43x6"], 
                    Entity["Concept", "Boxer::3966f"], 
                    Entity["Concept", "BullMastiff::6p365"], 
                    Entity["Concept", "TibetanMastiff::4f68b"], 
                    Entity["Concept", "FrenchBulldog::3jg82"], 
                    Entity["Concept", "GreatDane::xg8dn"], 
                    Entity["Concept", "SaintBernard::r5277"], 
                    Entity["Concept", "EskimoDog::2vm97"], 
                    Entity["Concept", "AlaskanMalamute::y6wqq"], 
                    Entity["Concept", "SiberianHusky::k7pkk"], 
                    Entity["Concept", "CarriageDog::jh3w6"], 
                    Entity["Concept", "Affenpinscher::58wr6"], 
                    Entity["Concept", "Basenji::k9yy2"], 
                    Entity["Concept", "Pug::6799h"], 
                    Entity["Concept", "Leonberg::49td5"], 
                    Entity["Concept", "NewfoundlandDog::q787h"], 
                    Entity["Concept", "GreatPyrenees::t8qh7"], 
                    Entity["Concept", "Samoyede::rq827"], 
                    Entity["Concept", "Pomeranian::dx7mr"], 
                    Entity["Concept", "ChowChow::7x292"], 
                    Entity["Concept", "Keeshond::rz734"], 
                    Entity["Concept", "BrabanconGriffon::jh5pt"], 
                    Entity["Concept", "Pembroke::95g54"], 
                    Entity["Concept", "Cardigan::b724j"], 
                    Entity["Concept", "ToyPoodle::732f6"], 
                    Entity["Concept", "MiniaturePoodle::4955p"], 
                    Entity["Concept", "StandardPoodle::w25c4"], 
                    Entity["Concept", "MexicanHairless::m2by7"], 
                    Entity["Concept", "CanisLupus::5gwtc"], 
                    Entity["Concept", "ArcticWolf::4xr47"], 
                    Entity["Concept", "CanisNiger::99p6d"], 
                    Entity["Concept", "BrushWolf::44t57"], 
                    Entity["Concept", "CanisDingo::529k9"], 
                    Entity["Concept", "CuonAlpinus::f5yfn"], 
                    Entity["Concept", "AfricanHuntingDog::d9b86"], 
                    Entity["Concept", "Hyaena::7444d"], 
                    Entity["Concept", "VulpesVulpes::g8mvp"], 
                    Entity["Concept", "VulpesMacrotis::jm64h"], 
                    Entity["Concept", "AlopexLagopus::44cg9"], 
                    Entity["Concept", "GrayFox::vftd5"], 
                    Entity["Concept", "TabbyCat::rvg7f"], 
                    Entity["Concept", "TigerCat::8k84h"], 
                    Entity["Concept", "PersianCat::p69kd"], 
                    Entity["Concept", "SiameseCat::hgg68"], 
                    Entity["Concept", "EgyptianCat::sd6pw"], 
                    Entity["Concept", "Cougar::7bc9f"], 
                    Entity["Concept", "Catamount::q4f63"], 
                    Entity["Concept", "PantheraPardus::r35k5"], 
                    Entity["Concept", "PantheraUncia::z6697"], 
                    Entity["Concept", "FelisOnca::jh7tq"], 
                    Entity["Concept", "KingOfBeasts::vrwm9"], 
                    Entity["Concept", "PantheraTigris::2mpmq"], 
                    Entity["Concept", "GiantAnteater::y96st"], 
                    Entity["Concept", "BrownBear::8374p"], 
                    Entity["Concept", "AmericanBlackBear::763x8"], 
                    Entity["Concept", "IceBear::fnc5j"], 
                    Entity["Concept", "MelursusUrsinus::48x75"], 
                    Entity["Concept", "Mongoose::5hp73"], 
                    Entity["Concept", "Meerkat::q77nd"], 
                    Entity["Concept", "TigerBeetle::8362y"], 
                    Entity["Concept", "LadyBeetle::tx6bz"], 
                    Entity["Concept", "CarabidBeetle::w3hjn"], 
                    Entity["Concept", "Long-hornedBeetle::9zzc8"], 
                    Entity["Concept", "Chrysomelid::y8pqz"], 
                    Entity["Concept", "DungBeetle::bt6hz"], 
                    Entity["Concept", "RhinocerosBeetle::23y53"], 
                    Entity["Concept", "Weevil::r87rt"], 
                    Entity["Concept", "Fly::68s97"], 
                    Entity["Concept", "Bee::d8yym"], 
                    Entity["Concept", "Ant::7tznr"], 
                    Entity["Concept", "Grasshopper::52v2f"], 
                    Entity["Concept", "Cricket::82n55"], 
                    Entity["Concept", "StickInsect::4x983"], 
                    Entity["Concept", "Cockroach::7426w"], 
                    Entity["Concept", "Mantid::93t86"], 
                    Entity["Concept", "Cicada::w2299"], 
                    Entity["Concept", "Leafhopper::8k2k2"], 
                    Entity["Concept", "Lacewing::8v2m6"], 
                    Entity["Concept", "Dragonfly::7s252"], 
                    Entity["Concept", "Damselfly::dh8zj"], 
                    Entity["Concept", "Admiral::j6fvp"], 
                    Entity["Concept", "RingletButterfly::28v7s"], 
                    Entity["Concept", "DanausPlexippus::bfk9c"], 
                    Entity["Concept", "CabbageButterfly::c8v77"], 
                    Entity["Concept", "SulfurButterfly::b9263"], 
                    Entity["Concept", "Lycaenid::4whyw"], 
                    Entity["Concept", "SeaStar::46w97"], 
                    Entity["Concept", "SeaUrchin::7b835"], 
                    Entity["Concept", "Holothurian::7jk5q"], 
                    Entity["Concept", "Cottontail::bsxk4"], 
                    Entity["Concept", "Hare::55m72"], 
                    Entity["Concept", "AngoraRabbit::v6627"], 
                    Entity["Concept", "Hamster::9yy49"], 
                    Entity["Concept", "Porcupine::5r285"], 
                    Entity["Concept", "EasternFoxSquirrel::8g9v6"], 
                    Entity["Concept", "Marmot::7vb94"], 
                    Entity["Concept", "Beaver::qp598"], 
                    Entity["Concept", "CaviaCobaya::b8w85"], 
                    Entity["Concept", "Sorrel::b824z"], 
                    Entity["Concept", "Zebra::nx5qr"], 
                    Entity["Concept", "Grunter::437d2"], 
                    Entity["Concept", "WildBoar::5wjz4"], 
                    Entity["Concept", "Warthog::3q477"], 
                    Entity["Concept", "Hippo::647b2"], 
                    Entity["Concept", "Ox::yhn7j"], 
                    Entity["Concept", "AsiaticBuffalo::532z9"], 
                    Entity["Concept", "Bison::25c86"], 
                    Entity["Concept", "Tup::8y669"], 
                    Entity["Concept", "Bighorn::773z4"], 
                    Entity["Concept", "CapraIbex::p5pmr"], 
                    Entity["Concept", "Hartebeest::r8276"], 
                    Entity["Concept", "AepycerosMelampus::q45p2"], 
                    Entity["Concept", "Gazelle::px427"], 
                    Entity["Concept", "ArabianCamel::98q62"], 
                    Entity["Concept", "Llama::pp4mc"], 
                    Entity["Concept", "Weasel::gcxk7"], 
                    Entity["Concept", "Mink::r5727"], 
                    Entity["Concept", "Fitch::x2w8q"], 
                    Entity["Concept", "Black-footedFerret::r6gqg"], 
                    Entity["Concept", "Otter::63tg7"], 
                    Entity["Concept", "WoodPussy::6886s"], 
                    Entity["Concept", "Badger::vcsk3"], 
                    Entity["Concept", "Armadillo::s9866"], 
                    Entity["Concept", "Ai::z6968"], 
                    Entity["Concept", "Orang::5385s"], 
                    Entity["Concept", "Gorilla::7vrdz"], 
                    Entity["Concept", "Chimp::2t668"], 
                    Entity["Concept", "Gibbon::7yqsr"], 
                    Entity["Concept", "HylobatesSyndactylus::3g4xn"], 
                    Entity["Concept", "Guenon::7y986"], 
                    Entity["Concept", "ErythrocebusPatas::949v6"], 
                    Entity["Concept", "Baboon::28m6v"], 
                    Entity["Concept", "Macaque::m87ss"], 
                    Entity["Concept", "Langur::3w42b"], 
                    Entity["Concept", "Colobus::yqv5q"], 
                    Entity["Concept", "NasalisLarvatus::92p77"], 
                    Entity["Concept", "Marmoset::3j236"], 
                    Entity["Concept", "CebusCapucinus::4r452"], 
                    Entity["Concept", "HowlerMonkey::87c48"], 
                    Entity["Concept", "TitiMonkey::6rqgy"], 
                    Entity["Concept", "AtelesGeoffroyi::8f944"], 
                    Entity["Concept", "SaimiriSciureus::f9528"], 
                    Entity["Concept", "LemurCatta::4z4fy"], 
                    Entity["Concept", "Indri::w2dsm"], 
                    Entity["Concept", "ElephasMaximus::4668g"], 
                    Entity["Concept", "AfricanElephant::634z7"], 
                    Entity["Concept", "AilurusFulgens::m96y6"], 
                    Entity["Concept", "AiluropodaMelanoleuca::xg799"], 
                    Entity["Concept", "Barracouta::dzc32"], 
                    Entity["Concept", "Eel::6yymn"], 
                    Entity["Concept", "BlueJack::8728b"], 
                    Entity["Concept", "HolocanthusTricolor::6t872"], 
                    Entity["Concept", "AnemoneFish::5mdgt"], 
                    Entity["Concept", "Sturgeon::46xyk"], 
                    Entity["Concept", "Garfish::p9w7b"], 
                    Entity["Concept", "Lionfish::45vp5"], 
                    Entity["Concept", "Globefish::z6448"], 
                    Entity["Concept", "Abacus::s322h"], 
                    Entity["Concept", "Abaya::327b3"], 
                    Entity["Concept", "AcademicGown::6vvft"], 
                    Entity["Concept", "Accordion::vx545"], 
                    Entity["Concept", "AcousticGuitar::wp46j"], 
                    Entity["Concept", "AircraftCarrier::74d49"], 
                    Entity["Concept", "Airliner::t7542"], 
                    Entity["Concept", "Airship::dg429"], 
                    Entity["Concept", "Altar::z644x"], 
                    Entity["Concept", "Ambulance::rgts3"], 
                    Entity["Concept", "AmphibiousVehicle::rr85n"], 
                    Entity["Concept", "AnalogClock::3832f"], 
                    Entity["Concept", "Apiary::d939v"], 
                    Entity["Concept", "Apron::qr79c"], 
                    Entity["Concept", "Ash-bin::6sd8p"], 
                    Entity["Concept", "AssaultRifle::d2gst"], 
                    Entity["Concept", "BackPack::2cjsp"], 
                    Entity["Concept", "Bakehouse::6nmsm"], 
                    Entity["Concept", "BalanceBeam::6nyqs"], 
                    Entity["Concept", "Balloon::64p99"], 
                    Entity["Concept", "Ballpen::k35fx"], 
                    Entity["Concept", "BandAid::z727z"], 
                    Entity["Concept", "Banjo::fs3f9"], 
                    Entity["Concept", "Balusters::nt6x4"], 
                    Entity["Concept", "Barbell::295kg"], 
                    Entity["Concept", "BarberChair::mybp2"], 
                    Entity["Concept", "Barbershop::qg6kn"], 
                    Entity["Concept", "Barn::6xw3q"], 
                    Entity["Concept", "Barometer::65g49"], 
                    Entity["Concept", "Barrel::3pzvn"], 
                    Entity["Concept", "GardenCart::7br53"], 
                    Entity["Concept", "Baseball::9f8qz"], 
                    Entity["Concept", "Basketball::jq262"], 
                    Entity["Concept", "Bassinet::yn2td"], 
                    Entity["Concept", "Bassoon::92ky9"], 
                    Entity["Concept", "BathingCap::tsd8r"], 
                    Entity["Concept", "BathTowel::72qcw"], 
                    Entity["Concept", "BathingTub::729f8"], 
                    Entity["Concept", "BeachWaggon::c945g"], 
                    Entity["Concept", "BeaconLight::k282w"], 
                    Entity["Concept", "Beaker::btv5s"], 
                    Entity["Concept", "Busby::448c3"], 
                    Entity["Concept", "BeerBottle::8gz7t"], 
                    Entity["Concept", "BeerGlass::r6xp2"], 
                    Entity["Concept", "BellCot::567d3"], 
                    Entity["Concept", "Bib::5wq8k"], 
                    Entity["Concept", "Bicycle-built-for-two::7h478"], 
                    Entity["Concept", "Bikini::m86f8"], 
                    Entity["Concept", "Ring-binder::848m9"], 
                    Entity["Concept", "Binoculars::yp4ss"], 
                    Entity["Concept", "Birdhouse::n3qgq"], 
                    Entity["Concept", "Boathouse::59rht"], 
                    Entity["Concept", "Bob::n2762"], 
                    Entity["Concept", "BolaTie::g65x6"], 
                    Entity["Concept", "PokeBonnet::f4y42"], 
                    Entity["Concept", "Bookcase::6t56v"], 
                    Entity["Concept", "Bookshop::4rgfr"], 
                    Entity["Concept", "Bottlecap::mgg5c"], 
                    Entity["Concept", "Bow::89mx8"], 
                    Entity["Concept", "Bow-tie::79h37"], 
                    Entity["Concept", "MemorialTablet::66g76"], 
                    Entity["Concept", "Bandeau::4j247"], 
                    Entity["Concept", "Breakwater::nrtz2"], 
                    Entity["Concept", "Breastplate::4fmw7"], 
                    Entity["Concept", "Broom::hgy49"], 
                    Entity["Concept", "Bucket::f9743"], 
                    Entity["Concept", "Buckle::3398s"], 
                    Entity["Concept", "BulletproofVest::djqn3"], 
                    Entity["Concept", "BulletTrain::4dfr5"], 
                    Entity["Concept", "ButcherShop::hfp48"], 
                    Entity["Concept", "Taxi::379w3"], 
                    Entity["Concept", "Caldron::k6c8c"], 
                    Entity["Concept", "WaxLight::d9rqz"], 
                    Entity["Concept", "Cannon::54f56"], 
                    Entity["Concept", "Canoe::nnt95"], 
                    Entity["Concept", "CanOpener::6b885"], 
                    Entity["Concept", "Cardigan::237mv"], 
                    Entity["Concept", "CarMirror::5xccg"], 
                    Entity["Concept", "Carousel::n2992"], 
                    Entity["Concept", "CarpentersKit::37rxx"], 
                    Entity["Concept", "Carton::769gr"], 
                    Entity["Concept", "CarWheel::t6f2y"], 
                    Entity["Concept", "AutomatedTeller::w8746"], 
                    Entity["Concept", "Cassette::2pvzn"], 
                    Entity["Concept", "CassettePlayer::v2ng9"], 
                    Entity["Concept", "Castle::m2pbs"], 
                    Entity["Concept", "Catamaran::7b489"], 
                    Entity["Concept", "CDPlayer::7gq93"], 
                    Entity["Concept", "Cello::hhbp5"], 
                    Entity["Concept", "Cellphone::5k4s4"], 
                    Entity["Concept", "Chain::w9j9s"], 
                    Entity["Concept", "ChainlinkFence::pfv8d"], 
                    Entity["Concept", "ChainArmor::h32y6"], 
                    Entity["Concept", "ChainSaw::f5bt6"], 
                    Entity["Concept", "Chest::fd956"], 
                    Entity["Concept", "Chiffonier::m3jmr"], 
                    Entity["Concept", "Chime::m6623"], 
                    Entity["Concept", "ChinaCabinet::9bmqg"], 
                    Entity["Concept", "ChristmasStocking::867r8"], 
                    Entity["Concept", "ChurchBuilding::2394b"], 
                    Entity["Concept", "MovieHouse::hbj23"], 
                    Entity["Concept", "Cleaver::bk925"], 
                    Entity["Concept", "CliffDwelling::5c9sb"], 
                    Entity["Concept", "Cloak::dj822"], 
                    Entity["Concept", "Geta::3r9c9"], 
                    Entity["Concept", "CocktailShaker::r9655"], 
                    Entity["Concept", "CoffeeMug::gwhm5"], 
                    Entity["Concept", "Coffeepot::32tb2"], 
                    Entity["Concept", "Coil::c7h65"], 
                    Entity["Concept", "CombinationLock::b8rp7"], 
                    Entity["Concept", "ComputerKeyboard::26d5s"], 
                    Entity["Concept", "CandyStore::268x7"], 
                    Entity["Concept", "ContainerShip::tsz7x"], 
                    Entity["Concept", "Convertible::4pxj2"], 
                    Entity["Concept", "BottleScrew::djq6x"], 
                    Entity["Concept", "Cornet::35d97"], 
                    Entity["Concept", "CowboyBoot::5f655"], 
                    Entity["Concept", "CowboyHat::59wk9"], 
                    Entity["Concept", "Cradle::3882z"], 
                    Entity["Concept", "Crane::k29p4"], 
                    Entity["Concept", "CrashHelmet::76cs8"], 
                    Entity["Concept", "Crate::wmc92"], 
                    Entity["Concept", "Cot::3kgws"], 
                    Entity["Concept", "CrockPot::w5t85"], 
                    Entity["Concept", "CroquetBall::g84t5"], 
                    Entity["Concept", "Crutch::3q57h"], 
                    Entity["Concept", "Cuirass::256jq"], 
                    Entity["Concept", "Dam::w9687"], 
                    Entity["Concept", "Desk::q73z7"], 
                    Entity["Concept", "DesktopComputer::f8gmj"], 
                    Entity["Concept", "DialPhone::3j2f6"], 
                    Entity["Concept", "Nappy::6979r"], 
                    Entity["Concept", "DigitalClock::hm3x5"], 
                    Entity["Concept", "DigitalWatch::v274r"], 
                    Entity["Concept", "DiningTable::6ypqf"], 
                    Entity["Concept", "Dishcloth::4t678"], 
                    Entity["Concept", "DishWasher::px58r"], 
                    Entity["Concept", "DiscBrake::bxcw7"], 
                    Entity["Concept", "DockingFacility::f42zy"], 
                    Entity["Concept", "DogSled::34t8q"], 
                    Entity["Concept", "Dome::5j3x2"], 
                    Entity["Concept", "WelcomeMat::jqb5y"], 
                    Entity["Concept", "DrillingPlatform::r792r"], 
                    Entity["Concept", "Membranophone::2x379"], 
                    Entity["Concept", "Drumstick::4j5yw"], 
                    Entity["Concept", "Dumbbell::qjh33"], 
                    Entity["Concept", "DutchOven::qy3dv"], 
                    Entity["Concept", "ElectricFan::n79z5"], 
                    Entity["Concept", "ElectricGuitar::9pkmr"], 
                    Entity["Concept", "ElectricLocomotive::5wv23"], 
                    Entity["Concept", "EntertainmentCenter::mg549"], 
                    Entity["Concept", "Envelope::c722j"], 
                    Entity["Concept", "EspressoMaker::z42xs"], 
                    Entity["Concept", "FacePowder::yzy7x"], 
                    Entity["Concept", "FeatherBoa::c94h7"], 
                    Entity["Concept", "FileCabinet::vsb9c"], 
                    Entity["Concept", "Fireboat::xf64t"], 
                    Entity["Concept", "FireEngine::zsvx8"], 
                    Entity["Concept", "FireScreen::665b5"], 
                    Entity["Concept", "Flagstaff::qz2t6"], 
                    Entity["Concept", "TransverseFlute::8pj76"], 
                    Entity["Concept", "FoldingChair::4vqcr"], 
                    Entity["Concept", "FootballHelmet::c6twc"], 
                    Entity["Concept", "Forklift::b2dfv"], 
                    Entity["Concept", "Fountain::yn972"], 
                    Entity["Concept", "FountainPen::r2vw4"], 
                    Entity["Concept", "Four-poster::8kbhw"], 
                    Entity["Concept", "FreightCar::5pg8s"], 
                    Entity["Concept", "FrenchHorn::rm367"], 
                    Entity["Concept", "FryingPan::23fyh"], 
                    Entity["Concept", "FurCoat::6q374"], 
                    Entity["Concept", "Dustcart::2bbpr"], 
                    Entity["Concept", "GasHelmet::23k79"], 
                    Entity["Concept", "GasolinePump::wk2nk"], 
                    Entity["Concept", "Goblet::h85x9"], 
                    Entity["Concept", "Go-kart::gjsj5"], 
                    Entity["Concept", "GolfBall::63tb2"], 
                    Entity["Concept", "GolfCart::sxmp6"], 
                    Entity["Concept", "Gondola::4ds6k"], 
                    Entity["Concept", "Tam-tam::m962t"], 
                    Entity["Concept", "Gown::76k26"], 
                    Entity["Concept", "GrandPiano::8kk56"], 
                    Entity["Concept", "Glasshouse::qxjm6"], 
                    Entity["Concept", "RadiatorGrille::75d36"], 
                    Entity["Concept", "FoodMarket::4bmts"], 
                    Entity["Concept", "Guillotine::w4656"], 
                    Entity["Concept", "HairSlide::3xwcp"], 
                    Entity["Concept", "HairSpray::9w6z4"], 
                    Entity["Concept", "HalfTrack::59zq4"], 
                    Entity["Concept", "Hammer::cx2fn"], 
                    Entity["Concept", "Hamper::3b93m"], 
                    Entity["Concept", "BlowDrier::t4dpz"], 
                    Entity["Concept", "Hand-heldComputer::zs5zw"], 
                    Entity["Concept", "Handkerchief::84d24"], 
                    Entity["Concept", "FixedDisk::5xfff"], 
                    Entity["Concept", "Harmonica::8t835"], 
                    Entity["Concept", "Harp::zz89k"], 
                    Entity["Concept", "Harvester::472sq"], 
                    Entity["Concept", "Hatchet::7cspp"], 
                    Entity["Concept", "Holster::g2prc"], 
                    Entity["Concept", "HomeTheater::4y845"], 
                    Entity["Concept", "Honeycomb::qq347"], 
                    Entity["Concept", "Claw::7kmg8"], 
                    Entity["Concept", "Hoopskirt::3784g"], 
                    Entity["Concept", "HighBar::n5222"], 
                    Entity["Concept", "Horse-cart::546b9"], 
                    Entity["Concept", "Hourglass::83jnz"], 
                    Entity["Concept", "IPod::366dw"], 
                    Entity["Concept", "SmoothingIron::274h7"], 
                    Entity["Concept", "Jack-o-lantern::yss6v"], 
                    Entity["Concept", "BlueJean::68hww"], 
                    Entity["Concept", "Jeep::5twmt"], 
                    Entity["Concept", "TeeShirt::nk5bs"], 
                    Entity["Concept", "JigsawPuzzle::jgp79"], 
                    Entity["Concept", "Jinrikisha::g7j7m"], 
                    Entity["Concept", "Joystick::nj32z"], 
                    Entity["Concept", "Kimono::284nv"], 
                    Entity["Concept", "KneePad::nh7y5"], 
                    Entity["Concept", "Knot::f4x5y"], 
                    Entity["Concept", "LabCoat::6fg55"], 
                    Entity["Concept", "Ladle::3m7q7"], 
                    Entity["Concept", "LampShade::4b824"], 
                    Entity["Concept", "Laptop::zdd33"], 
                    Entity["Concept", "LawnMower::z97p3"], 
                    Entity["Concept", "LensCap::6j259"], 
                    Entity["Concept", "LetterOpener::sx79v"], 
                    Entity["Concept", "Library::8855f"], 
                    Entity["Concept", "Lifeboat::3r554"], 
                    Entity["Concept", "Igniter::638td"], 
                    Entity["Concept", "Limo::jfrr3"], 
                    Entity["Concept", "OceanLiner::s5fxp"], 
                    Entity["Concept", "LipRouge::4vd22"], 
                    Entity["Concept", "Loafer::br9fk"], 
                    Entity["Concept", "Lotion::79h3v"], 
                    Entity["Concept", "Loudspeaker::44d64"], 
                    Entity["Concept", "JewelersLoupe::kg4bc"], 
                    Entity["Concept", "Lumbermill::94r3y"], 
                    Entity["Concept", "MagneticCompass::5r692"], 
                    Entity["Concept", "Postbag::ck37r"], 
                    Entity["Concept", "LetterBox::pccp7"], 
                    Entity["Concept", "Maillot::d8grj"], 
                    Entity["Concept", "TankSuit::5k74s"], 
                    Entity["Concept", "ManholeCover::4x7fq"], 
                    Entity["Concept", "Maraca::395nq"], 
                    Entity["Concept", "Marimba::kbbq5"], 
                    Entity["Concept", "Mask::798jz"], 
                    Entity["Concept", "Matchstick::266wm"], 
                    Entity["Concept", "Maypole::qc3qr"], 
                    Entity["Concept", "Labyrinth::gc6rg"], 
                    Entity["Concept", "MeasuringCup::7b637"], 
                    Entity["Concept", "MedicineCabinet::m9g7m"], 
                    Entity["Concept", "Megalith::753z9"], 
                    Entity["Concept", "Microphone::7bqww"], 
                    Entity["Concept", "MicrowaveOven::fs7tb"], 
                    Entity["Concept", "MilitaryUniform::r9626"], 
                    Entity["Concept", "MilkCan::d9g72"], 
                    Entity["Concept", "Minibus::y94d9"], 
                    Entity["Concept", "Mini::pn78q"], 
                    Entity["Concept", "Minivan::yfsj9"], 
                    Entity["Concept", "Missile::854m6"], 
                    Entity["Concept", "Mitten::7d534"], 
                    Entity["Concept", "MixingBowl::djy62"], 
                    Entity["Concept", "ManufacturedHome::d7czj"], 
                    Entity["Concept", "ModelT::c44dv"], 
                    Entity["Concept", "Modem::wq8j3"], 
                    Entity["Concept", "Monastery::mkgg8"], 
                    Entity["Concept", "Monitor::nh8d4"], 
                    Entity["Concept", "Moped::p85wp"], 
                    Entity["Concept", "Mortar::jz37q"], 
                    Entity["Concept", "Mortarboard::8r99w"], 
                    Entity["Concept", "Mosque::35k94"], 
                    Entity["Concept", "MosquitoNet::5z562"], 
                    Entity["Concept", "MotorScooter::bbwp9"], 
                    Entity["Concept", "All-terrainBike::7n976"], 
                    Entity["Concept", "MountainTent::k5s7y"], 
                    Entity["Concept", "ComputerMouse::kbzr4"], 
                    Entity["Concept", "Mousetrap::j8542"], 
                    Entity["Concept", "MovingVan::2s387"], 
                    Entity["Concept", "Muzzle::c7f4q"], 
                    Entity["Concept", "Nail::x2828"], 
                    Entity["Concept", "NeckBrace::hxh4p"], 
                    Entity["Concept", "Necklace::58n8w"], 
                    Entity["Concept", "Nipple::jfzc3"], 
                    Entity["Concept", "NotebookComputer::b3h64"], 
                    Entity["Concept", "Obelisk::s7vg6"], 
                    Entity["Concept", "Hautbois::937r3"], 
                    Entity["Concept", "Ocarina::zc9mv"], 
                    Entity["Concept", "Hodometer::jw6kb"], 
                    Entity["Concept", "OilFilter::d8chh"], 
                    Entity["Concept", "PipeOrgan::gq9sr"], 
                    Entity["Concept", "Cathode-rayOscilloscope::z4q77"], 
                    Entity["Concept", "Overskirt::n87sx"], 
                    Entity["Concept", "Oxcart::vwjn2"], 
                    Entity["Concept", "OxygenMask::4k479"], 
                    Entity["Concept", "Packet::r63y2"], 
                    Entity["Concept", "BoatPaddle::843sz"], 
                    Entity["Concept", "PaddleWheel::c59g3"], 
                    Entity["Concept", "Padlock::73c99"], 
                    Entity["Concept", "Paintbrush::2456k"], 
                    Entity["Concept", "Jammies::5vhcb"], 
                    Entity["Concept", "Palace::3556d"], 
                    Entity["Concept", "PandeanPipe::gjck2"], 
                    Entity["Concept", "PaperTowel::j7j8m"], 
                    Entity["Concept", "Parachute::k594d"], 
                    Entity["Concept", "Bars::3m828"], 
                    Entity["Concept", "ParkBench::hq98s"], 
                    Entity["Concept", "ParkingMeter::h445p"], 
                    Entity["Concept", "PassengerCar::b7xgp"], 
                    Entity["Concept", "Patio::65kf2"], 
                    Entity["Concept", "Pay-phone::4h2kc"], 
                    Entity["Concept", "Footstall::b89vf"], 
                    Entity["Concept", "PencilBox::977v9"], 
                    Entity["Concept", "PencilSharpener::23nv4"], 
                    Entity["Concept", "Essence::9m7fx"], 
                    Entity["Concept", "PetriDish::xt977"], 
                    Entity["Concept", "Photocopier::33g75"], 
                    Entity["Concept", "Plectron::5g596"], 
                    Entity["Concept", "Pickelhaube::pgr6y"], 
                    Entity["Concept", "Paling::2brd3"], 
                    Entity["Concept", "PickupTruck::9k58n"], 
                    Entity["Concept", "Pier::36y3h"], 
                    Entity["Concept", "PennyBank::78b56"], 
                    Entity["Concept", "PillBottle::r9pdj"], 
                    Entity["Concept", "Pillow::3y32w"], 
                    Entity["Concept", "Ping-pongBall::3vdwp"], 
                    Entity["Concept", "Pinwheel::85td5"], 
                    Entity["Concept", "PirateShip::386k8"], 
                    Entity["Concept", "Ewer::w6672"], 
                    Entity["Concept", "CarpentersPlane::287kt"], 
                    Entity["Concept", "Planetarium::kq5yg"], 
                    Entity["Concept", "PlasticBag::9x453"], 
                    Entity["Concept", "PlateRack::sxt2r"], 
                    Entity["Concept", "Plough::y6c4t"], 
                    Entity["Concept", "PlumbersHelper::hq4m2"], 
                    Entity["Concept", "PolaroidCamera::38q9k"], 
                    Entity["Concept", "Pole::c4566"], 
                    Entity["Concept", "BlackMaria::5jn8v"], 
                    Entity["Concept", "Poncho::tr389"], 
                    Entity["Concept", "BilliardTable::9c56d"], 
                    Entity["Concept", "PopBottle::6243b"], 
                    Entity["Concept", "Flowerpot::jjb26"], 
                    Entity["Concept", "PottersWheel::zwt32"], 
                    Entity["Concept", "PowerDrill::j44yg"], 
                    Entity["Concept", "PrayerMat::x6rjb"], 
                    Entity["Concept", "Printer::c4244"], 
                    Entity["Concept", "Prison::rsq7c"], 
                    Entity["Concept", "Missile::n28m6"], 
                    Entity["Concept", "Projector::d56q9"], 
                    Entity["Concept", "HockeyPuck::3hj3q"], 
                    Entity["Concept", "PunchBag::wm5qg"], 
                    Entity["Concept", "Purse::n57jd"], 
                    Entity["Concept", "QuillPen::jm57s"], 
                    Entity["Concept", "Quilt::f56w9"], 
                    Entity["Concept", "RaceCar::9m8p9"], 
                    Entity["Concept", "Racquet::53f72"], 
                    Entity["Concept", "Radiator::3959j"], 
                    Entity["Concept", "Radio::8p736"], 
                    Entity["Concept", "RadioReflector::55ckr"], 
                    Entity["Concept", "RainBarrel::65nkh"], 
                    Entity["Concept", "RecreationalVehicle::p93tb"], 
                    Entity["Concept", "Reel::v4rgf"], 
                    Entity["Concept", "ReflexCamera::j67h4"], 
                    Entity["Concept", "Icebox::tnkd4"], 
                    Entity["Concept", "Remote::h4drx"], 
                    Entity["Concept", "Eatery::f73dy"], 
                    Entity["Concept", "Six-gun::ctqb6"], 
                    Entity["Concept", "Rifle::x7pp3"], 
                    Entity["Concept", "RockingChair::ncpd5"], 
                    Entity["Concept", "Rotisserie::c8hjy"], 
                    Entity["Concept", "PencilEraser::7y7dd"], 
                    Entity["Concept", "RugbyBall::34tbp"], 
                    Entity["Concept", "Rule::shrw6"], 
                    Entity["Concept", "RunningShoe::z7fvm"], 
                    Entity["Concept", "Safe::36p67"], 
                    Entity["Concept", "SafetyPin::8h4m3"], 
                    Entity["Concept", "SaltShaker::7k48t"], 
                    Entity["Concept", "Sandal::7f3xr"], 
                    Entity["Concept", "Sarong::96j5v"], 
                    Entity["Concept", "Sax::v45s9"], 
                    Entity["Concept", "Scabbard::77z36"], 
                    Entity["Concept", "WeighingMachine::2xvy7"], 
                    Entity["Concept", "SchoolBus::2983r"], 
                    Entity["Concept", "Schooner::f2t26"], 
                    Entity["Concept", "Scoreboard::z76vk"], 
                    Entity["Concept", "CRTScreen::q6vr6"], 
                    Entity["Concept", "Screw::wwzc4"], 
                    Entity["Concept", "Screwdriver::8ty86"], 
                    Entity["Concept", "SeatBelt::4qg32"], 
                    Entity["Concept", "SewingMachine::23c46"], 
                    Entity["Concept", "Buckler::4m7zq"], 
                    Entity["Concept", "Shoe-shop::7ds48"], 
                    Entity["Concept", "Shoji::x95jt"], 
                    Entity["Concept", "ShoppingBasket::db865"], 
                    Entity["Concept", "ShoppingCart::95g62"], 
                    Entity["Concept", "Shovel::tjpz7"], 
                    Entity["Concept", "ShowerCap::2787m"], 
                    Entity["Concept", "ShowerCurtain::6cs25"], 
                    Entity["Concept", "Ski::5nbj2"], 
                    Entity["Concept", "SkiMask::6hd4m"], 
                    Entity["Concept", "SleepingBag::549k4"], 
                    Entity["Concept", "SlideRule::59p96"], 
                    Entity["Concept", "SlidingDoor::m65qk"], 
                    Entity["Concept", "One-armedBandit::573v8"], 
                    Entity["Concept", "Snorkel::53ncf"], 
                    Entity["Concept", "Snowmobile::y538p"], 
                    Entity["Concept", "Snowplough::h36y5"], 
                    Entity["Concept", "SoapDispenser::c2fjc"], 
                    Entity["Concept", "SoccerBall::25w42"], 
                    Entity["Concept", "Sock::8w379"], 
                    Entity["Concept", "SolarCollector::pw2xw"], 
                    Entity["Concept", "Sombrero::k9893"], 
                    Entity["Concept", "SoupBowl::w86pk"], 
                    Entity["Concept", "SpaceBar::735sr"], 
                    Entity["Concept", "SpaceHeater::spt23"], 
                    Entity["Concept", "SpaceShuttle::72jnc"], 
                    Entity["Concept", "Spatula::r7876"], 
                    Entity["Concept", "Speedboat::r6p4f"], 
                    Entity["Concept", "SpidersWeb::28fz6"], 
                    Entity["Concept", "Spindle::7zh9v"], 
                    Entity["Concept", "SportCar::k9874"], 
                    Entity["Concept", "Spot::q3792"], 
                    Entity["Concept", "Stage::86r83"], 
                    Entity["Concept", "SteamLocomotive::9kv4y"], 
                    Entity["Concept", "SteelArchBridge::46zx5"], 
                    Entity["Concept", "SteelDrum::fqv7s"], 
                    Entity["Concept", "Stethoscope::f829c"], 
                    Entity["Concept", "Stole::g8fqc"], 
                    Entity["Concept", "StoneWall::8489j"], 
                    Entity["Concept", "StopWatch::4vk6s"], 
                    Entity["Concept", "Stove::27vm8"], 
                    Entity["Concept", "Strainer::2c2kx"], 
                    Entity["Concept", "Streetcar::vhm65"], 
                    Entity["Concept", "Stretcher::74r96"], 
                    Entity["Concept", "DayBed::nrph3"], 
                    Entity["Concept", "Stupa::g64q6"], 
                    Entity["Concept", "Pigboat::p7yyy"], 
                    Entity["Concept", "SuitOfClothes::5c67x"], 
                    Entity["Concept", "Sundial::7mj6d"], 
                    Entity["Concept", "Sunglass::xc3yz"], 
                    Entity["Concept", "DarkGlasses::855bw"], 
                    Entity["Concept", "Sunblock::65k7n"], 
                    Entity["Concept", "SuspensionBridge::66qcg"], 
                    Entity["Concept", "Mop::v6xdr"], 
                    Entity["Concept", "Sweatshirt::s5937"], 
                    Entity["Concept", "BathingTrunks::c892w"], 
                    Entity["Concept", "Swing::s5b96"], 
                    Entity["Concept", "ElectricalSwitch::5gnjt"], 
                    Entity["Concept", "Syringe::8j57r"], 
                    Entity["Concept", "TableLamp::6239m"], 
                    Entity["Concept", "ArmoredCombatVehicle::353r5"], 
                    Entity["Concept", "TapePlayer::bf5f8"], 
                    Entity["Concept", "Teapot::c54x7"], 
                    Entity["Concept", "TeddyBear::f56q9"], 
                    Entity["Concept", "TelevisionSystem::5593b"], 
                    Entity["Concept", "TennisBall::xk58h"], 
                    Entity["Concept", "ThatchedRoof::w2cjw"], 
                    Entity["Concept", "TheaterCurtain::5kbhk"], 
                    Entity["Concept", "Thimble::9828b"], 
                    Entity["Concept", "ThreshingMachine::372m3"], 
                    Entity["Concept", "Throne::2t9q6"], 
                    Entity["Concept", "TileRoof::5p749"], 
                    Entity["Concept", "Toaster::rp6v2"], 
                    Entity["Concept", "TobacconistShop::88ncg"], 
                    Entity["Concept", "ToiletSeat::z8wvq"], 
                    Entity["Concept", "Torch::j9rg7"], 
                    Entity["Concept", "TotemPole::gbxn5"], 
                    Entity["Concept", "TowCar::ph6vn"], 
                    Entity["Concept", "Toyshop::74q74"], 
                    Entity["Concept", "Tractor::39j62"], 
                    Entity["Concept", "ArticulatedLorry::ph66j"], 
                    Entity["Concept", "Tray::jyx2n"], 
                    Entity["Concept", "TrenchCoat::rq833"], 
                    Entity["Concept", "Tricycle::3537s"], 
                    Entity["Concept", "Trimaran::2639q"], 
                    Entity["Concept", "Tripod::pqth2"], 
                    Entity["Concept", "TriumphalArch::q79sh"], 
                    Entity["Concept", "TracklessTrolley::78g52"], 
                    Entity["Concept", "Trombone::22z3w"], 
                    Entity["Concept", "Vat::vcpt8"], 
                    Entity["Concept", "Turnstile::82gr4"], 
                    Entity["Concept", "TypewriterKeyboard::z8334"], 
                    Entity["Concept", "Umbrella::3mntq"], 
                    Entity["Concept", "Monocycle::mrm29"], 
                    Entity["Concept", "UprightPiano::286t3"], 
                    Entity["Concept", "VacuumCleaner::7rg56"], 
                    Entity["Concept", "Vase::4x594"], 
                    Entity["Concept", "Vault::7k875"], 
                    Entity["Concept", "Velvet::575z6"], 
                    Entity["Concept", "VendingMachine::96kgg"], 
                    Entity["Concept", "Vestment::334y8"], 
                    Entity["Concept", "Viaduct::p32mt"], 
                    Entity["Concept", "Fiddle::q9djd"], 
                    Entity["Concept", "Volleyball::q7bkw"], 
                    Entity["Concept", "WaffleIron::gpqx8"], 
                    Entity["Concept", "WallClock::w5687"], 
                    Entity["Concept", "Billfold::z7845"], 
                    Entity["Concept", "Closet::588p6"], 
                    Entity["Concept", "MilitaryPlane::whx2r"], 
                    Entity["Concept", "Handbasin::6w875"], 
                    Entity["Concept", "AutomaticWasher::6d32z"], 
                    Entity["Concept", "WaterBottle::5wh67"], 
                    Entity["Concept", "WaterJug::759dt"], 
                    Entity["Concept", "WaterTower::4rr5d"], 
                    Entity["Concept", "WhiskeyJug::5gcrh"], 
                    Entity["Concept", "Whistle::pv275"], 
                    Entity["Concept", "Wig::9msqy"], 
                    Entity["Concept", "WindowScreen::wfk7m"], 
                    Entity["Concept", "WindowShade::3rh75"], 
                    Entity["Concept", "WindsorTie::5tt62"], 
                    Entity["Concept", "WineBottle::g4m78"], 
                    Entity["Concept", "Wing::tbhz7"], 
                    Entity["Concept", "Wok::fv9fj"], 
                    Entity["Concept", "WoodenSpoon::nc2wp"], 
                    Entity["Concept", "Woolen::ns82d"], 
                    Entity["Concept", "SnakeFence::837z2"], 
                    Entity["Concept", "Wreck::qr554"], 
                    Entity["Concept", "Yawl::hggp6"], 
                    Entity["Concept", "Yurt::4bbtv"], 
                    Entity["Concept", "InternetSite::639pp"], 
                    Entity["Concept", "ComicBook::ty3qz"], 
                    Entity["Concept", "Crossword::yqtk6"], 
                    Entity["Concept", "StreetSign::ysx2f"], 
                    Entity["Concept", "TrafficLight::b4966"], 
                    Entity["Concept", "BookJacket::sy4d3"], 
                    Entity["Concept", "Menu::g698m"], 
                    Entity["Concept", "Plate::2244k"], 
                    Entity["Concept", "Guacamole::xc482"], 
                    Entity["Concept", "Consomme::37g8f"], 
                    Entity["Concept", "HotPot::kgb8q"], 
                    Entity["Concept", "Trifle::b4264"], 
                    Entity["Concept", "IceCream::825yn"], 
                    Entity["Concept", "IceLolly::473v3"], 
                    Entity["Concept", "FrenchLoaf::x859t"], 
                    Entity["Concept", "Bagel::x38n5"], 
                    Entity["Concept", "Pretzel::967k7"], 
                    Entity["Concept", "Cheeseburger::3z2z7"], 
                    Entity["Concept", "RedHot::3j848"], 
                    Entity["Concept", "MashedPotato::8ys8w"], 
                    Entity["Concept", "HeadCabbage::9c693"], 
                    Entity["Concept", "Broccoli::spbm9"], 
                    Entity["Concept", "Cauliflower::fmp3m"], 
                    Entity["Concept", "Courgette::44yb5"], 
                    Entity["Concept", "SpaghettiSquash::8j979"], 
                    Entity["Concept", "AcornSquash::8p8y2"], 
                    Entity["Concept", "ButternutSquash::6k466"], 
                    Entity["Concept", "Cuke::nzfb2"], 
                    Entity["Concept", "Artichoke::ntvv7"], 
                    Entity["Concept", "BellPepper::9w646"], 
                    Entity["Concept", "Cardoon::s78dn"], 
                    Entity["Concept", "Mushroom::3xw4j"], 
                    Entity["Concept", "GrannySmith::k3786"], 
                    Entity["Concept", "Strawberry::3csyb"], 
                    Entity["Concept", "Orange::w579d"], 
                    Entity["Concept", "Lemon::743j2"], 
                    Entity["Concept", "Fig::d3p6f"], 
                    Entity["Concept", "Ananas::m6nzv"], 
                    Entity["Concept", "Banana::f6z73"], 
                    Entity["Concept", "Jak::p6r56"], 
                    Entity["Concept", "CustardApple::nx482"], 
                    Entity["Concept", "Pomegranate::dh736"], 
                    Entity["Concept", "Hay::vcd3m"], 
                    Entity["Concept", "Carbonara::9my37"], 
                    Entity["Concept", "ChocolateSauce::y5838"], 
                    Entity["Concept", "Dough::8x86g"], 
                    Entity["Concept", "MeatLoaf::t7nnp"], 
                    Entity["Concept", "Pizza::56w88"], 
                    Entity["Concept", "Potpie::38zh5"], 
                    Entity["Concept", "Burrito::4xwy5"], 
                    Entity["Concept", "RedWine::666g6"], 
                    Entity["Concept", "Espresso::rv2y4"], 
                    Entity["Concept", "Cup::q9zjy"], 
                    Entity["Concept", "Eggnog::9v7t8"], 
                    Entity["Concept", "Alp::m4bkv"], 
                    Entity["Concept", "Bubble::qp224"], 
                    Entity["Concept", "Cliff::q56fy"], 
                    Entity["Concept", "CoralReef::669j5"], 
                    Entity["Concept", "Geyser::5w69b"], 
                    Entity["Concept", "Lakeshore::4483j"], 
                    Entity["Concept", "Headland::8n9c9"], 
                    Entity["Concept", "SandBar::4w689"], 
                    Entity["Concept", "Sea-coast::m3d85"], 
                    Entity["Concept", "Vale::88wm8"], 
                    Entity["Concept", "Volcano::9fcbc"], 
                    Entity["Concept", "Ballplayer::7v976"], 
                    Entity["Concept", "Bridegroom::85m28"], 
                    Entity["Concept", "ScubaDiver::kqb95"], 
                    Entity["Concept", "Rapeseed::5x738"], 
                    Entity["Concept", "Daisy::hypz2"], 
                    Entity["Concept", "CypripediumCalceolus::7tzrs"], 
                    Entity["Concept", "Corn::m7hpj"], 
                    Entity["Concept", "Acorn::f62cf"], 
                    Entity["Concept", "RoseHip::333d2"], 
                    Entity["Concept", "Conker::v8p64"], 
                    Entity["Concept", "CoralFungus::f7fp4"], 
                    Entity["Concept", "Agaric::844w2"], 
                    Entity["Concept", "Gyromitra::3v4zb"], 
                    Entity["Concept", "CarrionFungus::wj2ng"], 
                    Entity["Concept", "Earthstar::678m7"], 
                    Entity["Concept", "GrifolaFrondosa::m7rxd"], 
                    Entity["Concept", "Bolete::9g3s2"], 
                    Entity["Concept", "Capitulum::834z6"], 
                    Entity["Concept", "BathroomTissue::ts4sr"]}, "Dimensions" -> 
                    1000], 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"prob\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7397167097417693`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"464f8896-e38b-4eeb-93f3-349a3f92a579"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net2", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{
    RowBox[{"NetTake", "[", 
     RowBox[{"vgg16Net", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<conv1_1\>\"", ",", "\"\<pool5\>\""}], "}"}]}], "]"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", "100"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7396417514700775`*^9, 3.739641840777695*^9}, {
  3.7396421118628473`*^9, 3.7396421221781273`*^9}, {3.7396425950192614`*^9, 
  3.7396425975816565`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"61de63bb-f346-4bd1-be19-65a28ef8bd9b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["31", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739641841348738*^9, 3.7396421234940405`*^9, {3.739716718305009*^9, 
   3.7397167283324127`*^9}},
 CellLabel->"Out[16]=",ExpressionUUID->"306670b1-bfb2-4ee1-be9e-15518c5e6eeb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net2", ",", 
    RowBox[{"\"\<b1\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv1_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642600871441*^9, 3.7396427912586265`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"63104c4d-cdec-4ce8-ac2a-23805560cf83"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["32", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7396427020114517`*^9, 3.739642724878748*^9}, 
   3.7396427935558558`*^9, 3.739642991505064*^9, {3.73971672089124*^9, 
   3.739716731777023*^9}},
 CellLabel->"Out[17]=",ExpressionUUID->"fbeddbb5-c21a-4e0b-be8c-353299154761"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b2\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv2_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642796712408*^9, 3.7396428472538857`*^9}, {
  3.739642978952106*^9, 3.739642979436378*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"d21d311a-fa60-4ce6-acd6-40509e86fea0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["33", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7396429534824624`*^9, 3.739642996661477*^9}, 
   3.7397167341228724`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"a69ee1af-37aa-4dec-9554-6380cb7dc7a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b3\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv2_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428271143494`*^9, 3.7396428516364193`*^9}, {
  3.7396429840156007`*^9, 3.739642984359369*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"585257b9-8351-42eb-b74e-ec2c5b3a6bfb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["34", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7396429555140924`*^9, 3.7396429986309333`*^9}, 
   3.7397167367808495`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"f6471c6e-10d8-4364-80a2-9274b353ee45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b4\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv3_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428298492174`*^9, 3.739642830130399*^9}, {
  3.739642860188901*^9, 3.7396428626760235`*^9}, {3.739643002621046*^9, 
  3.739643002945953*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"5985fdff-1e24-4b06-acc1-22d7334a39b5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["35", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739642958045904*^9, 3.739643003804959*^9, 
  3.7397167397386746`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"c6e7d57c-62c0-4d5a-b234-26cdf77b1c4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b5\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv3_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428330525217`*^9, 3.73964283336487*^9}, {
  3.7396428650198345`*^9, 3.739642865348113*^9}, {3.7396430059772034`*^9, 
  3.739643006289631*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"71714920-5cfd-42e4-bb4b-f7d40221c53c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["36", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739642960102137*^9, 3.7396430068143077`*^9, 
  3.739716743242175*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"5e9a80d0-9331-43b4-9230-1443477493f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b6\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv3_3\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396428357862716`*^9, 3.7396428360988674`*^9}, {
  3.7396428685874195`*^9, 3.739642872262774*^9}, {3.7396430090331855`*^9, 
  3.7396430093306255`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"3c87d700-803c-4c81-acdc-4c8acb256078"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["37", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7396429630237155`*^9, 3.7396430106428127`*^9, 
  3.7397167462684803`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"66fe4011-a81b-4f45-9ffb-76354765585e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b7\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv4_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642876060563*^9, 3.7396429396263943`*^9}, {
  3.7396430138470707`*^9, 3.7396430140345807`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"cef161da-39fd-4485-86b8-7845df1f07cb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["38", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739642966278552*^9, 3.739643014518611*^9, 
  3.7397167489510145`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"7d545089-6df7-44e2-8f73-1764eca23979"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b8\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv4_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642904377446*^9, 3.7396429045651093`*^9}, {
  3.739642941856287*^9, 3.73964294231341*^9}, {3.739643016956425*^9, 
  3.7396430172063646`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"ef0458aa-31c5-4ebb-b079-3659a26333ea"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["39", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7396430176591864`*^9, 3.739716751948485*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"a62f1bfe-74ff-46cd-992c-c0be10e87372"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b9\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv4_3\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642907034354*^9, 3.7396429451211567`*^9}, {
  3.739643019910576*^9, 3.7396430200825825`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"4026c716-cb33-4cf1-bbf7-e447d5e7e207"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["40", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739643020566572*^9, 3.7397167546072755`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"78a12c22-1d43-4ad9-8ebc-1703f9c5f356"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b10\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv5_1\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396429091906476`*^9, 3.73964294718097*^9}, {
  3.739643023642692*^9, 3.739643023908248*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"fad25924-67aa-45a5-8acc-300def0a160f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["41", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739643024298558*^9, 3.739716757221013*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"e3818929-0cce-43f5-887a-6175f9bb4288"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b11\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv5_2\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396429114978495`*^9, 3.7396429119037805`*^9}, 
   3.7396429486848*^9, {3.739643027002644*^9, 3.7396430272994003`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"7d6b3340-aa00-4689-9ca8-2cf52cfb9a59"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["42", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739643027705413*^9, 3.7397167598412633`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"e044ea0b-3810-482b-a87f-ee40ffb064cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net3", "=", 
  RowBox[{"NetInsert", "[", 
   RowBox[{"vgg16Net3", ",", 
    RowBox[{"\"\<b12\>\"", "\[Rule]", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
    "\"\<conv5_3\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642914029666*^9, 3.739642950591263*^9}, {
  3.7396430303001127`*^9, 3.7396430310655336`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"130e9531-b97f-4774-b31f-27afc9223c59"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["43", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"50\"", "\"50\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"25\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"13\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"b12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "b12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "b12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7396430315965223`*^9, 3.7397167624625406`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"0e92a704-2040-4eb8-b4fe-a9aaf097e76f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16Net4", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{"vgg16Net3", ",", 
     RowBox[{"LinearLayer", "[", "15", "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396421390939593`*^9, 3.7396421882281246`*^9}, {
  3.7396426294564176`*^9, 3.739642629768813*^9}, {3.7396430336132975`*^9, 
  3.739643033988211*^9}, {3.7396453691887145`*^9, 3.739645383855776*^9}, {
  3.7396454559900208`*^9, 3.739645457990342*^9}, {3.7396455126426897`*^9, 
  3.739645513111726*^9}, {3.739712814178038*^9, 3.7397128151007247`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"a7853ad9-ced4-4b0d-b8a8-a12b53ce11eb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{15, 8192}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {15}, "$OutputSize" -> 15, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739642189454615*^9, 3.739643034456848*^9, 3.739645385699605*^9, 
   3.7396454588498325`*^9, {3.739645521692274*^9, 3.7396455343553896`*^9}, 
   3.7397128167866306`*^9, 3.739716766694786*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"65ae0dbe-0e4a-4892-a8eb-bc27970f7a69"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "dataDirectory", "=", 
   "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7394718041886687`*^9, 3.739471805977866*^9}, 
   3.739471847311478*^9, {3.739471888052724*^9, 3.739471927668871*^9}, 
   3.7395529733660297`*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"3635ed9d-90c6-450b-8ea7-eaabfcbf54b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ids", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"FileBaseName", ",", 
     RowBox[{"Map", "[", 
      RowBox[{"FileNameTake", ",", 
       RowBox[{"FileNames", "[", 
        RowBox[{
         RowBox[{"___", "~~", "\"\<.mx\>\""}], ",", "dataDirectory"}], 
        "]"}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739471934953743*^9, 3.7394721092832556`*^9}, {
  3.7395529770167665`*^9, 3.7395529784813104`*^9}, {3.73955856300596*^9, 
  3.7395585793464966`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"e85c3804-5308-4667-9d6f-d56b7fe4929a"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.73964223181509*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"6426a8c2-e446-467e-96dc-9dc5f283ff60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLNamesData2.mx\>\"",
    ",", "ids"}], "]"}]], "Input",
 CellChangeTimes->{{3.7396349389259467`*^9, 3.739634975495325*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"54b9e02e-4a2a-4457-a150-0d1debbe907b"],

Cell[BoxData["\<\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\\
MLNamesData2.mx\"\>"], "Output",
 CellChangeTimes->{3.739634976509345*^9, 3.739638814777966*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"9cb85ade-1de4-4411-a33b-e3860a3ea32b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "ids", "]"}]], "Input",
 CellLabel->
  "In[269]:=",ExpressionUUID->"e070dd6a-371c-40c5-a4f5-fdce87c091d9"],

Cell[BoxData["89524"], "Output",
 CellChangeTimes->{3.7395585831410437`*^9},
 CellLabel->
  "Out[269]=",ExpressionUUID->"fdee0f60-aebd-41d9-aada-fad0fd0ef8b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ids", "=", 
  RowBox[{
  "Import", "[", 
   "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLNamesData2.mx\>\"\
", "]"}]}]], "Input",
 CellChangeTimes->{{3.739638769475127*^9, 3.7396387850661488`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"2543a9e4-02ab-41d1-a8bc-33ff30a21a79"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"00002bf3-e652-4937-b5b7-da80bc8794e6\"\>", 
           ",", "\<\"00009198-253e-4028-a689-6a64578d99ea\"\>", 
           ",", "\<\"0000aaf4-d0a7-42b6-9220-2a138237794b\"\>", 
           ",", "\<\"0000dbd4-c3eb-4924-a383-e4207adc3c47\"\>", ",", 
           TemplateBox[{"89516"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"fff8f914-66fb-4f47-ad71-d0e83f75e631\"\>", 
           ",", "\<\"fffa1a96-e4cc-4f42-8af4-8c9f8b968044\"\>", 
           ",", "\<\"fffbedfd-5c1e-4327-8ecf-4fde9cd9a910\"\>", 
           ",", "\<\"fffd69a1-6adb-42d1-8261-544329798314\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 1, 33182309387921126353, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 1, 33182309387921126353, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 1, 33182309387921126353, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[33182309387921126353 === $SessionID, 
   Out[1], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739638818249655*^9, 3.739642235519958*^9, 
  3.7397162230264635`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"35399191-6d08-4e24-ac6b-b99b4130f1f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mxs", "=", 
  RowBox[{
  "Import", "[", 
   "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.mx\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739634885259762*^9, 3.7396349015287447`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"50c6b4aa-a51d-4c1e-b14b-0c8263194d44"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"00002bf3-e652-4937-b5b7-da80bc8794e6\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "35500", ",", "37500", ",", "6500", ",", "1000", ",", "28500", 
              ",", "26500", ",", "50000", ",", "22500", ",", "39500", ",", 
              "24000"}], "}"}]}], ",", 
           RowBox[{"\<\"00009198-253e-4028-a689-6a64578d99ea\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "15500", ",", "26000", ",", "46500", ",", "18500", ",", "24000", 
              ",", "10000", ",", "38500"}], "}"}]}], ",", 
           TemplateBox[{"89521"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"\<\"fffd69a1-6adb-42d1-8261-544329798314\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"6500", ",", "41000", ",", "45000"}], "}"}]}]}], 
          "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 2, 33182309387921126353, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 2, 33182309387921126353, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 2, 33182309387921126353, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[33182309387921126353 === $SessionID, 
   Out[2], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.739634942796733*^9, 3.739638817876004*^9, 
  3.739642239333029*^9, 3.739716233159733*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"24a41f64-47f5-4a02-bae4-4dd855268f3d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mxs", "=", 
   RowBox[{"AssociationMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"dataDirectory", ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"#", ",", "\"\<.mx\>\""}], "]"}]}], "}"}], "]"}], "]"}], 
      "&"}], ",", "ids"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739552998291153*^9, 3.739553016403425*^9}, {
   3.7395531264131775`*^9, 3.739553208244177*^9}, 3.739553568316764*^9, {
   3.7395539840975394`*^9, 3.7395539894123335`*^9}},
 CellLabel->
  "In[264]:=",ExpressionUUID->"c619a705-fbce-4a1b-92b0-efc5a82c196c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.mx\>\"", ",",
    "mxs"}], "]"}]], "Input",
 CellChangeTimes->{{3.739553260137849*^9, 3.7395532804742064`*^9}, {
  3.7395533177821803`*^9, 3.7395533387657156`*^9}},
 CellLabel->
  "In[265]:=",ExpressionUUID->"0482bcae-c1a5-4dc6-9e1e-575f9e3ada79"],

Cell[BoxData["\<\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.\
mx\"\>"], "Output",
 CellChangeTimes->{3.739555611575987*^9},
 CellLabel->
  "Out[265]=",ExpressionUUID->"5bcd7c45-f7c2-40a9-955f-404844bb0380"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["mxs"], "Input",
 CellChangeTimes->{{3.73955396980577*^9, 3.7395539738459616`*^9}},
 CellLabel->
  "In[266]:=",ExpressionUUID->"48b0db39-9768-4580-bed0-d6992799617c"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"00002bf3-e652-4937-b5b7-da80bc8794e6\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "35500", ",", "37500", ",", "6500", ",", "1000", ",", "28500", 
              ",", "26500", ",", "50000", ",", "22500", ",", "39500", ",", 
              "24000"}], "}"}]}], ",", 
           RowBox[{"\<\"00009198-253e-4028-a689-6a64578d99ea\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "15500", ",", "26000", ",", "46500", ",", "18500", ",", "24000", 
              ",", "10000", ",", "38500"}], "}"}]}], ",", 
           TemplateBox[{"89521"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"\<\"fffd69a1-6adb-42d1-8261-544329798314\"\>", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"6500", ",", "41000", ",", "45000"}], "}"}]}]}], 
          "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{65., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 266, 33181109332051609589, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 266, 33181109332051609589, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 266, 33181109332051609589, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[33181109332051609589 === $SessionID, 
   Out[266], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{{3.7395539709287415`*^9, 3.739553974540105*^9}, 
   3.739557308214427*^9},
 CellLabel->
  "Out[266]=",ExpressionUUID->"ac7ea63b-b49f-4f01-ac48-dd6392bb01d0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"File", "[", 
          RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
            RowBox[{"dataDirectory", ",", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"#", ",", "\"\<.jpg\>\""}], "]"}]}], "}"}], "]"}], 
          "]"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"mxs", "[", 
            RowBox[{"[", 
             RowBox[{"Key", "[", "#", "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "}"}], "&"}], ",", 
      "ids"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7395576191613197`*^9, 3.739557678369922*^9}, {
  3.7395577558965483`*^9, 3.7395577792041645`*^9}, {3.7395578092837234`*^9, 
  3.739557842541752*^9}, {3.739557916694015*^9, 3.739557930974816*^9}, {
  3.7395579774953732`*^9, 3.739557987816764*^9}, {3.7395581088658996`*^9, 
  3.739558202376765*^9}, {3.7395586135526347`*^9, 3.7395586195331264`*^9}, {
  3.739558966293628*^9, 3.7395589679487133`*^9}, {3.7395594071732388`*^9, 
  3.739559415856855*^9}, {3.7395599836485963`*^9, 3.739559994012493*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"e36ddc51-ff0a-4a57-be3a-8090dfdf0efe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sample", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"testing", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396536318861485`*^9, 3.7396536450110393`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"ba54f65f-9acb-46a2-a481-ff22b53d76e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
fd4d709e-ee35-4ca0-b250-73820d7336a4.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "40500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f0555132-44ba-4303-8207-a5c527dfe961.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "42000", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f8e3e7fd-ec28-4401-9d55-5054b1031d80.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "40500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
ff3127e7-8ae3-49a1-89d8-2b8305ae6dd3.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "36500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f002246b-ecb8-45c4-bb46-a8916b12bd96.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "27500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f0a4f398-62cb-4c34-84da-32b7f2c6b6fb.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "35000", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f62729c7-df1c-4c20-83a0-5f6036f263c2.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "4000", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f928bfec-9550-48d3-bf12-1491c3560b1c.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "36000", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f8637488-475e-42ad-80ea-e02be8cc8e87.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "21500", "}"}]}], ",", 
   RowBox[{
    RowBox[{"File", "[", 
     TemplateBox[{
      "\"C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\
f666d45f-243a-4264-a544-a3e80edd04d7.jpg\""},
      "FileArgument"], "]"}], "\[Rule]", 
    RowBox[{"{", "40000", "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.739653645803919*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"e9438264-7a2a-4ef2-873e-1ddd6af517f9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"training", ",", "testing"}], "}"}], "=", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"data", ",", "83500"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7395586294538636`*^9, 3.7395586332460146`*^9}, {
  3.739558698607547*^9, 3.7395587157743483`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"6094b7ad-5beb-474a-8c95-3c7cea3e30bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetTrain", "[", 
  RowBox[{"vgg16Net4", ",", "training", ",", 
   RowBox[{"ValidationSet", "\[Rule]", "testing"}], ",", 
   RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
   RowBox[{"BatchSize", "\[Rule]", "32"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.739559110719847*^9, 3.7395591267652597`*^9}, {
  3.7395591816890154`*^9, 3.7395591931407566`*^9}, {3.739559962153488*^9, 
  3.7395599738912897`*^9}, {3.7396391562367477`*^9, 3.7396391759360867`*^9}, {
  3.739642252250087*^9, 3.739642259466106*^9}, {3.7396424763075705`*^9, 
  3.739642481789752*^9}, {3.7396425438822584`*^9, 3.7396425471775045`*^9}, {
  3.7396430935700345`*^9, 3.739643094007765*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"c2c6c75e-a14f-4858-98cb-ce736e067e86"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 8192}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739653391523779*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"8de04d5a-477f-4359-9694-98d3a519ed71"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.739560015288725*^9, 
  3.7395600463753376`*^9}},ExpressionUUID->"689c0b34-7992-4c36-9d19-\
5c29e53b3225"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16NetTrained", "=", "%"}]], "Input",
 CellChangeTimes->{{3.739652490112013*^9, 3.7396525038626223`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"c1b37442-fc33-4c36-b91b-073325921a4f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 8192}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739653391694984*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"2a496f61-b561-4d2e-83ff-82791519134f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"vgg16NetTrained", "[", 
  RowBox[{"sample", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"sample", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7396534275258193`*^9, 3.739653441804623*^9}, {
  3.7396534747923813`*^9, 3.739653493012641*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"29507aea-3559-46b0-a1d9-bef1b68fe4ef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "38730.125`", "}"}], ",", 
   RowBox[{"{", "39501.171875`", "}"}], ",", 
   RowBox[{"{", "40576.6015625`", "}"}], ",", 
   RowBox[{"{", "36069.7265625`", "}"}], ",", 
   RowBox[{"{", "26559.056640625`", "}"}], ",", 
   RowBox[{"{", "34887.63671875`", "}"}], ",", 
   RowBox[{"{", "3011.722900390625`", "}"}], ",", 
   RowBox[{"{", "36565.5078125`", "}"}], ",", 
   RowBox[{"{", "20769.412109375`", "}"}], ",", 
   RowBox[{"{", "40259.5703125`", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7396534665344696`*^9, 3.7396534946971335`*^9}, 
   3.7396536506130543`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"f397ade4-8d73-4b37-bfd7-bd874292befd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "40500", "}"}], ",", 
   RowBox[{"{", "42000", "}"}], ",", 
   RowBox[{"{", "40500", "}"}], ",", 
   RowBox[{"{", "36500", "}"}], ",", 
   RowBox[{"{", "27500", "}"}], ",", 
   RowBox[{"{", "35000", "}"}], ",", 
   RowBox[{"{", "4000", "}"}], ",", 
   RowBox[{"{", "36000", "}"}], ",", 
   RowBox[{"{", "21500", "}"}], ",", 
   RowBox[{"{", "40000", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7396534665344696`*^9, 3.7396534946971335`*^9}, 
   3.73965365061804*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"71b83444-09b6-4223-8253-1c82bf8faeb4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16NetTrained", "[", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJztnU+IXMedx2d3L8vmsgcdBPZlT0MCc/Bl8MUDzmFgDblk2QGNDiFhvGEt
xgserczCYLQs1g5kZ/EwwbIOaw9uywKBUDKSEbbw+IUOSggxs2aHIAzrg/Ah
FtFiIkx86/3O+6Yr1VWv6/er1/26e7p/P0qi5vXvvVd/fp+qX9WrV+9vfvBP
3/2HP5+bm9v4S/z33e+//OxLL33/X/7ur/HH37+48Y8/fPH5tb998fzzP3z+
pad/8Bc4eIB/f/Vnc3PH8Y6JiYmJiYmJiYnJWOVhlYwrMSsrK3CS9/b2xpUA
ExNfTp06NRfJuBKzurpqdJhMjiwsLMAgr1y5cujJuBJjdJhMlJCOdrvtHzw6
Opqfn8fx/f19Htnc3FxaWvriwYNO6YxtbGywl1leXoYydegXXb9+Hawhgivg
dPyKE/EnfqXPtri4SLW1tTVE8L/z5QI6Hj9+jEuxd0M6x4ityWwK6dje3i6K
4m4psEkch/XSJkEEjBxxZ5zQARSXLl3C/9ThcdIBY15fX2ccAjSAElnb2dlx
d4QaiONxXIpXCOiAAq+ACBkZ45jIZAaFtuoLOwgIjJxtPiwTsLhTHpeCCICi
nfM4icBZ+BUo8WpAyV0KDHY8HhEHCP4VfDoAAq/Avom9lTldJqMU2io9KGf2
TmifMFr/IPBhd8D2PKCDHEHHH+DTtn06Dg4OEHcQUa2SjvlSGEcn0mhpmJj4
4ttqLM5Bch0K8OHAAeMF9gj16EC/gzjGOyIdIOJSKYi4cZCJyQikclROwTAB
v9L5h92yW/EdHo5N6tFBBww2z6E91QI62GVgYN58MZiYVAgtEP8vdoWjbI7E
gQBsmEZLK8WfNHsqM85hNQfppAMnxnRQzY3K3ZDHsRmMyjkqmSsH/kwYx/Um
JqMRWOxGJEAA/7uROEydx+lfYbCAOGCBGgwY8Var1Sn7GvQINHW0/Oul8ApQ
QJx+kRvp4Ao4ly4WBUeg5h/BvVwK8ZM/OWBiMn2SHumYmMyy0JfjTK+JiYmJ
iYmJiYmJSQ15+PDhYxOTccu4OagQpGp7e/vg4OCuWqCMU7L0L126pNd3p2Sl
iuts9adAf29vT68PzZ2dnf39fb0+Skmvfzc/1yMoJWhCH2fp9bNKyclkLmYG
HchOu90u1AJlnIJy0OtzPW3WLVDvWalCjcDa9aegxlutll4fmrAT1KNeH6Wk
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
lNMOACr6Uim4Mr0F3ChOkrsI747/kU3o43ZQBiP97kL9nVI6pRvDVqWfP0ZT
75QtM8oH2WdLwk6h8hSUOU4BF9BH2fILFGIny+/1uD9Zbl/0fkHSTxUqDgq8
LCsOR2J991UafoZjuVz0giOwFg5w0qk66eI/VUdRrJSCGkfR+aXtBMdpEmhz
Tp065RocHIdB9mtC+VURF+fngebn553/4wv7LJQ/2082/q49rzQqXJB2+7D8
4g9StbCwwCvjeJwqdn+d0g+hhTAjXPPQ6T9E5XeCqA8dxHlinKrHXWFGYHgs
AZzC3jAezvMiSDAS77y1paUl5/zEguu4L7mwY3Upr8wCD7Id6PR6U6iO2NpR
QWwnEUF1u+EGboeETT0drlQ7pamgEvEnGq5+zQ7qmobB/uVh+eW1RD/LT+Li
FFQx21v2PvSl+5k6W0I2+ySrnw/GBhnXZ3/RKS0cR/A/bIzVFw8hmXjaEnOB
fNFg0gJ9qDHXOAU5wn1jO8TdCThppQ6yQ0cU5/Ii/im4FBNAZ7JT+jxcpNHP
n2Td4X8aOcpto5TKlEMNt2BFsEzYBSR8QnYxOAUJZv/CjM/UoAO2RyvijEp6
LMAaIQ50riobZwqdHOiz+pxJ0L9KJAkmgYqDtXMk3s+xR8pR42ulsJXudG2P
VUmjqrwXkk2fhx/qDT5FmhCkipgn1p3immSWdo5csC9mm4MbBY0P3X5+OLhT
VgTdHldc/TqCoGOl29Mv2WguOiUXrq9JjzWQTk4qUo2Yz9o6JZSV+46tZrUY
ataValoZhUl3gvquVRSFdceWGXXkO2a+gAIaKq8P86OaJhf+gD1r/tPZZFr4
fTr8j7Kliyimh54tWyrlxDXXwbrxeFqohvJk+n03rF+S3LeMWc6z+UzEuT16
feVTMNcds2HXFy+6DDFJ9HP8cXFW9eEWymc6vsDUNT4YJzRgV26MIwrUcJb7
5p1SuPpdo0lXqtOdo1NeHN0HsNLPpU+l+J9BH6K4Zr+h5f1u1qveCLFGrpWO
N5ntN3yrFL6Mk5ueLMldbMCJ3JlypQLhyLS5GewsC8kVJL729fkq5XDTY2Ji
YmJiYmJiYmJiYmJiYmJi4iR+/p5e3zh2qfGoxcSknuzv73My383n84n54uKi
e/LFZUvBgzC3KY1/PL5OrOAOBr8GV3Nb1nTK+WeXHj5qidNjYjJ04TIVLiFm
J8LI3NwcH7Ht7OzgV7TY/uMwxOfn5y91hT9dv359Y2ODj7k75QIMdEPBTi+4
LJf8ca0XI53u82jeCGaPP4ED30i6WwpO5EMWHMdlcaLmybuJySACBOhKwQKJ
A9cIuSVhfDchOMst1u10ex93Ih+S8sT4gePCwgLZgZEzwr4ApHApCF+v4LIT
YkJXyqUH+rxs1ru3JiY1BLZNs8T/lXRwsWWwAtl/n9GdiOZ9uRR/CWUgPnR+
hG8BdMp1VkelcBEUDgZ0xBETk4bEtfxB3xGspHLL7ylcOk5e9vb2eIXA1cmi
g2/2dby+g2spHR0uPUaHycgkpoPrtN3yY74XHLx2RDpgyXzVlD/xnXS3eQhf
7g7EHQwifJEKYNLNAx2MuHcD3UuX8RVMTEYmwTuk7lVWX8d5VsFxXznxCmq/
iOaU9CuuJiZjF64zH3cqTExMTExMTExMTExMTExMTExMTExMTExMTExMTExM
qmVvAmTcZWBiUi18paI9JsGtuUuzickECveAneUEmJj0E83O59OdABOTfjJ2
4xx7AkxM+smfjPPRozAMTxJv6hkdJhMrfzLOubkweMLPxPjfa+NmIO4lI34I
wO267/R5xNFBNX+/BaPDZGJFScfOzg4/Gsv3yvlBKH5GqtP9viq/hsP3ZPET
/uQX3DpdOvjxKV+tY3SYTLBo6OA30Du9++3wJ/fpSW4ntbe3h/7CvTnLj6E7
NSDDt9RBjetljA6TiZUsOjpV+1l1ulB0yj6l3W7775UHdOB07udmfYfJ5IuS
DvddY0b46WHuPdIpty7hFiWAgl/0IxTuy4PuA53x++ZGh8nEik/HV14Ixh0w
bH4FknRwkzf36XngwO/Aui9RQpP6wd5u/Lq3/+l2o8NkYkVpnJx9cruu6fXd
58IHTICJyehFaZzoBdB9iKZOQVdCfc3nNY0Ok4mVsRvn2BNgYtJPxr4IcOwJ
MDHpJ3Nzc9wUdyyCW8/1Dv9NTCZHjiZAxl0GUyX/DwCXYO0=
       "], {{0, 190}, {266, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->{313.5, Automatic},
     ImageSizeRaw->{266, 190},
     PlotRange->{{0, 266}, {0, 190}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
6JXdWzenwSiXslJDU1exDOYD6BW4Bmc7fRVtxpyX4YFeunA2k8mkM3lo3Jff
/Vgm2ZwduwLmtqorH+zYfeDTL0pl+dIPX7Ty9RIHlkrTt2cv4lqb1vvg2tlG
EOJgcTZO/PzMbbIrkmwGt6o8aNi4vaXUe3vyxDY+NgL6eXRbh8g3DA+l3tv7
SRF3oJeB4Ma1phoSGCT50YFDaCHamqMUmzFuNCwkkvsPEyZSHy+eNy6TToDW
MWnhwi7NJJoSJljT5MKhHe9K4TAfbRClznuFUsEqbXn/9VwGyFfK5Ud3lfQi
EnTp1q/ncoKUl1qAiA9++qmmlrof3OpszCfDCSnTuXv/cWI9lfXS7Y6WZCQS
S2VH7TrwOQyJw3v3frxnJ9leiE8f5uPRjw+KuBMpw6cbDxz/omDobp0LsklR
Ne6Z5p2VC6dmuXhWbG7Kj73b1VMg2x41Q713/+HaN9cYhQeT2htyIuhv8R07
PsIJb2hqX8+oltZkOv+3aHLvsW9lzF1UXjBlTCpaFxezMxYspwmLyO4d7c7V
c+tWL1QrPTRADtp2+9qv40ePicIISbdNmfmyRmQI48HnDcaDg4UgD/rZQm0v
YzYmMLEqutLjWLis8MmBPel0KiYKw+PompHSWR69IfF4QqzjhHTTqB/P/GSr
j7/4eJtQ/0I2KaQzuU+PfwlXOX3qx8Z8Go0OQVi1Zi3Gv9jmpx/vjUTrYslc
+8RZ3aUSZiQzKhvXvJIW+Rjo3gsXFok9aGnysnkzM/BhKrP+/Q9QMlUeL50z
KcPVxxLSjEUrShruSvz684P5LF8XCQ+LCO98dACE1c8nv0vW/S3Nh6HNR775
rmCYfd333t34OrQ5FOakXPv9x0UwHMBIHJnNpblcVGzf9+kPyCmYKwbztqm9
DxbNmSRIuDdv3sqVJdO4cuV8Qzo+trPt+LGj3d29um7evXljTHtbOpsJ8/zW
7btAEJ/85nhrRsC8Z435t9/fXpC1e9cvzJ3cgXvV48LU+UvBdtYrvYd3vQ+q
Ai+kEvmOa12yTpKsnPpif3MKaZqX2q4/6K1YNNWXiSUuSJpSVSnqpYcb1yxL
JbkQF+ucOhPEL5h1P/7wTWteAkMmFIuveHUNSWSjHT28n4vUJzMNfKZh3aZN
PX29NjCpXNr6/rtSJr105WoFw/8KC+dPxA0bMT7fOeFOb0UlexZIti1V6bs2
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
eNDnMtvxzEXGgwwMDAwMQ4ih4UGy9mdSvkMeJNxFo0af4MHfGSfDeJCBgYGB
YRAwVDyoO5bu2IZNYkOtqu1nwIf0A5N+9nvDRRkPMjAwMDAMAgaRB731vn6w
rP+fvTOPj6M48745DIENR47d/eN9N8dmk+wmIQmHCUlI9k1CEkJCQmJ8yvKJ
cbjPJLvgE2wwhoQcYOvwqdsHN4QAljQzsg0Gn7o1uixblm3dGs1MX1Vd7/NU
dbd6RjOyLGtGh+v3KbdbPT1Hd1fVt56qp+ohKmM603oZUUyOQ0IZdx/V8ThR
4ASAYFBX8VVdpZS6HGnER4jPZ66Pj+agONUwDPeOlNS4EeRqTdPEvq7rduka
SjtQvItwuQuvU/TcxXlELlZq3GvgLAoVuLN1qvfEKRH2oMkLFLEE3NOJFtAC
rc+sWpy+MS1kGhoVEwhV0wwzIxQKdj+2dMm01JSU1OkzU6Y+/fQq+JBwOAxb
XXfKKdJQ+JpyESfBvVIUxakZ4CsTfdOkpJIvyOeCX6aLiQO09wb4KOcEKDXO
xzpllroki5JUgjRwvnVndQGUhP6YBPWLil/OZZhUDfacfO/1rfNSf5O5OT1I
dcUgISVsMpWQgKn1Prv6yUf+9w+dSlAnSld36113LQIUijsgyqaAYCQHxedD
ETaYq7Vgny8lNd7ktPREI1kAi7nqk6gySOPIedV9jukqbuJPM9IwlJIaXsVj
h8iQ0MyDfC76KwY4ebg07P2i/X4z3bB+3YI5Uxem/HrGb25en50ZYkTnjqMa
6WUsVHlw78ypkz8qP9xDVM1UoIm6/8De1NSUiooKsPLEfbAJGMFBLmESWl8q
Grem3YQYlouSkhptEvUD5PBQKCSsuSgL7rT1DJYc/gkOAQVbTbv5etoPkZJK
tJzsZ3Al9LuG3R50UwoNNkNTwgGi9JyqK3vgztTMrIxOPQyXpBJKmKrr3el/
fe7e3y5sPHkCEBjUegO9HU3HGhYumv/iuheIaaCHDTE0nViOpqwvUXQ7xWTy
3iHGW8iMF3Onq0dKatzIAdMgW3qnbYdb/TW86SiKzBm126WkzkYD5E/RPw8m
oVOlJ/rHJIKDokCJPhZdV5mhMqqcrC2dN/1XaZvWBRlRKXKQMs00w8v+8Oij
Dz4QYqyHGiE9CFZdSO25+95FK596UtUV9C+lCEFAoVh81Eo2BDHxL4KvDgaD
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
402YtZXvWz1DclAqWZIcHIokB8ei4nFQ2IAgEcIYBPsDGINu41EAFA4YOtM1
JwPrhAQY7WSsnenNTD/CUwPT6xmpw0WZWB1lRwhrxIUKiZ/pTcxoYmYjYw3U
bGDsGDNPMv2YqcCrTSbpgNJHXRx0m6XOn8N4l/qr3wnA6VBPuAv4rXK6A84D
PAUxmYB2SD28yugyMQVxOqUZpLjKp0pZSMcwM2GcdcnaQ91hIKqYeALoJ72s
q1pyUCqJkvMmhiLJwbGomByEbW9vr9gRNBx4fNDNBccexLcAFcESNAzdCFPa
S+lxyN4k7GPKOyz8Bgu+zoKvsuArLPwyU7cxfTszX8Jk7GDqS0x5HZPxMqOv
MPIa0/j5va+x8KtMLwI4akYH5cuNjggHY50AlpymMbVTVwHSJ0x2HOGNCXZa
XOmYyZpMdtRkzSZrIZhaTdZK2CkNUydh7QZAk4WAp2A7i1kYcKCzSnJQKomS
HByKJAfHomJyUNO0V155ZePGjZs2bcrLy9u6dasTU2AAiejk2dnZYj87e4uq
BAw9ZK8VD1ZRE1WLKg88Xloyu9o3uc7zmyOeyY3eyXXe22p9v6gquaV6zy3+
PT9v2HXrEc+vjhTfXu+d7N91a82uW6u9v4L9puLJtYW/Ki28rXzvg6HgHjCq
CFXMiBFJapui1MHxcN2lmBB0m8MGBdtXbVd6/7gpe8kLWb9fu/2eP2+7+2+v
3PPiy/evfeWhdTseXrcV09odD6199f51b0C698XXHlj36kPrXn7ohW2P/G3H
7/62/X/+uvWxv2Q/mZHVrGocVFQnGiU89FL7UPxFJQelhio5f3Aokhwci4pn
D+bn54vKTeyACgoK8k4n5y2g7JxNwgsU8BAO6araTbRKpr92yDet/v3vH9/z
9fbdX+na9ZXukq91lXytveS/2nb/R/vuz3Xu+lzA+6VQ8VcDRVd1eb7WvutL
mLxfbi/8cqj4yz2+r7W+/+36vTOYXmKQ1tNycFiKzwCdos53IQcJhsToMdnv
1mx48PntD2Z47kzfsyD9g/kZe+9I370w3bsovWhR+s5FaZ6FaSV3pL0PL81b
v2f+ht0LN/gWphf9Nm3nfek7H0p7++EXXvrftTnHTXZCM3pxAJGiAy3pZp1l
koNSSZScNzEUSQ6ORcXjIJh127Ztgy3Ub2I7gEQ1KM4ECSZu2bLJMHpxWNAK
vRQ09XJGXyrz3HJsDwDuX3sw3NhlIc+VmHxXhHddpuy6RPVdZBRdZuy8Qnvv
SqXwEyHvZUrJZbr3SuW9fzJ2fjxc9KmOki/4PT9mRhElJygNiQCU6JkpnDaT
zkHTdgqCy+xRzS7GHv3rjofTPQvW7k5du3/GukNzNlSnZhyenXFgbsaHkOak
f5Savn/WuoMpaYdnbiidlrlvRvr7szM/mAfEXFdyx4uF96x78/fpO46ZrN1E
nyFNzJvQOwezrlpnHA6eXCI5KHWmSigHL3A4aHr7OBgZd6mHmJqYJyU5eKYy
XWk0TrceIxI1mzDxnLouF0PURdSWebnZfSkn15WgXs3F8TsRMwKDdXYwWsHC
BbXe21p9X+vxfTpc/HG9+BLDe5Humah7LoYdw3eB4TuPeiZCIp6LMHl57E74
s3ii6blE9Xyis+SzR0p+zJS/M7PJMLoMikEJiWlwGupAI56YaEU6a1YnLic4
ZDRwRI+doOyBtW+AxTc77YNZ6YdS0itTM6tnZZTNyjwMNIQEO/BnKhzJqJiZ
WTFjfdnM9YdmZR6YnX54bvoBoCHYjA+nbQcO9jBnHTaNkQDrqDgwIAe7JQel
hlPDwUHPhH7+ojE4CEnEHwwVWRw0+3NwjJBQcnA8aXg4iFPFRWDBILqJ0jIW
2lbn+U1XydfDnn/Wi/+Jei4SUTgZLwsYqbNkAuPtRhGyk3nPZ57zRdkxvRdD
SenyfbbJ9yN0oWENhHYZpiLWpcEBOvg6vpi1VTqTzUGc99jC2L3r3l6Q/v6s
tA9TMg6lpFWlZtQA72ZmWuATCfbxz4zqGZlVMzMPQ0pNrwA4zs7Yd0dG0YPp
Lx3jMyqt1XdYBAdPuDiICePwDpaDxZKDUoPVmXKwgnPw1mgOQimOzUERlncC
i+TgCc5BwmqgJUg5B01mx/UcCxolHJQaFg2Sg7m52bnxOSgiTcTkYKj401rR
pWDlWRz0XECx5+S8eBw0imNwkJrdhKkRHDRtz01nkbKR4OAdGR8AB9EeHC4O
0h7WWSY5KJVESQ4ORZKD40kJ5WCn76pg0aeUnR8zii4k3vMgmcXnG0UIPuLD
kgKlg/DywjxQiM6L4uAR7w85B48AB8Ee5P2imuCg5Sbqjns7QhxMTf8oJgdn
8DQgBz2Sg1KjQAnhoGt8UHIwWTLjJKnTKQ4HB1IkB3MHtAe/FvJ8Ui28RHAQ
7EHgIA6pD8hB6rmoPweRgCK57cEIb5bkcTDMpw3ef1YcPCA5KDU6JDk4FEkO
jiclmoNh76e0okut8cES5J3oCHU4aPWLAgftftH+HDTFSLrpBO8jjvfmiHAQ
uHKSWRycMyAHrQ7SjCrJQanRqmHjYKz5g5KDiRONSP3x5+4uGyN3daQ0BA72
l8UmDJwU1S/6VeCg8JMhFvuiOdhnDw7IQRrJQfHjo2Y3cCWPgw+k/eNMOFjR
n4MPpO2QHJQaaQ0zB/vNm5AcTJDoaVBIo0aOpOJqeDnIIyvF5OBEwUEoHQhB
KCA+eyRd+IgWTxigX5SZFgdFv6iwB2NBkI01Dr4sOGiIwL6Sg1IjIMnBoSgJ
HOxfv9lH0FfeMETwGsrs+WP8BCbewQODMyUc7DvBOk0qhgQBHQ4OTa7ZCwpy
kJRGcZAUX+jYg6LIGN6+ftE+e1B0k3ou0ks+0en9zNGSmyI4aI0MEtskpHFQ
mFgRzhVnfBDny2ccBg7OSq8eAgePchPa4HEKeWTGHtZVPgQO8hVmrj211IrD
65FxeIdPsQajh/72JGfXQWiE/UUZC0gOxlQ8DhoYq5yKypDwfWIdQQjqOq4y
wlGJD5ESXXLwtEo+B0W/6Blw0LQ46Cag9Y2Sg5Hx6EcJB/vX/FGPaXRzIVoD
X8sQ3p64nzokyXkTQ1Ey+kX79WeKsG7MmjuNT00JBww9zKiuqWHIWaqGb1A1
Q6y4pWuKtAcHoyFwMCcvOomPOiMOuv1kTs9BFmCm7iag5OB44uBZgibRcn6S
ex2/wf/UUX51koND04hzEG4aBivnzy4c6IIqRDdob1ANK5qmW7wDYxD4KDl4
WiWTgy5/0QljmoNR8yYG4KA9byIWB9O945WDg9fohyCLz8EzfftovUA5b2Io
GkEOWqNCVMMnRTQtFGC6Qgw0BXUwCQmOGqo8IiwGNJf24CAUh4PZPLmFM+tz
RIqAYDYk8VE2BztxfdF4HPSePyQO9jrP0U1DO/57UqsVwUH3PPph5WAX6yod
+xzs58kWJzmzYEYZGiJ0liAb9ayXHByKRpaDol8UUUgwNTfWzUqZseiee4Ma
AQ4CEU1cul/XdQxiLjl4WiWOg/XeyREchNJhcxBKytlw0EkOB2kSC88gORi5
rlp/Dh4axxw0Ix9TpGtTzJdGb9139hQb5CeM3E2Q8weHoiRz0JoJwWs8YeXp
WoiZUGPowMF77pw/c8aUZU+ubOsNBXXsFQV7kFcpFJ1qJAdPp0FyMMeB4FA4
eImbg6bv/LPnoE3AUcHBWZmSgxGKx8H4afRaTO7fM7Q4X4O5uhG93tEybwJH
viQHXXLnCoeDIgKdeEyUqADBZYv/8OgD9yxf9vi9Dz98sjsApV2hNKwbpnAh
lf2ig1ASOGjYHAT84XraXlxYRnCQo9DmoDeag80+e97EKOSgiRycn/nBrIwo
Dtrsi9znHCwTlHT8ZB5a53CQnZaDnUvjxl1qd3Hw6LLvViIH53EOnnRzkOF0
0aFxMJ/niRx84tEcjKpFDbyKQSSTaXbS3UyM7AB3KanVY19vlJiQhRDkbRWR
3Czrt3hV9AxWkT8NnqidosA3KjnYd4LNQR1Lt8VBEXfpytPGH8Twu9w1zhV3
6XIn/qDJagUH+3oGJAf7FOEFYWUSbiTiRAluCaav/cuCuSld7SceX/yH+//w
+w5N67G9Z3iVwsTsCRbd2sRcLQLRWuHFDcwAmqaJnXGvqOboli1bsrOzd+zY
ASiEHScqfRwmwutbIWEfqTXjHl9l/GZyi0OhrJXph8T4YIf3K8BB0/dx03uR
wUsHjyuBzqIWB4utefS8sxTtRKN4Aiu5RPNc0VX8byf33MxCrzKzkZmBvhhL
riHCJNsR4sNF/MHjlD2y0ZO6tmTuxoOzNpRNT6uctd4Pdh9nXxUkex8Sx9+G
itTM6ulpFbPW16RkHJq/6cCCdTsfXrvjmIHxB3HAG801qCkDrLN03+ppR574
IXCwbcnX25cCAa+DJGLQdyxFDnYvBghe7Y5O2LXi+rbHr2557JrWVT+oXHnL
eytT2ImPmHYKfywNY/8JDpqb4vmKlRNE42cQKyfAe7bBdkteVs7W3C2bNvOS
JTpeMN6WbnapBKpHqiohgpFBOijUbCwgEolMBi6Rh6+aZoDSHkK6idlrkCCP
q6XxlkAYkmmEiaFYS2JQJho+6CKXjBYPNaiqmTq6GcDXckcDqB40aqpWk4Kj
kAf/MkQcFE4IUwAQ3yhicVrGDW844Zq0vZSE8fP6gGg38s0huKEO4/X246AF
Qf4r7PYJNg10jC7KOVhVdDNwUN39acP7MbNkIiu5CFAY01/UoSQm34WG74Kw
7/KAh3NQe42xOrgx4isI0SFxYye2+oyjyB3Yqio8HAZ1uFO3J/oGJoGDVl8x
lwNByHVKKIyuoGro76+/Mn/OzMMH9hItsOKJJff/zx9OBcNBk4W5www8MTWs
8FYaiclBk3dxMKwZrFfFn+eOxFXD5W/duhVhlp0tgBirGozgYFZWDqS8vAKo
RbOysuB9BQV5kAkhBwoOMlFS1JcafLd3er+iFH+SeC7l8XYtDtKiCfYcCuSg
aDcKDoKdqBXhejLhwo937vw/yMEwlJQmUVLicTDJN03n4eOP6uyh9UXAwZT0
fTMyDs1IB/BVC/alplejbcj7Qm0OHk5ZX84PVgMHp6UdmL/+w0XpO3+X/koz
wZ4m1bJADEZ6WMdh4GDd0u83L7mmY9k3O5dPal18NTCue/l1wL6YHDzxv18/
9fg30R587JrjS79bvfJm75p5yEH1JCEBqL6w/8TEyhw4CE/tDDkIz78A3rE5
Lyt3W862gq1ExUaj6HUBOBjmKVxfx2hj6jFmVjN6iG9rMMFOVKJVPFVjIpDg
tFre9X3MpCd5ZwKkAKMK4x25hqAJPGWCncdJ6TaDukAnDJvFeI2wpzNFx4fe
zc0huKEhyAOUAad7+cEuho2ZEMWDYb6mEtj4UB3BkSD/s4s/5QA/zgd1TCOS
g8lszvW/XhuFzj6NepVzkPGnAaW7HDjYuOe29pKvBoov14o+RrwTjaLz9EIo
zhhK2x714MtGeSdS30VgBsKrcI65+yJIQc/Hu4s+e6LkZqa9zrg9aFAd2xU8
xPYZcdCpt8GQga2u67wiSsbdSwoHI9p9vMqmwr5TwsGqskMzp06uKN2vhjqp
3vvEk0vv+d2jHaoeIGAosrBu6Aa+W1e1eBwUgjtWX1/v9/srKyurq6vLyspq
xrv8tuB6q6qqYGfTpk0FBQi1fK4crgE4yAkoEr4F3gqptrYWPryqqqKq+pC/
Zndt5Y7Ohr/VFv+6y/dV1fMph4OiXxTBNyAHme9jdNenQiX/fsz7o64jmfX+
92pq9sPHx0pJVTVXRY3/YI3/w6Od96W9u2jz/nmbSsEe5MZgXA6mrC9FkzC9
OiWzRnBwbsYHv80ovP+vBR8d6/iwpq601l9ZVVNRfuhI9f5w9c6Dz848turH
bSu/3bUCUHhd2xJcM6198TfjcbD7iW/BaYEnbuhafkPLshv9T91SvHpOsPLd
o5V7qqr2H6mvLis9UFNVXVNTC60d8ZRz7c7wQa2sDmfm52wp2LIlb3Nudk5T
3ZHK8gooOzVV/rqa8kb/++1N3paygu6qjYG6v/TUrg76/xj0Px+qeZ7v/DFQ
27ftrXkOUsj/R0jB6j+Fqv4U8P+5s3btibqNTVV5LQ3vHqkuaaje568qhVJZ
UV1f4W+oqK2trK2q8cONr4CdSn9NtT+hz7mqsupwtb+irLyysqrWX3ukpqG5
trnt/eojuxraSo5072oM7G4I7qnr3VUX9jToRUeM4sagrwH+5AcbOkoaO+DP
kvrg7npld23vBw297zd07qlr3VV1vOSwv+rI8XI/XEx1FWQofi2YqqudDOYo
oRfpvl5M8Iuc/YiShX9WV1f6q2v9NfAIPqj3v9La+Lzf+/Pu978RLvkk230F
230JMI75Jg7AQZHoromQlJIrgr4vAAdP1Py1vv6d2roDNbXVdbU19XV+qEh4
XRJbcE+gyoragW15eXlDQwO0xh3zUBg4CYXUiHBQ2IO6ppxoaZ6TMr3w3bcM
FdpiqqH2LF/x+N2PPnIqFOql2GelwVaMIMW3B0UrAjhYV1dXy9XY2JjEjDeS
EvmnhmchuPzNmzdDxQiWIDfusoWxEI+D8KJwHAXDURiPeXlwelatpZr6hsqm
I/vqq1/uqP8r2IOCg9T7T6b3IhwygNLhu2AADsJBZecEbef5mueKXu/nmop/
0NmYUVfzbjwOJre6sG4a1AUHqms+OtZ11wt/X7B+76yM/cC16WmVA9uDDgdT
Mqunpx8UHHzoxe37j3cdqD9Sc7Sprr6xuqqssWofcHD3itvql/13y7LrTj3+
NTD0gHFdyybxAcHYHOzAM9EebH382uYl3xEc7K14p6n6/Zqag81NdfDJ/mqo
Yerh+cbq+j6dOZi9JTt386a8TcDB7C3AwaMACchIDXVNR2qrj/rf7258s3rn
I82euS2eyS3Ft5wocqebW4pvFttTnltOFv9MpFNFPz9ZeAuklqJbj3in1Pjm
l3r+50RNwXF/0VH/wQZ/lb+2vrymvtRfLzhYXVteXVta4S+v8FcmjoM8Q1XW
+MsbGv01UPH7G6r8jYf9jbsq6pdn5D+ydscD6167f91b96995/4X3rnvhffu
WutZtK74rnXv3LP27/e/8I8HX/j7fWvfvGfdm3evfeeeF997cG3h/X95+8G/
vfa7da8/lvb6Y3/bumb9tv3+o6X+uigOur49hhJ1tZbicpB/dR8HobHmr93b
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
/vymJ17b/cS6T55I/fSP6z6D45Ope+H4VNoX/PzJtM9ijk+lfvbf67OeeGXX
/133/pJ12/pErmxTyCtysIN1VH2WtnTfC485V84rWJuUv+K+gpUz4tai1bMK
V82ECif8CpzvXzkna/UDn/79f1gPchCYElHCMuUHD/UHM7dteWfb9rfe2ogc
3LoRBgJOAQ1RNm9GRJqDCwqcwPAiqSWoLKJovYx1Mq2KCQe9+5d67PNqHH+o
dfy2znE7cK3Bfntz1p1QG7OnNmbf1pB1K9S67FsBl7W230A9Yr+lNvum2n13
1Nruqc59oDLvf5h6WGJ1cM+8Y/OWMs/HqROahf85K3bhR3hzIU3uZOxvr28C
FP5PxidPv/HRMxmfP/bGnj+mffbHtL1PpfD6BRz/lPLJU6mfPJ766WMpn/0p
HX787M9pe598/cNnUvb8d8qO517f2CqxPpV1CyEKARG0SDfrrf3i1accq+fm
rZp1+PnZ0OIHVsw4uHJm0fNzCldMK1x5b8HKaYdXzTi0ahZUOC9YdW/BmmlQ
Dyy/58DqWftfefjT5x/Z/cbfWH81k7okqU8PRKfn2PZOJkAQ2tG0FKwcHLLd
sV/Av3vrne2bd773TigCnTQk0oIPUQrimsdIhdvxV2/WzKp9dzfYf38k646G
rNsH1ybbHc3230CFE/O83nZnjf2+8r3z3M4VTCpich1Te+BVKOQEGIhCacLi
CUltRq1XlMHCYh0iW/z6lr+s2/XUuj1PvfEJ1KfXfQoj9/G0Lx5PywLAPZmS
9dQ6G1Q4AdXoj6mOJ1McT79u/2u64+k39sLn/5zy+Z9e27Vs/e5mEfVFEE9I
FhjdfdUfp/zt89X3H35lgXPVtMPPz9y/7O7iNTMPr5p2cOX0/DVJ+1fOgmY9
tGrGYapwcmD1tEOr7z286t7SF2YeXDHtwNr7s159mnUHmIz+ZA4UeGXhcHjH
jh3bt2/nI5c3+lDF5KDZMeDzML7BHgTEkAEiy1II1+kLR1g4z3dwce3+h6rt
d9Xm3F6bfWNd1o0NWTc3Zd3WlDW1Mes39dlTeT2S/VuoDY47GxzY1s22O5tt
v2+0T6/NXliR/RemFKpajcx6UAmE21ZpiYyqDOW3G8xBU24DCxhpqoDCiREO
J4qDfKK/rq5m5szpGRlp3HyLRDBLWNFh24MLZu7LzuoXFIHsKVo3ITCcIpRU
vnSQJ+xRo8MIXlpVVZXP53O5XB6Pp6yszDtE8fjcUL1eP1Sfx+vzun3eSjjC
v/L6ApVeX6nXXxw44qysKagLHqyL5Ph7nYEefsyt6odjXnWQn+dW9Q4+Onxd
+UeCef7W/EBDucfvr/IVV5QEqr0Bb0WgsrC9rvJIqa275Aux9FOt7GOl+H2t
+MO4VS3aoxR+AEeocsH7UOFHsXCP4rI15X/WV+eu8ZS43MW+gNvnC8CzNDc2
lRQXNtY3VVdXwwW3F94DVt8QBZ7XTcXv98M/gbcHV8rLS6vgVqs8le6ysvJ8
j6fA53G21joaPTtafakd/pc6fS90BZ7vCqzp8T/f53m5z/1qMPD3vsBr/YFX
qb7cF3i1z7+uP5DS73+t3/tKyJvW51nf5X3bX/xmc4vdX7Pf69ObxkOFn8P9
DNVeY1X4I8MRnhdO4JErKyuhJ1R4KwNNjYc8NSX1fQereuzeztyaPkd1T051
P9Wgs0qv0LjOaqw5VT2Ha0MHAr35taFcf+eh6u786o6D7mpvQ0tZoKrYU+mp
gv5UHnCXN3tLOstskfLPpdKPpcJdYuH7SsmHaulHctFuVoxVK/5ALfkQfquU
fAznWsluueg9pfQD6BhwUajYF/LmHil11Hryq3zlFZUltTVV7kqXq6y0seFI
UVFBVU2Av0n+gLxYzweVgN9bXeWv9rjL3e7iSldJfVNNqTvfU1tZ01RT5i51
ectqqg42+t/tqvlHb3VGl+cVbEe9cQfUHu9Lff5Xen0vwwkc+XmX6+VIzVv9
1dvrSt9rrcqr9RX4fCU+f7nbV07jjjeF21LHu/g93qqKSvzTLk9lhau8HAZ6
TfNhT/3hmh4cs77u/f6uQ/7uA4HunKo+aHFndX9uILjfHz7gD8MJNb2QGxAO
+IT9vlCutws6CUoGb+vByurKwJEyDwyWisa6an9FQYs/vy7/I8m1Tyj+QCp+
Tyv/QC7YxUr2QBPLxR+ppZ+JxZ9IJZ/y5oYqln0cKYMjdIAPw4ff08o+FUs/
662011bsD3jLKl2lRxrqA4EAdNT6+vqKigpzwA7dvmYH8PDq5ZLN662qqikp
KWtubsaLngqPu6y62lVbU1gX2Octfbst8GZX9Wtd1Wt7q1b3Vz0frnop5H8V
Kra+/zUY4H2B1/v8qVA7va92QVt7X+lz/73fndLv/Uene2t9xY7G2pxA9UFv
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
6WuZ+T6zPmTmUWY1YGCzIe/evi07Iyc3u+BsfZ1OFRAkXZg+61kQw1avfQue
rqZ6R3pylzdXr6Xiu+r2rdsA8VNTMvfs2wtKuih4JkwsHze+SuHGWaryPWf2
jIy09A3rN1MjKRQjd+zaOWnKRJNiqGbPmp6bV1Bb57G4uxMLuoII7QMle+78
eekZrvKK8TxVRNNbOweDAw/j4GehMA62CbXGwXPKXNtnk2uFIM4CH4MDgtno
JuZWgLIHPyjc+03Bixa1cwWGs+KF5Vn52V2Tu+Tm5rrS0rNT0lctWq4KqNjA
Gdm+473MjLyUbtmZbldaRrLLnT1kaKnXQ7WgdZX4uRnw+WfPnp2ZmZmWluZy
uQD1hg0bFggEePQgfPLJJ5/MInrooYfgLsDEfD6fSTGup2uPZ2e74Yupqell
ZWXvvrsxLb3bnj3VLQpiXMm546PCWFYQfVW1UVdOmfpJZp5hxllm1FtGI0Pz
KTw2FhSlSh1we+xvM33mtKwcd3o6+jfz8vLWrl3LWiRNv/baazAcFxF8Bv7K
q45bpBsf/vQ4iNCpqcmpaV0LuhdmZLpXv/4mL1g2rqp82MjRDT4RDVMqGq5V
7I1oN1DAbjuaCMN/6unH8guy6+pP0yPpogRMCYst9+jV052dNXvOjMNHPgGu
Dq+U5K5Dhwys3r29d68er766GnsTE5iCJANLA+Doykyvq2sAvj1lyqT+/ft6
vH7q1KSWjSkdMWIE5ZFh+ThFkqdNm5aTh8EhoIaAJv7M9GlwhZQ0GEbKK6+9
OhaY64QqjORBEERbIYa8thFxIxvWhKcMylGjRpWWlmJpbpSpsNcGgDuPP3lj
zeqcbPe+vTUmlZ7u0aOoqqqSkvVMURZA9CobOYrnoezcvsOVkZmZngEyTGV5
xY5t/7+9a+uR46jCyh8kYGfXd3tzMwo8cMtFeQmKEiDJCyAeQBAgwHMiSwER
K4AiECjY2WAHCIkiARKCgGXH9s6lZ7q7qqjvfKdqqrtn2jO7s07sraN+mJ3t
6a6urjrfOadOne/Cww8+tH3xLdZ184PzheeeP3Hs5PFjR06dPvr7P7zxuc9/
8fs/eMkK3x9qlE0nly+9d+zoKWw+PHLv5qHDD2w9+Pbbl1jqASSWHAxEgUU4
KCdIKZvrzn1o3T+sfc+6Pzv3F+v+at0Hzv3LuCvG3vDnoEjRFJtoPnj/7w8/
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
9WeWLFmyZMlyd0gX77z8HyyhBNI=
       "], {{0, 428}, {600, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->{284., Automatic},
     ImageSizeRaw->{600, 428},
     PlotRange->{{0, 600}, {0, 428}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzs3X9sFNfh9/vmxy2X9Bvpkj+KIjUluUnoc4kSEwjYEDf4W74CRwH1gaZx
wRYUTGqRPCYxfUhTIX4UEvAXE36EqgSF4ARiMGDkFHgaFAzeJZAaYuylKJS1
MTFgjI0N9sY/MDK7c8/ugWHYXa/X3rF3dub90qhKzZmZM7Njds6H8+OJ2W9N
/cP9P/rRj/74f4v/mTrrT/85f/6sP//m/xH/57fz/jg3Y97rc16e979fz3h9
fsLsB8QP/6f4H9v/9aMfef/732ed6lZScvxru/2QT+nJMvGTi5dqaq9cYWNj
Y2NjY2NjY2NjY2NjYzPT1uhqunip5t9nnaUny9QwpKTkuDYnUTdRRpQXe4ld
qqur5U/U5ET8UfuNdgUAAAAAAMCM2m+01165os1DqqurZWeSRleTuomfi5+I
P5LFZElZRhyhM9pXAQAAAAAA0Hfab7TLTZuiiK26ulobochcRRuziD+lzwkA
AAAAALCUoB1R1Agl6IAdup0AAAAAAACrab/RLic5UdMSGZVo8xPxE5ITAAAA
AABgcbIjSunJMjmXrOyCIvMT8b/ivwlPAAAAAACAxXX6IhR1thMZochVeJjz
BAAAAAAAQJIDedTVdmSWIsMTOp8AAAAAAABI6ige2QVF/G+jqynalQIAAAAA
ADCW9hvt6rSxJSXHGbkDAAAAAADgRzuK59ChQ4zcAQAAAAAACHTDo9ReuVJS
cjzvqyLyEwAAAAAAgKAaXU2y/0m0KwIAAAAAAGBQ5CcAAAAAAAChyVlkv7bb
o10RAAAAAAAAg2q/0V5dXV1ScjzaFQEAAAAAADAo8hMAAAAAAIDQ2m+0X7xU
U3qyLNoVAQAAAAAAMCjyEwAAAAAAgNDITwAAAAAAAEIjPwEAAAAAAAiN/AQA
AAAAACA08hMAAAAAAIDQyE8AAAAAAABCIz8BAAAAAAAIjfwEAAAAAAAgNPIT
AAAAAACA0MhPAAAAAAAAQiM/AQAAAAAACI38BAAAAAAAIDTyEwBArHN3uNob
qxoqih0lR7+228Vm/6b8RGWD85q75aaH+qCXPB1K2yXXRYelPkeeXgAAukJ+
AgCIdaK513w0++Ca1DemJScm/lJsSVPnpHxwOOeISzT6qA96qe2SUpV3Oj/L
Up8jTy8AAF0hPwEARJmnQ+msE6226lMn5L93h94O246J7Zij+tzVlsZbyg2P
crPm2wvbpm5Ive/pQQPu+9F9Ynt48LAnX9+RurWytOZm/1+Q0eqjs4BeGSE+
Kfs35eon1RntiveUp8np+XaZfdV/vTBkoPwcf/L4aPE5pu+q79PP0d3hEre3
9pQ96B2Wt9RRe6OPeoOIp7d+z+8/zxjSz1cNAIDxkZ8AAKKss05x2ats76+e
lpo24sWJ48bKf/XuanvxpQkJE1Mmpa/NLj5v/8EjGuYtVbZ/rR+1cfyPtHnF
wAkrR64qs19o7f8LMlp9dBbQKyPMT8oV7Yr3VLTyk84rDufO9NwFI2ZMSgy8
q0lT54ycv21+3llH7Y2+ODv5CQAAXSE/AQBEma89XrZlRsrzgwc/eL9ssoXe
7n/wpz8b8Xbq1sr8Onetu+/zioAeMrIPwInKhtpWd6fi37PC3PmJTBUOLxyu
tq9Df1KPPDV14sKtOfvK95TX912vib6g5idjnn3ML0nom+zCJZ+x4wWrP88Y
8oehA4L+Oohb+sAv3hTV2Gyr7Is5STqvOLrKT/oosQEAIFaQnwAAoku0Ut3O
v2pbqT3NT/p8vExAD5mEiSljp62cvc5eVNEcODLF3ON3RPu66UCmtn3d7Ycl
GuDDkuf1aa+JvtC/+YlLUc7UOwp2Z6S8PfLn4t6qD0/g9sBDQx95aurLK2x9
MScJ+QkAAF0hPwEARFdgK1U2uh8ePOyJuNHhjN8RR+jbGS/bLinXC8u2zBAN
W9klQO0DkFt+udbtnYNFy9wzcAaO75ABkfiwhsePkdcbHx8vPk1RQO1BIZr8
4o6N+lPRnvJ6OWuN8fVrfnKnF5Z4xsbe/0DQuyo3UZmnBw0QP++jMTXkJwAA
dIX8BAAQXYGtVDnoY9iU9Ys+2vmFzTsNaej5Y/t8xdUe5ifmXgE2MD+Ro5Ne
fW/3hl0H5PUW/WOHfWPGhzPj1TLijj304+Sho3P+/PfvZOplfP2Zn4i76tyZ
Lu+qfMYC76p3s+0pzF3+TvKjKc8PHjl/G/kJAAD9ifwEABBdga1U2VchIXOv
7KsQfZ11yvVC0bx9e+TP5agKvxrG3MoykeiqfZ31ZfPd3jXijgXMaSNjselr
T253Kt+3RPUawtNP+YmnQ1Fc9Y6CwwuHLx33oDpsR5xr1J+K7rmrXq6WKtvB
NamfLJ715sfHGL8DAEB/Ij8BAERXt/mJAdKJhtD5iaWE1752iY+1yvb+hzPj
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
TkcLMX+suNJn5m4UDflP5yVrkwq/tbD1b937+qKoKyZrZ3+V+Uldk9OvL43f
+Jdu54/tdX4SureYdhN/JDuPnbvacvcueTra2666LjpqT92u4fZlk7U11P6d
EGS+FwAA+hH5CQAgukLkJ0HTiUA97e/Ru/ljA3uwRHH+WL9kwKj5iUutuXql
+s74qr0Put/VEOsXH9n1rt+4JJkheLOXC619NMakpcr2r/Wj1NlW1fwk54jr
QmNp0GtZtfecdv5VcUVNBzJDf3a9+G3ym885Im2X5CikN6YlJ4x6Tp2nNzDd
AgCg/5GfAACiq8/zk2D9PXqxfrFu+UlP11MOY7xPDOUn4aw43Lv7oPtd7So/
EQcUL06Ba9A88tRUubpQpKsYB/KNc/FbrUabnzRUFMv+UdprkfP0antwydWr
I8pPuug9pSYbkfYM8XSI2y5nfSnMXS4/TfWXrge/swAA9AHyEwBAdPV9fuLt
71Fh2xTY2g06Z4UcTVB96sS5qy3ftyjeFWm7a2v71fBmzbehEgZvW7ghcOXW
ruoTOAurtnXc7QpEUZ7/xDdrh7xv2n4Rm22Vvh4j/plAJPdB97vaVX4irrTs
cn1Lle3gmlTxUIn7oD3CyPnbvE9Fq7v7eXVuV8Wbp7U3VolHTryPiXsYbN/g
qwbL+WPF6Roqiv2eT/GZimsRn6nmUA2Bc6T0PD/p2W/T7QtsuySuzlFy9ERl
gyjg/Z0K46r9+tto5woWhcO7uQAA6In8BAAQXX2en3Txb/d+c1bc4ZLt4k8W
z8rZV77dqXzfonQ7Y4lfu6+b/MR7zR3iLBe2Td2Qep9aJkR9/FYBlmvmioak
/UJrtysQRW/9Ym9JuTqtX8JwN/HQ9T7ofldD5Cfeu9p2STxU9o0ZajokL3BY
8jxxEPHkhNvG76xTXHbxdK2eljpn7rQln5V69w3sLXNn/li/EUPiCTx3teXm
9SNBx+/I2UJ8v0EucRZRZun0eO1KNz3OT3r22yR7zpypOblld0bKsqS02evs
MmMRv1PdXLWnw+8s5CcAgKgjPwEARFef5idqq/Bmzbd+bfng817a9hTmLn8n
+dEZkxJTPjj8fonH19bz/zd3dWxI+md7874qErvbvylX/209nPqEWNs3aH3U
Nq84r/bf+sO/A13d7Z7mJ4HpkDzCq+/t3rDrgHa+UHX8RYgRLvreB92P1lV+
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
fcvt4u4O7wCfekfB8YLVn85LTnl+sCj/8grb+yWeu61+cUzFdbPmW+f+FduX
TZ4xKVGUSRj1nPjfuLjXxk5buWrvudKam+K2izIX8hZ88VaiOO8TcaNlsTHP
Pib+Y9iU9dPXniyqaA7e+8V3/HD27YuS/VMf/7MAAAAAABBVls5POusUl925
f8WypLQ5wzMXfbQz76uiL2z2on/ssG/M2LF0yex19qwvmx21N2Rx10WHc2f6
9mWTp/zxL6+kZb6T/OjS6fGizD35ieJSlDP1joJt/+tvy9JW5m7dLo4pDliY
u1wUnjEpcXrO/uzi8xcaS2tObslP+Z04dcaSzQt322SxI7ve/WTxrJSEtCmT
16zaey5I7xff8cPc95r7vO4l+6c+AWcBAAAAACCaLJ2f+MaSlGxeOGd45u/G
Lt9sqzyjeLw9HzrrxM8rbJty9pVrR5So+cmr7+2euHDr5xlDcheMWLjbFpif
1J6yq/PQ+iahddU7Cg4vHL50erzYMXVrZel3+537V2QmzRTnlYmBLCbznMXj
k1IS0vx6v9wm6na9MJx9c8svN14/pG/J/qlPkLMAAAAAABBV5CdB8hPfHKft
jVXnrrZoZzSV43eqT5045qj+2rbn8MLhuQtGiPZ+4Pid9rar1dXV4saKfeVs
sS1VtgvbpsrsRexSYdt0ZNe7k9LXJmTu3VNe33hLXSu5od5RsDcrbun0eFFS
2/vl9uGbnG7nX8PZ989//y7Ms4Rfsn/qE3gWAAAAAACiy9L5iWb8TkpC2qKP
dubsKxft+ntWyelCS5XtX+tHBclPgvJ0qPnJ9Jz9YpfT+Vn2jRkj528buaqs
qKI56JFffW93+q760pqb91T5isPz7bJw9p29zh7mWcIv2T/1CTxL74hnu9HV
JB7vagAAAAARqL1yRbxaixfsyN/Sgdhl6fzEN39svaPgi7cS30l+NGHUc3Fx
rw2bsl609O0XWl0hd+1BfuLrkSLH73w40ztfypLPSu0bMwpzUp6ZuzEwSfDO
sHqnp0rQvKLpQGa3+07P2e+9ijDOEn7J/qmPjvmJ+Ev+a7t96+d5nwIAAADo
LfFGXfSPHSUlxxtdTZG/pQOxy9L5iY+c1SR3wYgZkxJffGnCsOR5k9LXLvpo
5xc2+4nKBu34Ha2GiuIw8xN3h+vm9SPO/Ss+nBk/Z+60JZ+VbrZVlm2ZsX3Z
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
fKHrvonDioNH+/rQH3jbBACYA99ogDWRn8CsyE/0VdfkPPjP1eI7XfdNHFYc
PNrXh/7A2yYAwBz4RgOsifwEZkV+oi/te4K+G+8JRuPucLkuOlylpbpvFbZN
m778LW+bAIBYR34CWBP5CcyK/ERffZefiAY17wmG8kNZ2fn33j89Y4bu2+6M
lA2r/8eyPUPFxtsmACB2kZ8A1kR+ArMiP9EX7wnW4SotPT1jxtGh/6/u2/95
5f8jPwEAmADvRYA1kZ/ArMhP9MV7gnWQnwAAEBrvRYA1kZ/0jrvDVVdxXmy1
rW6XonRGuz4IRH6iL94TrEObnxwb9j903MhPAADmwHsRYE3kJ73inVyxMLtA
bCcqG84oHle0K4RA5Cf64j3BOshPAAAIjfciwJrIT8Ln7nB5mpwNFcVf2/YU
5i5flpSWmTRz0Uc7c8svO2pvNN5SbnjuFPV0KG2XXBcdjpKjhzTs35SfqGxw
XnO33PT0uGSgcPY1Tk0iP0sPkZ/oi/cE6yA/AQAgNN6LAGsiPwmfp8nZfDT7
4JrUGZMSxzz72NODBjw8eNgjT02dlL42u/i8/QdP4607RdsuKVV5p/Oz3piW
HK+RNHVOygeHc464nNfcPS4ZKJx9jVOTyM/SQ+Qn+uI9wTrITwAACI33IsCa
yE/C4ulQOusaKortGzM+nBk/cdzY4fFjZMN/3ONjRNv/zY+P/e3sre9bfCUV
182aby/kLfjirURR8om40aJwwqjnxjz7WGLiL4dNWT997cmiimbfkJ8uS4r/
UEve07NFrU94+4q/fsM5fj/UJKKz9Ar5ib54T7AO8hMAAELjvQiwJvKTsHTW
KS67c/+KZUlpc4ZnLvpoZ95XRV/Y7EX/2GHfmLFj6ZLZ6+xZXzY7am+Iloei
nKk5uSU/5XeicMaSzQt320RhUfLIrnc/WTzrd2OXT5m8Jrf88hnFE7pkSkKa
KLlq77l7erbc1s1ZxL6/Gr9ow64D4oerp6V2e/xr7vN9VxM9ztIb5Cf64j3B
OshPAAAIjfciwJrIT8LiG3VSsnnhnOGZvxu7fLOt8ozi8faR6KwTP6+wbcrZ
V35n7EmDW/mmyva+TFqWfFa6v1nxpQENyvXC0/lZ8gjZxedLlFuN1w8596/I
TJopfiJzA9kpRWY1i8cnpSSk3e3ZoiXOe70w9L5pI158/eOlb63IEQcJffzc
8st9WhMdztIr5Cf64j3BOn4oKyM/AQAgBN6LAGsiPwlLV/mJbzbU9saqc1db
7sx9Gm5+Una53u3865Fd705KX5uQuXdPeb0odmcd5IZ6R8HerLil0+NffW/3
nZ4td3manN3vO+7BGZMSk6bOGThhZejj//nv31XYNvVhTSI+S++o+Yl4wiM/
GnhPsA7yEwAAQuO9CLAm8pOwaMbvpCSkLfpoZ86+8j3l9ScqG2pb3Z33FL09
nmV3RoooLEpu2HXgC5v9a9ue4wWrdyxdsixt5dL0fLGv+Iux+Wi2fWPGyPnb
Rq4qK6po1h6lpcr2r/WjcheMePW93em76ktrbt5TnSsOz7fLQu+7IfW+lOcH
P/LU1IETVoY+/ux19tP5WX1Xk8jP0jtqflJScrwaESv9bv+mL3/bF+8J4rDi
4NG+Ptz17y//z8nXfhNb+QlPEQCgP1nwvaj2ypVGV5NoPEb+lg7ELvKTsPjm
j613FHzxVuI7yY8mjHouLu61YVPWz15nt19odfmVVFydVxwVtk0H16S+MS15
4rixiYm/fPGlCWKXKZPXLPmsdE95vfOa23XR0XQgszAn5Zm5GwPzBO88q9um
bl82uavUott9P88Y8sKQgT95fHTQ/EQ9/vSc/d6r2JjRdzWJ/Cy9I/6ez9u6
NScn+1PoYdO2Fcu3/mdfvCeIw4qDR/v6cNeOpUuKJk6IrfyEpwgA0J+s9l60
9fO8on/sKCk53uhqivwtHYhd5Cfhc110OHem5y4YMWNS4osvTRiWPG9S+tpF
H+38wmY/UdlwZ/yOT9slt/OvZVtmpDw/+OlBA+RKxw/9OPlnI95+8+Nj+XXu
Wrc3eajf8/vtyyZ3lSeIPy3MSZmesz8wT5B/2tW+8sgyP3ngoaFd5Sfq8cV2
cE1qX9REr7P0DvmJvvroPcHbjjbke4KVxVx+wlMEAOhnVnsvIj8BJPKT8Lk7
XK6LjtpT9q/t3pV3RGN/6XTvWsZJU+ekfHD4zvyxXp4mZ9OBzC/eShz3+JhH
npo6Z+40sY159rGfPD76ydd3pG6tdNTeID8J/yy9U834HV1ZsJ+qZTF+BwCA
0Cz4XsT4HUAhP+ktT5PTO3vJqv9KeX7w8PgxMhWxX2iVM8rWOwrsGzNWT0v9
1fhFk9LX5n1VdPCfq8X/nThu7LDkeRMXbt1TXl996kTo5CHEeJZuUwux74bU
+0LnJ+rImm6TjQhrEvlZeqea+WN1xTxp1sH8sQAAhMZ7EWBN5Ce95OnwNDnr
HQVlW2Zkz581bMr6UX8q2lNe3952Va7UM+WPf5mUvnbJZ6XHHN60tq7JWfrd
/sLc5Uunx8+ZO038fLOtUuzbVZ4Qej7V0KmFOn/s04MGdJWfaI8fOtmIvCaR
n6V3qlm/WFe8J1gH+QkAAKHxXgRYE/lJONwdroB1ir08TU7Pt8sOrvH2M3ny
9R255Zfr7vxk7LSV8iea2WUbak5u+TxjyOLxSbPX2f/89++O7Hq3MCdFlOx2
PV91ZJCkztra1b5fvJW4dNyDY5597Im40aHXL56es//Nj4+FXxO/lYW7rYku
Z+kd8hN98Z5gHa7SUvITAABC4L0IsCbyk3B4mpxKVV6FbVPOvvLAeU62L5s8
LHleN/mJd12eM81Hs9f/+rG0ES+mfHA4u/i8OKB9Y0ZKQtqvxi9atfec/QeP
r7BLrpW8eHyS+KM3Pz72t7O3vm/xr4/b+dfQ+4qzyHlX4uJeC318Ucmak1t6
VxM5U244+0Z0ll4hP9EX7wnWQX4CAEBovBcB1kR+Eg6ZV5zOz8pYsvnV93Zv
2HXgkI+cRXb1tNRJ6WtfXmErqmhWx++8kpY5dtpKuTqPKPm1bc/Bf67+bF36
4vFJmUkz5SrGDRXFzv0rxO7iJ+LIC3fb8r4qEsc8suvdTxbPSklImzJ5zaq9
58Rhq0+dENu5qy3ftyje3i+ddTJzCLHv78Yu/9Q3N/iypLTQx7dfaG28fiic
mth/8HinjWqsEpVxlBwtu1xfe+XKzetHwtq3R2e5pcOnRn6iL94TrIP8BIC5
ibffuian+EtD900cltk1LYL3IsCayE/C0lmnXC+UfSTGPT4mPj4+MfGX8T6y
d4fsX+HtNXFn/tjtyya/k/xowqjnhsePkSXFf7/40oSx01bOXmffU15f2+pu
b7vaUmW7kLfg03nJE8eNfSJutCgsio159jFR8jdz8+fnnT1R2VD6nXfmkE8W
z8rZV77dqdw+S2ddt/t6p145ZT+dnxWijDfWuKWEUxNvSe+CZWdqTm7ZneFN
jZZ8VirqU3vlSlj7hn+WW8oNT/efSbfIT/TFe4J1kJ8AMLe6JufBf64Wf2/o
vonDioNH+/rQH3gvAqyJ/CQ8LjU3eHvkz18YMvDpQQNE8z8u7rUxoxeIhn9u
+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
C9YJzgP8E6Bk8CwC/EBFgB+oSC6eqn9iFEwDihaF2iC5idGff/NefNIXES+k
zetfUdZoqr+q1+hKMjbExiWFLWBZJ4W/lJb+e++p/V/9uHqhKjA+Omrj+iPX
NH91P5F/UqNex2q6ekcsD08t2Lr/OI1Jk9m5PCLIfyXrG3vF2P3o/inBaYnP
pLus2raPbn3iPxt+2pwQ7zubbj0vu4RVqBgk/8VUOZZmTtd+sLSI7ktyYtVx
WRcezfX23lN7nJYi1cfpYfHS90gn02fi4/ORl392Vlktj3+C/J2nj5j5NWwK
z0n1Gc3ZSva7QKtiAP9EXrBOcB7gnwAlg2cR4AcqAvxARXLxtP0TY483QlF/
VspCtv1j8dJYVvnErKMxRf2qwPi356xiPklPxorJV1k9J4x+xDJi6Pc10EMY
1j95bWluXEH1+VuPaD4G3T81uYk0oOhXGO8X/35wQ3TUxg+WFvXWub3C9q4s
npFEsx2qCmt3i45GO7X/K7qQ9WJ+0HGXvRKZsCkw6QjbtSIEy71OS1LYgo+D
14rvkflLe9KjLPsnQ71HPerH2puuO32ZX5aLx85+a26Q/0qSCnPtYKE4OfBP
5AXrBOcB/glQMngWAX6gIsAPVCQXdvBPTLk5FNEf/izki4gX2D6QQ5WN0j/B
d7fouv9I1+QmBsdmip5D704JIQPoSLIP27Xy9c+Xn8g/GcwDaWKeDJ35cfBa
dqbN/gnFzi3Hk2jmbO+H4M+Y+unUqNdJfRJ6O8xpoTPfnrPKOzqHdecRfRW6
O91InA/8ExEl+yds5wlpaXfi5E+83FlXHQuHi9vEcc9GiC6ZFb2ZgCMD/0Re
sE5wHuCfACWDZxHgByoC/EBFcmEH/8REW436vzmztiwIeG1prt/6CklWi4Do
n/il7KKflla1Drw2f6Uv63f8pP6JNWc23/9V3Bkizd8x80D6YapnIr6vyIRN
LD/oN/Uhae7Pos0aVkVW6hGxvKF6A/OIuGZulX/SriADxZH8E1ZzeHfiZNUb
ntM83C2bJ/BPgBnwT+QF6wTnAf4JUDJ4FgF+oCLAD1QkF/byT4S6qbti9qRH
saogpn0afVjpnyzarMk+pR8J/4TtGFk9JyzK47nAWa+z+rGz35obHJs5b9MF
Vnl1QLZFTz0TWm594uU+wdN7/BShHix9tmLt2Zd9/AOTjiQfa2WNm+GfGB3G
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
p0r9k6472pbjSUeSfWZOHjvB05tejyuorrjdaKwpPJk64xMv93HPRnj5Z2eV
1ZYbH8M/cXLgn2CdAGwDKgL8QEWAH6gI8AMVKR/4J8C+OKR/ImblNFWVada/
kxbqNs3DffwUf3ox+Vir7p6hrUb935xZ9Dr8EyAC/wTrBGAbUBHgByoC/EBF
gB+oSPnAPwH2xVH8EyF/p0q9nWXlsPqxq7bt274r44uIF+gVVi123qYLe3TG
+vY+/0RaaRb+iZMD/wTrBGAbUBHgByoC/EBFgB+oSPnAPwH2xUH8E6F+rL5R
e5D1L2a1YV/28Q+c9Tr9t6ebi+iT6O4Z6C1IO/W8smRvfuXteoPxYbe93wWw
K/BPsE4AtgEVAX6gIsAPVAT4gYqUD/wTYF8cxD8xob+h1e1L2J04OcrjOWmr
Ylb55N0MdWlVK82/u0XHKs1KO/Wg/w6Af4J1ArANqAjwAxUBfqAiwA9UpHzg
nwD74kj+yYOOu2016ktFySyLh1koLHPn3Qx19im97p5B2pFngqe3d3ROXEG1
5np7F/wTpwf+CdYJwDagIsAPVAT4gYoAP1CR8oF/AuyLI/knLItHqBmbm7hl
QcD8yJDZb80NDFdFJmzKKqvV/NXd/Nho7LhprCm8VJT8aWxEWMxi1Xcne3wV
4PTAP8E6AdgGVAT4gYoAP1AR4AcqUj7wT4B9cSj/xChYKA867upvaOsvan7T
aE6qz2jOVp7R1l2729b82FThpLvT2HGTTtCWn6YfnatuEtrxPELpEwD/BOsE
YCNQEeAHKgL8QEWAH6hI+cA/AfbF0fwTAGwF/gnWCcA2oCLAD1QE+IGKAD9Q
kfKBfwLsC/wTABjwT7BOALYBFQF+oCLAD1QE+IGKlA/8E2BfHMk/MXTqWeZO
efnvQ+Xs/KYR8npYUs+56qb6dgPKxgIG/BOsE4BtQEWAH6gI8AMVAX6gIuUD
/wTYF0fyT1j/4vyVvqrA+MiETeuPXBtYMzYk5E06AsNVwbGZizZrSqta0bkY
MOCfYJ0AbAMqAvxARYAfqAjwAxUpH/gnwL44jn/S3dlUVXYydUZaqNsET+8X
fVekFF4taTU261se3frjeuHK3YmTZ04eO+aZMayp8bhnI7yjc77++bLment9
O/rvAPgnWCcAG4GKAD9QEeAHKgL8QEXKB/4JsC8O4p8InYubGrUHjyT7rPB7
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
9to+3e/fiZ7gat56WV0WoD9hnIB+IkXQjhRBO1IE7UiR/g1kf9Lj/TtFVS0y
3b79r/Duayqu1313Ji9TjiDzdLVCSPf+RN1NU5CT9PK7u9J2NvhY/8T3/TI/
tLqur/DraM5Gu/PbGtN7cqjUyDGvJyfIH2R4wpybPcOZqxdvXWuh5X6iU5da
u/Qnavbd0xoprs9TZVqfFZ+qPs/MWcmyv+epQNEZ++TPUnG+wf/+pLf3snfY
nDazvJd69lCX/kT2XJwSJR9g5LytU7dUy4+i0/2Hba0xVWyctmnO7V/XkkBF
z/2J59lS6hKdLpv8/ZZYant7ujFAf8I4Af1DiqAdKYJ2pAjakSL9G9D+pNv6
sZ4Z+g+tnp1uXn2Rn/RKVnyqd8PQ5Y4ST+ORklN41/5EPsybI3/dZb1WzxUa
8u5+He3O59U+9NOE58ctSNu8L7fyvKX+2kX3tRYFuUt8XGvh5+fx3FPjPQ0v
+mK7eV36pwtnJKat+tNS057KhvZr7arP+a/YJ8cOixmeMGfC/C3qqUCy56Y5
CTGjM9V1PqpC8X3/ju/3umw/bbd+eHDnO55nD6lbeNT9O4dMe9Tqu7HJy0b9
pUj2d19fcXvFldmflPR2VY+R+hNAC/oTxgnoH1IE7UgRtCNF0I4U6d+A9idu
3s8vHvPceJlxv/zurryvi252I7Zm55UCa+HSjPjpr8QuUVeb9Hizg3fj4eor
yisaqw541kvxXMvR3nYpAP3JrSetVJnWf7Ny6uvJCep6mOfHLZj9SUn+Rbsc
QX7Xe3XZoqqWHj60332O9wow3p1G9rwZwxPmqFZEflbe/Ym8783epvOi3fqh
7JwUnfrU6By1qq36OfS8fqyjQ61S4uO9PP1JYtoqeSM5wh3XUbSdk98t3TBf
fiDDJ63ZYKo+4XSoHuyDjIys1GU+7pyiPwEU+hPGCegfUgTtSBG0I0XQjhTp
38D3J557HA6Z9hTkLlk7PWpaYpx6hLHM9CvON6i5v/dMvMc1Nr0bj1dXm2Vq
/83KqZ7VPzxXtshcu0/37/Ry/ckdV8Us+HiHbJ8unLEieap87JRV5UVVLfKH
UkeYMH9Lb/eq+Hk/Uet1h1o5xNPVuG7Gcd+V83jE6Pt+O9u7P1H378wckbFo
c9mtVsT1RBhr4dKlI996JXaJ/Ax99yd+vpfqteRjjx0WEzM607NerrtCufmO
t1uvM1ebrhS7PlvqMtlT/T322IPRnwBKoPoT+d/IqUutci4N4Obqoq+1B+pP
6o1xArQjRdCOFEE7UgTtSJH+DXx/4sXWWmNS63LIbD16QlLKqnKZaNeY3jOv
S/esMSvT/B4Xi+hrf+L7ub136U/cd+549wNFVS3yOeUdX0jNSExbNX+XqeiL
7fLyTxfOkA8z98sWS/21Ht6m2/qxPXwe9z6NVQfkh6BWah0RFSNb9KhnZJP/
+FXkm9EZ+/ZUNnj6k6Uj3/o/kctVT6JunOn+65ftp7u+71W7/+/l/pC3V2VJ
ik6dNHHlgo935H1dpJb1kP/VyDuqfmnR5jL5i5Od1fUqL83KV3f09Pj3SH8C
KIHqT05dapX/jb+2qziAmxzQvTRT4DFOgHY/VlSQImjEuQjakSJoR4r0b1D7
E1cvYTtrUU99XZwS9fK7u2TqbS1c2tf+5K7372jsTxzN1i5XxfzQ6npkjxz5
m5VTs+fNeCE1I37yzNTIMRnx02d/UvLRyRs/9DjV8Kc/6byoruVQV5WojsK1
0O4X2w/ufGfz6rRJE1eqRiIA/Ynf7+X+kF5PVXZfOySHkj+y51qUsuOF8tNQ
DZL8EOQI8hOTv1PPirL0J4APgepPKs43vLar+OmVeQHc5IBy2ED9Sb0xTggf
6on28qUT8K2ufGP5lJdIEbTgXATtSBG0I0X614/+RFUoPja1T/f+RMZOMgG3
nbWcutSq7ppRWmtM/1gzau10V38i827Vn/Tp/h1/nr9zR2/Qx6OpJy93+VSd
t+58MS//47TEuIeHDJctZnTmvLyTvbU0fn2eW2uJzByRMWniytv3yLh/XT6D
d6ehqT+x334ikj/vdeffwgl1tDdH/lrdzvPXvx+X3dS1Q/L3OGH+lk1zErZl
TfR1NY4b/Qmg0J8wTjA29U1qL31aNufRkQHcbJ+NODbx0YBHiBSFFc5F0I4U
QTtSpH/960/82br3J50XLC2Hs4/sXiEz+m1W583ewNEhM/F9cyMWp0Sl5BRm
HzhdV77xWP7cpOhUNSv3Z/3YYPcnqmdQK7Le8ank+DZzjem9tdOjJj7yb/c9
9NSvIt+cl3eysMXZ7/7Eu6vxXIGjfnpntk7OzYwcnjAnOmOf9/on/e5P/H+v
rlcBuZe3Vc/0+a/YJ19PTpj9SYnnnp1Jb/1NDrhwXHz2vBnzd5l6vRrHjf4E
UILRn0Suyde40Z+E2zghGOvnqK3seKGrOfn/fxLwzbbuJ/9M/EVg80OKwg3n
ImhHiqAdKdI//2evtrMWmWjvfSPOz012lpd4H0Fm5c1fZcivL/h4h0y31bqp
6k6QxSlRM2clL9pctqfS9aRdtU5pUnTAnl/s3Rv0OJe/+/on7vtc5CAZ8dO9
P5X6/JvmJMgHnjA2Nn7yTPldeaOiqha1EmyfP8+ta0JeSM2ITV4mP6u9JteT
guVd1EOLfK9/4n7GTQ/9ifd9TJ7nF5eVV6jGw/d7ufqTq/b2phrvO6R6+7ur
Mb0nbzF2WIxsclgfT95R6E8Ahf6EcYIeBGP9HLWt37rUUvDvQepPjk18NLD5
IUXhhnMRtCNF0I4U6Z//s1eZgKvn5vi5yc7ykjsO0XbOeaXgWP7chePiUyPH
qPdV65QOT5gzYf4W130iMk9vuyTT8G9WTl073bWDesKvel5wYtoq9URjmY97
Go+X390VwP6k56O5j9NaYzqTl7lpTsKEsbHezx2OnpCUvmjDgo93FOQu2bw6
bVpi3AupGbM/Kbn5JOI+fh57h01+ULLPtqyJbyc8qn4+8i6uZV0nJMkWMzpz
cVqv65/01p/Y3PdJVWyc9ln6Y/L55Yc5fNKalJxC87eVZccL1Xup9WN7fK+L
t57R41mhVxnz3HjvvztHs7WufKP8xSX9foi8xe9mrVP3BPV4B5ZCfwIo9CeM
E/QgGPd/yfbM6l2vfbK4suBR+pNwSFEo4lwE7UgRtCNF+tfX2as2Nu9nuMhs
3dM/jJy3dV7eSc8qGY5us/Xu/Yna5+DOd+bvMuUctFkv93TDjKPD6WxUt5ls
X7xog6lavba79qaaux/NfWXIsfy5rycneHcIL6RmyIffZnU2XSlWV19kxE9f
tLms5/7Ev89jO2ux7khTF4F4fkqT3vrbhPlbFqflF2TvPlrd6H6hax2Srf/5
kWo5bj0j2Nbjr3v/VMc8Nz42edmrq81FVS0S+Lu+V2/9Sbe/O5u6G+vthEeH
J8z501KTjyfvKPQngEJ/wjhBD+hPSFF44lwE7UgRtCNF+jeg/YmrPfB6hovZ
rG4DUTfmyATcc7eLWqW/y90iXe7f8axGK4M962V71ztlvN60ve3SxarTsnle
251fR3Mv+iH7eH8q9awf+fD1V+3qIPKnk9m9HKeH+3f68nnU1T7ePyX1pOBT
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
BSnSD85FpEg7+hNSBID+xH+OZmvL4exvVk6dlhgX8/TQ3zzywMNDhv/8ycmJ
aauyD5w2/+hounFr17Zzzpq8Y/lzX09OiHKLnpAUm7zs1dXmoqqWO+736ban
Ej95ZtL7+3MO2qyX7b1+IH9e6//xg/1JtL9LH9GfME7QA+YspEjXgtmfkCJd
4VxEirSjPyFFAOhP/OLocHZebKw6YF6XvnZ61ISxsSOiYtTEf+ywGJn7z/6k
5KOTN35ode/ptF2v+85auHRb1sRpiXGyZ/SoZ+T/RkRMiU1elvN5ZVnddVfT
cmvPM3mZe9+Ik2M+HjFa7Rzz9FD5j+GT1qSsKi+qarnjyhbP5/HvtXL69ef4
A/BJNL1Lv9CfME7QA+YspEjXbGbX7TakKAxSxLmIFGlHf0KKANCf+KXzogwy
rYVLs+JTZ47IWPDxjryvi/aazEVfbDevS9++eNGrq81zv2yx1F+T87TTeaLB
snvrf36Ulbosd8s22VN2K8hdsjglalpiXEpO4a2rLFx71pVvzE96RQ6bvmjD
/F0mtfPBne98unBGUnTqpIkrl+87dceVLTfd/bXPj1vwwc6v5BdXJE+96/Ev
208H75ME4l36g/6EcYIeMGchRbpGfxI2KeJcRIq0oz8hRQDoT/zivuukdMP8
mSMyXoldssFUfcLpcF0j0XlRfr3KtD7n80rvVqT+e7NndVn30rK2Bsvu/fNH
LE6JmjB/S9rOhrK6667XXimwFi7NiJ8ux1S9gdpZdTULx8UnRafevrLFmx+v
TY0cI0OaN5bmyEF8Hz+38nzTleLgfZIAvEu/hGd/wjND9YY5y8CkaP2Xf5ZT
sZx7A77ZzlrsHcZdI5z+hHMR5yJS5LdQ7E8YFwEILPoTv/TWn7hXQ21vqjl1
qfX2eq1OW3vbJZmzyw9WfkUtddJaYzqzdfK2rIkvv7vrZn/Sds5u/fDgzncS
01ZFZ+zbU9nQdMOzLkpjg2X3vrkRi1OiZP9bV7bc5mi23v21Y++flhgXP3nm
g+OX+T7+X/9+XOYdQfwkmt+lfzz9ifxFaDkO/QnjBC2YswQ7RepoctjczMi9
b8QFfDOvS7edtQx2joKG/oRzEeciUuQ3+hNSBID+xC9e9+8kRacu+HhHzueV
eyobenieTo8cHZ7+JCWncO6XLWV119VTI2VkPnLe1pHLK4qqWrxfIfv/Y80o
mQ7c7lu8P84Fy11f+8HUe5J+P+TnT05+cPwy38d/dbX5WP7c4H0S7e/SP57+
pLT0SK0G5m8r0zbvC2x/IgeUw2r5VL3515f/X/mUl0JrnLD+yz+XHS8Mxk9D
DwKbH+YsvfUn2Wv/h5z0/u+zPwn49ln6Y4dMewY7R8HSYNnN+rGcizgXkSI/
BSNFjItCKEX1Fy402Zpl8qh9lA6ELvoTv7jXj5Vx5t434t5OeDR61DMREVOG
T1rz6mqz+czVu1zY7b4iRd2/s3Z6lLzkvVKH9bK984Kl+auMgpyk381a171P
cK2z2uV6FS/+vFbG/H947MGfDRvdY3/iOX5KTqHrT7EuPXifRPu79I+c5/O2
bMnJyd6kzYKPd4x/f2OgxglqkwPKYTV+sB5tX7yoaML40BonLNnyv9ZvXRqM
n4YeBCM/zFl89ycfxwdmU0db8+JQ+Z/VYOcoWA7ufOfMrsBHKORSxLmIcxEp
8kcwUsS4KFRStOWzvKIvtpeWHmmyNWsfpQOhi/7Ef7azFuuOtNzMyGmJcWOe
Gz88YU5i2io52+81mY9WN968f6cbe4ft+pWD1sKla6dHzZyVvGhz2Tar84dW
V2PQsOc/tmVN7K1PkN8tyElKySns3if4fm3nBYv8rupP7nvoqd76E8/xZftm
5dRgfJJAvUv/0J+ExDjBdTRdjhMChTlLsFPk3Z+o3mPduMBs6mjG7k8KcpfQ
n3Au4lxEivxEfxLOKaI/ART6E//ZO2y2s5b6782HzK4n78hk37Ue7NjY+Mkz
k97ff2v92K4czdaWw9nfrJz6QmrGhPlbcivP11+1X3PQnwxEf6JO+Ny/o+dx
gp6vUw0IrpkPdoqC2p/832d/sveNOO7fMXyKOBdxLiJF/uD+nTBPEffvAE76
k/5SrYh5+R+Tfj9kRFTME69tn7ql2nzmaqfTsyaqq2+R3WR0+s3KqdnzZkyY
v0X28TQDd20efNzP4s9rZSrhuz/x3Flz12ZD4yfR/i79U8v6sSEyTjD2Omms
2RjsFAWvP1H37+x9I67+e/Ng5yhoWD+WcxHnIlLkN9aPJUUA6E/6ydGhupGK
jdOy580YPmnNqL8U3flMmTuuPElMW/XXvx83n7laf/XmNSq+mwff66n681qZ
SvzmkQd660+8j++72dD+SbS/S//U8vxixgk6wJwl2CmiP9GE/oRzEeciUuQ3
+hNSBID+xB/2DlvX5xS7qWfofLNy6vPjFjzx2nbXvTl2V3+i7vSpMq03r0vP
njcjMW3Vq6vNRVUt17zWR/GsvBqbfJfnC8/9sqXLnUF3fa0M+BePvT/m6aGP
R4z2/fzilJzC2Z+UHNz5jp+fpMuThf38U2h8l/4Jz/7EVlbGOEFXmLMEO0UD
cP/OoPcn8k0t3z6SpYBvZccLuX+HcxHnIlLkp1DsTxgXAQgs+hN/OJqtzpq8
KtP6nM8rvdc5kV9v/ipjW9bE4QlzvPsTtdKs/Pqkt/728ru7NpiqLfXXuqwu
K6+1Wz80r0tPik59ftyC5ftOmX90uB/lY1PPSl44Ll5+a/YnJR+dvPFDa9fP
c9fXpkaOmTkrWbaIiCm+jy8fu658Y/8+ibPtnJ9/Ck3v0i/0J4wT9IA5S7BT
FA79yalLrfLtI0EK+LZ+61JSxLmIcxEp8hP9CSkCQH/iD9VXHMufm75ow8vv
7vpg51fFbmoV2RXJUxPTVv1pqamoqqXphtPZebGufOO+uRFvJzz6q8g3fzdr
nex/yGyW/febSszfVpZYamUw3N52ST2XR16eET9djjx/lynv6yI55sGd73y6
cEZSdOqkiSuX7zslh639/qhs8qofWp2uHqbzouocfLz2ldglmzZtkrFxVnyq
7+Obz1xtulLszycx/+hwLRvVVCMfxlJ6WL7p6i9c8PNP0bd3uRGAvzX6E8YJ
esCcJdgpCof+xDtFAdxIEecizkWkqE/oT0gRAPoTv3RedF4pUNdIjB0WExUV
FRf3bJSburpDXV9hvWxvb7vktJmP5c99O+HR2Hvvu/f+Xz48ZPjjEaPVzmOe
Gx8zOvOlWfmy8wmnQ3ZurTGdycvcNCdhwthY2W1EVEz0qGdinh4qe8pu8/JO
Hq1uLDvuWjnk04Uzcj6vVM8+djo65CPd9bUllloZ9suH8bGPq9a44fTnk7j2
dD2w7ERd+cZd6a7WSD2Luf7CBb9e6/+73HBe6+FB0H1Gf8I4QQ+YswQ7RfQn
9Ceci/zBuYgUaUd/QooA0J/4x+bpDd4c+es/PPbgbx55QKb/ERFTvPsQ16zf
68qQ1MgxE8bGepqW7v2J6+6VtnPOmrxj+XNfT06I8vJCasa8vJPbrM7L9tPy
vmunRy0cF9/13pa7vda1Vq0/+/h/NK+fg6c/cX2eAL9LYNCfME7QA+YswU5R
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
bZIiUkSKSBEpIkWkiBQBxkB/YnDuO2VKN8yfOSLjldglG0zVJ5wO13UdnRfl
16tM63M+r7x5v4z8ypUCa+HSjPjpsqdqMNyry9pUA7NwXHxSdOrt61W8+f3a
3MrzTVeK+/kufaTz/sRS8O9BGif8M/EXh5/6n7IFaoSgjhZa4wQZJOhknBDU
0SYpIkWkiBSRIlJEikhRCKUICHX0JwbXW3/iXsG1vanm1KVWtV6ro9lqt354
cOc7iWmrojP27alsaLrhebpxY4Nl9765EYtTol5+d9et61Vu8/+1f/378SrT
+v69S195+hNJuJbjhG5/Etityzhh8Y5h2v9v93FCoDb9jBNCfbRJikgRKSJF
pIgUkSJSBEChPzE4r/t3kqJTF3y8I+fzyj2VDUerG+uv2ju9d7xgcXyXZV6X
PnLe1pHLK4qqWrwP01pj+seaUbmZkS+/uyttZ0NZ3XVnv1776mrzsfy5/XuX
vvL0J6WlR2o1MH9bmbZ53/j3NwZwk3GCefkfz+z6ScA3+QHKF3rhc88FfMtP
ekXGCUu2/K+Ab3LYtdOj1rw4NODbpjkJh0x7tPztaxeM/JAiUkSKSBEpIkWk
iBQNcIrqL1xosjXL5FHL+BwIdfQnBudeP7bBsnvvG3FvJzwaPeqZiIgpwyet
eXW12Xzmqs1rx84LluavMgpykn43a133ZsO14uvWyduyJvbWn/jz2pScQtf7
rkvv37v0lZzn87ZsycnJ3qTZG0tzAr5tXp0WjO3ThTM+yMgI0paVMydIW/a8
GcHY5DOv37pUewB0mB9SRIpIESkiRaSIFJGiAUvRls/yir7YXlp6pMnWrGV8
DoQ6+pNwYDtrse5Iy82MnJYYN+a58cMT5iSmrVrw8Y69JvPR6kZ1/871uu8a
9vzHtqyJvTUb8rsFOUkpOYXdmw3/XyvbNyun9u9d+qr+woXi4uK8LVu0jxbk
IAHfcrdsC9ImX3Bsnk373752wcgPKSJFpCi0tsFOkAspCvVtsBPkQopCfev3
X/0W+hPAjf4kHNg7bLazlvrvzYfMrifvFOQkLU5xPcs4fvLMpPf3q/VjOy9Y
DNafSLbrL1wI2EWrgSb/uwvFLeQ++WD/PQfXoP94SZEBDPqPlxQZwKD/eEmR
AQz6j5cU3RX37wBO+pPw42i2thzONi//Y9Lvh4yIinnite1Tt1Sbz1y9awfi
484aP1/rT38SwPt3AAAAAAAIFPqTsOPocDRbGyy7KzZOy543Y/ikNaP+UrSn
suFMU5mPDsT3yq6++xPv1/ruTwK7fiwAAAAAAIFCf2Js9g5bl+cUq193NFsd
32V9s3Lq8+MWPPHa9tzK8xebrWoN2NjkZX19srBn/Vjfr03JKZz9ScnBne/0
710AAAAAABgs9CfG5mi2Omvyqkzrcz6vVOuceH69+auMbVkThyfMUf3JZftp
u/VD87r0pOjU58ctWL7vlPlHh/sBPTb1BOSF4+Llt2Z/UvLRyRs/tN75Nm3n
/HytvFFd+cZ+vgsAAAAAAIOE/sTYHM1Wu/XDY/lz0xdtePndXR/s/KrYTa0i
uyJ5amLaqqT39xdVtbS3XVINhvxiRvx02X/+LlPe10Wy58Gd73y6cEZSdOqk
iStV4+FaPKqppvb7o5bSwxXnG+ovXLh+5aBfrz1ztelKsb/vcmOwf3wAAAAA
ALjRnxhc50XnlQJ1XcfYYTFRUVFxcc9GuUVETHl+3AJ1TYjrSg9Hh+zcWmM6
k5e5aU7ChLGxj0eMHhEVEz3qmZinh455bvxLs/Ln5Z10FSCux5adqCvfuCvd
1cAs2ly2zep6WLBfr73hbG+75Oee1xyD/dMDAAAAAMCN/sTobJ6u482Rv/7D
Yw/+5pEHHo8YHRExJWZ05kuz8nMrz59wOm43FW3nnDV5x/Lnvp6cEOXlhdSM
eXknXT3JVbv3MT39iauB8eu1/r8LAAAAAAB6QX9icI4Op9Om7rU5snvFpjkJ
i1Oi1F0zG0zVJZba+qt2m9Ozgqt7/7ZztrMWS+nhYi/mbyst9ddkZ1fT4nVM
df/OD61O18q0/rzW/3cBAAAAAEA36E/Ch+2s5ZuVUz9dOGODqbqwxVnPJR4A
AAAAAPiH/iQsuK4Yaaz/3rx98aIPMjI2mKpLnTdYnRUAAAAAAD/Rn4QFd3/S
WHWgIHu3bCWW2hNO9dRgAAAAAABwd/Qn4cLR0d526WLVadmabM13rHkCAAAA
AAB8oj8BAAAAAADwjf4EAAAAAADAN/oTAAAAAAAA3+hPAAAAAAAAfKM/AQAA
AAAA8I3+BAAAAAAAwDf6EwAAAAAAAN/oTwAAAAAAAHyjPwEAAAAAAPCN/gQA
AAAAAMA3+hMAAAAAAADf6E8AAAAAAAB8oz8BQoyjw9l2znbWYik9XOy231RS
Yqk9Wt1Yf9Xe6XNPxfxtpexsvWxvve7o6572DpvsVv+9+ZDZ7Hl32U0+wKlL
rTans9OJUDDgKZJ4tDfVdP9dUhTCButc5P/RoH96SpF6azkLNd3gLBRSgpGi
bvvLPhXnG35odV5z9PdoAAyB/gQIMW3nnDV5x/Lnvp6cEOUWPSEpNnnZq6vN
RVUtd8w9u+2pxE+emfT+/pyDNvly7+uenRcs1h1puZmR0xLj1D5jnhsfMzrz
pVn5uZXnTzgdtoH/gaAfBj5Fn1fWlW/s/rukKIQN1rnI/6NB/3STori4ZyMi
piSmrco+cNr8o6PpxuD8PNAfwUhRt/1fSM2Yl3dym9VZf7XPYycARkJ/AoQM
R4fTabte9521cOm2rInTEuNGRMVEj3pG/q+M+mSoIFPUsrrrrlHfrT3P5GXu
fSNuwtjYxyNGq51jnh4q/zF80pqUVeUyrnAPEf3b09ZsO2upMq2Xt3474VHZ
k5lvSBqkFL387q4ju1eY16V3GWeqfWT/nz85WXaTmQspCgGDei4601TW4z4y
//Xsw1VMIWDwUlRiqa39/qhMezfNSZB95Ndlk9PR2GExMu9OySmUE5Gl/hop
CgHBSdE1x82rbRssu+WbS3KS9Pshss+flpreK3W4WpE+Hg2AkdCfAKFDRnMn
5Nt8639+lJW6LHfLtryvi4q+2F6Qu2RxSpQMG2TUd+vfO1x71pVvzE96JSs+
NX3Rhvm7TGrngzvf+XThjKTo1EkTVy7fd8r8o+Oy/bRfe35bWbFxmoxPXkjN
mDB/ywc7v+LOi9A0OCl6ftwCyYxERQLjfZ2z7GNel549b4aMNkf9pWhPZQMp
CgWDmSL5xRXJU3vc55XYJXI0utwQMWgp2uS2dORbGfHTF3y8Q3bYazKrc9EH
GRmyQ3TGPlIUIoKSoqYbTlcnsyNNxjyT3vqbDHveTnhUDvjqavPN/qSPRwNg
JPQnQOhwfV/Xf28uyN4t29HqRvfQziYjh/3zR8g3+4T5W9J2NpTVXXd2XnRe
KbAWLpXBoUwo1De42tlpM8uvLxwXL1/usz8pkSFi05Vif/aUscGmOQnqXaZu
qbbUXxvMnwT6bzBT9NHJGz+03vFpOi9Ymr/K+GblVJUr85mrA/4DQT8MTopS
I8e89sniN5bmyEtmjshYtLmssMXpnps0yrscy58rvyivzT5wutR5g5mv7g1a
imbOSpYZcczoTE/b5rpCoO2c3fqheV26HOqp0Tl//ftxZr6hIPApUt9Tnv7k
5Xd3yUE+S38sNzNSBkI3+5M+Hg2AkdCfACHDfb1oe9ul2tpa+Z9t63WH+mf6
1hrTma2T1bf8zXGCexx4cOc7iWmrojP27als8FoNr1HGFfvmRsi4QvaXIWKV
af1d95Q5i4wfZJywdORbMmfJv2iv56beEDV4KZI9537Zcuf94K5Rrnn5H9dO
j0rJKZTfpZcLDYN6Lpr01t9cU2D6k1A3GCna+0bc4rH3q3sGHxy/bNRfioqq
Wm7dXtGoZr7yTedJF990eheEFKlvInX/Tu33R0sstYdMe/bPH5GbGTn7kxLV
nziarX062qD8bAAECf0JENocHZ5xgpqByjhBvtkd32WZ16WPnLd15PIKGR96
v0L2/8eaUTISkG/2V1ebZdLhe8/P0h+bOSs5NnmZ+jdfz9XOnnXmZXQhwwPW
mQ9hwU+R2vPmONZNRqfyFjLZWTs96vXkBJmtbLM6+Xe6EDYgKZr01t9kkxlu
VnyqnIs+2PmVnItkdnNk94rtixdlpS5bnJYvcxnuvAhVwU/RB1Pv+cNjDz48
ZHjX/sQ1Ez8hZ6SF4+IlYJyRQpi2FHl/T3X5Xe/+pN9HAxDq6E+AEOb+lxd1
napMQj135qp7Igpykn43a133b3bXime3xhXyEhkA+N5z39yImbOS4yfPHPPc
+LHDYlIjx3gWj1Wr3Mv4YV7eSf6FJVQNSIru+HdAxf3kgtIN819IzYhNXpZ9
4DRPewxhA5iipPf3F+Qu+Wbl1NeTXYt/xsU9K6emiIgpkyaulDnvnsoG1mIK
VQOSos/SH0v6/ZCfDRt9329nD5+0Rt2/czMtnRfryjfKDgvHxXtmygP3x0dA
aEuRn/2JlqMBCHX0J0DosnfYrl85aC1cKoOEmbOSPf9eJt/dDXv+Q767e/tm
l9+V730Zbcom0xDfe8ogpLf+RK1y/6vIN0fO27rBVC1vzTrzIWdgUqT2vD2S
dHTIr6vxZ2LaKlaODXUDmSKZwlSZ1ldsnCaz4N888oBsDw8Z/tBPE+REJL/l
urvwKnPekDSQ32gREVNkixmd6X1F5SHTnoLcJW8nPDotMc5rpVCEEu0p6t54
NFYd6NKfaDkagFBHfwKELkezteVwtgwX1TNxcivPy8ThmiMoo83oCUldRpsy
1Pzmv1dsXp2WGjlGrZPG1c6haGBSdMdI8s5/H1R3iMuvU56ErgFLUdL7+2Vi
e3DnO3vfiBs7LObnT06Ws5NsMU8P/dmw0U+8tp3VrUPXgKUofdGGxLRVi1Oi
3k54VP0rgHp+sfpHgYeHDJcvO77RQpT2FNGfAPCN/gQIRWrtCJmByiAhe94M
9ewSz3f0Xb/ZPVc733W06bl/Z3jCHBlSvhK7ZIOp+ubajO67xevKN655ceib
I3/Nv9aFnIFM0Z1XMrvet8b0nlr5hCcUhLQBTpHMfOUt5I1ke37cApkF531d
9M1/r1iRPHXC2Fg5Tcnv7qlskDhxL1gIGeAUyW5J7+/fvDpNvt2mJcbdvh11
1DOyPfTThJjRmfPyTrJ+bGgJSIp6vOOmH/0J9+8ABkZ/AoQi739hkRmE60mL
Z656rlr3/c3uvbKZ79Gm9/qxPfQnrs/R4bmKgLvFQ85ApuiOlfTcK5+o54TK
PEXe99ZTVBB6BjJFH0y9R2a7ci6STd5r0eayEktt/YULF5utZccLC3KXLE65
44p9hIqBPxfJzLq09Ej99+ZD5ptroasrKrcvXqSe4qSeSMt5KYQEKkXa+xPW
jwWMjf4ECC3qmXpVpvUy/cyeN0MGCa+uNns9gdHFs7JZbPIyH0/WUysJHNz5
ju8917w4VKYkMiBRz9+RUaXXbPfmPvQnoWXgU+T9/GJ1ZBl5xozOHD5pzQZT
NU9LCUUDnCL15NlpiXHRE5IeHL/side2qzVzbmn0rPzJtXAhZHDPRXd+FtdT
sOXl/ydy+aSJKzkvhZAApqjHJw53WT/2h1ZXV9PvowEIdfQnQGiRQYJ1R5rM
PSe99Tf5apYxXvdnB8s3u936ofr3/efHLVD/juYeB9qcNrO1cKlMMdSKJbmV
52XS4XvP1Mgx6Ys2LPh4h/y3eirBRydvuK9q7no0/s03VAx8itSe6j4dz1hU
Rrkpq8pllMvKsaFoUM5FrycnzJyV3LU/cd9L2HI4e82LQ13LMb2/n/4kVAzi
uajLvTkyvz6zdbKcl2RGzIrWoSWwKep+P2n3/sTZdq7fRwMQ6uhPgJAhcwT3
0xX3zY14O+HRX0W++btZ6z7Y+ZW6/Hi/qcT8bWWJpfbUpdb2tktq/fkVyVMz
4qenL9owf5cp7+uioi+2H9z5zqcLZ8jX+qSJK13f+GeuNl0pvuueOZ9X7jWZ
ZXCydnqU7PPqanPPR+NqZ/0bvBSphMhhb15L4P734p7+FRi6N0gpeiV2SU5O
tmzqmdcLPt7heWyKWsta5izyWu7fCQ2D+o0mRy4tPeK5eUfkbdmyaU6C66HY
d66bAV0LRorcIxl1TYu6w6sgd8ln6Y/J8Se99Tc1/pHwlB0vPLJ7hZ9HA2Ak
9CdAyOi86LSZj+XPlS/x2Hvvu/f+Xz48ZPjjEaPVwndjnhsfMzrzpVn5uZXn
Tzhds9TWGtOZvEwZEE4YGyu7jYiKiR71TMzTQ2VP2W1e3knXUPOG0889L966
s3haouuxF2qpve5H4/nFejeoKWqyNasRbFa8614wtfIJKzSGnsFLkUyFDpn2
bMuaKG8t+3g/NkX2iU1eJrMbtX4s5yK9G6QULdpc5pn5pkaOiYt71vOOav3h
Hq9egE4FJ0Vy9lDXtORmRrruGRz1jOdR6fKqiIgpiWmr1L8rlW6Y78/RABgJ
/QkQMtzjBPWvJzLqk+9rz8Cv+zjBdR2pe5VOGVe8npwQ5eWF1Az5Wt9mdXrW
VfNvz0Z59xrTe13GnD0cDXo2uClyv3uVaX1W6rLFafkyz2WFgZA0iCmyu+6z
8MxrvPeJnzwz6f39OQdtXNEUGgYvRY1VB7p/l0VPSBo5b6vswGoVoSRoKfLu
T2QHOaw6svxf1Z9kHzhtPnPV30wCMBD6EyBkuK9TbW+qqf3+6CGz2fvC4y7X
qd68a1v2bzsnYwBL6WHvPWU3GR/K1/rtfxPxZ887393X0aBn+kjRqYpa2eQX
WWEgJA1qiryvq++yz9HqRutlO1cOhIbBS1F726Xu32XyjvJ2XHkSYoKWot7O
M56oyDFd9YifmQRgIPQnAAAAAAAAvtGfAAAAAAAA+EZ/AgAAAAAA4Bv9CQAA
AAAAgG/0JwAAAAAAAL7RnwAAAAAAAPhGfwIAAAAAAOAb/QkAAAAAAIBv9CcA
AAAAAAC+0Z8AAAAAAAD4Rn8CAAAAAADgG/0JAAAAAACAb/QnAAAAAAAAvtGf
AAAAAAAA+EZ/AgAAAAAA4Bv9CQAAAAAAgG/0JwAAAAAAAL7RnwAAAAAAAPhG
fwIAAAAAAOAb/QkAAAAAAIBv9CcAAAAAAAC+0Z8AAAAAAAD4Rn8CAAAAAADg
G/0JAAAAAACAb/QnAADAH/YOm+2spf57s6X08H5TifnbyhJLbf1Vu83p7PTe
z9HR3nZJ7XnIbJY9Zbej1Y2yZ2eXPQEAAEIH/QkAAPCH7azFuiMtNzNyWmLc
mOfGx4zOfGlWfm7l+RNOh82zk6PD6WxsrDpgXpe+dnqU7Bk9ISk2edmrq81F
VS1NN+hPAABAqKI/AQAA/mitMf1jzagPpt7zm0ceuOcn99z30FO/inzzr38/
XtjibLpxcx97h83RbK0xvbfmxaETH/m3IfffK7s9OH7ZqL8U7alsoD8BAACh
i/4EAAD4o/OCpfmrjH1zI/7w2IP3/OSee+//5c+fnJyyqvyjkzd+aL21U9s5
Z01excZpSb8fMuT+e2W3nw0b/cRr2+d+2VJWd537dwAAQOiiPwEAAH7x6kbU
JSg/GzY6OmOfpxtx9tSxRERMSVlVvs3qvN2xAAAAhCD6EwAA4BdHh7PtXF35
xtzMyP/91AO/eeQBdW/On5aaiqpa1Cqy1+u+O7N18gdT7/nDYw/ee/8vH/pp
wvBJa7IPnLZetrdedwz2HwAAAKD/6E8AAID/fDQk7W2XGiy7982N6K1ducm9
xmx7U03t90cPmc1dNvO3lUerG3voW9ztje2sxVJ6uMdXeT/lx8P7mUEy2qk4
33DqUqu8r3o2UK/vBQAA0A39CQAA8J+j2Wq3fmhe/ke1wolnFZRtVueZpjJr
4dI1Lw6Nvfc++a0ud/d41RqNTpu5xvTeiuSpqZFjJoyNjYt71rPFT56Z9P7+
nIO2rvf7uO8eOpY/9/XkBO/91eb9lB/vrsb7mUEvpGbM32XK+7po8+o09Wwg
z3tZL9sH6ucHAABCFf0JAADog86LTpvZWrj0v2Kf9O5J5uWd/Oa/V/TYq9xu
QtzXkLTWmOTl27Imqgf03POTe7w3z1UruZXnb14Z4rpexSavOpOX+Vn6Y2rp
lS6b50qYv/79uPnM1fqrN/sQ9cygxWPvl1c9PGR4bPKySW/97c2Rv1ZvLb/y
xGvbp26pLqu7Plg/TgAAECroTwAAQB84OpydF7vfp/O7WetyMyPvsvKJ1zUk
slv38kRtDw8ZPjxhzp+Wmm5dGWJzOk/UlW/c+0acvGNvr1KNjepDLPXX1Bt6
9yfqyLLJf6uDqE8+cnmF+czVQft5AgCAEEF/AgAA+qrLKig/f3KybEm/H6Iu
Pul55RNHh7zK83QeedXPho1+PGK05x6cCWNjo0c9E/P0UHVliBwhZVW5HEHG
Knbnt1Wm9QvHxcvxo6Kixjw3XjbPq+Qlqo2R973vt7NH/aVoT2WDet8u/Ymn
n5H3HREVEz955sh5W+flnfT0LQAAAL2hPwEAAH3VfRUU2TzXdfSw8ol7zdgG
y255iedumt/NWjf7k5K9JnNp6RHZDpn2HNm9YlvWRHVMdTFJbuX5E07HZftp
ee32xYuyUpflbtkmL9lvKvG8yrwufe30qC7XvcirbD31J+p9X11tzvu6SK06
a6m/xvqxAADgruhPAABAn3VbBcV7AZPhCXNmf1Kyzer0rEOi7sGpMq3/LP0x
tfbIz4aN9t2fPPTThKdG57jWM/nR0d52yXbWUvTF9rwtW4qLi9X+vfUn8qrs
A6dLnTe69yfqs03dUu36bCwZCwAA+oL+BAAA9Fm3VVA85cl9v509ct7W3Mrz
9Vft1zyXdXRedF4pOJY/9+2ER1Xf4vv+HXWoX0W+OS/vZGGLq+tob7vUdKW4
yrR+V3rSwnHxnqf2eN+/47s/6fWzAQAA+IH+BAAA9I/3KiiqP/nZsNEPjl/W
wxNt2s45rxRUbJz25shf9/gAne6b6k/kUPkX7fV21x1DdeUbzevS5Qix997X
2xKyvvsTVosFAAD9Rn8CAAD6p8sqKKo/GfWXorlftrifm+NFW39y2X66rnzj
rvQkVZ74eASPP/1JUVXLIP3AAABACKM/AQAA/XTrrhxPK/KzYaP/tNT0Xqnj
rv3Jvff/Uj0Ex3P/jvc25rnx0ROSEtNWZR84bT5ztelKsXqX2Hvvkxfe99BT
ntdGRUX5f/8O/QkAAOg3+hMAANBP7v7EuiOtr/2JeuTxhPlb5u8y7TWZD5nv
2NSzddTDcU5dar3ovspFXut5OPKvIt9M27wv7+sieW3RF9v9XD+W/gQAAGhB
fwIAAPrJ//7E60oVdQ3Jz5+cnLKq/KOTN3p4Dk7bOdtZy79OWo9WN9ZftTua
rY7vsszL/xjz9FDvhuSE09HpvodIfnf//BH0JwAAIKjoTwAAQD/53584G+3O
b72fdyx7PvHa9qlbqi311+7Yse1cy+Hs0g3z0xdteHW1uaiqpb2pxkd/0nnB
4lnDlv4EAAAED/0JAADopz70Jzan80Rd+ca106P+91MPqNtw7vvt7N/NWvfB
zq+8b94p+mL7tqyJi1OifhX55hOvbc+tPH/ZflqtUqv6ky737xTkLvks/TH1
DGX6EwAAEDz0JwAAoJ/8708cHU6nrbXGVLFx2poXh6qd73voKdm/yxKy0aOe
+cNjDz48ZPh9v53t6U+cNXme9U+6rB+r9vesSUt/AgAAgoT+BAAA9JPXqrCe
5xf3cv2JS3tTTcvhbPPyP76d8OgfHnuwtycXq9VRhk9ac/P+nbZLTpvZWrh0
7fSoiY/8W/eHF8v+svH8HQAAEFT0JwAAoJ/62J/YO2yOZmuDZbe8ZO30KHXR
SPcyRF15kvN5pVo/1nXtSufF1hqTdUeaes5Ol/2jJyTJNvGRf4u99z76EwAA
ECT0JwAAoJ86Lzpt5hrTeyuSp6ZGjpkwNvaF1Ix5eSe3WZ2u3qM3beecNXnH
8ue+npzgfeeO2uInzxw5b6scpPu6sj2+SvYf//7GN5bmyGdYOC7++XELXpqV
n1t5/oTTYXM6bWct1h1puZmR0xLjoick9XxkAAAAP9CfAACAfnJfGdLeVFP7
/VG1+quMKCz1135odV5z+HyV+wnFltLD3ivHqs38bWWJpVYO0nrd4c+rSkuP
VJxv+NdJq3wG+S318lOXWm1OZ6f7ihd5Sf33Zs9v9XBkAAAAP9CfAAAAAAAA
+EZ/AgAAAAAA4Bv9CQAAAAAAgG/0JwAAAAAAAL7RnwAAAAAAAPhGfwIAAAAA
AOAb/QkAAAAAAIBv9CcAAAAAAAC+0Z8AAAAAAAD4Rn8CAAAAAADgG/0JAAAA
AACAb/QnAAAAAAAAvrVfa6+trS0tPTLYHwQAAAAAAECn2q+1/+uk9ZDZPNgf
BAAAAAAAQKeabM3/OmktLi4e7A8CAAAAAACgU0225rLyiuLi4s7B/iQAAAAA
AAD61GRrLi09kvd1Ufu19sH+LAAAAAAAAPrS6V78pP7CBfoTAAAAAACAHqny
5F8nrer+nSZbs/wKd/EAAAAAAAAonbdWji0rr5D/W1p65Oy5OlWhDPZHAwAA
AAAAGHyeO3fKyitkq62t/ddJq2xnz9XRnwAAAAAAADjvvHNHtrPn6jz/3WRr
5hYeAAAAAAAA7zt3amtrvbsU+X9ZCAUAAAAAAIQtddtOk6357Lk6T1tSf+GC
qlM8FYps8otUKAAAAAAAINx0drttRy140mRrVv1Jj79FiwIAAAAAAMKB57KT
7g2JuvjE05/IptaS9d6HFWUBAAAAAIDhdb/spLa21rs8Uf2J+g/5Re/lZL2v
UZHjsLGxsbGxsbGxsbGxsbGxsRls81Qi3subeNY88d48/Yna3/tClNLSI7J5
Fy9sbGxsbGxsbGxsbGxsbGxsBth8tB/dyxPP+rFdNnnVIbM57+si2YqLi/eb
StSh2NjY2NjY2NjY2NjY2NjY2AywlZYeOWQ2FxcXe9oP+ZUeSxK1ye/+PwGr
pr4=
       "], {{0, 848}, {1472, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->{460., Automatic},
     ImageSizeRaw->{1472, 848},
     PlotRange->{{0, 1472}, {0, 848}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzt3b2OJMl6HmDiUIZM3cAai+PxyFtHrky5FIS2SZAi5FAASUiQqUtoU5eh
+xifczet0AQ2kaeyKr6e2Y3IfKueB4FBT/VfVc2bX76TlZ3989/+97/+r3/4
i7/4i3/+t+2Pv/6b//kf/+mf/uZ//ed/1/7yX/7xn//bP/zj3//df/rHf/n7
f/j7f/oPf/uX7ca/ax/779sb///tDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAavnz58vb29od/85dt/fxXP7e32y1n
36nv0+5wu/Pv7+9n3xEAgE/p7atXr9ZhtjLW3jj7rn0HHQwACNKry7FutUrW
bg86GqaDAQBB+lGvY9d61M0uSwcDAIL0Dna3urQbb7pZu6UfH+svXH79+vXu
e3t527+3vas3ve3T++3tY9pHbjce78bN1xwcl9s62P5O7r9gv/H49R8d7tve
tX9x9viRg3vYv8L28m77sP6cjB/UzXNyU4P7l+pvDJ43AODienUpG87Hn582
dlMqPn5tOPv37rtNbyP7U84+vpWN/ln789C2erZ9x5uz1B7dyf5Ati+4VZSt
n2yNaP9Z7WP233Fvu8/bFzzegeNzcvdR95rUH/X4QbXnZPvnuPs8b7c8+qYA
QIptP77t/Vs9OB7junlpcn/L8b1bI9p/8E3bOb4MelOT7n7NRy+PbmVy/wV7
g+qPpdeb4xd8dBCp35nt0x89qP0X7N9i/KjHD+p4WPLmuxyb6vFuAAAp9q+4
bWvfBPp7j8Wsf8zdl/n2Fet4DOrYiLr9gambQ0D9swYP4fgFb77vzf28+6Ae
fe7xQW0vCx4/a/+ob+7S4EENnpPtG9197fjY9ACALL2MbWcr7Q9JDfbyd9+7
7zDHPrMdU3r/c/sjV/sTsY4npx3v+bGc3LSaYyUbPKi7p4rtv8L2FO3tO9Kg
xd19UI+Oyx2L38290sEA4Glsr8T1vw728o+O3uwbxbHPbF//7toODe1PX+/3
YXw+2LHA3Ny37YGUP0fZ7+Hd12T3Hezu2r9EO/5Bg/2DGny8DgYAT+b4k3eb
/Ut1v8txsM8c87mr3Ye7J+3vfeY42P5BjV+IvHufPw4dbNx8HnWqRw/q0Qlv
joMBwPO5eypXtz/faf8S4f5z+67/k+eD7ZvDo6Nn2zlmvaLclI1BcfrM+WAf
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
AAAAAAAAvKb/Bxks05Y=
       "], {{0, 612}, {812, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->{372., Automatic},
     ImageSizeRaw->{812, 612},
     PlotRange->{{0, 812}, {0, 612}}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.739654124415269*^9, 3.739654129793432*^9}, {
  3.7396541778064775`*^9, 3.739654190834396*^9}, {3.7396542479899006`*^9, 
  3.7396542494152327`*^9}, {3.7396544618823414`*^9, 3.73965446304152*^9}, {
  3.7396545070614414`*^9, 
  3.7396545112166023`*^9}},ExpressionUUID->"e51b76bd-1219-463b-968f-\
d1128cc90d37"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "20092.876953125`", "}"}], ",", 
   RowBox[{"{", "20960.06640625`", "}"}], ",", 
   RowBox[{"{", "13597.068359375`", "}"}], ",", 
   RowBox[{"{", "20941.658203125`", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7396541306809154`*^9, {3.739654182201118*^9, 3.7396541922070932`*^9}, 
   3.7396542515160537`*^9, 3.739654464649305*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"1c1d5d7b-7e63-488b-9fd8-d1e936f1ef20"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listData", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"File", "[", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{"dataDirectory", ",", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"#", ",", "\"\<.jpg\>\""}], "]"}]}], "}"}], "]"}], 
           "]"}], "\[Rule]", 
          RowBox[{"class", "[", 
           RowBox[{
            RowBox[{"mxs", "[", 
             RowBox[{"[", 
              RowBox[{"Key", "[", "#", "]"}], "]"}], "]"}], ",", "20"}], 
           "]"}]}], "}"}], "&"}], ",", "ids"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7396553081046634`*^9, 3.739655373313586*^9}, {
   3.7396557168197117`*^9, 3.739655810237558*^9}, {3.7396560428634243`*^9, 
   3.7396561898622155`*^9}, {3.7396562374931126`*^9, 
   3.7396562669091206`*^9}, {3.7396563223505864`*^9, 3.739656322815155*^9}, {
   3.739656618612734*^9, 3.739656635015779*^9}, {3.7396573511586103`*^9, 
   3.7396573635032425`*^9}, {3.739657394658411*^9, 3.7396574051023073`*^9}, {
   3.7397053866227856`*^9, 3.73970541228835*^9}, 3.7397067357750807`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"f3a6b269-a7b8-4af9-8980-3b99a24d3d97"],

Cell[BoxData[
 RowBox[{
  RowBox[{"class", "[", 
   RowBox[{"list_", ",", "nbins_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "/", 
         RowBox[{"Max", "[", "list", "]"}]}], ")"}], "*", "nbins"}], "]"}], 
     "&"}], ",", "list"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396566511742053`*^9, 3.7396567370820656`*^9}, {
  3.739656791830576*^9, 3.7396567927197*^9}, {3.739657065754207*^9, 
  3.7396570733166027`*^9}, {3.739657130643595*^9, 3.739657150486663*^9}, {
  3.7396571884720163`*^9, 3.7396572180246525`*^9}, {3.7396572590140805`*^9, 
  3.7396573049882255`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"da5812a0-a58a-4254-9697-04099009fb91"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"traininglist", ",", "testinglist"}], "}"}], "=", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"listData", ",", "81000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7397053315787487`*^9, 3.739705364113412*^9}, {
   3.7397059384557953`*^9, 3.739705944887768*^9}, 3.739706722383791*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"f0f2cb69-6f8c-4c4a-922d-c3cfac06724e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "=", 
  RowBox[{"CTCLossLayer", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.739714872797659*^9, 3.739714894724581*^9}, {
  3.7397153191305656`*^9, 3.7397153722095137`*^9}, {3.739715448936016*^9, 
  3.7397154490927615`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"4d8df775-3aa9-4b6c-a8a9-59711ad1117d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["CTCLossLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.557, 0.557, 0.557], 
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"seq. of \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\" \"", "\"indices\""}, 
                   "RowDefault"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.557, 0.557, 0.557], 
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Ports", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[DottedSquare]\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"seq. of \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\" \"", "\"indices\""}, 
                   "RowDefault"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("CTCLossLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7397148953648367`*^9, {3.7397153573893833`*^9, 3.7397153729443007`*^9}, 
   3.739715450192009*^9, 3.739716327073122*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"5974f41a-a839-400f-9301-9fbc0b7b5fdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classes", "=", 
  RowBox[{"Range", "[", "20", "]"}]}]], "Input",
 CellChangeTimes->{{3.739714944578579*^9, 3.7397149605199914`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"7ef86afd-ba55-4784-93a1-2bc7679795ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15",
    ",", "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.7397149615195813`*^9, 3.7397163308297887`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"b52135df-67d5-47db-8365-47ebb87828c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decoder", "=", 
  RowBox[{"NetDecoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<CTCBeamSearch\>\"", ",", "classes"}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739715034146757*^9, 3.73971506402115*^9}, {
  3.7397219152055335`*^9, 3.739721917189979*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"56c1826c-6dd7-486f-81dc-7c97f73f8179"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetDecoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             StyleBox[
              TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["\"CTCBeamSearch\"", "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox[
              TagBox[
               RowBox[{"{", 
                 RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}], 
               Short[#, 0.1]& ], "SummaryItem"]}, {
             StyleBox[
              TemplateBox[{"\"Beam size\"", "\":\""}, "RowDefault"], 
              "SummaryItemAnnotation"], 
             StyleBox["100", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetDecoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7397150646403837`*^9, 3.739716333707446*^9, 
  3.73972191876143*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"813e9101-e62d-40c9-a75e-3e6ce5422309"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", "2", "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"15", ",", "3"}], "]"}], ",", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", "2", "]"}], ",", 
      RowBox[{"FlattenLayer", "[", "1", "]"}], ",", 
      RowBox[{"TransposeLayer", "[", "]"}], ",", 
      RowBox[{"GatedRecurrentLayer", "[", "19", "]"}], ",", 
      RowBox[{"GatedRecurrentLayer", "[", "19", "]"}], ",", 
      RowBox[{"NetMapOperator", "[", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{
         RowBox[{"Length", "[", "classes", "]"}], "+", "1"}], "]"}], "]"}], 
      ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", "100", ",", "\"\<Grayscale\>\""}], "}"}],
       "]"}]}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "decoder"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7397150852736607`*^9, 3.7397151033925858`*^9}, {
  3.739716778037756*^9, 3.7397168241828356`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"4184effd-d93c-4bea-bc9e-e5428f8d4f8c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"ctcbeam search\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["14", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 20, 
                    "$SpatialDimensions" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {98, 98}, 
                    "$OutputSize" -> {97, 97}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 97, 97}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{15, 20, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 15, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 20, 
                    "$GroupNumber" -> 1, "$InputSize" -> {97, 97}, 
                    "$OutputSize" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 15, 
                    "$SpatialDimensions" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {15, 95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 15, "$InputSize" -> {95, 95}, 
                    "$OutputSize" -> {94, 94}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 94, 94}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1410, 94}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1410, 94}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 1410}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{19, 1410}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{19, 1410}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{19, 1410}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 19, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    1410, "$SequenceLength" -> 94], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 1410}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "12" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "InputGateBiases" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`TensorT[{19, 19}, NeuralNetworks`RealT], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputSize" -> 19, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    19, "$SequenceLength" -> 94], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "13" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{21, 19}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 94, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]], 
                    "14" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]]],
                     "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["CTCBeamSearch", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19, 20}, "BeamSize" -> 100, 
                    "$AlphabetSize" -> 20, "$InputSize" -> 21], 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]], 
                    "InteriorStates" -> 
                    Association[{11, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "States", "State"], {12, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "States", "State"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"97\"", "\"97\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"94\"", "\"94\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1410\"", 
                    "\"94\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"1410\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"",
                     "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"19\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"19\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"ctcbeam search\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7397151050800753`*^9, 3.739716341409384*^9, {3.739716788797252*^9, 
   3.739716825010519*^9}, 3.739721925572366*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"3df71832-d8ca-4509-9d19-86357b2b87be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNetTrained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"ocrNet", ",", "traininglist", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "testinglist"}], ",", 
    RowBox[{"LossFunction", "\[Rule]", "loss"}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "32"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7397155707253847`*^9, 3.739715629510708*^9}, {
  3.7397159647476416`*^9, 3.739715970154866*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"6303fcf3-97ef-4841-a0d7-680ffa8b5408"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"ctcbeam search\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["14", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 1, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{20}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{20}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 20, 
                    "$SpatialDimensions" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {98, 98}, 
                    "$OutputSize" -> {97, 97}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 97, 97}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{15, 20, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{15}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 15, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 20, 
                    "$GroupNumber" -> 1, "$InputSize" -> {97, 97}, 
                    "$OutputSize" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{15}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{15}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{15}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{15}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 15, 
                    "$SpatialDimensions" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {15, 95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 15, "$InputSize" -> {95, 95}, 
                    "$OutputSize" -> {94, 94}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{15, 94, 94}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{15, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1410, 94}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1410, 94}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 1410}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 1410}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 1410}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 1410}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 19, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    1410, "$SequenceLength" -> 94], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 1410}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "12" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{19, 19}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{19}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 19, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    19, "$SequenceLength" -> 94], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]], 
                    "13" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{21, 
                    19}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{21}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 19, "$InputDimensions" -> {19}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 94, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 19}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]], 
                    "14" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]]],
                     "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["CTCBeamSearch", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19, 20}, "BeamSize" -> 50, 
                    "$AlphabetSize" -> 20, "$InputSize" -> 21], 
                    NeuralNetworks`TensorT[{94, 21}, NeuralNetworks`RealT]]], 
                    "InteriorStates" -> 
                    Association[{11, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "States", "State"], {12, "State"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "States", "State"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"98\"", "\"98\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"97\"", "\"97\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"95\"", "\"95\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"15\"", 
                    "\"94\"", "\"94\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1410\"", 
                    "\"94\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"1410\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"",
                     "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"19\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"19\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"94\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"ctcbeam search\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7397166817809653`*^9, 3.7397194165426664`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"9f594c3b-e7db-43c5-aa5e-ecf713854b2e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"samplelist", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"testinglist", ",", "10"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.739719293563578*^9, 3.7397193007338943`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"49b2f2b5-2cc7-4e8b-a9bb-a8dfd68b628e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"predictions", "=", 
  RowBox[{"ocrNetTrained", "[", 
   RowBox[{"samplelist", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.73971930505933*^9, 3.7397193454589767`*^9}, {
  3.739722097559061*^9, 3.7397221004621725`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"49bd926e-e477-4501-9ee8-02d11ba4c5de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "13", ",", "18", ",", "10", ",", "19", ",", "4", ",", "12", ",", "11", 
     ",", "1", ",", "8", ",", "10", ",", "6", ",", "20", ",", "4", ",", 
     "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "12", ",", "20", ",", "16", ",", "13", ",", "8"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "3", ",", "15", ",", "5", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "20", ",", "7", ",", "9", ",", "13", ",", "18", ",", "9", ",", "16", ",", 
     "15", ",", "5", ",", "20", ",", "10", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18", ",", "20", ",", "9", ",", "8", ",", "6", ",", "19"}], "}"}],
    ",", 
   RowBox[{"{", "20", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "8", ",", "12", ",", "15", ",", "10", ",", "12", ",", "1", ",", "7", ",", 
     "20", ",", "9", ",", "15", ",", "5", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9", ",", "15", ",", "18", ",", "5", ",", "19", ",", "20", ",", "1", ",", 
     "10", ",", "3", ",", "12", ",", "18"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7397194176683936`*^9, 3.7397194178558493`*^9}, 
   3.7397221024343853`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"ecf282f1-9611-47e5-96c1-0508f898a6fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"solutions", "=", 
  RowBox[{"samplelist", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "2"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7397220280988855`*^9, 3.739722033941018*^9}, {
  3.739722104390235*^9, 3.7397221066141443`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"51837a43-8ce2-4910-9a56-5d6d0f1b7978"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "13", ",", "18", ",", "10", ",", "19", ",", "4", ",", "13", ",", "11", 
     ",", "2", ",", "9", ",", "11", ",", "7", ",", "20", ",", "5", ",", 
     "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "7", ",", "12", ",", "20", ",", "15", ",", "13", ",", "13", ",", "8", ",",
      "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "3", ",", "15", ",", "5", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "20", ",", "6", ",", "9", ",", "13", ",", "13", ",", "18", ",", "10", ",",
      "16", ",", "15", ",", "5", ",", "19", ",", "10", ",", "10"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "18", ",", "20", ",", "9", ",", "8", ",", "0", ",", "5", ",", "19"}], 
    "}"}], ",", 
   RowBox[{"{", "20", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "8", ",", "12", ",", "1", ",", "14", ",", "10", ",", "12", ",", "15", ",",
      "1", ",", "7", ",", "7", ",", "20", ",", "9", ",", "15", ",", "5", ",", 
     "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9", ",", "15", ",", "17", ",", "1", ",", "5", ",", "19", ",", "20", ",", 
     "1", ",", "10", ",", "1", ",", "3", ",", "12", ",", "18"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7397220345223417`*^9, 3.73972210720137*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"cad8cf5a-0e77-42eb-8f83-c670ce19944a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Import", ",", 
   RowBox[{"samplelist", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7397193250916862`*^9, 3.7397193347714014`*^9}, {
  3.739721966427863*^9, 3.739722016614277*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"50fd8ecb-4d0c-44f4-9827-aa016da98f9b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
jXxQT8jQxQIyVFI0hBrC2UBDHjaglcN8ilu6aooeCj03GKyq8nrLzS1732jZ
8ducSdcc2fXru640fLrzP5NGGN5dtfhk69vz7Glq35+Xz83Zv7HuyO7F6eO+
8dGeZ63pY0XknAh2PTx+ZNPOF2+5zvCnpidmjTdsfqm8ZfPS/AnfOr73maIZ
94i+EyLanZ+StHXDc3NSxkBRIuFuDauY+NLfebi+VuKRDKDBfRB5ognKBcFZ
Bxm5lCCvQD85NQMi6Cmup0+fZluj0Sj0AaJNz0DA5XKU2Qs3v7Gyacuz2VOu
PbL7ycm3GT5/75l7rtV4dXjn7390jeGXj3puvdqw5aXyPzc/Pmfitw7vfNJd
OFmonULtTpk88o9Nr95zm+H9rT+981qYOPcnO5en3Ws42bRy7M2XZ028y5j8
QNKdV504uis3I0kop/UQ2Vdi9bWS9Nx4igkigyoiHuLg1C8zLJwzZw6xhZ3n
ph6X27RptFfATVtWx84HUSxWI7B6bInzwPbfzZlyw8d7V47+geHQlp/jumvN
T9s+XJ889qZta56afPeVu9fNbz/8ZPa0fzy865ncGXeK/mMi0j49acSnza/f
cZ2hdfcv7r3RsP3l8qM7V+Q/ZPi88YnR3zfseePZT957M33S7Y2bX8jLeEDE
MC2e+wIrVcidjouVaJ8hKUkidI8LuklfFBm52gKvsP6SJzTocSEPYwXdxFM8
gp2nbR8Mwo0UxebCSo/VlDvtUOOajCkjDu96fvRNhj82PJEEe/VC/f53n8me
ducf966963rDvncea97++Iz7r/jsgzXm9AdE8ASolTLpjoMNq+78geFo0/P3
jjA0vll3dNfjGfdpvLrn+4Z961/4YOuLKQ/dfKR5vc04Neo/oa8rLz5WclMG
xoq0kYF3OlGM9THDJjBH0D6afQJIjUMPUn/pj9EXxTUvP6vaa19Qbd27bXXK
5FsP710NVfp43+o7vmvY/vrPm7e/mDbxtpaG1370fUPT5ieadzw5e8L1Rw68
edeN3ykzzp5bmpcyedT+hpfuv/3bLTuev+dGQ8Or9Z82Pgnbfrb1tTE3Xb5j
7TPvbXwhe+ZPmnb8ISv1Pqy+w/6zxErVF+ABvxYbCgaGBmp4VDXxeAlXfOIv
B6K5qQ1rTKyAA6w0SJIYjxI68VBI75QlgGjJkiU89cTtQtBp/vz53JjgMscf
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
eosr0g==
      "], {{0, 59}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSize->{147., Automatic},
    ImageSizeRaw->{100, 59},
    PlotRange->{{0, 100}, {0, 59}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
5/2BIydEumTVtjg93ssK/iPzClShKJ1EVr4Kp1CK+YMucpQw6XCU0Dv+4hjK
CO4hFqVDQMSDNGnSxMdydDmz8wobzp4ndw9G7alomBCqnxicNWZS5PhnA99+
OyVoqupiY9KZI0/t29K38pA+NuaxS6a2os2ln27Y/NHa5Rbzl4kxv/j6WNqG
dZM+K9Kn6af07j904DOxPfu88GDfkN79gm65Y/DQZ0JdMldh5L8HK7G7WMEo
gSdgFGIAqB7QAGKwTtiHcvG3AGgD8RPkQpYfbWCp6KUw+UHkgLBXYBdGIEK6
u+DixS6bNUkNy56KOzU7HBAHIx6tbR0xJfHtD0q37Kgo2rDmUltJRLjqTE34
/u29jpYNqj9VEBvXu9Pe8slnX3y6ceOu3eutncVpmpu+rkgu3RG6bl1C4YKY
2+556PEh4X2fjH6oX3jfAaF33T86YKTEK5OTub9XDcXuUsstF2BC8RIoQbBA
ZO76mZwDwjShEqyDLQKLgBj20QBwESGxj2Y4C79A6Hlcbiku8kGvYxM1UWqt
GrJ0+iReffV1w6jJUa+t2PjSy6veePVPu3ctj4pU1Z2OOLZ3UGX5iFPHM2Lj
7m4zVhaXfLGp+PPtJes6zdtjo248fSpz2/bpn3+pnbMw5NY77h78dMRDjwWD
VwOHJfz81/1HTtSYuyRLKOcHzOp0Axi3yym6XcwLT+mSQuPuUQuSgl0UgjLZ
nZEaAjeaUrBYLBw0xJykXxSdUhdoJQhJbZSv/KQIwe3yCc5kbUTh72d0MY9D
nlNAcHnw5Lmxk6P/+tam11758K3XX99f9k50tKquLqKiPKD60NjTJ/Rx6rva
TZXby4qLt27ZuWujxVIWF/vr07XZO8qmF29LnbcktMdd9wx5JmrICM3AQA3g
uvG3Tz09LknyF4y1WsTL1CIuiVKcguRKsFm6kycCFgAFrwfpYIJgkOEQ4fTB
EOQ4yJHJRoFFpHTQOIoQKH4APqgkFoGZMPhAnoJSKXn0MbcD2HiSU6Mi4oOj
NckOWQHN4NWplrFT499cuW35ir+vfOvNA3vfiYlT1ddHVB8aWnN0Qt3JHLX6
fqP5zK49e3fs3LN79xabda867qa6+uzd+8NKStMXLo257a5eQ4cn9nw05J6H
pvcbrF64bGP2nPfOGdg5g+9cW1fdeWPtuYtWm3TzXtBbgssjYddt8w4yABl6
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
6VMsIjDZZOz/H2qIq/c=
      "], {{0, 63}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 63},
    PlotRange->{{0, 100}, {0, 63}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
nBxvBKvwHFDEdRdJCYmj5pHJ0bHpsZlx08zc6PK4aW7SPDs6OJ4anxHGKhTG
KsJGA0B3868YyAAuqhhUCVQBSkBPreHB4f79++GAAShyBhwD08AiwEiU0Ji8
AiGZe9f0lIrm8bjy84qLCioK8w6YB5bGTB7rlJgeCY0OuKfH3EP9c+kpORL2
gO476+GYU8+2cBYlIJJ3FI+aVkcGHJNm7+iQY2LEOWa2jwwtDg0uxMdnMMQO
kyp02y8xYefoyMzYiHVybGVkcGVqzG82OcaHl81DlpSEPD3i89+aD/oDi5Et
oBDEVGkTePWshFdPTwwosaVyJ6C29ELVSCoi9go6rWf4Q4GszLzS4v29N+YG
eu1mU3B0UPR0ekZM4mbH0sSYZ2d6idfDt6kFdGeUDqr0tfxi29bsvu7F/j4X
fkODvr5eR2/v0vCwo7dvPiEpF+xz+lwOj57og4kH3KsOfWt3iKKSQ103x292
z5rNblw70Bfo7/XhAfp7rQlxhUyRhXn1hxW1pkLlTGJiYoQMkxkPAjpst23b
Ru5x+QpUD+4EUALHGBwBSRo38ApjKMgpY2SQw6/5velpWaXFB/aUvdXSPD/Q
L9paPDe7RF+P6OpydbQvbNmaCRrAoss0jkZ43R4fXg6kTkkr7+tfvdHj7Lrp
6e0PdHW7Om4s9w84bnTP70jMf+jRJ6J3JEXHpW2LSX9hU/KWrVnr12/f+PSO
xKRd65+MGR5xdvfbO27Yu256+wdEd4/ouenu7l6KiysJyTyroM7evdzdYHGq
hSvEsEN6MPPJxQZQQE5JgGPAAdRiMChkuI1DOB5QSQ6REBn7UrXDA39Bfkn5
nlejogpu3HDigVuvB3r6RHOrv+tG4EaPOzl1rxvBGAMLjGq+ECFz+cSKW6Tl
7LvcNHm9a7W1HSj5sG2+vtTVbW/rnIuJL0xIK77U1NPUNtLcOt7aNtvb5+jp
Xe3otD2+Pv6FTVmjk8Hmdmtjy1Jbp3atNXDx6mp7p6ezc2V7XKk+OavRxMm7
hdbqo9Trtet2qHHR0dGkGdA4cOAALA+EBalo1TnVBcIwHcHsCud6SCcQDBce
OnQIDptKcC1YLSLgEZo3Jys/K7OsqOSNm72eM+dmG9sCbV3ifP1qW2fwepdr
/YbULVG5L76U/NSGrS+9nPbEUzHPvhC/bsMrm6JSnn8l5cVtOV0mV2O7/XKz
vfm6t7HF1dC82NKxeK1tLjp+17oNsc1ds01tc43Ns63ty9ev2/E6rl2zbo8t
j4rZ3dRmuXB5qq3L194tGloEtk0tLjSLjivV/YMgAfHdiknXYrV23llEnCKA
xhEQzoMa+BjOiMjEjZATfMCQM1nKsrE9FRkNMExINx5Mhfnw5GbnZWXtKiw+
3tntOnl2+kqr/2qrqKl3nLu0XHfZGht/4OXNBfX1fdeujbe0WK9em2/rsl1o
HK650vPYMzti0vaeqBu81LJc12C/0uy50uS6eMXW0GxruDYXvaPisY3pLT2O
ugbLxYaFphbHufOzl68uXLg4s+Hp7Feiyi43zVxtsTW1uy80Oqrr7K03xMWr
9saWxW2xJdI7EXIA9egWMqTdgZW2Biv1TQF9A1YCAewzfsEWnAF6xsQmMxLc
gopWq5VTOcAHTHvjjTfALmDrdNhpqIsLS/bsObLplcyG1vmr153nG10fnV1s
7BRNHaELDfaE5NcfeSShtWWu9szQ5Sv22vOLF64snG+Ybjetfm19THLB66cu
TZxrWq6+uFx31V13xXWu3lZ/eeHSlbnouH3f3JBT27Dwu9oZwN7Y7K+rX2q8
5m5tc39rfWZ80uHGloWLDfO1F63nr9pxR/xqLtguNy1sjS2WZNKXOQT1LJmT
068qhKcbH/h4XtE9gODCMNmn8vBgDpdVA1smGYDG6OgomzFYBgPV6g6Z1ArK
yRB3VgYGhaqM3AMfnumFaO/XTL1XPVvb4PngjOWj6ukXXqp47NG01mZb4xVb
fb3vRLXj9NnlD6rHzjbNPbQxddOOylOXp6qvQNKFMxccNXWO6lpb7bn5uvrZ
qJiDjz+/58QF24nzy6fPr1Sfs584bT1VPVNdO/34EzkxsQdO1QyfPjv6u5rJ
a53BK9fFqQv2k7Vz9VctW7YXSaxgtNzB8DIA7+/FinKppYPkGPMw9Jcw9vHL
IK4bxyETzlxiRE8eZp84QysBLENC8NCt+wz61FR+LmzY7otXblSfv3HiXP/J
utHT9RMf1Y6++1FPc4c9OrbymaczPnivqebMwMmTUydOzl1uhFDDH9bcfG5b
/mPPJp9vmqi+OPFRzQhsXc256VPVI7W1I+frhmCR1m3M/qB6+Nxla03dzKma
qbN1szVnx86cHX5qY3p0TFn12Z76q2PvfdR56qz51PmJD04PnawdRM3W2Gyu
IZFYrXJphNFkhT7eXt2rgpGR4APqSIAZdDlXZbqmMG5H8v5Dx3ML9uQWVmbm
7inZfTg1vTglrRDqmZOzKykha/fuwyXFh1LTyrJyKjKzyxKSs3dXHiko2ZuY
mpuUVlBZ9XpmdnnJrkPpaQisygsLK3BVdu6e/OJ9BUX6r2TXkYysMpwtKzuU
nV2KwRm/otIqtElNLyoqOZCdW15Ush81GZl5LrdXD+39LjWLo0yQXAGnF+iQ
SuV94jKMP67A14J6gktUZ/SvJi/4IQmn/qHgXL4lDGlGjK3kKp/W+N1fkizc
56IvXsstkx5CLlwBsY3awUwara5aaycia1E4lYmzrFQXslvj7IwwLB67twX2
SpOFCKgFbCLiVIjbv4uBUEASngaANa414owSWkKX4dohuqdrZ7xQRKYGIIsK
YNWkJDNLwrBGEU+imjENfuf0NzHh5xhoz7twduDefqrJfAVeNERQcbT6GJDp
HTwDvxAkGnwMzuBTLpJKUQ79qFGG7dEDr8IWp9QHJiC2mvLA5VzSQ0daVaod
NTWg3AD1TnHWuNqZ+oKdubm5e4iVsRhXUPNh4JIZv0dm4SPhFLFV3gvPwkRA
WTDmstmdK5ABCDxeygKgeDm/fT58+LCCUQ3WIoIYbse7EHxU3ql9agHMp/G1
BfrkenL1UhRvISaTpUK+KeoFZSE91GpbAgItwKuHwVHGil6u4oNay8rctRIH
dyS7gBv65wNAi3lWEY/hrTCQjeEt+5mamlJC4Um4lOge6qDCR5mj8fFxIdWK
DwAxYc3UHblDiPCc6hMJvlkcMqEN3YS2cv5RfXHPYEFRF8E+CaA+sWcDRrg4
Bc/HOCOJbvntIfWdT87eFK9wU/Vplfre554XyMW1lEK+dNpYeFzMfTHo5uAF
NIAS8/bKQ4NOcUIfwKISvaEZ1ykJ6f3iEn6YA9cuRZYjR46gT6ABgvGzHbTH
HWmvhIwv0Jj9sE96gBx81WMT4XRZ8BgiskCIEw339rNW8Icogdgcg5hu5UvH
c+KZcUeIScGhCPv27RPStjOcxEMybuIDY3yEaGhMJJmvxiHXgzF2gCBUT8DI
iIOqjZsy3wh6gJwgcI4snARXS+8AAvnDqAR3YSinImIRyezdw69UqFN4PPps
MK0MdtRXyQDk2LFjQsaMeEI8GN4dkeHicFwIznBpN56T3y+jAfBULi7ExD5O
cW0qa5h1JBMYkZFOwJAPw4wl807sAXchsBxTAJpalKiGXeYKOKMn7qmFx9vB
Hdk/nkpN9LMGmgIBcVO8X4jPND6k44PhkPYTspByrIFVgVyIm3AJlRGwv/ba
a0AAvaFn3JELTiBmdHQ0rR8aMxEH5IU0ifyDBnxf2OGTiIhrwQdGJRFWsypq
gZkC9t4WPAmMgFqwjdtBfB5iXz0kByZOQaISbCRE8MGACacsUQOp0RvwwRag
cRIE0B09epS5NaJKxQRp0R6Sws1At2jAdSlAElyi/kJqNVUHc8HMG606wwq8
BaoeLK3Kq+CpIMU9tFfKjRQRF4iPpNIOHMU4Hs3PzxsprUYf5Tup4ZJX8Y0r
d9H4l2R4lTIm2AFKKh3HL1iZAwEO6JYEZgPlVgnDt3iq0vgZ0adRlENuLLg7
17qrP3vCQtmBmzCsACTg9Cp5yniWvTEyUl0RYTZAJZFBhKgA5xICcfufa+B7
NLou4m4fLarv0T5xid0fVwCRupG6BWpIJPX6GODwCdWf+wjJokRTzqSIBIys
Z5Rh/FqQEZN6BpqpNZ9H4TWxZ/V3e+5cgalgN4rAp1Wcv+d/umfNsj2+HTJN
4bYmcDD+gRR+JKUuVE61UjfuKEuL2xEu9ql0h2ufjLITcMUftiR6PGVkqVJh
ddN7mJD5f1L+FzlJ3do=
      "], {{0, 65}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 65},
    PlotRange->{{0, 100}, {0, 65}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
4XP+/PnogVl/5CKwCvBhjiW3laGjYGMAMYikxKyU6QJgjZCYzCBj8PoCLr+x
N/HfI8ZY57wQv+D1rCUVKb/d7Pj9tld2nn+l4vifKxvf29vw81EPoIvO7jYz
Mnw8Ju67zzx/y+YdD2yqGPHh/tt3f3T7ju33nf9kbmPd0431r53/27ZpU2+H
tehyN/dmAfY7TebxLqbbyWHGawEK1IFtmJ9GHd7c3AwEoLtgXIlDB5UOfPBJ
tgEfAihmphFPnoJEAzCeWBFMge63KGMLvvPT1p6fjZ40M2Oh86k35ryybfby
XU+8WbV49YHlFcfW7KpfvXlvTJKz6TKAgtJqbu2ucmb/dPkb49eU3bt5x6j1
ZT/ae+CXh2tmfVSZ8HHdM0cOv1h98LWSkpnnLuz3B5sCQXe/7+17pvVaUNIL
OUp9/mQfkxv7yhHuimGANsBKYsWQX5r0V2VsmG/cS/2X7/xvweI/2B9/Of+F
tdnPv/ubNVXPr9v/8oa9G/YcrTzy8Y9+dotJG1aWFqVOjhrzd2VbHStWjVlX
fv+mrWP3H4w+Vpd34EDRkZrnao++ev7T7Q898n9KfWI2HnBZAT5Y9HmSqN/M
+YEKIRJ4uX5J3jgL0+nBJJJOQ7MKNQCZdinbgzPDUv2D/RcoVnQV6Ojx/M8P
f+4oXpRS8psnl5c/9/YHJUvWvr7lyJ9KPyyvPLKr6sj94x5Cs6amv/V4Lrr8
p+wZ9y15JW7FmzM2bIrbVeksey++rMxZV7u0+sCyutr1p07viooZg/FeaT8V
VJ5+X8xRycYTR3uNWCltB0HvTZk8I4uF1BNVJgeyBoqLJ6yVaeFnmYURCQi4
o/+SmpWZlpRoTXM6rHaHPac4dfav7p5si8v9la1gcURiviWzJG/ekxFRMVk5
2elOe06202KLmze/KD5pit35cHbeuKyc0ZmZo5yOUfm5j6SnPpLuiJxXkjlr
VkSaIyHJbklLhwuf2u+LyfmpZoHyweA/+eSTawRKzk7KoS05v6MLERWXaELq
c/ASz90oLXdXDXCK4fMl4Pf1MKfIkpCI1h1+w9a65DFyii52GTq/w2Nku6Sk
Jhu7qEG0VN3uQJoz1djSCrYYKUgu0Ajl2RVEV4Ggz2Mkalusicx2G7yEDXXo
Z3D6zflngfSBtTBHNNQlX1Q2I0KS1jtqHseWbrHMGllVxurmc6Q7O13esFw1
L3OPVTA5JT7gN6QV89bjVsXFCzrae0w3wUiP9Lp9+N/rMlp7XKrtim/evKcu
twG13nMEunDRnO6bjX/tAnjVEnaWRM5Ti+SSD9GM5lbYnqCOmFbQkQHX5StN
NpsFo+/odJEfOrqNPWaPN9hy2cj5dKbbgwHjJzGCpp0fGRln5jbA3OpmnlXQ
hLW91Ug6wq0ZM2zBYK8pygPpfDtVLn89gwmf4qt+iaVwkNLvisYlkpMlp1NZ
QFsYgOxEthFNPgy0d0CCAvDRCb67x6OnaptnNzyBAA8N+Dw+NwRWDuMHzWSY
QCi1tKvT4zfHmJ2bY2LWm7yhK1t9EqlSxA4cOmv1e/ZNmU4ilBuWP+IzdepU
Npg8ebIyd77kEaoy1PQbcGAlTLse+Dr+QGFunr/HHXB50pJTdD/FyOzydnu8
HS7PleQUi/mcW49mnD17FphnZsGN9UXOiEADt6dL8hmILcNEdrsdg9e1E2Zt
6Ae7BjpTKcdjufGqzwg0mN4DFkeGoMla4EBJPjHOEpIjggZhzGzPcziVz284
P15f0O11A0DjsJJye3wGRwXbgqrVNMiNRcFiiTXSAt09TMzyB7ozMuGmtRUW
ZpqZSuB5I78FL+Iyx3AuFmg5cq7/BMfQS79ndWF5MlADvhI7AVMPKDBr3NeQ
NRGLMpNwxFZHveEUZOe2dvZk5hYAmHhrgiU6rjAje1bElBx7ar7Dic/e1OSg
SkxKtSXZs/PzzJTb1rw8OwidOPERGHI8+g0Tr2h2ntvTnpQc53QmpjtTYLkF
A0YoABYL/FPOIK7RHkDRVJZIFJgKXsYQVdZAZ8AlHx7vRRsyNu9ieASkoKCA
rpBsy2KovAWgmpqawEeOrLyktCxcFBYU22KsACcxetbjBUW+1nbA5YhPAr9k
Z+UnJKYCsxirLSZ2urunOTvLYU9JAoa5WYVJiWm4SE11wLEK+L2Pzispnj3n
8qUrjmQnnnW5jOASHDFILNDAIHnuAzLIw5tyjhhUDP0nLPr9bQG8l+uLbPfw
Jw5QJFGNVj2YDcBSu0JdEPCoqKiSkhJnemZyaoYjI7fH5U+1p+dm5EBTzc7K
TbXaIIO5aelpicnAId6WbE/NQEu7MzMnNwMLYk52piXWCigsMUmOtBy0SUl2
FBXN8Xm8SQmJNks8aoryS4I+eBBOydLkz31wq044CtNHp2PoQA1UQD51MoSR
+gcDICAYGC8wHkoutzmYPSi/q9AbHFMqzmIEwez2tLycXHePK82empKU7Hd7
igoKU1OMI1SJicl5eQVomZGZjTURqgksRFc9OdmelZWD9T8nJ09SVmghFxbO
TkhIAg6YVv7ugTIzhFUoeYOEYLRg/kcffXTYz6JKITth6SHzAC4MleRDO4Fn
JNjFbR20FyFlwVdUyj5jXFwcxg/SQBctW2Z9E3YoQBCIr4ACNhJEhtFF8Azk
CyxNxThlyhT+SAV/2gL1YBg0xrsgiXS40BIX0K64kExszunwnp2XQjU+0F0e
5Ffm0iluqWh1ORKur576IiuNWbiMokZ+I0VugVswR9KPyBFrOs2iZ1awXkbO
rxLd1Xse9sJIoAptjYXdxTj1sYUpBH4NhH63SoUsZ6pcIRBchGUd5MgenPyk
AKWGZz2Ulo4+uA3A5YZqk9pAP4T+FRUZkp5DKxEbXfxRw7GJvccL/Xi70k6Z
8ROgUckIyPyhNmkPPEm4fuwOVMsOHSGlI4M39v1tBL23Qc93DLUIViJT+l3J
vAo7P9g3+ie/MiE/dag0fBh+1LeZlGbQqv44U31emnRdQeddt3/kWF/fof4/
9O3SiQ==
      "], {{0, 70}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 70},
    PlotRange->{{0, 100}, {0, 70}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
76jnolobzPhokd12zvAT/UQ/0fzQ/wH6CmxB
      "], {{0, 59}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 59},
    PlotRange->{{0, 100}, {0, 59}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
lj4XLO0wZiy5I21v3nyT7S63K92km9/oWNNmXfdET/7nG9Y8Htzy8pP+uz+e
JmIjyq6ZSI4qmgt2NwEvIZC/64XPbPvFVzYdf8mv3zonHhmft3JTps2o720t
aNxf2dJv9FpiYnSWfMVoDiqdWJFShITSO2XBTzRyl4ctgKirq0uqKeAGNwxI
AjTofyXeSalOYiLZ2FjvrSz98Wfu998170tZ2/+usHTn1deJkbPONTcdLUn/
fu2G//6C85WjNfXFG+6+A77o+rzCuUbDnV3NuwO2TfqsW59+0HK/d/Vzjxh/
+ESdoq/GzitqMDoOfXUuOaLwFfTVzoxvHtz0+lM73n6lPeeea+BJLF6buU6f
n9fsL289YGsdyK8oTsyOr0ARIJLeu3QvoXOICe2gmDpvIBu5dQh8eLgFHIVB
mHCgKVQcVGAVCkMIK8pLOxu8h2wlvlWLO1YtP1ZqzL7hRjE25MpY8Dn75hc7
7/vlI57v9Xub9DtWLLx+9670ktIl1d7Nbnumw7Cp3rrzqYd8n+vc+/jBwq8e
sS+9CTIYjY5FRkLjqh+lmLbwyWFX7vZn7t/z78+af/vyQOG2W8+dfnvJ+k1Z
5TpdY627+0hN5wN6SxmcfTELrJgdAuHwPyllEq5pyRDtTyImD3JQEpkz5ElX
wSOLaj48FR53OW1ee/mAp7xy9aKO7G1PeHzz0tLwmCXrUw84sr4VLHz9b5oe
C1jqS/OWzptTVLBJp1ul060wGjIr9Fk1toKj3c6BxpxjD1mee7Jn8903JjFn
1WSMJSKj0TDjZf2967722crnjll+/eqj2RvngaHvXnPPTmPxPrvVF3ywuefw
hi3rxeywEhpTCB6DkicX8fiNzLOxgkaZfgFKeJBHWVDhUzKPCsDh4iYm4spm
fFK0tLVazEafqbDFUuTL2bnfVnWwoasyr7jVWebXbz7s29VnyX6owdfhctc6
LF6Hvro6v7PH3trm8njMrQ01jor8xurcamtme22xuyIvGGhqqmvJLyzwBWrq
Ak2lJWV9Ha0NrlK/dWuNdVODJ6+7zVPlNJVaDbXBJkd9g6mqyWTzd/cGh0ZO
zgYrHmYgMvLQjjZfJL9HkAX9gYwUW+13MVB08pyYEgqpIT+ukYRw+71ghGTo
tIiHRThuMnpw6/6BoEidFeHfiPjJ5NnBapO7zuEWKXDphfHIWxeGT9ldziqn
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
      "], {{0, 61}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 61},
    PlotRange->{{0, 100}, {0, 61}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
iHbnXlhE735NFC1fdHTX4+rgjveaUvZm3Xio4uZ36m/7r/aHT3bnn3+mKPJc
1bmeor11qcVpeh/HvohV1KuUmD5WytgmyBEft5TrC8/4t4ml0++R+l1Qypc/
b39NOWSzZ+okihsdJ7GDYwTRYAXjOFH66KJfPN+tDuz898ZHfpZ5U3/5zUfr
ElgNP1sU3lY11KuxKk2db6ugwQoWYlzP4V6sAJg2iesuDQHHz1eXLMpzQQGy
VNf4X2EWP+qa9ia88gy6U4mKNctIX9DDqizjnvd29qj9u95rTN+beXN/+S1H
6/4GWJ14In/o2aKJf6o621v0huErXZ5sa6xcd9zs9Xulp9MlKSLyo8S9hqQC
bxaLChr+t3vkpWacDp0P5Q+lNzQ0JCde/Z6Xt5pEKa2UHBspwiWA1eJf7Nyi
Duw+2pT5Wtatb5XfdqTuro860o/1FJ/aWgZf9NSW0lcb0orS7rZ1DaRgFfaX
nn65RMzhWoic+t+ErayslF2MJBadhIiVZbR9YoM1qP8Pr1p2/9FdT1sHXtxb
lbpn5YI3a+YfalrybnvWfz5R9slzgYGdjf/bV/7q2pyiZYvDVhAC7UT1qbY7
EYxa08BKSjuu77uEQAnmUnnbZG1tbUw7KINbV1eXmrySIZmM926wsqT+aiwe
suKhwtT79m17Un1w8P2+tVsfvvVHZXfvbUzp7yr75VNr/vv5tmO72j7oq/7R
2vwVqYvjuuzDzKEmoN5jjorEp8NX3P67jj9BIPvOsoMmFhN+O99kFKnk7y1M
QkYPaEmFyx23tGtqR5Q7bmvQXccqXp762ranTv78x6921m4vSflhfcYrnYX7
+tb1b914dGfXezs3HNnS8GJH5YrlDw+HQ6ZeHtGS1leJUMlVk1/6CgSIrvu7
z9w5lRpv5b3fTU0IBwwOBkwhBuTn57N8dBIK4F9tTVVNbUVNbXl1bUVloKoi
EChaVZlTUFSxqrKlLtBRUbK1pW5t6reeq8/fnHvf3xUt7S7J2VyWs7Eyo7dy
6XcKH9qQm9KwunZ9z5PpKcvXVNVv6lhXvDI7v6Cwoaml2sx/9QTd29vbe7Xi
cC0EvcRcNF8QUF72Txl3yzWvqqmrei/P8cqlLFfeNzHdBdl5sD2xs5/pUvax
UypmXgeAVomFVWxQWWdUeEBFRnKKS7V3YqpJwufPmjouNT5xza/l4lanSiJN
iwCI/CQCXFl5JUd5L43KV7K0MynxkEkOIPZ18Gk5xoc8NxgcH4lv6XnKKH4E
10EVHlZWSEfZDqsco/qlnOh54FbXumEYMgz3JOjqamT9toXJ7jhTXPpKd/MF
v0gom878eQ12Qo9RPbrei7RXJJ/PYPjKNe9QINyZSCRn8nNXoUOXCsQmTG5K
1+5JabeGKx4Emy0vqdHmliXyBisrZodD1/yzJ/SUpJb4upC8lyS2VQyHCPvU
KCXGXIKVJVjpoMcE0aUl1a5R2GErYsqEWNamnYqQSXDp90psp7ypXbuvIWWN
xfWrXnY0HrWmYQW/lF+VuZwIpr/6iKLqVZWAbZyx0Qv69ZCIjuZsE/k2Nq6B
nQxHI3HbIrDBUKysolZ7BhFdiBsLwa1yG9e1joZiidczx8cuz8Xg6jA3rvc7
A7O68msnKC5KKG5YHFSpyFXeEiTnT2/W/0o+cKbhaG5u5qr5vrNjfs1AGedE
QirJkEstmZRGf/FrnRHJa03Lli3jboikUuFa4P4xoKCggFkyyWkHAgG4uCyt
ZA9CJxhflvsyMIffy8wk7Bcm2bhxIz09QRgOM8uqMRUfRNLOwlwjMoDycl+4
f1aPgFWYi+ZDx/JhVcl+/DUVbpTLT6mQK5gFwvLl57CYte7o6FBGl3IANKek
yvn7DDgFvs2X8tMx10SUDr5ayPwz842tra2Dg4MMl8BCjCsd8yMnPFFe6OB4
7h8p72eLuL1LFmWdBvp5FWU2UCQvxB2ZOc5UytNCUOPgBKyLxTmUHe665ubm
EkywGcWHSUV0MiWLTvCV5PPJe1LXxO2A9evXy44AIeILHeBegMaLLl26dLYX
f+1EHQugmMwXZJSnW7AuZvJF22/atCktLY1trh0gINikrLEHwiu/EgMAiw3x
FP6QCGDs7OxkKRSRlJ2UuUz+n3ui60X9I/nDpNJocdUIi79+wG80k1JkEj7w
K1/Elh5MNUecqK/oK/qKpqb/ByyfFzc=
      "], {{0, 75}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 75},
    PlotRange->{{0, 100}, {0, 75}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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

      "], {{0, 73}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 73},
    PlotRange->{{0, 100}, {0, 73}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
L2kWYZxpD+mkGc8ziP0/rbfP+vD/6fq/ETz0oQ==
      "], {{0, 59}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 59},
    PlotRange->{{0, 100}, {0, 59}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzFfAd8FMfZ/iVxEn8uccGOg1tsYwzBNsbdGDAdTO8gCfV60klXpFPvXQgk
ejUYkCXRm6mmWPTeEUU0oS5dL9v39vZ7Z+Z0ECf58n3h//N/f8uxtzc7O/PM
W573nRm9HaqZHPlbhUKR8CR8TA5JHhwfH5I65Xn4Mk2dEB2ljggfpdZHREXE
fxX6O7g5CP6Fwz90Lf9fD/cvTkl2i3CKLCXLoixLvMjBbbPTKeLvUEbiBafd
Qcq7BBEOUpPFYiF1WGxW+HR1ng6GdsMhy5xLgq8CT8tuQXLLAjznEtEb4Qt6
kwAfcAoC19k4ye12oRrxNbyfohi4EgRUkuMEct9JWcmDqHW/6M7DQ8LNF//P
+PwvsEInxspB2d34ysmJFDRS8pQEuFiaIe0xmUzeyjiBJzWZ7TaEUmfFVrsN
PmkWOivRtBMKi6LEUDR8lUQXnLSTwj/RDMMAGi6XC0aBZVlJ8nZWgpvehkMx
ScJgyiJ8Qi2ApMvl5ljXr4yVwDjdEm+3gahI7s7XiPidjMMpggx0yhWpxul0
ksoMJqPLLTGoxZ7GUhTFCy53Z38dTgQgzyHQkPhJMsewnVLh6R7Pe+6QbnKo
MMIWLiwWk8NBkR9cLoG0C4CCYkTq4K00xf9/kSvASnS5YcAYEX165YqIFoyn
w+HgOKQ1MNCP1gRYsTzcl0wGY1ZeYWNTiyxyEkdDpSB5LtYJmmhneB5eI3Cg
8oAweoRBSs1ygLwkCljl3VAJGhqWceEmIdWDYvDJ8VR7RzPcBGwZxgOg3Ub/
+jrY3tbklkQ3MgiMgJtI7JXTaoNPQOnR9gBcoDhEywAiuKhvaoRncVWyxY7u
yC6GtxkpSbaw8AsDguAQZRo9LSBjJssPWtpZjogTwseNRdNJt0syZbdi9Uf3
GYed7Xwv6j5YPopyEAvG8+h1yAz8ilhRNnNJcf7RIzXBoUHhEVHNBoON5uBN
DMWqY1Sq6Jj01LTmxiZ4pLGxMTc3d+nSpWFhYU0tzaCDseo435l+eUWFzc2N
TmOHQDGZuXMMRptMW6qWzVtetUOZmBU+Y/zB7ZUnrt4Oik+dOmV81dolIgZi
4aLle/fuDQ6dNtN/+o/bfz535oZaFxynCak5dE5gQVBNomTNSM8NC1HrdLrG
pnuCyFy8dHbx4oXff78yKCgkJib22NFTv7JcuQU2Jzs9WhlJs1SHwRQcGWmy
U1aa3r51x0+799gs1q2bt1SsWQv6CeZIr9cfOnQIrI3gEjOyMu/V34ea9uz/
qaxsNlg0Y2NLcLiWpiXq/rWqRXOWb9hXb3VRzTez1EFz16xv4mWWtWalqS/c
uAZYZeYUr1ixgmY7JDcTEZpYWbEdvERzW21sdIYL1FV2rq6Yu3HDDrBP9fX1
+QVZNGMHBPz9/davr4afHzxozEjPeaiGvwpWYFt02tgTx4+CtrR3GMsWLmxs
M9CimJaSfuHMWSjpsNkz0zPAtj948CAxMRH8F1TGiwJgdfvuHSdNuUgLedba
2qFLzEUejDcvLco4XtsM3ZM5Q8WCvJM3G8ygtrQ5Ra+819rkdMvLvqu4ffs2
YMKw1sUL1l06fw/cLMCVkVp+7VKrS7bk5KtZBnk/8CaZWUm11y9brIa4OBWx
//fu1ackZ/zaWLlFfYKm7tYNwq9WV1UdO30O3gRYaVSxfj6+mjh1VETk9Wu1
QKtAHcAgg5EH9weFlTHRk6dOidVqbt26AXJFGS0x6jSLhQGsVpcXnL9rQliJ
5mUlKefutpqR+2MyUmJr792G3i5YvPLy5cuSDEW4stLVdTfaACve1VZavPLi
2Ybmths6fRD2GMiVzJs/q7Wt8eata1lZGQ6HDWptaWnLyS4wwxt+Raxou2VW
SUFjQz3mnq7F331XW3cXrFZqclpHSytxgogwuOXm5ua0NIDCQiprbG4iNdXe
ullQkMeajbzNGafLtNt5WbCuLi+qbXa2AihMx6qyrBttVtBBgtXtpgdOl7x4
2eo7d+5wAsgSV1K4rKkBeKbZ5nygjEi5WwevcKakKxsetBNCATp4q662rb0p
NzfbZDKwLG8wmNJSsygn92tiBU48IV69cME8q93yoKEpJSsLHBS8acumrTu2
bLVbbe2tbaUls9paWsEDxsfHgxMEw3Xl2tX8wgKbA9HXC1cuZ2dngue3dhgj
ovUULciCsywnpfaBCamry7l0dvaV+0iuwOUlJyiv3LwOBqm4pAyUGkgZ3CzM
n//gvlFGMubMyZpjM7ut9uaKyiW7d+2HrgOk+kSNS+IMxladTmO1opoAK1WM
xmpx/sr2KiY6Yvu2LaHhIQGBwWcvX4bXAJGCMmlJyVq1JiQo+OTxE/AVdCEi
IsJqtaI+u8Q1FWt1CfETJ09Kz84ymDogZGm8X5+TX9reYZEdphXz51y53QRE
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
AbWWscqTqsiDEj7+G4FygOo=
      "], {{0, 64}, {100, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
      True, MetaInformation -> 
      Association[
       "Exif" -> Association[
         "Software" -> 
          "Created with the Wolfram Language : www.wolfram.com"]]],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100, 64},
    PlotRange->{{0, 100}, {0, 64}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7397194179183345`*^9, {3.739721971787698*^9, 3.739722019010542*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"e1a98cab-9089-4267-b738-502c6e23c1dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transposed", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BarChart", "[", "#", "]"}], "&"}], ",", "predictions"}], 
      "]"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BarChart", "[", "#", "]"}], "&"}], ",", "solutions"}], 
      "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7397223365436716`*^9, 3.739722372093545*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"ae27f015-cbd9-4a75-a6c7-23aa89a9076b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.2871198568872987, 0.}, {14.435461676069906`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.564538323930095, 0.}, {1.435461676069905, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691932`, 
               29.738335735788258`}, {-19.976428052519303`, 
               49.84234842137344}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.564538323930095, 0.}, {2.435461676069905, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{30.780332011422697`, 
               42.07206381151903}, {-46.61826515786266, 49.84234842137344}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.564538323930095, 0.}, {3.435461676069905, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{43.11406008715346, 
               54.40579188724979}, {-3.9913257893132865`, 49.84234842137344}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.564538323930095, 0.}, {4.435461676069905, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{55.447788162884216`, 
               66.73951996298055}, {-51.94663257893134, 49.842348421373444`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.564538323930095, 0.}, {5.435461676069905, 4.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{67.78151623861498, 79.07324803871131}, {
               27.97887873709874, 49.842348421373444`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.564538323930095, 0.}, {6.435461676069905, 12.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.11524431434574, 
               91.40697611444207}, {-14.648060631450633`, 
               49.842348421373444`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.564538323930095, 0.}, {7.435461676069905, 11.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.4489723900765, 
               103.74070419017283`}, {-9.319693210381963, 
               49.842348421373444`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.564538323930095, 0.}, {8.435461676069906, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{104.78270046580728`, 116.07443226590361`}, {
               43.96398100030476, 49.842348421373444`}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.564538323930096, 0.}, {9.435461676069906, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.11642854153806`, 128.40816034163439`}, {
               6.665409052824053, 49.842348421373444`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.564538323930096, 0.}, {10.435461676069906`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{129.45015661726882`, 
               140.74188841736517`}, {-3.9913257893132936`, 
               49.842348421373444`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.564538323930096`, 0.}, {11.435461676069906`, 
                6.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{141.78388469299958`, 153.0756164930959}, {
               17.3221438949614, 49.842348421373444`}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.564538323930096`, 0.}, {12.435461676069906`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{154.11761276873037`, 
               165.4093445688267}, {-57.27500000000002, 49.842348421373444`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.564538323930096`, 0.}, {13.435461676069906`, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{166.4513408444611, 177.74307264455743`}, {
               27.97887873709874, 49.842348421373444`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{13.564538323930096`, 0.}, {14.435461676069906`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{178.7850689201919, 
               190.07680072028822`}, {-9.319693210381963, 
               49.842348421373444`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.2871198568872987, 0.}, {14.718428512453555`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.564538323930095, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.564538323930095, 
                0.}]}], 
             LineBox[{{14.435461676069902`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {14.435461676069902`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.2871198568872987, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.2871198568872987, 0.}, {14.435461676069906`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.564538323930095, 0.}, {1.435461676069905, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691932`, 
               29.738335735788258`}, {-19.976428052519303`, 
               49.84234842137344}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.564538323930095, 0.}, {2.435461676069905, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{30.780332011422697`, 
               42.07206381151903}, {-46.61826515786266, 49.84234842137344}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.564538323930095, 0.}, {3.435461676069905, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{43.11406008715346, 
               54.40579188724979}, {-3.9913257893132865`, 49.84234842137344}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.564538323930095, 0.}, {4.435461676069905, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{55.447788162884216`, 
               66.73951996298055}, {-51.94663257893134, 49.842348421373444`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.564538323930095, 0.}, {5.435461676069905, 4.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{67.78151623861498, 79.07324803871131}, {
               27.97887873709874, 49.842348421373444`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.564538323930095, 0.}, {6.435461676069905, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.11524431434574, 
               91.40697611444207}, {-19.97642805251931, 49.842348421373444`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.564538323930095, 0.}, {7.435461676069905, 11.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.4489723900765, 
               103.74070419017283`}, {-9.319693210381963, 
               49.842348421373444`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.564538323930095, 0.}, {8.435461676069906, 2.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{104.78270046580728`, 116.07443226590361`}, {
               38.635613579236086`, 49.842348421373444`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.564538323930096, 0.}, {9.435461676069906, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.11642854153806`, 128.40816034163439`}, {
               1.3370416317553833`, 49.842348421373444`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.564538323930096, 0.}, {10.435461676069906`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{129.45015661726882`, 
               140.74188841736517`}, {-9.319693210381963, 
               49.842348421373444`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.564538323930096`, 0.}, {11.435461676069906`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{141.78388469299958`, 153.0756164930959}, {
               11.993776473892723`, 49.842348421373444`}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.564538323930096`, 0.}, {12.435461676069906`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{154.11761276873037`, 
               165.4093445688267}, {-57.27500000000002, 49.842348421373444`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.564538323930096`, 0.}, {13.435461676069906`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{166.4513408444611, 177.74307264455743`}, {
               22.650511316030066`, 49.842348421373444`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{13.564538323930096`, 0.}, {14.435461676069906`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{178.7850689201919, 
               190.07680072028822`}, {-14.648060631450633`, 
               49.842348421373444`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.2871198568872987, 0.}, {14.718428512453555`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.564538323930095, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.564538323930095, 
                0.}]}], 
             LineBox[{{14.435461676069902`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {14.435461676069902`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.2871198568872987, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.43075018208302984`, 0.}, {6.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6579999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691932`, 45.152621188420795`}, {
               11.993776473892751`, 49.84234842137346}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{47.4314398420654, 
               74.13745709479429}, {-14.648060631450626`, 
               49.842348421373465`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.41627574843889, 
               103.12229300116776`}, {-57.27500000000001, 
               49.842348421373465`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.40111165481237`, 
               132.10712890754124`}, {-35.96153031572532, 
               49.842348421373465`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{134.38594756118584`, 
               161.09196481391473`}, {-19.976428052519303`, 
               49.842348421373465`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{163.37078346755933`, 190.07680072028822`}, {
               6.665409052824067, 49.842348421373465`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.43075018208302984`, 0.}, {6.5716107793153675`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{6.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {6.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.43075018208302984`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691925`, 38.53285866528776}, {
               11.993776473892744`, 49.842348421373465`}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{40.095738514977704`, 
               60.18199324457353}, {-14.648060631450633`, 49.84234842137346}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{61.74487309426347, 
               81.8311278238593}, {-57.27500000000003, 49.842348421373465`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{83.39400767354924, 
               103.48026240314508`}, {-30.633162894656657`, 
               49.842348421373465`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.04314225283503`, 
               125.12939698243085`}, {-19.976428052519317`, 
               49.842348421373465`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.6922768321208, 
               146.77853156171665`}, {-19.976428052519317`, 
               49.842348421373465`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.34141141140657`, 168.42766614100242`}, {
               6.66540905282406, 49.842348421373465`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 0.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{169.99054599069234`, 190.07680072028816`}, {
               49.292348421373454`, 49.842348421373465`}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{8.451201747997086, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.39075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691932`, 
               50.48796685592885}, {-9.319693210381942, 49.84234842137346}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{53.343812401781754`, 85.38517532201868}, {
               33.30724615816742, 49.842348421373465`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.24102086787157, 
               120.2823837881085}, {-30.633162894656643`, 
               49.842348421373465`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{123.1382293339614, 155.17959225419833`}, {
               22.650511316030084`, 49.842348421373465`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.03543780005123`, 
               190.07680072028813`}, {-57.27500000000001, 
               49.842348421373465`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{5.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691932`, 
               50.48796685592885}, {-9.319693210381942, 49.84234842137346}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{53.343812401781754`, 85.38517532201868}, {
               33.30724615816742, 49.842348421373465`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.24102086787157, 
               120.2823837881085}, {-30.633162894656643`, 
               49.842348421373465`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                5.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{123.1382293339614, 155.17959225419833`}, {
               22.650511316030084`, 49.842348421373465`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.03543780005123`, 
               190.07680072028813`}, {-57.27500000000001, 
               49.842348421373465`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{5.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{67.57632274198855, 
               102.20269570603588`}, {-35.96153031572533, 
               49.842348421373416`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.33811457381825`, 
               139.96448753786558`}, {-57.275000000000006`, 
               49.842348421373416`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{67.57632274198855, 
               102.20269570603588`}, {-35.96153031572533, 
               49.842348421373416`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.33811457381825`, 
               139.96448753786558`}, {-57.275000000000006`, 
               49.842348421373416`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.31753130590339895`, 0.}, {12.444681436631347`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5553185633686528, 0.}, {1.4446814366313472`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691925`, 
               31.793957081743375`}, {-57.27500000000001, 49.84234842137345}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5553185633686528`, 0.}, {2.444681436631347, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{32.83595335737782, 46.183306503429264`}, {
               11.993776473892744`, 49.84234842137345}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.555318563368653, 0.}, {3.444681436631347, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{47.2253027790637, 60.57265592511516}, {
               1.3370416317553904`, 49.84234842137345}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.555318563368653, 0.}, {4.444681436631347, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{61.61465220074959, 
               74.96200534680105}, {-19.97642805251931, 49.84234842137346}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.555318563368653, 0.}, {5.444681436631347, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.00400162243548, 
               89.35135476848693}, {-46.61826515786268, 49.84234842137346}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.555318563368653, 0.}, {6.444681436631347, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{90.39335104412136, 103.74070419017282`}, {
               1.3370416317553833`, 49.84234842137346}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.555318563368653, 0.}, {7.444681436631347, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{104.78270046580725`, 
               118.1300536118587}, {-35.96153031572533, 49.84234842137346}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.555318563368653, 0.}, {8.444681436631347, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.17204988749315`, 
               132.5194030335446}, {-30.63316289465665, 49.84234842137346}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.555318563368653, 0.}, {9.444681436631347, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{133.56139930917902`, 146.90875245523048`}, {
               22.650511316030077`, 49.84234842137346}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.555318563368653, 0.}, {10.444681436631347`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{147.95074873086492`, 
               161.29810187691638`}, {-57.27500000000002, 49.84234842137346}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.555318563368653`, 0.}, {11.444681436631347`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{162.3400981525508, 
               175.68745129860227`}, {-3.9913257893132865`, 
               49.84234842137346}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.555318563368653`, 0.}, {12.444681436631347`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{176.7294475742367, 
               190.07680072028816`}, {-9.319693210381956, 49.84234842137346}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.31753130590339895`, 0.}, {12.687224439245906`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5553185633686528, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5553185633686528, 
                0.}]}], 
             LineBox[{{12.444681436631347`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {12.444681436631347`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.31753130590339895`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3023255813953488, 0.}, {13.440071556350627`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5599284436493739, 0.}, {1.4400715563506261`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.44660393569193, 
               30.68708404930601}, {-57.275, 49.84234842137345}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5599284436493739`, 0.}, {2.440071556350626, 
                6.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.729080324940448`, 43.969560438554524`}, {
               17.32214389496142, 49.84234842137345}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.559928443649374, 0.}, {3.440071556350626, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{45.01155671418896, 57.25203682780304}, {
               1.3370416317554046`, 49.84234842137345}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.559928443649374, 0.}, {4.440071556350626, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{58.29403310343747, 
               70.53451321705155}, {-19.976428052519296`, 49.84234842137346}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.559928443649373, 0.}, {5.440071556350626, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{71.57650949268597, 
               83.81698960630006}, {-19.976428052519296`, 49.84234842137346}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.559928443649373, 0.}, {6.440071556350626, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{84.8589858819345, 
               97.09946599554856}, {-46.61826515786265, 49.84234842137346}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.559928443649373, 0.}, {7.440071556350626, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{98.141462271183, 
               110.38194238479709`}, {-3.9913257893132794`, 
               49.84234842137346}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.559928443649373, 0.}, {8.440071556350626, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.42393866043153`, 
               123.66441877404559`}, {-35.96153031572531, 49.84234842137346}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.559928443649374, 0.}, {9.440071556350627, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{124.70641504968006`, 
               136.94689516329416`}, {-30.633162894656635`, 
               49.84234842137346}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.559928443649376, 0.}, {10.440071556350627`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{137.9888914389286, 150.22937155254266`}, {
               22.65051131603008, 49.84234842137346}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.559928443649376`, 0.}, {11.440071556350627`, 
                19.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{151.2713678281771, 
               163.51184794179116`}, {-51.94663257893133, 49.84234842137346}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.559928443649376`, 0.}, {12.440071556350627`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{164.55384421742562`, 
               176.7943243310397}, {-3.9913257893132794`, 49.84234842137346}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.559928443649376`, 0.}, {13.440071556350627`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{177.83632060667412`, 
               190.0768007202882}, {-3.9913257893132794`, 49.84234842137346}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3023255813953488, 0.}, {13.702826475849731`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5599284436493739, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5599284436493739, 
                0.}]}], 
             LineBox[{{13.440071556350626`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {13.440071556350626`, 
                
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3023255813953488, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.43075018208302984`, 0.}, {6.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6579999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691932`, 
               45.152621188420795`}, {-46.618265157862666`, 
               49.84234842137346}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{47.4314398420654, 
               74.13745709479429}, {-57.27500000000001, 49.842348421373465`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                9.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{76.41627574843889, 103.12229300116776`}, {
               1.3370416317553904`, 49.842348421373465`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                8.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.40111165481237`, 132.10712890754124`}, {
               6.665409052824067, 49.842348421373465`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 6.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{134.38594756118584`, 161.09196481391473`}, {
               17.322143894961414`, 49.842348421373465`}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6579999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{163.37078346755933`, 
               190.07680072028822`}, {-51.946632578931336`, 
               49.842348421373465`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.43075018208302984`, 0.}, {6.5716107793153675`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{6.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {6.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.43075018208302984`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.4107501820830298, 0.}, {7.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.44660393569193, 
               41.36321402497279}, {-46.61826515786268, 49.842348421373444`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{43.23220171824448, 
               66.14881180752535}, {-57.27500000000003, 49.84234842137345}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{68.01779950079704, 90.93440959007789}, {
               1.3370416317553762`, 49.84234842137345}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                8.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.80339728334958, 115.72000737263045`}, {
               6.665409052824053, 49.84234842137345}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 0.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.58899506590214`, 140.50560515518302`}, {
               49.29234842137344, 49.84234842137345}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.3745928484547, 165.2912029377356}, {
               22.65051131603007, 49.84234842137345}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{167.16019063100728`, 
               190.07680072028813`}, {-51.94663257893135, 49.84234842137345}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.4107501820830298, 0.}, {7.592010779315368, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{7.451201747997087, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {7.451201747997087, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.4107501820830298, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{85.79570903946178, 
               121.38071351444286`}, {-57.275000000000006`, 
               49.842348421373416`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{1.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
                0.}]}], {{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{85.79570903946178, 
               121.38071351444286`}, {-57.275000000000006`, 
               49.842348421373416`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{1.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
                0.}]}], {{}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{67.57632274198855, 
               102.20269570603588`}, {-57.275000000000006`, 
               49.842348421373416`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.33811457381825`, 
               139.96448753786558`}, {-41.289897736794, 49.842348421373416`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{67.57632274198855, 
               102.20269570603588`}, {-57.275000000000006`, 
               49.842348421373416`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.33811457381825`, 
               139.96448753786558`}, {-41.289897736794, 49.842348421373416`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.31753130590339895`, 0.}, {12.444681436631347`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5553185633686528, 0.}, {1.4446814366313472`, 
                8.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691925`, 31.79395708174338}, {
               6.665409052824067, 49.84234842137345}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5553185633686528`, 0.}, {2.444681436631347, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{32.83595335737782, 
               46.183306503429264`}, {-14.648060631450626`, 
               49.84234842137345}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.555318563368653, 0.}, {3.444681436631347, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{47.2253027790637, 
               60.57265592511516}, {-30.633162894656643`, 49.84234842137345}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.555318563368653, 0.}, {4.444681436631347, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{61.61465220074959, 
               74.96200534680105}, {-3.9913257893132865`, 49.84234842137346}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.555318563368653, 0.}, {5.444681436631347, 12.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.00400162243548, 
               89.35135476848693}, {-14.648060631450633`, 49.84234842137346}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.555318563368653, 0.}, {6.444681436631347, 1.}, 
                "RoundingRadius" -> 0]},
              ImageSizeCache->{{90.39335104412136, 103.74070419017282`}, {
               43.96398100030477, 49.84234842137346}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.555318563368653, 0.}, {7.444681436631347, 7.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{104.78270046580725`, 118.1300536118587}, {
               11.993776473892737`, 49.84234842137346}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.555318563368653, 0.}, {8.444681436631347, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.17204988749315`, 
               132.5194030335446}, {-57.27500000000002, 49.84234842137346}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.555318563368653, 0.}, {9.444681436631347, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{133.56139930917902`, 146.90875245523048`}, {
               1.3370416317553833`, 49.84234842137346}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.555318563368653, 0.}, {10.444681436631347`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{147.95074873086492`, 
               161.29810187691638`}, {-30.63316289465665, 49.84234842137346}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.555318563368653`, 0.}, {11.444681436631347`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{162.3400981525508, 175.68745129860227`}, {
               22.650511316030077`, 49.84234842137346}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.616], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.555318563368653`, 0.}, {12.444681436631347`, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{176.7294475742367, 190.07680072028816`}, {
               1.3370416317553833`, 49.84234842137346}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.31753130590339895`, 0.}, {12.687224439245906`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5553185633686528, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5553185633686528, 
                0.}]}], 
             LineBox[{{12.444681436631347`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {12.444681436631347`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.31753130590339895`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.27191413237924866`, 0.}, {15.430851795789184`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.569148204210816, 0.}, {1.430851795789184, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.446603935691932`, 28.916087197406217`}, {
               6.66540905282406, 49.842348421373444`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.569148204210816, 0.}, {2.430851795789184, 12.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{29.958083473040645`, 
               40.42756673475493}, {-14.648060631450626`, 49.84234842137344}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.569148204210816, 0.}, {3.430851795789184, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{41.46956301038936, 51.93904627210364}, {
               43.96398100030477, 49.84234842137344}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.569148204210816, 0.}, {4.430851795789184, 14.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{52.98104254773808, 
               63.45052580945236}, {-25.30479547358798, 49.84234842137344}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.5691482042108165`, 0.}, {5.430851795789184, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.49252208508679, 
               74.96200534680106}, {-3.9913257893132936`, 
               49.842348421373444`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.5691482042108165`, 0.}, {6.430851795789184, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.00400162243551, 
               86.47348488414978}, {-14.648060631450633`, 
               49.842348421373444`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.5691482042108165`, 0.}, {7.430851795789184, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{87.51548115978423, 
               97.9849644214985}, {-30.63316289465665, 49.842348421373444`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.5691482042108165`, 0.}, {8.430851795789184, 
                1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{99.02696069713292, 109.4964439588472}, {
               43.96398100030476, 49.842348421373444`}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.569148204210816, 0.}, {9.430851795789184, 7.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{110.53844023448164`, 121.00792349619591`}, {
               11.993776473892723`, 49.842348421373444`}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.569148204210816, 0.}, {10.430851795789184`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{122.04991977183036`, 132.51940303354465`}, {
               11.993776473892723`, 49.842348421373444`}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.569148204210816`, 0.}, {11.430851795789184`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{133.56139930917908`, 
               144.03088257089337`}, {-57.27500000000002, 
               49.842348421373444`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.569148204210816`, 0.}, {12.430851795789184`, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{145.0728788465278, 155.5423621082421}, {
               1.3370416317553833`, 49.842348421373444`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.569148204210816`, 0.}, {13.430851795789184`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{156.5843583838765, 
               167.0538416455908}, {-30.63316289465665, 49.842348421373444`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{13.569148204210816`, 0.}, {14.430851795789184`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{168.0958379212252, 178.56532118293953`}, {
               22.650511316030066`, 49.842348421373444`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{14.569148204210816`, 0.}, {15.430851795789184`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{179.60731745857393`, 
               190.07680072028822`}, {-3.9913257893132936`, 
               49.842348421373444`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.27191413237924866`, 0.}, {15.734030549057383`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.569148204210816, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.569148204210816, 
                0.}]}], 
             LineBox[{{15.430851795789184`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {15.430851795789184`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.27191413237924866`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.44660393569193, 33.10207975644211}, {
               1.3370416317553904`, 49.84234842137345}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{34.14407603207653, 
               48.79955185282671}, {-30.633162894656643`, 49.84234842137345}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.84154812846114, 
               64.49702394921133}, {-46.61826515786268, 49.84234842137346}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.53902022484574, 80.19449604559591}, {
               22.650511316030077`, 49.84234842137346}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{81.23649232123036, 
               95.89196814198053}, {-51.94663257893134, 49.84234842137346}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.93396441761497, 
               111.58944023836513`}, {-57.27500000000002, 49.84234842137346}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{112.63143651399957`, 127.28691233474974`}, {
               43.96398100030477, 49.84234842137346}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.3289086103842, 
               142.98438443113437`}, {-3.9913257893132865`, 
               49.84234842137346}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{144.0263807067688, 158.681856527519}, {
               33.30724615816742, 49.84234842137346}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 12.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{159.72385280315342`, 
               174.3793286239036}, {-14.648060631450633`, 49.84234842137346}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{175.42132489953804`, 
               190.07680072028822`}, {-46.61826515786268, 49.84234842137346}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5507086830879317, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
                0.}]}], 
             LineBox[{{11.449291316912069`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], ",", 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3023255813953488, 0.}, {13.440071556350627`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5599284436493739, 0.}, {1.4400715563506261`, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{18.44660393569193, 30.687084049306012`}, {
               1.3370416317554046`, 49.84234842137345}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5599284436493739`, 0.}, {2.440071556350626, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.729080324940448`, 
               43.969560438554524`}, {-30.63316289465663, 49.84234842137345}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.559928443649374, 0.}, {3.440071556350626, 17.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{45.01155671418896, 
               57.25203682780304}, {-41.28989773679398, 49.84234842137345}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.559928443649374, 0.}, {4.440071556350626, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{58.29403310343747, 70.53451321705155}, {
               43.96398100030478, 49.84234842137346}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.559928443649373, 0.}, {5.440071556350626, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{71.57650949268597, 83.81698960630006}, {
               22.65051131603008, 49.84234842137346}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.559928443649373, 0.}, {6.440071556350626, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{84.8589858819345, 
               97.09946599554856}, {-51.94663257893133, 49.84234842137346}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.559928443649373, 0.}, {7.440071556350626, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{98.141462271183, 
               110.38194238479709`}, {-57.275000000000006`, 
               49.84234842137346}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.559928443649373, 0.}, {8.440071556350626, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.42393866043153`, 123.66441877404559`}, {
               43.96398100030478, 49.84234842137346}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.559928443649374, 0.}, {9.440071556350627, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{124.70641504968006`, 
               136.94689516329416`}, {-3.9913257893132794`, 
               49.84234842137346}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.559928443649376, 0.}, {10.440071556350627`, 
                1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{137.9888914389286, 150.22937155254266`}, {
               43.96398100030478, 49.84234842137346}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.559928443649376`, 0.}, {11.440071556350627`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{151.2713678281771, 163.51184794179116`}, {
               33.30724615816742, 49.84234842137346}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.559928443649376`, 0.}, {12.440071556350627`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{164.55384421742562`, 
               176.7943243310397}, {-14.648060631450619`, 49.84234842137346}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.559928443649376`, 0.}, {13.440071556350627`, 
                18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{177.83632060667412`, 
               190.0768007202882}, {-46.61826515786265, 49.84234842137346}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.3023255813953488, 0.}, {13.702826475849731`, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5599284436493739, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5599284436493739, 
                0.}]}], 
             LineBox[{{13.440071556350626`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {13.440071556350626`, 
                0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, 
            StyleBox[{}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3023255813953488, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7397223737253265`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"93d9edaa-ed97-4e86-ac3e-a3ce587343be"]
}, Open  ]],

Cell["variable length images", "Text",
 CellChangeTimes->{{3.739722799260871*^9, 
  3.739722804453474*^9}},ExpressionUUID->"2cb57278-3539-4a65-926b-\
77f4f3d723a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNetTrained", "[", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
l44O6uylo4MpoIOzYC8dHdTZS0cHdfbS0cEU0MFZsJeODurspaODOnvp6GAK
4iftuqcCPeylo4M6e+nooM5eOjoIiOylo4M6e+nooM5eOjoIiOylo4M6e+no
oM5eOjoIiOylo4M6e+nooM5eOjoIiOylo4M6e+nooM5eOjoIiOylo4M6e+no
oM5eOjoIiOylo4M6e+nooM5eOjqIa7j7r59TvoybKXvp6KDOXjo6qLOXjg4m
6HA47Ha7eH273cZPmshvmQV76eigzl46Oiiyl44O6uylm3sHV6vV/f19uBLa
F081c5+Z0Xm27aWjgzp76eigyF46Oqizl27WHQxDv/hZhOF6aF+4HoaEMYgz
+twle+nooM5eOjoospeODurspZt1B4vnGm27nj576eigzl46Oiiyl44O6uyl
u40OHg4HOkgH6eC4mbKXjg7q7KWjg6nJe7darYrrQukgHaSDOnvp6KDOXjo6
mJp8+2D+IfVv5Y2Gs2AvHR3U2UtHB0X20tFBnb10s+7gW1a9+/v7MBLMwxci
GIaH3qkaxF46Oqizl44Oiuylo4M6e+nm3sG37IiJ4lES2+32cDgYp2coe+no
oM5eOjoospeODurspZtdB/eZ4vU23unU2UtHB3X20tFBkb10dFBnL93sOviY
KV5v451Onb10dFBnLx0dFNlLRwd19tLNroPxzGnF622806mzl44O6uylo4Mi
e+nooM5eutl18PbYS0cHdfbS0UGRvXR0UGcv3a12kO2DdJAOiuylo4M6e+no
YGrW63Vj77bbLdsH6SAdFNlLRwd19tLRwdTEIwdD9fJbQhbjcfR0kA7SQZG9
dHRQZy8dHUzNbrcLvQvV22w2h8MhDgPjyWRYL0oH6aDIXjo6qLOXjg4mKB8A
5qcYLQ4PZ8FeOjqos5eODorspaODOnvp5t7Bt8In8AZ/+tOf5nUymTc6SAfp
IB2U2UtHB1MTkrfZbOIH0IcrcUgY/g1ldE/aAPbS0UGdvXR0UGQvHR3U2Us3
6w5WwlfJonvqVPbS0UGdvXR0UGQvHR3U2Us36w7G3lVWhIYmxj66pmooe+no
oM5eOjoospeODurspZt1B9vWf8aB4QdPzGj20tFBnb10dFBkLx0d1NlLN+sO
ttnv9zPaa9ReOjqos5eODorspaODOnvpbqyDYYQYRoLxKEL3tKjspaODOnvp
6KDIXjo6qLOX7jY6GA+ij59NH48iZL0oHaSDInvp6KDOXjo6mKD9fp8fMRH3
HQ1BnNHJZN7oIB2kg3RQZi8dHUxHPgCMq0Djv8HsDqJ/o4N0kA7SQZm9dHQw
BcUB4P39fT4AjB10T90Y9tLRQZ29dHRQZC8dHdTZSze7Dsah33fffRdquNvt
8gEgHaSDdHDcTNlLRwd19tLRwRTkHVyv13SQDtJBOtjIXjo6qLOXbnYdjMcG
rlareP60cCUODOkgHaSD42bKXjo6qLOXjg6mIwwDi4cKxsMlgnntKRrZS0cH
dfbS0UGRvXR0UGcv3Uw7mIvDw8qRg3zeBB2kgzp76eigzl46OpiyyvAwlNE9
RSp76eigzl46Oiiyl44O6uylu5kOHjLF4eEUj/ry9Kns6aXpzofn1/G/w146
Oqizl44Oiuylo4M6e+lupoOrTP7lNKtGX58fSuUreI/gKX/F68PZS0cHdfbS
0UGRvXR0UGcv3c108Cr7i4bANfftPZDFe95L2BLMXvbS0UGdvXR0UGQvHR3U
2UtHBzu01u09g6V7ajcMYC8dHdTZS0cHRfbS0UGdvXR0sF026Ht6eqhvBawO
By8aENpLRwd19tLRQZG9dHRQZy8dHWyX7QeT5y4b8h2/qm8QvGATob10dFBn
Lx0dFNlLRwd19tLdTAe3mav+ivPKz4Ed/KWTvXTdl+6Jb2MvXfdl3EwF9tJ1
X8bNlL103ZdxM2UvXfdl3EwF9tJ1X8bNlL103Zfuib9qdNo4zxiTx471on3s
pWM8qLOXjvGgzl46xoMpeHx8vPa4r1Wpg+wn08VeOjqos5eODurspaODKYjn
T1uv11cfGHbFjuMmethLRwd19tLRQZ29dHQwBbvdLkQwnkr0ygPDrHt53rK9
Zs6t4zj6TvbS0UGdvXR0UGcvHR1MRyhgPJXolQeGMYUN51Qr38d51arspaOD
Onvp6KDOXjo6mJSQv3ge0Tgw3Ne4J1BlLx0d1NlLRwdF9tLRQZ29dPPtYLTb
7b799tu4mrTCPWkqe+nooM5eOjoospeODurspZt1B+O2wjgkXNe4p05lLx0d
1NlLRwdF9tLRQZ29dDPt4OFw2Gw2H7fv6DXZS0cHdfbS0UGRvXR0UGcv3Rw7
GIaBq9XqQ3YZ/Qj20tFBnb10dFBkLx0d1NlLN7sO3swwMGcvHR3U2UtHB0X2
0tFBnb10s+vgzQwDc/bS0UGdvXR0UGQvHR3U2Us3uw7ezDAwZy8dHdTZS0cH
RfbS0UGdvXSz6+DtsZeODurspaODInvp6KDOXjo6aGcvHR3U2UtHB0X20tFB
nb10dNDOXjo6qLOXjg6K7KWjgzp76eignb10dFBnLx0dFNlLRwd19tLRQTt7
6eigzl46Oiiyl44O6uylo4N29tLRQZ29dHRQZC8dHdTZS0cH7eylo4M6e+no
oMheOjqos5eODtrZS0cHdfbS0UGRvXR0UGcvHR20s5eODurspaODInvp6KDO
Xjo6aGcvHR3U2UtHB0X20tFBnb10dNDOXjo6qLOXjg6K7KWjgzp76eignb10
dFBnLx0dFNlLRwd19tLRQTt76eigzl46Oiiyl44O6uylo4N29tLRQZ29dHRQ
ZC8dHdTZS0cH7eylo4M6e+nooMheOjqos5eODtrZS0cHdfbS0UGRvXR0UGcv
HR20s5eODurspaODInvp6KDOXjo6aGcvHR3U2UtHB0X20tFBnb10dNDOXjo6
qLOXjg6K7KWjgzp76eignb10dFBnLx0dFNlLRwd19tLRQTt76eigzl46Oiiy
l44O6uylo4N29tLRQZ29dHRQZC8dHdTZS0cH7eylo4M6e+nooMheOjqos5eO
DtrZS0cHdfbS0UGRvXR0UGcvHR20s5eODurspaODInvp6KDOXjo6aGcvHR3U
2UtHB0X20tFBnb10dNDOXjo6qLOXjg6K7KWjgzp76eignb10dFBnLx0dFNlL
Rwd19tLRQTt76eigzl46Oiiyl44O6uylo4N29tLRQZ29dHRQZC8dHdTZS0cH
7eylo4M6e+nooMheOjqos5eODtrZS0cHdfbS0UGRvXR0UGcvHR20s5eODurs
paODInvp6KDOXjo6aGcvHR3U2UtHB0X20tFBnb10dNDOXjo6qLOXjg6K7KWj
gzp76eignb10dFBnLx0dFNlLRwd19tLRQTt76eigzl46Oiiyl44O6uylo4N2
9tLRQZ29dHRQZC8dHdTZS0cH7eylo4M6e+nooMheOjqos5eODtrZS0cHdfbS
0UGRvXR0UGcvHR0c7+Xp09HD8+v4h7GXjg7q7KWjgyJ76eigzl46OjjSewRP
+SteH85eOjqos5eODorspaODOnvp6OAor88PpfK9l/DpZdxj2UtHB3X20tFB
kb10dFBnLx0dHOM9g6Xu1W4YwF46Oqizl44Oiuylo4M6e+no4BjV4eBFA0J7
6eigzl46Oiiyl44O6uylo4Nj1DcIXrCJ0F46Oqizl44Oiuylo4M6e+no4BgD
O/hLJ3vpui/dE9/GXrruy7iZCuyl676Mmyl76bov42bKXrruy7iZCuyl676M
myl76bov3RP/IclJ0qTrRQEAmJlJ95MBAGBupjxuAgCA+ZnuOHoAAOYoWxc6
wXnVAAAAAAAAAAAAAODsuCWycSvk8b557qx6/uSqmlnOUMMOU3EWy3Mz5iib
+iGrH6r7mbqhHcUKW/37Xo3zmevKTOkT/fr8lNQMjp4R3IDTs9/wtJ/ummU2
im7iCMz6TJz6cfHBpuYOFjRM/nyK0OsmXocl2UuwOEe1G7p+MqGndfyM4CZk
782Hh4YFYbZ0fLiFd+5tLH+qc/H+9dNL5ejSUYsXOvgxbuN1WNB0aLP4fKX1
tF4wI7gJ8b35XF8Shjsenl9K79zimoPCd8cXUWm1QlpvdmnpWrulsLoujdkp
5+r4VfnGyky0z0LpwJyX9Dv40vzSm/as9NfW1cHsTfSUj/ATnoszqevFtd7F
g6JTWv3YOyPdL7PkF4DodXwJ1IYE4bk9LmWPz2n22j19SxxFll/V5Vwm8fo+
Gt7B0iwkMz+lSYxPULmO1ests1C/K435a32m2l9dN9XBwp0Jz0VBfO10LPOr
r9jzN6c1g30z0t/BpBeA6HV6b1ZCeFzK5u/crrOe1lelJ3YquMEdrN6bygqt
wt/1lMHT+tGG+9tmofGuNN62bR1sfXXdVgfP9yU8F2XFUVBt1jpW2ic3g70z
0tPBlBeA6FUqXeNgI7u3/kI4v6mTXxYN7WB9e1kiW9DOk1FtQf5EHG/smIVk
5+5tgv+xJPfaK2rYX7RtYJvwXDQrzFtLAOJ3JNvBk8YZuaEXIRqdlzzlEUN8
FksdbNtBP/mXwdCla/OO/CnM0KlYhTHgW/7kFHPWMQvN/6VJYe4W0cGO8eCc
O3hSWcNYfB1mmz+T7+BJaUZu6EWIRsX35il25XVuHePB89gk6ZfBmA4mNPlF
503ylZ28w/Sen7bOWWA86LKEDhYnvbrCPen1onWdS4TZvgjRqPTejEvZwvJU
3j6Y9MtAWbrW9vxJaPqLTvsV1iY++9+2tIFpftsHByyCEpqZmhvrYMvsnFcd
VVYiJfsW652RwYuLlOYOivJr4Lgao7xnobK/aNIvg6bXeXnbduN8n+egviHc
J05q5a973KhR+49K8yzMbn/RjldX9/OYlhvrYGWZENV2WT7N72m7W+sGbKee
Gel5mSW/AESvynuz8oIo39uyS1XyL4Pm5U/laMjGUVJK2waPmgc8jbd2zcJ5
w80sjh/seHX1PI8JubkOvqtsia7HpLDEKC5dKl3065yRzpdZ8gtAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEje
/wPevLm1
      "], {{0, 400}, {600, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSize->Automatic,
    ImageSizeRaw->{600, 400},
    PlotRange->{{0, 600}, {0, 400}}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<TopDecodings\>\"", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.739722494578232*^9, 3.7397225162265964`*^9}, {
  3.739722549542082*^9, 3.73972256903347*^9}, {3.739722609627473*^9, 
  3.739722647910715*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"9c8c5ca1-40d4-4869-91bc-ff28942d37bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "4", ",", "3", ",", "4", ",", "6", ",", "17", ",", "16", ",", "19", ",", 
     "20", ",", "19", ",", "20", ",", "10", ",", "9", ",", "19", ",", "16", 
     ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", "3", ",", "4", ",", "6", ",", "17", ",", "16", ",", "19", ",", 
     "20", ",", "19", ",", "20", ",", "10", ",", "9", ",", "19", ",", "16", 
     ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", "3", ",", "4", ",", "6", ",", "17", ",", "16", ",", "20", ",", 
     "19", ",", "20", ",", "10", ",", "9", ",", "19", ",", "16", ",", "15"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", "3", ",", "4", ",", "6", ",", "17", ",", "16", ",", "20", ",", 
     "19", ",", "20", ",", "10", ",", "9", ",", "19", ",", "16", ",", "15"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", "5", ",", "4", ",", "6", ",", "17", ",", "16", ",", "19", ",", 
     "20", ",", "19", ",", "20", ",", "10", ",", "9", ",", "19", ",", "16", 
     ",", "15"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.739722641596376*^9, 3.739722648825148*^9}},
 CellLabel->"Out[62]=",ExpressionUUID->"3f57ac41-3cbe-4626-a9be-f5f3318d8540"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"BarChart", "[", "#", "]"}], "&"}], ",", "%"}], "]"}]], "Input",
 CellChangeTimes->{{3.739722658106206*^9, 3.7397226931835127`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"82155d8e-91e8-4a5b-9e7c-ab9c12a57afa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.27191413237924866`, 0.}, {15.430851795789184`, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
       Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.569148204210816, 0.}, {1.430851795789184, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{18.446603935691932`, 28.916087197406213`}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.569148204210816, 0.}, {2.430851795789184, 3.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{29.95808347304065, 40.42756673475493}, {
             33.307246158167416`, 49.84234842137344}}],
           StatusArea[#, 3]& ,
           TagBoxNote->"3"],
          StyleBox["3", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[3, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.569148204210816, 0.}, {3.430851795789184, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{41.46956301038936, 51.93904627210364}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.569148204210816, 0.}, {4.430851795789184, 6.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{52.98104254773808, 63.45052580945236}, {
             17.322143894961407`, 49.84234842137344}}],
           StatusArea[#, 6]& ,
           TagBoxNote->"6"],
          StyleBox["6", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[6, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{4.5691482042108165`, 0.}, {5.430851795789184, 17.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{64.49252208508679, 
             74.96200534680106}, {-41.289897736794, 49.842348421373444`}}],
           StatusArea[#, 17]& ,
           TagBoxNote->"17"],
          StyleBox["17", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[17, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{5.5691482042108165`, 0.}, {6.430851795789184, 16.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{76.00400162243551, 
             86.47348488414978}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{6.5691482042108165`, 0.}, {7.430851795789184, 19.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{87.51548115978423, 
             97.9849644214985}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{7.5691482042108165`, 0.}, {8.430851795789184, 20.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{99.02696069713292, 
             109.4964439588472}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{8.569148204210816, 0.}, {9.430851795789184, 19.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{110.53844023448164`, 
             121.00792349619591`}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{9.569148204210816, 0.}, {10.430851795789184`, 20.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{122.04991977183036`, 
             132.51940303354465`}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{10.569148204210816`, 0.}, {11.430851795789184`, 
              10.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{133.56139930917908`, 
             144.03088257089337`}, {-3.9913257893132936`, 
             49.842348421373444`}}],
           StatusArea[#, 10]& ,
           TagBoxNote->"10"],
          StyleBox["10", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[10, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{11.569148204210816`, 0.}, {12.430851795789184`, 
              9.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{145.0728788465278, 155.5423621082421}, {
             1.3370416317553833`, 49.842348421373444`}}],
           StatusArea[#, 9]& ,
           TagBoxNote->"9"],
          StyleBox["9", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[9, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{12.569148204210816`, 0.}, {13.430851795789184`, 
              19.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{156.5843583838765, 
             167.0538416455908}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{13.569148204210816`, 0.}, {14.430851795789184`, 
              16.}, "RoundingRadius" -> 0]},
            ImageSizeCache->{{168.0958379212252, 
             178.56532118293953`}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{14.569148204210816`, 0.}, {15.430851795789184`, 
              15.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{179.60731745857393`, 
             190.07680072028822`}, {-30.63316289465665, 49.842348421373444`}}],
           StatusArea[#, 15]& ,
           TagBoxNote->"15"],
          StyleBox["15", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.27191413237924866`, 0.}, {15.734030549057383`, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.569148204210816, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.569148204210816, 
              0.}]}], LineBox[{{15.430851795789184`, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {15.430851795789184`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.27191413237924866`, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.27191413237924866`, 0.}, {15.430851795789184`, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
       Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.569148204210816, 0.}, {1.430851795789184, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{18.446603935691932`, 28.916087197406213`}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.569148204210816, 0.}, {2.430851795789184, 3.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{29.95808347304065, 40.42756673475493}, {
             33.307246158167416`, 49.84234842137344}}],
           StatusArea[#, 3]& ,
           TagBoxNote->"3"],
          StyleBox["3", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[3, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.569148204210816, 0.}, {3.430851795789184, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{41.46956301038936, 51.93904627210364}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.569148204210816, 0.}, {4.430851795789184, 6.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{52.98104254773808, 63.45052580945236}, {
             17.322143894961407`, 49.84234842137344}}],
           StatusArea[#, 6]& ,
           TagBoxNote->"6"],
          StyleBox["6", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[6, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{4.5691482042108165`, 0.}, {5.430851795789184, 17.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{64.49252208508679, 
             74.96200534680106}, {-41.289897736794, 49.842348421373444`}}],
           StatusArea[#, 17]& ,
           TagBoxNote->"17"],
          StyleBox["17", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[17, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{5.5691482042108165`, 0.}, {6.430851795789184, 16.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{76.00400162243551, 
             86.47348488414978}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{6.5691482042108165`, 0.}, {7.430851795789184, 19.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{87.51548115978423, 
             97.9849644214985}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{7.5691482042108165`, 0.}, {8.430851795789184, 20.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{99.02696069713292, 
             109.4964439588472}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{8.569148204210816, 0.}, {9.430851795789184, 19.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{110.53844023448164`, 
             121.00792349619591`}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{9.569148204210816, 0.}, {10.430851795789184`, 20.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{122.04991977183036`, 
             132.51940303354465`}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{10.569148204210816`, 0.}, {11.430851795789184`, 
              10.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{133.56139930917908`, 
             144.03088257089337`}, {-3.9913257893132936`, 
             49.842348421373444`}}],
           StatusArea[#, 10]& ,
           TagBoxNote->"10"],
          StyleBox["10", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[10, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{11.569148204210816`, 0.}, {12.430851795789184`, 
              9.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{145.0728788465278, 155.5423621082421}, {
             1.3370416317553833`, 49.842348421373444`}}],
           StatusArea[#, 9]& ,
           TagBoxNote->"9"],
          StyleBox["9", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[9, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{12.569148204210816`, 0.}, {13.430851795789184`, 
              19.}, "RoundingRadius" -> 0]},
            ImageSizeCache->{{156.5843583838765, 
             167.0538416455908}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{13.569148204210816`, 0.}, {14.430851795789184`, 
              16.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{168.0958379212252, 
             178.56532118293953`}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{14.569148204210816`, 0.}, {15.430851795789184`, 
              15.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{179.60731745857393`, 
             190.07680072028822`}, {-30.63316289465665, 49.842348421373444`}}],
           StatusArea[#, 15]& ,
           TagBoxNote->"15"],
          StyleBox["15", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.27191413237924866`, 0.}, {15.734030549057383`, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.569148204210816, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.569148204210816, 
              0.}]}], LineBox[{{15.430851795789184`, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {15.430851795789184`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.27191413237924866`, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.2871198568872987, 0.}, {14.435461676069906`, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
       Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.564538323930095, 0.}, {1.435461676069905, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{18.446603935691932`, 29.738335735788258`}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.564538323930095, 0.}, {2.435461676069905, 3.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{30.780332011422697`, 42.07206381151903}, {
             33.307246158167416`, 49.84234842137344}}],
           StatusArea[#, 3]& ,
           TagBoxNote->"3"],
          StyleBox["3", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[3, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.564538323930095, 0.}, {3.435461676069905, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{43.11406008715346, 54.40579188724979}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.564538323930095, 0.}, {4.435461676069905, 6.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{55.447788162884216`, 66.73951996298055}, {
             17.3221438949614, 49.842348421373444`}}],
           StatusArea[#, 6]& ,
           TagBoxNote->"6"],
          StyleBox["6", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[6, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{4.564538323930095, 0.}, {5.435461676069905, 17.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{67.78151623861498, 
             79.07324803871131}, {-41.289897736794, 49.842348421373444`}}],
           StatusArea[#, 17]& ,
           TagBoxNote->"17"],
          StyleBox["17", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[17, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{5.564538323930095, 0.}, {6.435461676069905, 16.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{80.11524431434574, 
             91.40697611444207}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{6.564538323930095, 0.}, {7.435461676069905, 20.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{92.4489723900765, 
             103.74070419017283`}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{7.564538323930095, 0.}, {8.435461676069906, 19.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{104.78270046580728`, 
             116.07443226590361`}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{8.564538323930096, 0.}, {9.435461676069906, 20.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{117.11642854153806`, 
             128.40816034163439`}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{9.564538323930096, 0.}, {10.435461676069906`, 10.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{129.45015661726882`, 
             140.74188841736517`}, {-3.9913257893132936`, 
             49.842348421373444`}}],
           StatusArea[#, 10]& ,
           TagBoxNote->"10"],
          StyleBox["10", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[10, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{10.564538323930096`, 0.}, {11.435461676069906`, 
              9.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{141.78388469299958`, 153.0756164930959}, {
             1.3370416317553833`, 49.842348421373444`}}],
           StatusArea[#, 9]& ,
           TagBoxNote->"9"],
          StyleBox["9", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[9, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{11.564538323930096`, 0.}, {12.435461676069906`, 
              19.}, "RoundingRadius" -> 0]},
            ImageSizeCache->{{154.11761276873037`, 
             165.4093445688267}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{12.564538323930096`, 0.}, {13.435461676069906`, 
              16.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{166.4513408444611, 
             177.74307264455743`}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{13.564538323930096`, 0.}, {14.435461676069906`, 
              15.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{178.7850689201919, 
             190.07680072028822`}, {-30.63316289465665, 49.842348421373444`}}],
           StatusArea[#, 15]& ,
           TagBoxNote->"15"],
          StyleBox["15", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.2871198568872987, 0.}, {14.718428512453555`, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.564538323930095, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.564538323930095, 
              0.}]}], LineBox[{{14.435461676069902`, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {14.435461676069902`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.2871198568872987, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.2871198568872987, 0.}, {14.435461676069906`, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
       Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.564538323930095, 0.}, {1.435461676069905, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{18.446603935691932`, 29.738335735788258`}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.564538323930095, 0.}, {2.435461676069905, 3.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{30.780332011422697`, 42.07206381151903}, {
             33.307246158167416`, 49.84234842137344}}],
           StatusArea[#, 3]& ,
           TagBoxNote->"3"],
          StyleBox["3", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[3, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.564538323930095, 0.}, {3.435461676069905, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{43.11406008715346, 54.40579188724979}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.564538323930095, 0.}, {4.435461676069905, 6.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{55.447788162884216`, 66.73951996298055}, {
             17.3221438949614, 49.842348421373444`}}],
           StatusArea[#, 6]& ,
           TagBoxNote->"6"],
          StyleBox["6", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[6, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{4.564538323930095, 0.}, {5.435461676069905, 17.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{67.78151623861498, 
             79.07324803871131}, {-41.289897736794, 49.842348421373444`}}],
           StatusArea[#, 17]& ,
           TagBoxNote->"17"],
          StyleBox["17", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[17, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{5.564538323930095, 0.}, {6.435461676069905, 16.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{80.11524431434574, 
             91.40697611444207}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{6.564538323930095, 0.}, {7.435461676069905, 20.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{92.4489723900765, 
             103.74070419017283`}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{7.564538323930095, 0.}, {8.435461676069906, 19.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{104.78270046580728`, 
             116.07443226590361`}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{8.564538323930096, 0.}, {9.435461676069906, 20.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{117.11642854153806`, 
             128.40816034163439`}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{9.564538323930096, 0.}, {10.435461676069906`, 10.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{129.45015661726882`, 
             140.74188841736517`}, {-3.9913257893132936`, 
             49.842348421373444`}}],
           StatusArea[#, 10]& ,
           TagBoxNote->"10"],
          StyleBox["10", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[10, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{10.564538323930096`, 0.}, {11.435461676069906`, 
              9.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{141.78388469299958`, 153.0756164930959}, {
             1.3370416317553833`, 49.842348421373444`}}],
           StatusArea[#, 9]& ,
           TagBoxNote->"9"],
          StyleBox["9", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[9, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{11.564538323930096`, 0.}, {12.435461676069906`, 
              19.}, "RoundingRadius" -> 0]},
            ImageSizeCache->{{154.11761276873037`, 
             165.4093445688267}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{12.564538323930096`, 0.}, {13.435461676069906`, 
              16.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{166.4513408444611, 
             177.74307264455743`}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{13.564538323930096`, 0.}, {14.435461676069906`, 
              15.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{178.7850689201919, 
             190.07680072028822`}, {-30.63316289465665, 49.842348421373444`}}],
           StatusArea[#, 15]& ,
           TagBoxNote->"15"],
          StyleBox["15", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.2871198568872987, 0.}, {14.718428512453555`, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.564538323930095, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.564538323930095, 
              0.}]}], LineBox[{{14.435461676069902`, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {14.435461676069902`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.2871198568872987, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}], ",", 
   GraphicsBox[{
     {Opacity[0], 
      PointBox[{{0.27191413237924866`, 0.}, {15.430851795789184`, 0.}}]}, {{}, 
      {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
       Thickness[Small]}], 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{0.569148204210816, 0.}, {1.430851795789184, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{18.446603935691932`, 28.916087197406213`}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{1.569148204210816, 0.}, {2.430851795789184, 5.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{29.95808347304065, 40.42756673475493}, {
             22.650511316030073`, 49.84234842137344}}],
           StatusArea[#, 5]& ,
           TagBoxNote->"5"],
          StyleBox["5", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[5, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{2.569148204210816, 0.}, {3.430851795789184, 4.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{41.46956301038936, 51.93904627210364}, {
             27.978878737098746`, 49.84234842137344}}],
           StatusArea[#, 4]& ,
           TagBoxNote->"4"],
          StyleBox["4", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[4, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{3.569148204210816, 0.}, {4.430851795789184, 6.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{52.98104254773808, 63.45052580945236}, {
             17.322143894961407`, 49.84234842137344}}],
           StatusArea[#, 6]& ,
           TagBoxNote->"6"],
          StyleBox["6", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[6, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{4.5691482042108165`, 0.}, {5.430851795789184, 17.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{64.49252208508679, 
             74.96200534680106}, {-41.289897736794, 49.842348421373444`}}],
           StatusArea[#, 17]& ,
           TagBoxNote->"17"],
          StyleBox["17", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[17, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{5.5691482042108165`, 0.}, {6.430851795789184, 16.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{76.00400162243551, 
             86.47348488414978}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{6.5691482042108165`, 0.}, {7.430851795789184, 19.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{87.51548115978423, 
             97.9849644214985}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{7.5691482042108165`, 0.}, {8.430851795789184, 20.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{99.02696069713292, 
             109.4964439588472}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{8.569148204210816, 0.}, {9.430851795789184, 19.}, 
              "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{110.53844023448164`, 
             121.00792349619591`}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{9.569148204210816, 0.}, {10.430851795789184`, 20.},
               "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{122.04991977183036`, 
             132.51940303354465`}, {-57.27500000000002, 49.842348421373444`}}],
           StatusArea[#, 20]& ,
           TagBoxNote->"20"],
          StyleBox["20", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[20, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{10.569148204210816`, 0.}, {11.430851795789184`, 
              10.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{133.56139930917908`, 
             144.03088257089337`}, {-3.9913257893132936`, 
             49.842348421373444`}}],
           StatusArea[#, 10]& ,
           TagBoxNote->"10"],
          StyleBox["10", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[10, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{11.569148204210816`, 0.}, {12.430851795789184`, 
              9.}, "RoundingRadius" -> 0]},
            ImageSizeCache->{{145.0728788465278, 155.5423621082421}, {
             1.3370416317553833`, 49.842348421373444`}}],
           StatusArea[#, 9]& ,
           TagBoxNote->"9"],
          StyleBox["9", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[9, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{12.569148204210816`, 0.}, {13.430851795789184`, 
              19.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{156.5843583838765, 
             167.0538416455908}, {-51.94663257893134, 49.842348421373444`}}],
           StatusArea[#, 19]& ,
           TagBoxNote->"19"],
          StyleBox["19", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[19, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{13.569148204210816`, 0.}, {14.430851795789184`, 
              16.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{168.0958379212252, 
             178.56532118293953`}, {-35.96153031572533, 49.842348421373444`}}],
           StatusArea[#, 16]& ,
           TagBoxNote->"16"],
          StyleBox["16", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[16, {}], "Tooltip"]& ]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
        Thickness[Small]}], 
        TagBox[
         TooltipBox[
          TagBox[
           DynamicBox[{
             FEPrivate`If[
              CurrentValue["MouseOver"], 
              EdgeForm[{
                GrayLevel[0.5], 
                AbsoluteThickness[1.5], 
                Opacity[0.66]}], {}, {}], 
             
             RectangleBox[{14.569148204210816`, 0.}, {15.430851795789184`, 
              15.}, "RoundingRadius" -> 0]},
            
            ImageSizeCache->{{179.60731745857393`, 
             190.07680072028822`}, {-30.63316289465665, 49.842348421373444`}}],
           StatusArea[#, 15]& ,
           TagBoxNote->"15"],
          StyleBox["15", {}, StripOnInput -> False]],
         Annotation[#, 
          Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
     StyleBox[
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.27191413237924866`, 0.}, {15.734030549057383`, 0.}}], 
         StyleBox[{}, "GraphicsLabel",
          StripOnInput->False]}, 
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{0.569148204210816, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {0.569148204210816, 
              0.}]}], LineBox[{{15.430851795789184`, 0.}, 
             Offset[{-1.102182119232618*^-15, -6.}, {15.430851795789184`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, "GraphicsTicks",
         StripOnInput->False]},
       Antialiasing->False], "GraphicsAxes",
      StripOnInput->False]},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{False, True},
    AxesLabel->{None, None},
    AxesOrigin->{0.27191413237924866`, 0.},
    CoordinatesToolOptions:>{"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )},
    DisplayFunction->Identity,
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{All, All}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{None, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.7397226944122334`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"aafc59f0-a4f3-46fa-b8fe-67a4acd1d2a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{"{", 
   RowBox[{
   "4", ",", "3", ",", "4", ",", "6", ",", "17", ",", "16", ",", "19", ",", 
    "20", ",", "19", ",", "20", ",", "10", ",", "9", ",", "19", ",", "16", 
    ",", "15"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7397225787176485`*^9, 3.7397225850110283`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"86cfada3-0bf7-4e72-bcdd-f4ab257dfdb0"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.27191413237924866`, 0.}, {15.430851795789184`, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
     Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.569148204210816, 0.}, {1.430851795789184, 4.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{22.17515417931879, 43.45398078621428}, {
           66.40357080561022, 111.49250552833503`}}],
         StatusArea[#, 4]& ,
         TagBoxNote->"4"],
        StyleBox["4", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[4, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{1.569148204210816, 0.}, {2.430851795789184, 3.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{46.23078863353621, 67.5096152404317}, {
           77.53830448629142, 111.49250552833503`}}],
         StatusArea[#, 3]& ,
         TagBoxNote->"3"],
        StyleBox["3", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[3, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{2.569148204210816, 0.}, {3.430851795789184, 4.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{70.28642308775362, 91.5652496946491}, {
           66.40357080561022, 111.49250552833503`}}],
         StatusArea[#, 4]& ,
         TagBoxNote->"4"],
        StyleBox["4", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[4, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{3.569148204210816, 0.}, {4.430851795789184, 6.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{94.34205754197103, 115.62088414886652`}, {
           44.13410344424781, 111.49250552833504`}}],
         StatusArea[#, 6]& ,
         TagBoxNote->"6"],
        StyleBox["6", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{4.5691482042108165`, 0.}, {5.430851795789184, 17.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{118.39769199618847`, 
           139.67651860308396`}, {-78.34796704324545, 111.49250552833503`}}],
         StatusArea[#, 17]& ,
         TagBoxNote->"17"],
        StyleBox["17", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[17, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{5.5691482042108165`, 0.}, {6.430851795789184, 16.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{142.45332645040588`, 
           163.7321530573014}, {-67.21323336256425, 111.49250552833503`}}],
         StatusArea[#, 16]& ,
         TagBoxNote->"16"],
        StyleBox["16", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[16, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{6.5691482042108165`, 0.}, {7.430851795789184, 19.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{166.5089609046233, 
           187.7877875115188}, {-100.61743440460786`, 111.49250552833503`}}],
         StatusArea[#, 19]& ,
         TagBoxNote->"19"],
        StyleBox["19", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[19, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{7.5691482042108165`, 0.}, {8.430851795789184, 20.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{190.56459535884073`, 
           211.8434219657362}, {-111.75216808528909`, 111.49250552833503`}}],
         StatusArea[#, 20]& ,
         TagBoxNote->"20"],
        StyleBox["20", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[20, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{8.569148204210816, 0.}, {9.430851795789184, 19.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{214.62022981305813`, 
           235.89905641995364`}, {-100.61743440460786`, 111.49250552833503`}}],
         StatusArea[#, 19]& ,
         TagBoxNote->"19"],
        StyleBox["19", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[19, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{9.569148204210816, 0.}, {10.430851795789184`, 20.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{238.67586426727553`, 
           259.9546908741711}, {-111.75216808528909`, 111.49250552833503`}}],
         StatusArea[#, 20]& ,
         TagBoxNote->"20"],
        StyleBox["20", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[20, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{10.569148204210816`, 0.}, {11.430851795789184`, 10.},
             "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{262.7314987214929, 
           284.0103253283885}, {-0.40483127847701894`, 111.49250552833503`}}],
         StatusArea[#, 10]& ,
         TagBoxNote->"10"],
        StyleBox["10", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[10, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{11.569148204210816`, 0.}, {12.430851795789184`, 9.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{286.7871331757103, 308.06595978260594`}, {
           10.72990240220419, 111.49250552833503`}}],
         StatusArea[#, 9]& ,
         TagBoxNote->"9"],
        StyleBox["9", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[9, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{12.569148204210816`, 0.}, {13.430851795789184`, 19.},
             "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{310.84276762992783`, 
           332.1215942368234}, {-100.61743440460786`, 111.49250552833503`}}],
         StatusArea[#, 19]& ,
         TagBoxNote->"19"],
        StyleBox["19", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[19, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{13.569148204210816`, 0.}, {14.430851795789184`, 16.},
             "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{334.89840208414523`, 
           356.1772286910408}, {-67.21323336256425, 111.49250552833503`}}],
         StatusArea[#, 16]& ,
         TagBoxNote->"16"],
        StyleBox["16", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[16, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{14.569148204210816`, 0.}, {15.430851795789184`, 15.},
             "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{358.95403653836263`, 
           380.2328631452582}, {-56.07849968188307, 111.49250552833502`}}],
         StatusArea[#, 15]& ,
         TagBoxNote->"15"],
        StyleBox["15", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[15, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0.27191413237924866`, 0.}, {15.734030549057383`, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.569148204210816, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.569148204210816, 0.}]}], 
         LineBox[{{15.430851795789184`, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {15.430851795789184`, 
            0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.27191413237924866`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.739722585593466*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"fb0112f2-f938-4a31-9fd4-1c8c6e1e8631"]
}, Open  ]]
},
WindowSize->{796, 771},
WindowMargins->{{Automatic, -10}, {Automatic, 0}},
Magnification:>1.1 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 439, 9, 32, "Input",ExpressionUUID->"dcec3747-edc5-4019-896d-e03e162d923c"],
Cell[1022, 33, 41181, 839, 95, "Output",ExpressionUUID->"a58738c6-eab5-4320-8112-be557761c10d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42240, 877, 411, 8, 55, "Input",ExpressionUUID->"0ed7d521-01b5-41f3-96b8-5556756158b4"],
Cell[42654, 887, 320, 6, 55, "Output",ExpressionUUID->"5573f78a-37ae-4921-a448-e01cba0c09be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43011, 898, 2456, 52, 341, "Input",ExpressionUUID->"6179f547-abdf-43ba-8635-d4b9fe148553"],
Cell[45470, 952, 43648, 885, 95, "Output",ExpressionUUID->"550e7511-f5a6-4360-9b4f-62073c14d464"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89155, 1842, 458, 9, 55, "Input",ExpressionUUID->"406b5950-0236-4da4-822f-6850d3b6e419"],
Cell[89616, 1853, 440966, 8966, 95, "Output",ExpressionUUID->"4b66a52d-b7c9-4386-b2f4-ca6ed6ecb7a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[530619, 10824, 354, 7, 30, "Input",ExpressionUUID->"cb8286a2-8840-4446-b2a5-abe7799d0399"],
Cell[530976, 10833, 173087, 3279, 96, "Output",ExpressionUUID->"464f8896-e38b-4eeb-93f3-349a3f92a579"]
}, Open  ]],
Cell[CellGroupData[{
Cell[704100, 14117, 681, 16, 52, "Input",ExpressionUUID->"61de63bb-f346-4bd1-be19-65a28ef8bd9b"],
Cell[704784, 14135, 93588, 1894, 96, "Output",ExpressionUUID->"306670b1-bfb2-4ee1-be9e-15518c5e6eeb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[798409, 16034, 389, 8, 30, "Input",ExpressionUUID->"63104c4d-cdec-4ce8-ac2a-23805560cf83"],
Cell[798801, 16044, 96274, 1946, 96, "Output",ExpressionUUID->"fbeddbb5-c21a-4e0b-be8c-353299154761"]
}, Open  ]],
Cell[CellGroupData[{
Cell[895112, 17995, 438, 9, 30, "Input",ExpressionUUID->"d21d311a-fa60-4ce6-acd6-40509e86fea0"],
Cell[895553, 18006, 98856, 1998, 96, "Output",ExpressionUUID->"a69ee1af-37aa-4dec-9554-6380cb7dc7a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[994446, 20009, 442, 9, 30, "Input",ExpressionUUID->"585257b9-8351-42eb-b74e-ec2c5b3a6bfb"],
Cell[994891, 20020, 101540, 2052, 96, "Output",ExpressionUUID->"f6471c6e-10d8-4364-80a2-9274b353ee45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1096468, 22077, 489, 10, 30, "Input",ExpressionUUID->"5985fdff-1e24-4b06-acc1-22d7334a39b5"],
Cell[1096960, 22089, 104236, 2107, 96, "Output",ExpressionUUID->"c6e7d57c-62c0-4d5a-b234-26cdf77b1c4e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1201233, 24201, 490, 10, 30, "Input",ExpressionUUID->"71714920-5cfd-42e4-bb4b-f7d40221c53c"],
Cell[1201726, 24213, 106876, 2159, 96, "Output",ExpressionUUID->"5e9a80d0-9331-43b4-9230-1443477493f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1308639, 26377, 495, 10, 30, "Input",ExpressionUUID->"3c87d700-803c-4c81-acdc-4c8acb256078"],
Cell[1309137, 26389, 109562, 2213, 96, "Output",ExpressionUUID->"66fe4011-a81b-4f45-9ffb-76354765585e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1418736, 28607, 442, 9, 30, "Input",ExpressionUUID->"cef161da-39fd-4485-86b8-7845df1f07cb"],
Cell[1419181, 28618, 112135, 2262, 96, "Output",ExpressionUUID->"7d545089-6df7-44e2-8f73-1764eca23979"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1531353, 30885, 488, 10, 30, "Input",ExpressionUUID->"ef0458aa-31c5-4ebb-b079-3659a26333ea"],
Cell[1531844, 30897, 114792, 2315, 96, "Output",ExpressionUUID->"a62f1bfe-74ff-46cd-992c-c0be10e87372"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1646673, 33217, 440, 9, 30, "Input",ExpressionUUID->"4026c716-cb33-4cf1-bbf7-e447d5e7e207"],
Cell[1647116, 33228, 117516, 2371, 96, "Output",ExpressionUUID->"78a12c22-1d43-4ad9-8ebc-1703f9c5f356"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1764669, 35604, 438, 9, 30, "Input",ExpressionUUID->"fad25924-67aa-45a5-8acc-300def0a160f"],
Cell[1765110, 35615, 120132, 2422, 96, "Output",ExpressionUUID->"e3818929-0cce-43f5-887a-6175f9bb4288"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1885279, 38042, 464, 9, 30, "Input",ExpressionUUID->"7d6b3340-aa00-4689-9ca8-2cf52cfb9a59"],
Cell[1885746, 38053, 122773, 2474, 96, "Output",ExpressionUUID->"e044ea0b-3810-482b-a87f-ee40ffb064cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2008556, 40532, 441, 9, 30, "Input",ExpressionUUID->"130e9531-b97f-4774-b31f-27afc9223c59"],
Cell[2009000, 40543, 125477, 2529, 96, "Output",ExpressionUUID->"0e92a704-2040-4eb8-b4fe-a9aaf097e76f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2134514, 43077, 640, 11, 30, "Input",ExpressionUUID->"a7853ad9-ced4-4b0d-b8a8-a12b53ce11eb"],
Cell[2135157, 43090, 74413, 1411, 96, "Output",ExpressionUUID->"65ae0dbe-0e4a-4892-a8eb-bc27970f7a69"]
}, Open  ]],
Cell[2209585, 44504, 403, 9, 30, "Input",ExpressionUUID->"3635ed9d-90c6-450b-8ea7-eaabfcbf54b4"],
Cell[CellGroupData[{
Cell[2210013, 44517, 591, 14, 30, "Input",ExpressionUUID->"e85c3804-5308-4667-9d6f-d56b7fe4929a"],
Cell[2210607, 44533, 155, 2, 35, "Output",ExpressionUUID->"6426a8c2-e446-467e-96dc-9dc5f283ff60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2210799, 44540, 309, 6, 30, "Input",ExpressionUUID->"54b9e02e-4a2a-4457-a150-0d1debbe907b"],
Cell[2211111, 44548, 244, 3, 35, "Output",ExpressionUUID->"9cb85ade-1de4-4411-a33b-e3860a3ea32b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2211392, 44556, 144, 3, 30, "Input",ExpressionUUID->"e070dd6a-371c-40c5-a4f5-fdce87c091d9"],
Cell[2211539, 44561, 159, 3, 35, "Output",ExpressionUUID->"fdee0f60-aebd-41d9-aada-fad0fd0ef8b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2211735, 44569, 311, 7, 30, "Input",ExpressionUUID->"2543a9e4-02ab-41d1-a8bc-33ff30a21a79"],
Cell[2212049, 44578, 8046, 209, 178, "Output",ExpressionUUID->"35399191-6d08-4e24-ac6b-b99b4130f1f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2220132, 44792, 308, 7, 30, "Input",ExpressionUUID->"50c6b4aa-a51d-4c1e-b14b-0c8263194d44"],
Cell[2220443, 44801, 8357, 216, 171, "Output",ExpressionUUID->"24a41f64-47f5-4a02-bae4-4dd855268f3d"]
}, Open  ]],
Cell[2228815, 45020, 682, 17, 30, "Input",ExpressionUUID->"c619a705-fbce-4a1b-92b0-efc5a82c196c"],
Cell[CellGroupData[{
Cell[2229522, 45041, 362, 8, 30, "Input",ExpressionUUID->"0482bcae-c1a5-4dc6-9e1e-575f9e3ada79"],
Cell[2229887, 45051, 222, 4, 35, "Output",ExpressionUUID->"5bcd7c45-f7c2-40a9-955f-404844bb0380"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2230146, 45060, 179, 3, 30, "Input",ExpressionUUID->"48b0db39-9768-4580-bed0-d6992799617c"],
Cell[2230328, 45065, 8545, 221, 171, "Output",ExpressionUUID->"ac7ea63b-b49f-4f01-ac48-dd6392bb01d0"]
}, Open  ]],
Cell[2238888, 45289, 1334, 30, 94, "Input",ExpressionUUID->"e36ddc51-ff0a-4a57-be3a-8090dfdf0efe"],
Cell[CellGroupData[{
Cell[2240247, 45323, 273, 5, 30, "Input",ExpressionUUID->"ba54f65f-9acb-46a2-a481-ff22b53d76e5"],
Cell[2240523, 45330, 2753, 74, 449, "Output",ExpressionUUID->"e9438264-7a2a-4ef2-873e-1ddd6af517f9"]
}, Open  ]],
Cell[2243291, 45407, 397, 9, 30, "Input",ExpressionUUID->"6094b7ad-5beb-474a-8c95-3c7cea3e30bd"],
Cell[CellGroupData[{
Cell[2243713, 45420, 769, 12, 30, "Input",ExpressionUUID->"c2c6c75e-a14f-4858-98cb-ce736e067e86"],
Cell[2244485, 45434, 72569, 1371, 96, "Output",ExpressionUUID->"8de04d5a-477f-4359-9694-98d3a519ed71"]
}, Open  ]],
Cell[2317069, 46808, 154, 3, 30, "Input",ExpressionUUID->"689c0b34-7992-4c36-9d19-5c29e53b3225"],
Cell[CellGroupData[{
Cell[2317248, 46815, 210, 3, 30, "Input",ExpressionUUID->"c1b37442-fc33-4c36-b91b-073325921a4f"],
Cell[2317461, 46820, 72569, 1371, 96, "Output",ExpressionUUID->"2a496f61-b561-4d2e-83ff-82791519134f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2390067, 48196, 461, 10, 52, "Input",ExpressionUUID->"29507aea-3559-46b0-a1d9-bef1b68fe4ef"],
Cell[2390531, 48208, 704, 15, 57, "Output",ExpressionUUID->"f397ade4-8d73-4b37-bfd7-bd874292befd"],
Cell[2391238, 48225, 606, 15, 35, "Output",ExpressionUUID->"71b83444-09b6-4223-8253-1c82bf8faeb4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2391881, 48245, 250957, 4133, 1184, "Input",ExpressionUUID->"e51b76bd-1219-463b-968f-d1128cc90d37"],
Cell[2642841, 52380, 472, 10, 35, "Output",ExpressionUUID->"1c1d5d7b-7e63-488b-9fd8-d1e936f1ef20"]
}, Open  ]],
Cell[2643328, 52393, 1356, 31, 136, "Input",ExpressionUUID->"f3a6b269-a7b8-4af9-8980-3b99a24d3d97"],
Cell[2644687, 52426, 759, 18, 30, "Input",ExpressionUUID->"da5812a0-a58a-4254-9697-04099009fb91"],
Cell[2645449, 52446, 429, 9, 30, "Input",ExpressionUUID->"f0f2cb69-6f8c-4c4a-922d-c3cfac06724e"],
Cell[CellGroupData[{
Cell[2645903, 52459, 334, 6, 30, "Input",ExpressionUUID->"4d8df775-3aa9-4b6c-a8a9-59711ad1117d"],
Cell[2646240, 52467, 15523, 308, 79, "Output",ExpressionUUID->"5974f41a-a839-400f-9301-9fbc0b7b5fdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2661800, 52780, 234, 4, 30, "Input",ExpressionUUID->"7ef86afd-ba55-4784-93a1-2bc7679795ca"],
Cell[2662037, 52786, 421, 7, 35, "Output",ExpressionUUID->"b52135df-67d5-47db-8365-47ebb87828c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2662495, 52798, 366, 8, 32, "Input",ExpressionUUID->"56c1826c-6dd7-486f-81dc-7c97f73f8179"],
Cell[2662864, 52808, 2065, 49, 96, "Output",ExpressionUUID->"813e9101-e62d-40c9-a75e-3e6ce5422309"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2664966, 52862, 1464, 32, 143, "Input",ExpressionUUID->"4184effd-d93c-4bea-bc9e-e5428f8d4f8c"],
Cell[2666433, 52896, 52664, 1057, 95, "Output",ExpressionUUID->"3df71832-d8ca-4509-9d19-86357b2b87be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2719134, 53958, 564, 10, 55, "Input",ExpressionUUID->"6303fcf3-97ef-4841-a0d7-680ffa8b5408"],
Cell[2719701, 53970, 51419, 1029, 95, "Output",ExpressionUUID->"9f594c3b-e7db-43c5-aa5e-ecf713854b2e"]
}, Open  ]],
Cell[2771135, 55002, 299, 6, 32, "Input",ExpressionUUID->"49b2f2b5-2cc7-4e8b-a9bb-a8dfd68b628e"],
Cell[CellGroupData[{
Cell[2771459, 55012, 387, 8, 32, "Input",ExpressionUUID->"49bd926e-e477-4501-9ee8-02d11ba4c5de"],
Cell[2771849, 55022, 1419, 35, 103, "Output",ExpressionUUID->"ecf282f1-9611-47e5-96c1-0508f898a6fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2773305, 55062, 343, 7, 32, "Input",ExpressionUUID->"51837a43-8ce2-4910-9a56-5d6d0f1b7978"],
Cell[2773651, 55071, 1506, 39, 125, "Output",ExpressionUUID->"cad8cf5a-0e77-42eb-8f83-c670ce19944a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2775194, 55115, 373, 8, 32, "Input",ExpressionUUID->"50fd8ecb-4d0c-44f4-9827-aa016da98f9b"],
Cell[2775570, 55125, 114137, 1940, 222, "Output",ExpressionUUID->"e1a98cab-9089-4267-b738-502c6e23c1dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2889744, 57070, 570, 16, 55, "Input",ExpressionUUID->"ae27f015-cbd9-4a75-a6c7-23aa89a9076b"],
Cell[2890317, 57088, 176469, 4549, 1520, "Output",ExpressionUUID->"93d9edaa-ed97-4e86-ac3e-a3ce587343be"]
}, Open  ]],
Cell[3066801, 61640, 164, 3, 39, "Text",ExpressionUUID->"2cb57278-3539-4a65-926b-77f4f3d723a5"],
Cell[CellGroupData[{
Cell[3066990, 61647, 13273, 224, 83, "Input",ExpressionUUID->"9c8c5ca1-40d4-4869-91bc-ff28942d37bb"],
Cell[3080266, 61873, 1254, 29, 125, "Output",ExpressionUUID->"3f57ac41-3cbe-4626-a9be-f5f3318d8540"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3081557, 61907, 282, 6, 32, "Input",ExpressionUUID->"82155d8e-91e8-4a5b-9e7c-ab9c12a57afa"],
Cell[3081842, 61915, 71746, 1933, 296, "Output",ExpressionUUID->"aafc59f0-a4f3-46fa-b8fe-67a4acd1d2a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3153625, 63853, 411, 8, 32, InheritFromParent,ExpressionUUID->"86cfada3-0bf7-4e72-bcdd-f4ab257dfdb0"],
Cell[3154039, 63863, 14019, 397, 262, "Output",ExpressionUUID->"fb0112f2-f938-4a31-9fd4-1c8c6e1e8631"]
}, Open  ]]
}
]
*)

