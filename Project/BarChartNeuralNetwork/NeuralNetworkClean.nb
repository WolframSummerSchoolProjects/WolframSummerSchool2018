(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1474299,      28242]
NotebookOptionsPosition[   1469321,      28156]
NotebookOutlinePosition[   1469663,      28171]
CellTagsIndexPosition[   1469620,      28168]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Maximum Bar Chart Height reader", "Chapter",
 CellChangeTimes->{{3.740085451018715*^9, 
  3.7400854611717443`*^9}},ExpressionUUID->"b69111f4-04f5-4dcf-b216-\
9b6577f9df3b"],

Cell[CellGroupData[{

Cell["Data Generation", "Section",
 CellChangeTimes->{{3.740095399757306*^9, 
  3.7400954024812*^9}},ExpressionUUID->"4a9279bf-fa06-481a-aff0-e0adbae3a4b0"],

Cell["\<\
The code below was used to generate the dataset for the network shown in this \
notebook.\
\>", "Text",
 CellChangeTimes->{{3.7400954572782965`*^9, 
  3.7400954848405433`*^9}},ExpressionUUID->"27c1305a-5053-4102-86af-\
5c1c7c924729"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeedRandom", "[", "1234", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"randomList", ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "100"}], "}"}], "]"}], "*", "500"}], ",", 
        RowBox[{"RandomWord", "[", "]"}]}], "}"}], ",", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "15"}], "}"}], "]"}]}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"dataset", "=", " ", 
   RowBox[{"ParallelTable", "[", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"j", "=", 
          RowBox[{"CreateUUID", "[", "]"}]}], ",", 
         RowBox[{"rl", "=", "randomList"}]}], "}"}], ",", "\n", "\t", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Export", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "StringTemplate", "[", 
             "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\
\\``.jpg\>\"", "]"}], "[", "j", "]"}], ",", "\n", "\t", 
           RowBox[{"Rasterize", "[", "\n", "\t", 
            RowBox[{
             RowBox[{"BarChart", "[", 
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Labeled", "[", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
                 "rl"}], "]"}], ",", "\n", "\t", 
               RowBox[{"ChartStyle", "\[Rule]", 
                RowBox[{"RandomChoice", "[", 
                 RowBox[{"ColorData", "[", "\"\<Charting\>\"", "]"}], "]"}]}],
                ",", " ", "\n", "\t", 
               RowBox[{"ChartStyle", "\[Rule]", 
                RowBox[{"Thickness", "[", "RandomReal", "]"}]}], ",", "\n", 
               "\t", 
               RowBox[{
                StyleBox["Background",
                 FontWeight->"Bold"], 
                StyleBox["\[Rule]",
                 FontWeight->"Bold"], 
                RowBox[{
                 StyleBox["RandomColor",
                  FontWeight->"Bold"], "[", "]"}]}], 
               StyleBox[",",
                FontWeight->"Bold"], 
               StyleBox[
                RowBox[{"(*", 
                 RowBox[{
                 "this", " ", "was", " ", "only", " ", "applied", " ", "to", 
                  " ", 
                  RowBox[{"1", "/", "3"}], " ", "of", " ", "the", " ", 
                  "dataset"}], "*)"}],
                FontWeight->"Bold"], "\n", "\t", 
               RowBox[{"ChartElementFunction", "\[Rule]", 
                RowBox[{"RandomChoice", "[", 
                 RowBox[{"ChartElementData", "[", "\"\<BarChart\>\"", "]"}], 
                 "]"}]}], ",", "\n", "\t", 
               RowBox[{"BarSpacing", "\[Rule]", 
                RowBox[{"RandomChoice", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "None", ",", "Automatic", ",", "Tiny", ",", "Small", ",", 
                   "Medium", ",", "Large"}], "}"}], "]"}]}], ",", "\n", "\t", 
               RowBox[{"PlotLabel", "\[Rule]", 
                RowBox[{"RandomChoice", "[", 
                 RowBox[{"WordList", "[", "]"}], "]"}]}]}], "\n", "\t", "]"}],
              ",", 
             RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]}], "]"}], ";", 
         "\n", "\t\t", 
         RowBox[{"Export", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "StringTemplate", "[", 
             "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\
\\``.mx\>\"", "]"}], "[", "j", "]"}], ",", "\n", "\t\t", 
           RowBox[{"rl", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ")"}]}], 
      "]"}], ",", "100000"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.7400954468176517`*^9, 
  3.740095452355096*^9}},ExpressionUUID->"8a1519b8-11a0-4ec7-b697-\
7d301d2ebe44"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Import for max bar height", "Section",
 CellChangeTimes->{{3.7400838222931614`*^9, 
  3.74008383952252*^9}},ExpressionUUID->"a015abaf-d54a-468c-8e10-\
3a7f730c3323"],

Cell["Initial importing of image ids and data", "Text",
 CellChangeTimes->{{3.740084233850504*^9, 
  3.7400842595950947`*^9}},ExpressionUUID->"7b1a3692-1e07-4f31-8012-\
79eb89c0ab88"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"location", " ", "of", " ", "the", " ", "data", " ", "files"}], 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
    "dataDirectory", "=", 
     "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2\\\\\>\""}]\
, ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "names", " ", "of", " ", "all", " ", "the", " ", "different", " ", 
     "plots", " ", "I", " ", "generated"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"ids", "=", 
     RowBox[{"Map", "[", 
      RowBox[{"FileBaseName", ",", 
       RowBox[{"Map", "[", 
        RowBox[{"FileNameTake", ",", 
         RowBox[{"FileNames", "[", 
          RowBox[{
           RowBox[{"___", "~~", "\"\<.mx\>\""}], ",", "dataDirectory"}], 
          "]"}]}], "]"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "exporting", " ", "a", " ", "mx", " ", "file", " ", "with", " ", "all", 
     " ", "the", " ", "names", " ", "of", " ", "the", " ", "data", " ", 
     "files"}], "*)"}], "\n", 
   RowBox[{"Export", "[", 
    RowBox[{
    "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLNamesData2.mx\>\"\
", ",", "ids"}], "]"}], "\n", 
   "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLNamesData2.mx\>\"\
", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "creating", " ", "an", " ", "mx", " ", "file", " ", "with", " ", "the", 
      " ", "data", " ", "that", " ", "generated", " ", "the", " ", "jpg", " ",
       "files", " ", "used", " ", "for", " ", "training"}], ",", "\n", " ", 
     RowBox[{"associated", " ", "with", " ", "their", " ", "name"}]}], "*)"}],
    "\n", 
   RowBox[{
    RowBox[{"mxs", "=", 
     RowBox[{"AssociationMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{"dataDirectory", ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"#", ",", "\"\<.mx\>\""}], "]"}]}], "}"}], "]"}], "]"}], 
        "&"}], ",", "ids"}], "]"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"exporting", " ", "those", " ", "files", " ", "as", " ", "well"}],
     "*)"}], "\n", 
   RowBox[{"Export", "[", 
    RowBox[{
    "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.mx\>\"", 
     ",", "mxs"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.7400838750399923`*^9, 3.7400838789025183`*^9}, {
  3.7400840172934957`*^9, 
  3.740084226443407*^9}},ExpressionUUID->"91d18ad3-2a1e-4a96-b04f-\
d4aeec5d4930"],

Cell["Importing the ids after initialization", "Text",
 CellChangeTimes->{{3.740084268951767*^9, 
  3.7400842816626062`*^9}},ExpressionUUID->"55192e8e-d469-48e2-9bb0-\
2d72f3d46186"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ids", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLNamesData2.mx\>\"\
", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mxs", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<C:\\\\Users\\\\rbc15\\\\Desktop\\\\Mathematica\\\\MLData2.mx\>\"", 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.740084293795859*^9, 3.740084315995298*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"e5da0905-37f6-40af-905c-5a879ea68896"],

Cell["Defining the data, training set, and test set", "Text",
 CellChangeTimes->{{3.7400843307002897`*^9, 3.740084360512932*^9}, {
  3.7400845716497483`*^9, 
  3.7400845730312815`*^9}},ExpressionUUID->"594d581d-2952-4383-956e-\
254ffbe27c86"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"complete", " ", "dataset"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Map", "[", "\n", "\t", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"File", "[", 
            RowBox[{"FileNameJoin", "[", 
             RowBox[{"{", 
              RowBox[{"dataDirectory", ",", 
               RowBox[{"StringJoin", "[", 
                RowBox[{"#", ",", "\"\<.jpg\>\""}], "]"}]}], "}"}], "]"}], 
            "]"}], "\n", "\t", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Max", "[", 
             RowBox[{"mxs", "[", 
              RowBox[{"[", 
               RowBox[{"Key", "[", "#", "]"}], "]"}], "]"}], "]"}], "}"}]}], 
          "}"}], "&"}], ",", "ids"}], "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "separate", " ", "training", " ", "and", " ", "testing", " ", "set", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"161", " ", "000", " ", "training"}], ",", " ", 
       RowBox[{"3", " ", "913", " ", "testing"}]}]}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"training", ",", "testing"}], "}"}], "=", 
     RowBox[{"TakeDrop", "[", 
      RowBox[{
       RowBox[{"RandomSample", "[", "data", "]"}], ",", "161000"}], "]"}]}], 
    ";"}]}]}]], "Code",
 CellChangeTimes->{{3.7400845914608154`*^9, 3.7400847159145193`*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"22bd0d8b-886d-4a08-b2d1-265fd7533f16"]
}, Open  ]],

Cell[CellGroupData[{

Cell["VGG Net Modification to read max bar height", "Section",
 CellChangeTimes->{{3.7400827507938757`*^9, 
  3.740082766189801*^9}},ExpressionUUID->"bb85da6c-05cc-4a19-803a-\
3104e4a51aa9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Importing", " ", "vgg16Net", " ", "as", " ", "a", " ", "base", " ", "for",
     " ", "my", " ", "network"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"vgg16Net", "=", " ", 
    RowBox[{"NetModel", "[", 
     RowBox[{
     "\"\<VGG-16 Trained on ImageNet Competition Data\>\"", ",", 
      "\"\<UninitializedEvaluationNet\>\""}], "]"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "cutting", " ", "off", " ", "a", " ", "few", " ", "layers", " ", "at", 
     " ", "the", " ", "end", " ", "to", " ", "match", " ", "the", " ", 
     "output", " ", "form", " ", "I", " ", "want", " ", 
     RowBox[{"(", 
      RowBox[{"one", " ", "number"}], ")"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net2", "=", " ", 
     RowBox[{"NetReplacePart", "[", 
      RowBox[{
       RowBox[{"NetTake", "[", 
        RowBox[{"vgg16Net", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<conv1_1\>\"", ",", "\"\<pool5\>\""}], "}"}]}], "]"}], 
       ",", "\n", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"NetEncoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Image\>\"", ",", "100"}], "}"}], "]"}]}]}], "]"}]}], 
    ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "Adding", " ", "a", " ", "BatchNormalizationLayer", " ", "before", " ", 
     "every", " ", "ConvolutionLayer"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net2", ",", 
       RowBox[{"\"\<b1\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv1_2\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b2\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv2_1\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b3\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv2_2\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b4\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv3_1\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b5\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv3_2\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b6\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv3_3\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b7\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv4_1\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b8\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv4_2\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b9\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv4_3\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b10\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv5_1\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b11\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv5_2\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"vgg16Net3", "=", 
     RowBox[{"NetInsert", "[", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"\"\<b12\>\"", "\[Rule]", 
        RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", 
       "\"\<conv5_3\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"Adding", " ", "a", " ", 
     RowBox[{"LinearLayer", "[", "1", "]"}], " ", "as", " ", "the", " ", 
     "last", " ", "layer"}], "*)"}], "\n", 
   RowBox[{"vgg16Net4", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{"vgg16Net3", ",", 
       RowBox[{"LinearLayer", "[", "1", "]"}]}], "}"}], "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.7400826818491774`*^9, 3.7400827124816494`*^9}, {
  3.7400827750053825`*^9, 3.7400829247952776`*^9}, {3.7400830073782454`*^9, 
  3.740083149351524*^9}, {3.74008339361753*^9, 3.7400834053842063`*^9}, {
  3.7400834382301583`*^9, 3.740083472870916*^9}, {3.7400835371901493`*^9, 
  3.7400835867211237`*^9}, {3.7400836343173866`*^9, 3.740083795149068*^9}, {
  3.740083890323945*^9, 3.740084000265299*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"a9bd7911-9791-405e-ac39-efafbdc446cd"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["40", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], 
                    "fc6" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, 25088}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop6" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc7" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "drop7" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "fc8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1000, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "prob" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "prob", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association["Labels" -> {
                    Entity["Concept", "Tench::q9r2d"], 
                    Entity["Concept", "CarassiusAuratus::f73xs"], 
                    Entity["Concept", "CarcharodonCarcharias::st7pj"], 
                    Entity["Concept", "GaleocerdoCuvieri::h7238"], 
                    Entity["Concept", "HammerheadShark::cky4t"], 
                    Entity["Concept", "Crampfish::6369q"], 
                    Entity["Concept", "Stingray::4cts3"], 
                    Entity["Concept", "Cock::2s2xh"], 
                    Entity["Concept", "Hen::49q38"], 
                    Entity["Concept", "StruthioCamelus::7fgc2"], 
                    Entity["Concept", "Brambling::47bpt"], 
                    Entity["Concept", "CarduelisCarduelis::bv5y9"], 
                    Entity["Concept", "CarpodacusMexicanus::zq6w8"], 
                    Entity["Concept", "Junco::sjqs9"], 
                    Entity["Concept", "IndigoBird::6365d"], 
                    Entity["Concept", "AmericanRobin::wf28w"], 
                    Entity["Concept", "Bulbul::4x6vd"], 
                    Entity["Concept", "Jay::9g7qw"], 
                    Entity["Concept", "Magpie::62kfm"], 
                    Entity["Concept", "Chickadee::qmsc9"], 
                    Entity["Concept", "WaterOuzel::n32d7"], 
                    Entity["Concept", "Kite::y2jjm"], 
                    Entity["Concept", "AmericanEagle::z2fqr"], 
                    Entity["Concept", "Vulture::r2nfy"], 
                    Entity["Concept", "GreatGrayOwl::97vk2"], 
                    Entity["Concept", "EuropeanFireSalamander::t6v33"], 
                    Entity["Concept", "CommonNewt::9nx3s"], 
                    Entity["Concept", "Eft::t3bv7"], 
                    Entity["Concept", "AmbystomaMaculatum::qnd2g"], 
                    Entity["Concept", "AmbystomaMexicanum::k9j45"], 
                    Entity["Concept", "Bullfrog::r9cvc"], 
                    Entity["Concept", "Tree-frog::m988r"], 
                    Entity["Concept", "AscaphusTrui::qr2np"], 
                    Entity["Concept", "CarettaCaretta::768y9"], 
                    Entity["Concept", "DermochelysCoriacea::ypc4b"], 
                    Entity["Concept", "MudTurtle::47p9w"], 
                    Entity["Concept", "Terrapin::5j9b2"], 
                    Entity["Concept", "BoxTortoise::hksb9"], 
                    Entity["Concept", "BandedGecko::38zhr"], 
                    Entity["Concept", "CommonIguana::66q43"], 
                    Entity["Concept", "AmericanChameleon::67k54"], 
                    Entity["Concept", "Whiptail::sb62k"], 
                    Entity["Concept", "Agama::22vdx"], 
                    Entity["Concept", "ChlamydosaurusKingi::stq3k"], 
                    Entity["Concept", "AlligatorLizard::k6335"], 
                    Entity["Concept", "GilaMonster::k8q26"], 
                    Entity["Concept", "GreenLizard::2fkzv"], 
                    Entity["Concept", "AfricanChameleon::x82fs"], 
                    Entity["Concept", "DragonLizard::s68v6"], 
                    Entity["Concept", "AfricanCrocodile::zw55f"], 
                    Entity["Concept", "AlligatorMississipiensis::s7582"], 
                    Entity["Concept", "Triceratops::p997c"], 
                    Entity["Concept", "CarphophisAmoenus::35dfs"], 
                    Entity["Concept", "Ring-neckedSnake::2f823"], 
                    Entity["Concept", "HognoseSnake::k5k58"], 
                    Entity["Concept", "GrassSnake::pv2xf"], 
                    Entity["Concept", "KingSnake::t9m8y"], 
                    Entity["Concept", "GarterSnake::892t9"], 
                    Entity["Concept", "WaterSnake::y627x"], 
                    Entity["Concept", "VineSnake::9kywz"], 
                    Entity["Concept", "HypsiglenaTorquata::6869v"], 
                    Entity["Concept", "BoaConstrictor::qq73z"], 
                    Entity["Concept", "PythonSebae::dmhh6"], 
                    Entity["Concept", "IndianCobra::2sv7h"], 
                    Entity["Concept", "GreenMamba::c9qn3"], 
                    Entity["Concept", "SeaSnake::s529y"], 
                    Entity["Concept", "Cerastes::6575z"], 
                    Entity["Concept", "CrotalusAdamanteus::8ynrx"], 
                    Entity["Concept", "CrotalusCerastes::m382t"], 
                    Entity["Concept", "Trilobite::3qyq3"], 
                    Entity["Concept", "Harvestman::545h3"], 
                    Entity["Concept", "Scorpion::9rx48"], 
                    Entity["Concept", "ArgiopeAurantia::633xv"], 
                    Entity["Concept", "AraneusCavaticus::thm3g"], 
                    Entity["Concept", "AraneaDiademata::4jvj8"], 
                    Entity["Concept", "BlackWidow::4682d"], 
                    Entity["Concept", "Tarantula::mc462"], 
                    Entity["Concept", "HuntingSpider::q7898"], 
                    Entity["Concept", "Tick::xw6hc"], 
                    Entity["Concept", "Centipede::s8w7r"], 
                    Entity["Concept", "BlackGrouse::9w35m"], 
                    Entity["Concept", "Ptarmigan::tv6c8"], 
                    Entity["Concept", "BonasaUmbellus::bpbr3"], 
                    Entity["Concept", "PrairieChicken::2ws9g"], 
                    Entity["Concept", "Peacock::kd2y4"], 
                    Entity["Concept", "Quail::7462f"], 
                    Entity["Concept", "Partridge::t22mp"], 
                    Entity["Concept", "AfricanGray::84css"], 
                    Entity["Concept", "Macaw::ntx97"], 
                    Entity["Concept", "CacatuaGalerita::tfz9w"], 
                    Entity["Concept", "Lorikeet::4f725"], 
                    Entity["Concept", "Coucal::z95g6"], 
                    Entity["Concept", "BeeEater::376h3"], 
                    Entity["Concept", "Hornbill::6389h"], 
                    Entity["Concept", "Hummingbird::vz6gt"], 
                    Entity["Concept", "Jacamar::v7428"], 
                    Entity["Concept", "Toucan::2h2d5"], 
                    Entity["Concept", "Drake::5cdfw"], 
                    Entity["Concept", "MergusSerrator::5t86m"], 
                    Entity["Concept", "Goose::82x27"], 
                    Entity["Concept", "BlackSwan::6ft7p"], 
                    Entity["Concept", "Tusker::dqq7d"], 
                    Entity["Concept", "Anteater::8t864"], 
                    Entity["Concept", "Duck-billedPlatypus::b8867"], 
                    Entity["Concept", "BrushKangaroo::493r2"], 
                    Entity["Concept", "KangarooBear::hvf3s"], 
                    Entity["Concept", "Wombat::m5rqr"], 
                    Entity["Concept", "Jellyfish::fs9rf"], 
                    Entity["Concept", "SeaAnemone::5n98x"], 
                    Entity["Concept", "BrainCoral::v7844"], 
                    Entity["Concept", "Flatworm::h957w"], 
                    Entity["Concept", "Nematode::hz536"], 
                    Entity["Concept", "Conch::44pfv"], 
                    Entity["Concept", "Snail::3r58h"], 
                    Entity["Concept", "Slug::d4638"], 
                    Entity["Concept", "Nudibranch::dq2vh"], 
                    Entity["Concept", "Coat-of-mailShell::h3tp5"], 
                    Entity["Concept", "ChamberedNautilus::tspc6"], 
                    Entity["Concept", "CancerMagister::5r562"], 
                    Entity["Concept", "CancerIrroratus::d69mr"], 
                    Entity["Concept", "FiddlerCrab::4mt9n"], 
                    Entity["Concept", "ParalithodesCamtschatica::pfzy2"], 
                    Entity["Concept", "HomarusAmericanus::n2j65"], 
                    Entity["Concept", "SeaCrawfish::x53g2"], 
                    Entity["Concept", "Crawdaddy::946y4"], 
                    Entity["Concept", "HermitCrab::4k242"], 
                    Entity["Concept", "Isopod::4z747"], 
                    Entity["Concept", "CiconiaCiconia::wkt3m"], 
                    Entity["Concept", "BlackStork::5v349"], 
                    Entity["Concept", "Spoonbill::4939q"], 
                    Entity["Concept", "Flamingo::28r7m"], 
                    Entity["Concept", "EgrettaCaerulea::9965c"], 
                    Entity["Concept", "AmericanEgret::43jz8"], 
                    Entity["Concept", "Bittern::722qw"], 
                    Entity["Concept", "Crane::9wrg8"], 
                    Entity["Concept", "AramusPictus::964mw"], 
                    Entity["Concept", "EuropeanGallinule::c7jfx"], 
                    Entity["Concept", "AmericanCoot::c7452"], 
                    Entity["Concept", "Bustard::p3zj5"], 
                    Entity["Concept", "ArenariaInterpres::3rbq4"], 
                    Entity["Concept", "Dunlin::4mj52"], 
                    Entity["Concept", "Redshank::yvbj8"], 
                    Entity["Concept", "Dowitcher::47w6h"], 
                    Entity["Concept", "OysterCatcher::9drpt"], 
                    Entity["Concept", "Pelican::jpfg7"], 
                    Entity["Concept", "AptenodytesPatagonica::f85wf"], 
                    Entity["Concept", "Mollymawk::r8386"], 
                    Entity["Concept", "EschrichtiusGibbosus::2c8q9"], 
                    Entity["Concept", "KillerWhale::26sj4"], 
                    Entity["Concept", "Dugong::ss39b"], 
                    Entity["Concept", "SeaLion::bs87w"], 
                    Entity["Concept", "Chihuahua::8hmhf"], 
                    Entity["Concept", "JapaneseSpaniel::h55d9"], 
                    Entity["Concept", "MalteseDog::trsv6"], 
                    Entity["Concept", "Peke::b9n5f"], 
                    Entity["Concept", "Shih-Tzu::kc9k8"], 
                    Entity["Concept", "BlenheimSpaniel::cd3nm"], 
                    Entity["Concept", "Papillon::zhn7j"], 
                    Entity["Concept", "ToyTerrier::k3s97"], 
                    Entity["Concept", "RhodesianRidgeback::jph75"], 
                    Entity["Concept", "AfghanHound::6845m"], 
                    Entity["Concept", "Basset::n769x"], 
                    Entity["Concept", "Beagle::2bdvt"], 
                    Entity["Concept", "Bloodhound::pc454"], 
                    Entity["Concept", "Bluetick::fs5sw"], 
                    Entity["Concept", "Black-and-tanCoonhound::84k6y"], 
                    Entity["Concept", "WalkerFoxhound::z3y7p"], 
                    Entity["Concept", "EnglishFoxhound::5v343"], 
                    Entity["Concept", "Redbone::j6h4x"], 
                    Entity["Concept", "Borzoi::v43t8"], 
                    Entity["Concept", "IrishWolfhound::8m3gw"], 
                    Entity["Concept", "ItalianGreyhound::s4gq3"], 
                    Entity["Concept", "Whippet::57r47"], 
                    Entity["Concept", "IbizanHound::987kj"], 
                    Entity["Concept", "Elkhound::62q39"], 
                    Entity["Concept", "OtterHound::3442w"], 
                    Entity["Concept", "GazelleHound::7k449"], 
                    Entity["Concept", "Deerhound::btsv4"], 
                    Entity["Concept", "Weimaraner::476j6"], 
                    Entity["Concept", "StaffordshireBullTerrier::883y3"], 
                    Entity["Concept", "AmericanPitBullTerrier::kw55q"], 
                    Entity["Concept", "BedlingtonTerrier::98h82"], 
                    Entity["Concept", "BorderTerrier::gh5h6"], 
                    Entity["Concept", "KerryBlueTerrier::t9c62"], 
                    Entity["Concept", "IrishTerrier::qmsm4"], 
                    Entity["Concept", "NorfolkTerrier::b7z76"], 
                    Entity["Concept", "NorwichTerrier::9v483"], 
                    Entity["Concept", "YorkshireTerrier::bn4jn"], 
                    Entity["Concept", "Wire-hairedFoxTerrier::pn5qb"], 
                    Entity["Concept", "LakelandTerrier::b729b"], 
                    Entity["Concept", "SealyhamTerrier::5jz56"], 
                    Entity["Concept", "Airedale::w6gf4"], 
                    Entity["Concept", "CairnTerrier::67c37"], 
                    Entity["Concept", "AustralianTerrier::q2h6g"], 
                    Entity["Concept", "DandieDinmont::ff47s"], 
                    Entity["Concept", "BostonBull::6662j"], 
                    Entity["Concept", "MiniatureSchnauzer::848y9"], 
                    Entity["Concept", "GiantSchnauzer::8fwv6"], 
                    Entity["Concept", "StandardSchnauzer::q9j3y"], 
                    Entity["Concept", "ScotchTerrier::2f2jw"], 
                    Entity["Concept", "ChrysanthemumDog::y9tps"], 
                    Entity["Concept", "SilkyTerrier::xyfw3"], 
                    Entity["Concept", "Soft-coatedWheatenTerrier::474j2"], 
                    Entity["Concept", "WestHighlandWhiteTerrier::4h85y"], 
                    Entity["Concept", "LhasaApso::cr28m"], 
                    Entity["Concept", "Flat-coatedRetriever::866mk"], 
                    Entity["Concept", "Curly-coatedRetriever::pb8yt"], 
                    Entity["Concept", "GoldenRetriever::t59tg"], 
                    Entity["Concept", "LabradorRetriever::7g587"], 
                    Entity["Concept", "ChesapeakeBayRetriever::s8567"], 
                    Entity["Concept", "GermanShort-hairedPointer::k3297"], 
                    Entity["Concept", "HungarianPointer::7555p"], 
                    Entity["Concept", "EnglishSetter::ps793"], 
                    Entity["Concept", "IrishSetter::h5pp3"], 
                    Entity["Concept", "GordonSetter::yvx65"], 
                    Entity["Concept", "BrittanySpaniel::435gz"], 
                    Entity["Concept", "Clumber::2ddvk"], 
                    Entity["Concept", "EnglishSpringer::f4dq6"], 
                    Entity["Concept", "WelshSpringerSpaniel::qyng2"], 
                    Entity["Concept", "Cocker::7284r"], 
                    Entity["Concept", "SussexSpaniel::sbv42"], 
                    Entity["Concept", "IrishWaterSpaniel::m9zkp"], 
                    Entity["Concept", "Kuvasz::z4sxp"], 
                    Entity["Concept", "Schipperke::7778z"], 
                    Entity["Concept", "Groenendael::5854s"], 
                    Entity["Concept", "Malinois::k8y57"], 
                    Entity["Concept", "Briard::dtm5k"], 
                    Entity["Concept", "Kelpie::k6795"], 
                    Entity["Concept", "Komondor::p8q9b"], 
                    Entity["Concept", "OldEnglishSheepdog::4zdy3"], 
                    Entity["Concept", "ShetlandSheepDog::sffh8"], 
                    Entity["Concept", "Collie::999kf"], 
                    Entity["Concept", "BorderCollie::463w2"], 
                    Entity["Concept", "BouvierDesFlandres::h7txf"], 
                    Entity["Concept", "Rottweiler::zywt3"], 
                    Entity["Concept", "Alsatian::fh5zw"], 
                    Entity["Concept", "Doberman::zgqf4"], 
                    Entity["Concept", "MiniaturePinscher::jvy9c"], 
                    Entity["Concept", "GreaterSwissMountainDog::t7642"], 
                    Entity["Concept", "BerneseMountainDog::y32v5"], 
                    Entity["Concept", "Appenzeller::j96dj"], 
                    Entity["Concept", "EntleBucher::y43x6"], 
                    Entity["Concept", "Boxer::3966f"], 
                    Entity["Concept", "BullMastiff::6p365"], 
                    Entity["Concept", "TibetanMastiff::4f68b"], 
                    Entity["Concept", "FrenchBulldog::3jg82"], 
                    Entity["Concept", "GreatDane::xg8dn"], 
                    Entity["Concept", "SaintBernard::r5277"], 
                    Entity["Concept", "EskimoDog::2vm97"], 
                    Entity["Concept", "AlaskanMalamute::y6wqq"], 
                    Entity["Concept", "SiberianHusky::k7pkk"], 
                    Entity["Concept", "CarriageDog::jh3w6"], 
                    Entity["Concept", "Affenpinscher::58wr6"], 
                    Entity["Concept", "Basenji::k9yy2"], 
                    Entity["Concept", "Pug::6799h"], 
                    Entity["Concept", "Leonberg::49td5"], 
                    Entity["Concept", "NewfoundlandDog::q787h"], 
                    Entity["Concept", "GreatPyrenees::t8qh7"], 
                    Entity["Concept", "Samoyede::rq827"], 
                    Entity["Concept", "Pomeranian::dx7mr"], 
                    Entity["Concept", "ChowChow::7x292"], 
                    Entity["Concept", "Keeshond::rz734"], 
                    Entity["Concept", "BrabanconGriffon::jh5pt"], 
                    Entity["Concept", "Pembroke::95g54"], 
                    Entity["Concept", "Cardigan::b724j"], 
                    Entity["Concept", "ToyPoodle::732f6"], 
                    Entity["Concept", "MiniaturePoodle::4955p"], 
                    Entity["Concept", "StandardPoodle::w25c4"], 
                    Entity["Concept", "MexicanHairless::m2by7"], 
                    Entity["Concept", "CanisLupus::5gwtc"], 
                    Entity["Concept", "ArcticWolf::4xr47"], 
                    Entity["Concept", "CanisNiger::99p6d"], 
                    Entity["Concept", "BrushWolf::44t57"], 
                    Entity["Concept", "CanisDingo::529k9"], 
                    Entity["Concept", "CuonAlpinus::f5yfn"], 
                    Entity["Concept", "AfricanHuntingDog::d9b86"], 
                    Entity["Concept", "Hyaena::7444d"], 
                    Entity["Concept", "VulpesVulpes::g8mvp"], 
                    Entity["Concept", "VulpesMacrotis::jm64h"], 
                    Entity["Concept", "AlopexLagopus::44cg9"], 
                    Entity["Concept", "GrayFox::vftd5"], 
                    Entity["Concept", "TabbyCat::rvg7f"], 
                    Entity["Concept", "TigerCat::8k84h"], 
                    Entity["Concept", "PersianCat::p69kd"], 
                    Entity["Concept", "SiameseCat::hgg68"], 
                    Entity["Concept", "EgyptianCat::sd6pw"], 
                    Entity["Concept", "Cougar::7bc9f"], 
                    Entity["Concept", "Catamount::q4f63"], 
                    Entity["Concept", "PantheraPardus::r35k5"], 
                    Entity["Concept", "PantheraUncia::z6697"], 
                    Entity["Concept", "FelisOnca::jh7tq"], 
                    Entity["Concept", "KingOfBeasts::vrwm9"], 
                    Entity["Concept", "PantheraTigris::2mpmq"], 
                    Entity["Concept", "GiantAnteater::y96st"], 
                    Entity["Concept", "BrownBear::8374p"], 
                    Entity["Concept", "AmericanBlackBear::763x8"], 
                    Entity["Concept", "IceBear::fnc5j"], 
                    Entity["Concept", "MelursusUrsinus::48x75"], 
                    Entity["Concept", "Mongoose::5hp73"], 
                    Entity["Concept", "Meerkat::q77nd"], 
                    Entity["Concept", "TigerBeetle::8362y"], 
                    Entity["Concept", "LadyBeetle::tx6bz"], 
                    Entity["Concept", "CarabidBeetle::w3hjn"], 
                    Entity["Concept", "Long-hornedBeetle::9zzc8"], 
                    Entity["Concept", "Chrysomelid::y8pqz"], 
                    Entity["Concept", "DungBeetle::bt6hz"], 
                    Entity["Concept", "RhinocerosBeetle::23y53"], 
                    Entity["Concept", "Weevil::r87rt"], 
                    Entity["Concept", "Fly::68s97"], 
                    Entity["Concept", "Bee::d8yym"], 
                    Entity["Concept", "Ant::7tznr"], 
                    Entity["Concept", "Grasshopper::52v2f"], 
                    Entity["Concept", "Cricket::82n55"], 
                    Entity["Concept", "StickInsect::4x983"], 
                    Entity["Concept", "Cockroach::7426w"], 
                    Entity["Concept", "Mantid::93t86"], 
                    Entity["Concept", "Cicada::w2299"], 
                    Entity["Concept", "Leafhopper::8k2k2"], 
                    Entity["Concept", "Lacewing::8v2m6"], 
                    Entity["Concept", "Dragonfly::7s252"], 
                    Entity["Concept", "Damselfly::dh8zj"], 
                    Entity["Concept", "Admiral::j6fvp"], 
                    Entity["Concept", "RingletButterfly::28v7s"], 
                    Entity["Concept", "DanausPlexippus::bfk9c"], 
                    Entity["Concept", "CabbageButterfly::c8v77"], 
                    Entity["Concept", "SulfurButterfly::b9263"], 
                    Entity["Concept", "Lycaenid::4whyw"], 
                    Entity["Concept", "SeaStar::46w97"], 
                    Entity["Concept", "SeaUrchin::7b835"], 
                    Entity["Concept", "Holothurian::7jk5q"], 
                    Entity["Concept", "Cottontail::bsxk4"], 
                    Entity["Concept", "Hare::55m72"], 
                    Entity["Concept", "AngoraRabbit::v6627"], 
                    Entity["Concept", "Hamster::9yy49"], 
                    Entity["Concept", "Porcupine::5r285"], 
                    Entity["Concept", "EasternFoxSquirrel::8g9v6"], 
                    Entity["Concept", "Marmot::7vb94"], 
                    Entity["Concept", "Beaver::qp598"], 
                    Entity["Concept", "CaviaCobaya::b8w85"], 
                    Entity["Concept", "Sorrel::b824z"], 
                    Entity["Concept", "Zebra::nx5qr"], 
                    Entity["Concept", "Grunter::437d2"], 
                    Entity["Concept", "WildBoar::5wjz4"], 
                    Entity["Concept", "Warthog::3q477"], 
                    Entity["Concept", "Hippo::647b2"], 
                    Entity["Concept", "Ox::yhn7j"], 
                    Entity["Concept", "AsiaticBuffalo::532z9"], 
                    Entity["Concept", "Bison::25c86"], 
                    Entity["Concept", "Tup::8y669"], 
                    Entity["Concept", "Bighorn::773z4"], 
                    Entity["Concept", "CapraIbex::p5pmr"], 
                    Entity["Concept", "Hartebeest::r8276"], 
                    Entity["Concept", "AepycerosMelampus::q45p2"], 
                    Entity["Concept", "Gazelle::px427"], 
                    Entity["Concept", "ArabianCamel::98q62"], 
                    Entity["Concept", "Llama::pp4mc"], 
                    Entity["Concept", "Weasel::gcxk7"], 
                    Entity["Concept", "Mink::r5727"], 
                    Entity["Concept", "Fitch::x2w8q"], 
                    Entity["Concept", "Black-footedFerret::r6gqg"], 
                    Entity["Concept", "Otter::63tg7"], 
                    Entity["Concept", "WoodPussy::6886s"], 
                    Entity["Concept", "Badger::vcsk3"], 
                    Entity["Concept", "Armadillo::s9866"], 
                    Entity["Concept", "Ai::z6968"], 
                    Entity["Concept", "Orang::5385s"], 
                    Entity["Concept", "Gorilla::7vrdz"], 
                    Entity["Concept", "Chimp::2t668"], 
                    Entity["Concept", "Gibbon::7yqsr"], 
                    Entity["Concept", "HylobatesSyndactylus::3g4xn"], 
                    Entity["Concept", "Guenon::7y986"], 
                    Entity["Concept", "ErythrocebusPatas::949v6"], 
                    Entity["Concept", "Baboon::28m6v"], 
                    Entity["Concept", "Macaque::m87ss"], 
                    Entity["Concept", "Langur::3w42b"], 
                    Entity["Concept", "Colobus::yqv5q"], 
                    Entity["Concept", "NasalisLarvatus::92p77"], 
                    Entity["Concept", "Marmoset::3j236"], 
                    Entity["Concept", "CebusCapucinus::4r452"], 
                    Entity["Concept", "HowlerMonkey::87c48"], 
                    Entity["Concept", "TitiMonkey::6rqgy"], 
                    Entity["Concept", "AtelesGeoffroyi::8f944"], 
                    Entity["Concept", "SaimiriSciureus::f9528"], 
                    Entity["Concept", "LemurCatta::4z4fy"], 
                    Entity["Concept", "Indri::w2dsm"], 
                    Entity["Concept", "ElephasMaximus::4668g"], 
                    Entity["Concept", "AfricanElephant::634z7"], 
                    Entity["Concept", "AilurusFulgens::m96y6"], 
                    Entity["Concept", "AiluropodaMelanoleuca::xg799"], 
                    Entity["Concept", "Barracouta::dzc32"], 
                    Entity["Concept", "Eel::6yymn"], 
                    Entity["Concept", "BlueJack::8728b"], 
                    Entity["Concept", "HolocanthusTricolor::6t872"], 
                    Entity["Concept", "AnemoneFish::5mdgt"], 
                    Entity["Concept", "Sturgeon::46xyk"], 
                    Entity["Concept", "Garfish::p9w7b"], 
                    Entity["Concept", "Lionfish::45vp5"], 
                    Entity["Concept", "Globefish::z6448"], 
                    Entity["Concept", "Abacus::s322h"], 
                    Entity["Concept", "Abaya::327b3"], 
                    Entity["Concept", "AcademicGown::6vvft"], 
                    Entity["Concept", "Accordion::vx545"], 
                    Entity["Concept", "AcousticGuitar::wp46j"], 
                    Entity["Concept", "AircraftCarrier::74d49"], 
                    Entity["Concept", "Airliner::t7542"], 
                    Entity["Concept", "Airship::dg429"], 
                    Entity["Concept", "Altar::z644x"], 
                    Entity["Concept", "Ambulance::rgts3"], 
                    Entity["Concept", "AmphibiousVehicle::rr85n"], 
                    Entity["Concept", "AnalogClock::3832f"], 
                    Entity["Concept", "Apiary::d939v"], 
                    Entity["Concept", "Apron::qr79c"], 
                    Entity["Concept", "Ash-bin::6sd8p"], 
                    Entity["Concept", "AssaultRifle::d2gst"], 
                    Entity["Concept", "BackPack::2cjsp"], 
                    Entity["Concept", "Bakehouse::6nmsm"], 
                    Entity["Concept", "BalanceBeam::6nyqs"], 
                    Entity["Concept", "Balloon::64p99"], 
                    Entity["Concept", "Ballpen::k35fx"], 
                    Entity["Concept", "BandAid::z727z"], 
                    Entity["Concept", "Banjo::fs3f9"], 
                    Entity["Concept", "Balusters::nt6x4"], 
                    Entity["Concept", "Barbell::295kg"], 
                    Entity["Concept", "BarberChair::mybp2"], 
                    Entity["Concept", "Barbershop::qg6kn"], 
                    Entity["Concept", "Barn::6xw3q"], 
                    Entity["Concept", "Barometer::65g49"], 
                    Entity["Concept", "Barrel::3pzvn"], 
                    Entity["Concept", "GardenCart::7br53"], 
                    Entity["Concept", "Baseball::9f8qz"], 
                    Entity["Concept", "Basketball::jq262"], 
                    Entity["Concept", "Bassinet::yn2td"], 
                    Entity["Concept", "Bassoon::92ky9"], 
                    Entity["Concept", "BathingCap::tsd8r"], 
                    Entity["Concept", "BathTowel::72qcw"], 
                    Entity["Concept", "BathingTub::729f8"], 
                    Entity["Concept", "BeachWaggon::c945g"], 
                    Entity["Concept", "BeaconLight::k282w"], 
                    Entity["Concept", "Beaker::btv5s"], 
                    Entity["Concept", "Busby::448c3"], 
                    Entity["Concept", "BeerBottle::8gz7t"], 
                    Entity["Concept", "BeerGlass::r6xp2"], 
                    Entity["Concept", "BellCot::567d3"], 
                    Entity["Concept", "Bib::5wq8k"], 
                    Entity["Concept", "Bicycle-built-for-two::7h478"], 
                    Entity["Concept", "Bikini::m86f8"], 
                    Entity["Concept", "Ring-binder::848m9"], 
                    Entity["Concept", "Binoculars::yp4ss"], 
                    Entity["Concept", "Birdhouse::n3qgq"], 
                    Entity["Concept", "Boathouse::59rht"], 
                    Entity["Concept", "Bob::n2762"], 
                    Entity["Concept", "BolaTie::g65x6"], 
                    Entity["Concept", "PokeBonnet::f4y42"], 
                    Entity["Concept", "Bookcase::6t56v"], 
                    Entity["Concept", "Bookshop::4rgfr"], 
                    Entity["Concept", "Bottlecap::mgg5c"], 
                    Entity["Concept", "Bow::89mx8"], 
                    Entity["Concept", "Bow-tie::79h37"], 
                    Entity["Concept", "MemorialTablet::66g76"], 
                    Entity["Concept", "Bandeau::4j247"], 
                    Entity["Concept", "Breakwater::nrtz2"], 
                    Entity["Concept", "Breastplate::4fmw7"], 
                    Entity["Concept", "Broom::hgy49"], 
                    Entity["Concept", "Bucket::f9743"], 
                    Entity["Concept", "Buckle::3398s"], 
                    Entity["Concept", "BulletproofVest::djqn3"], 
                    Entity["Concept", "BulletTrain::4dfr5"], 
                    Entity["Concept", "ButcherShop::hfp48"], 
                    Entity["Concept", "Taxi::379w3"], 
                    Entity["Concept", "Caldron::k6c8c"], 
                    Entity["Concept", "WaxLight::d9rqz"], 
                    Entity["Concept", "Cannon::54f56"], 
                    Entity["Concept", "Canoe::nnt95"], 
                    Entity["Concept", "CanOpener::6b885"], 
                    Entity["Concept", "Cardigan::237mv"], 
                    Entity["Concept", "CarMirror::5xccg"], 
                    Entity["Concept", "Carousel::n2992"], 
                    Entity["Concept", "CarpentersKit::37rxx"], 
                    Entity["Concept", "Carton::769gr"], 
                    Entity["Concept", "CarWheel::t6f2y"], 
                    Entity["Concept", "AutomatedTeller::w8746"], 
                    Entity["Concept", "Cassette::2pvzn"], 
                    Entity["Concept", "CassettePlayer::v2ng9"], 
                    Entity["Concept", "Castle::m2pbs"], 
                    Entity["Concept", "Catamaran::7b489"], 
                    Entity["Concept", "CDPlayer::7gq93"], 
                    Entity["Concept", "Cello::hhbp5"], 
                    Entity["Concept", "Cellphone::5k4s4"], 
                    Entity["Concept", "Chain::w9j9s"], 
                    Entity["Concept", "ChainlinkFence::pfv8d"], 
                    Entity["Concept", "ChainArmor::h32y6"], 
                    Entity["Concept", "ChainSaw::f5bt6"], 
                    Entity["Concept", "Chest::fd956"], 
                    Entity["Concept", "Chiffonier::m3jmr"], 
                    Entity["Concept", "Chime::m6623"], 
                    Entity["Concept", "ChinaCabinet::9bmqg"], 
                    Entity["Concept", "ChristmasStocking::867r8"], 
                    Entity["Concept", "ChurchBuilding::2394b"], 
                    Entity["Concept", "MovieHouse::hbj23"], 
                    Entity["Concept", "Cleaver::bk925"], 
                    Entity["Concept", "CliffDwelling::5c9sb"], 
                    Entity["Concept", "Cloak::dj822"], 
                    Entity["Concept", "Geta::3r9c9"], 
                    Entity["Concept", "CocktailShaker::r9655"], 
                    Entity["Concept", "CoffeeMug::gwhm5"], 
                    Entity["Concept", "Coffeepot::32tb2"], 
                    Entity["Concept", "Coil::c7h65"], 
                    Entity["Concept", "CombinationLock::b8rp7"], 
                    Entity["Concept", "ComputerKeyboard::26d5s"], 
                    Entity["Concept", "CandyStore::268x7"], 
                    Entity["Concept", "ContainerShip::tsz7x"], 
                    Entity["Concept", "Convertible::4pxj2"], 
                    Entity["Concept", "BottleScrew::djq6x"], 
                    Entity["Concept", "Cornet::35d97"], 
                    Entity["Concept", "CowboyBoot::5f655"], 
                    Entity["Concept", "CowboyHat::59wk9"], 
                    Entity["Concept", "Cradle::3882z"], 
                    Entity["Concept", "Crane::k29p4"], 
                    Entity["Concept", "CrashHelmet::76cs8"], 
                    Entity["Concept", "Crate::wmc92"], 
                    Entity["Concept", "Cot::3kgws"], 
                    Entity["Concept", "CrockPot::w5t85"], 
                    Entity["Concept", "CroquetBall::g84t5"], 
                    Entity["Concept", "Crutch::3q57h"], 
                    Entity["Concept", "Cuirass::256jq"], 
                    Entity["Concept", "Dam::w9687"], 
                    Entity["Concept", "Desk::q73z7"], 
                    Entity["Concept", "DesktopComputer::f8gmj"], 
                    Entity["Concept", "DialPhone::3j2f6"], 
                    Entity["Concept", "Nappy::6979r"], 
                    Entity["Concept", "DigitalClock::hm3x5"], 
                    Entity["Concept", "DigitalWatch::v274r"], 
                    Entity["Concept", "DiningTable::6ypqf"], 
                    Entity["Concept", "Dishcloth::4t678"], 
                    Entity["Concept", "DishWasher::px58r"], 
                    Entity["Concept", "DiscBrake::bxcw7"], 
                    Entity["Concept", "DockingFacility::f42zy"], 
                    Entity["Concept", "DogSled::34t8q"], 
                    Entity["Concept", "Dome::5j3x2"], 
                    Entity["Concept", "WelcomeMat::jqb5y"], 
                    Entity["Concept", "DrillingPlatform::r792r"], 
                    Entity["Concept", "Membranophone::2x379"], 
                    Entity["Concept", "Drumstick::4j5yw"], 
                    Entity["Concept", "Dumbbell::qjh33"], 
                    Entity["Concept", "DutchOven::qy3dv"], 
                    Entity["Concept", "ElectricFan::n79z5"], 
                    Entity["Concept", "ElectricGuitar::9pkmr"], 
                    Entity["Concept", "ElectricLocomotive::5wv23"], 
                    Entity["Concept", "EntertainmentCenter::mg549"], 
                    Entity["Concept", "Envelope::c722j"], 
                    Entity["Concept", "EspressoMaker::z42xs"], 
                    Entity["Concept", "FacePowder::yzy7x"], 
                    Entity["Concept", "FeatherBoa::c94h7"], 
                    Entity["Concept", "FileCabinet::vsb9c"], 
                    Entity["Concept", "Fireboat::xf64t"], 
                    Entity["Concept", "FireEngine::zsvx8"], 
                    Entity["Concept", "FireScreen::665b5"], 
                    Entity["Concept", "Flagstaff::qz2t6"], 
                    Entity["Concept", "TransverseFlute::8pj76"], 
                    Entity["Concept", "FoldingChair::4vqcr"], 
                    Entity["Concept", "FootballHelmet::c6twc"], 
                    Entity["Concept", "Forklift::b2dfv"], 
                    Entity["Concept", "Fountain::yn972"], 
                    Entity["Concept", "FountainPen::r2vw4"], 
                    Entity["Concept", "Four-poster::8kbhw"], 
                    Entity["Concept", "FreightCar::5pg8s"], 
                    Entity["Concept", "FrenchHorn::rm367"], 
                    Entity["Concept", "FryingPan::23fyh"], 
                    Entity["Concept", "FurCoat::6q374"], 
                    Entity["Concept", "Dustcart::2bbpr"], 
                    Entity["Concept", "GasHelmet::23k79"], 
                    Entity["Concept", "GasolinePump::wk2nk"], 
                    Entity["Concept", "Goblet::h85x9"], 
                    Entity["Concept", "Go-kart::gjsj5"], 
                    Entity["Concept", "GolfBall::63tb2"], 
                    Entity["Concept", "GolfCart::sxmp6"], 
                    Entity["Concept", "Gondola::4ds6k"], 
                    Entity["Concept", "Tam-tam::m962t"], 
                    Entity["Concept", "Gown::76k26"], 
                    Entity["Concept", "GrandPiano::8kk56"], 
                    Entity["Concept", "Glasshouse::qxjm6"], 
                    Entity["Concept", "RadiatorGrille::75d36"], 
                    Entity["Concept", "FoodMarket::4bmts"], 
                    Entity["Concept", "Guillotine::w4656"], 
                    Entity["Concept", "HairSlide::3xwcp"], 
                    Entity["Concept", "HairSpray::9w6z4"], 
                    Entity["Concept", "HalfTrack::59zq4"], 
                    Entity["Concept", "Hammer::cx2fn"], 
                    Entity["Concept", "Hamper::3b93m"], 
                    Entity["Concept", "BlowDrier::t4dpz"], 
                    Entity["Concept", "Hand-heldComputer::zs5zw"], 
                    Entity["Concept", "Handkerchief::84d24"], 
                    Entity["Concept", "FixedDisk::5xfff"], 
                    Entity["Concept", "Harmonica::8t835"], 
                    Entity["Concept", "Harp::zz89k"], 
                    Entity["Concept", "Harvester::472sq"], 
                    Entity["Concept", "Hatchet::7cspp"], 
                    Entity["Concept", "Holster::g2prc"], 
                    Entity["Concept", "HomeTheater::4y845"], 
                    Entity["Concept", "Honeycomb::qq347"], 
                    Entity["Concept", "Claw::7kmg8"], 
                    Entity["Concept", "Hoopskirt::3784g"], 
                    Entity["Concept", "HighBar::n5222"], 
                    Entity["Concept", "Horse-cart::546b9"], 
                    Entity["Concept", "Hourglass::83jnz"], 
                    Entity["Concept", "IPod::366dw"], 
                    Entity["Concept", "SmoothingIron::274h7"], 
                    Entity["Concept", "Jack-o-lantern::yss6v"], 
                    Entity["Concept", "BlueJean::68hww"], 
                    Entity["Concept", "Jeep::5twmt"], 
                    Entity["Concept", "TeeShirt::nk5bs"], 
                    Entity["Concept", "JigsawPuzzle::jgp79"], 
                    Entity["Concept", "Jinrikisha::g7j7m"], 
                    Entity["Concept", "Joystick::nj32z"], 
                    Entity["Concept", "Kimono::284nv"], 
                    Entity["Concept", "KneePad::nh7y5"], 
                    Entity["Concept", "Knot::f4x5y"], 
                    Entity["Concept", "LabCoat::6fg55"], 
                    Entity["Concept", "Ladle::3m7q7"], 
                    Entity["Concept", "LampShade::4b824"], 
                    Entity["Concept", "Laptop::zdd33"], 
                    Entity["Concept", "LawnMower::z97p3"], 
                    Entity["Concept", "LensCap::6j259"], 
                    Entity["Concept", "LetterOpener::sx79v"], 
                    Entity["Concept", "Library::8855f"], 
                    Entity["Concept", "Lifeboat::3r554"], 
                    Entity["Concept", "Igniter::638td"], 
                    Entity["Concept", "Limo::jfrr3"], 
                    Entity["Concept", "OceanLiner::s5fxp"], 
                    Entity["Concept", "LipRouge::4vd22"], 
                    Entity["Concept", "Loafer::br9fk"], 
                    Entity["Concept", "Lotion::79h3v"], 
                    Entity["Concept", "Loudspeaker::44d64"], 
                    Entity["Concept", "JewelersLoupe::kg4bc"], 
                    Entity["Concept", "Lumbermill::94r3y"], 
                    Entity["Concept", "MagneticCompass::5r692"], 
                    Entity["Concept", "Postbag::ck37r"], 
                    Entity["Concept", "LetterBox::pccp7"], 
                    Entity["Concept", "Maillot::d8grj"], 
                    Entity["Concept", "TankSuit::5k74s"], 
                    Entity["Concept", "ManholeCover::4x7fq"], 
                    Entity["Concept", "Maraca::395nq"], 
                    Entity["Concept", "Marimba::kbbq5"], 
                    Entity["Concept", "Mask::798jz"], 
                    Entity["Concept", "Matchstick::266wm"], 
                    Entity["Concept", "Maypole::qc3qr"], 
                    Entity["Concept", "Labyrinth::gc6rg"], 
                    Entity["Concept", "MeasuringCup::7b637"], 
                    Entity["Concept", "MedicineCabinet::m9g7m"], 
                    Entity["Concept", "Megalith::753z9"], 
                    Entity["Concept", "Microphone::7bqww"], 
                    Entity["Concept", "MicrowaveOven::fs7tb"], 
                    Entity["Concept", "MilitaryUniform::r9626"], 
                    Entity["Concept", "MilkCan::d9g72"], 
                    Entity["Concept", "Minibus::y94d9"], 
                    Entity["Concept", "Mini::pn78q"], 
                    Entity["Concept", "Minivan::yfsj9"], 
                    Entity["Concept", "Missile::854m6"], 
                    Entity["Concept", "Mitten::7d534"], 
                    Entity["Concept", "MixingBowl::djy62"], 
                    Entity["Concept", "ManufacturedHome::d7czj"], 
                    Entity["Concept", "ModelT::c44dv"], 
                    Entity["Concept", "Modem::wq8j3"], 
                    Entity["Concept", "Monastery::mkgg8"], 
                    Entity["Concept", "Monitor::nh8d4"], 
                    Entity["Concept", "Moped::p85wp"], 
                    Entity["Concept", "Mortar::jz37q"], 
                    Entity["Concept", "Mortarboard::8r99w"], 
                    Entity["Concept", "Mosque::35k94"], 
                    Entity["Concept", "MosquitoNet::5z562"], 
                    Entity["Concept", "MotorScooter::bbwp9"], 
                    Entity["Concept", "All-terrainBike::7n976"], 
                    Entity["Concept", "MountainTent::k5s7y"], 
                    Entity["Concept", "ComputerMouse::kbzr4"], 
                    Entity["Concept", "Mousetrap::j8542"], 
                    Entity["Concept", "MovingVan::2s387"], 
                    Entity["Concept", "Muzzle::c7f4q"], 
                    Entity["Concept", "Nail::x2828"], 
                    Entity["Concept", "NeckBrace::hxh4p"], 
                    Entity["Concept", "Necklace::58n8w"], 
                    Entity["Concept", "Nipple::jfzc3"], 
                    Entity["Concept", "NotebookComputer::b3h64"], 
                    Entity["Concept", "Obelisk::s7vg6"], 
                    Entity["Concept", "Hautbois::937r3"], 
                    Entity["Concept", "Ocarina::zc9mv"], 
                    Entity["Concept", "Hodometer::jw6kb"], 
                    Entity["Concept", "OilFilter::d8chh"], 
                    Entity["Concept", "PipeOrgan::gq9sr"], 
                    Entity["Concept", "Cathode-rayOscilloscope::z4q77"], 
                    Entity["Concept", "Overskirt::n87sx"], 
                    Entity["Concept", "Oxcart::vwjn2"], 
                    Entity["Concept", "OxygenMask::4k479"], 
                    Entity["Concept", "Packet::r63y2"], 
                    Entity["Concept", "BoatPaddle::843sz"], 
                    Entity["Concept", "PaddleWheel::c59g3"], 
                    Entity["Concept", "Padlock::73c99"], 
                    Entity["Concept", "Paintbrush::2456k"], 
                    Entity["Concept", "Jammies::5vhcb"], 
                    Entity["Concept", "Palace::3556d"], 
                    Entity["Concept", "PandeanPipe::gjck2"], 
                    Entity["Concept", "PaperTowel::j7j8m"], 
                    Entity["Concept", "Parachute::k594d"], 
                    Entity["Concept", "Bars::3m828"], 
                    Entity["Concept", "ParkBench::hq98s"], 
                    Entity["Concept", "ParkingMeter::h445p"], 
                    Entity["Concept", "PassengerCar::b7xgp"], 
                    Entity["Concept", "Patio::65kf2"], 
                    Entity["Concept", "Pay-phone::4h2kc"], 
                    Entity["Concept", "Footstall::b89vf"], 
                    Entity["Concept", "PencilBox::977v9"], 
                    Entity["Concept", "PencilSharpener::23nv4"], 
                    Entity["Concept", "Essence::9m7fx"], 
                    Entity["Concept", "PetriDish::xt977"], 
                    Entity["Concept", "Photocopier::33g75"], 
                    Entity["Concept", "Plectron::5g596"], 
                    Entity["Concept", "Pickelhaube::pgr6y"], 
                    Entity["Concept", "Paling::2brd3"], 
                    Entity["Concept", "PickupTruck::9k58n"], 
                    Entity["Concept", "Pier::36y3h"], 
                    Entity["Concept", "PennyBank::78b56"], 
                    Entity["Concept", "PillBottle::r9pdj"], 
                    Entity["Concept", "Pillow::3y32w"], 
                    Entity["Concept", "Ping-pongBall::3vdwp"], 
                    Entity["Concept", "Pinwheel::85td5"], 
                    Entity["Concept", "PirateShip::386k8"], 
                    Entity["Concept", "Ewer::w6672"], 
                    Entity["Concept", "CarpentersPlane::287kt"], 
                    Entity["Concept", "Planetarium::kq5yg"], 
                    Entity["Concept", "PlasticBag::9x453"], 
                    Entity["Concept", "PlateRack::sxt2r"], 
                    Entity["Concept", "Plough::y6c4t"], 
                    Entity["Concept", "PlumbersHelper::hq4m2"], 
                    Entity["Concept", "PolaroidCamera::38q9k"], 
                    Entity["Concept", "Pole::c4566"], 
                    Entity["Concept", "BlackMaria::5jn8v"], 
                    Entity["Concept", "Poncho::tr389"], 
                    Entity["Concept", "BilliardTable::9c56d"], 
                    Entity["Concept", "PopBottle::6243b"], 
                    Entity["Concept", "Flowerpot::jjb26"], 
                    Entity["Concept", "PottersWheel::zwt32"], 
                    Entity["Concept", "PowerDrill::j44yg"], 
                    Entity["Concept", "PrayerMat::x6rjb"], 
                    Entity["Concept", "Printer::c4244"], 
                    Entity["Concept", "Prison::rsq7c"], 
                    Entity["Concept", "Missile::n28m6"], 
                    Entity["Concept", "Projector::d56q9"], 
                    Entity["Concept", "HockeyPuck::3hj3q"], 
                    Entity["Concept", "PunchBag::wm5qg"], 
                    Entity["Concept", "Purse::n57jd"], 
                    Entity["Concept", "QuillPen::jm57s"], 
                    Entity["Concept", "Quilt::f56w9"], 
                    Entity["Concept", "RaceCar::9m8p9"], 
                    Entity["Concept", "Racquet::53f72"], 
                    Entity["Concept", "Radiator::3959j"], 
                    Entity["Concept", "Radio::8p736"], 
                    Entity["Concept", "RadioReflector::55ckr"], 
                    Entity["Concept", "RainBarrel::65nkh"], 
                    Entity["Concept", "RecreationalVehicle::p93tb"], 
                    Entity["Concept", "Reel::v4rgf"], 
                    Entity["Concept", "ReflexCamera::j67h4"], 
                    Entity["Concept", "Icebox::tnkd4"], 
                    Entity["Concept", "Remote::h4drx"], 
                    Entity["Concept", "Eatery::f73dy"], 
                    Entity["Concept", "Six-gun::ctqb6"], 
                    Entity["Concept", "Rifle::x7pp3"], 
                    Entity["Concept", "RockingChair::ncpd5"], 
                    Entity["Concept", "Rotisserie::c8hjy"], 
                    Entity["Concept", "PencilEraser::7y7dd"], 
                    Entity["Concept", "RugbyBall::34tbp"], 
                    Entity["Concept", "Rule::shrw6"], 
                    Entity["Concept", "RunningShoe::z7fvm"], 
                    Entity["Concept", "Safe::36p67"], 
                    Entity["Concept", "SafetyPin::8h4m3"], 
                    Entity["Concept", "SaltShaker::7k48t"], 
                    Entity["Concept", "Sandal::7f3xr"], 
                    Entity["Concept", "Sarong::96j5v"], 
                    Entity["Concept", "Sax::v45s9"], 
                    Entity["Concept", "Scabbard::77z36"], 
                    Entity["Concept", "WeighingMachine::2xvy7"], 
                    Entity["Concept", "SchoolBus::2983r"], 
                    Entity["Concept", "Schooner::f2t26"], 
                    Entity["Concept", "Scoreboard::z76vk"], 
                    Entity["Concept", "CRTScreen::q6vr6"], 
                    Entity["Concept", "Screw::wwzc4"], 
                    Entity["Concept", "Screwdriver::8ty86"], 
                    Entity["Concept", "SeatBelt::4qg32"], 
                    Entity["Concept", "SewingMachine::23c46"], 
                    Entity["Concept", "Buckler::4m7zq"], 
                    Entity["Concept", "Shoe-shop::7ds48"], 
                    Entity["Concept", "Shoji::x95jt"], 
                    Entity["Concept", "ShoppingBasket::db865"], 
                    Entity["Concept", "ShoppingCart::95g62"], 
                    Entity["Concept", "Shovel::tjpz7"], 
                    Entity["Concept", "ShowerCap::2787m"], 
                    Entity["Concept", "ShowerCurtain::6cs25"], 
                    Entity["Concept", "Ski::5nbj2"], 
                    Entity["Concept", "SkiMask::6hd4m"], 
                    Entity["Concept", "SleepingBag::549k4"], 
                    Entity["Concept", "SlideRule::59p96"], 
                    Entity["Concept", "SlidingDoor::m65qk"], 
                    Entity["Concept", "One-armedBandit::573v8"], 
                    Entity["Concept", "Snorkel::53ncf"], 
                    Entity["Concept", "Snowmobile::y538p"], 
                    Entity["Concept", "Snowplough::h36y5"], 
                    Entity["Concept", "SoapDispenser::c2fjc"], 
                    Entity["Concept", "SoccerBall::25w42"], 
                    Entity["Concept", "Sock::8w379"], 
                    Entity["Concept", "SolarCollector::pw2xw"], 
                    Entity["Concept", "Sombrero::k9893"], 
                    Entity["Concept", "SoupBowl::w86pk"], 
                    Entity["Concept", "SpaceBar::735sr"], 
                    Entity["Concept", "SpaceHeater::spt23"], 
                    Entity["Concept", "SpaceShuttle::72jnc"], 
                    Entity["Concept", "Spatula::r7876"], 
                    Entity["Concept", "Speedboat::r6p4f"], 
                    Entity["Concept", "SpidersWeb::28fz6"], 
                    Entity["Concept", "Spindle::7zh9v"], 
                    Entity["Concept", "SportCar::k9874"], 
                    Entity["Concept", "Spot::q3792"], 
                    Entity["Concept", "Stage::86r83"], 
                    Entity["Concept", "SteamLocomotive::9kv4y"], 
                    Entity["Concept", "SteelArchBridge::46zx5"], 
                    Entity["Concept", "SteelDrum::fqv7s"], 
                    Entity["Concept", "Stethoscope::f829c"], 
                    Entity["Concept", "Stole::g8fqc"], 
                    Entity["Concept", "StoneWall::8489j"], 
                    Entity["Concept", "StopWatch::4vk6s"], 
                    Entity["Concept", "Stove::27vm8"], 
                    Entity["Concept", "Strainer::2c2kx"], 
                    Entity["Concept", "Streetcar::vhm65"], 
                    Entity["Concept", "Stretcher::74r96"], 
                    Entity["Concept", "DayBed::nrph3"], 
                    Entity["Concept", "Stupa::g64q6"], 
                    Entity["Concept", "Pigboat::p7yyy"], 
                    Entity["Concept", "SuitOfClothes::5c67x"], 
                    Entity["Concept", "Sundial::7mj6d"], 
                    Entity["Concept", "Sunglass::xc3yz"], 
                    Entity["Concept", "DarkGlasses::855bw"], 
                    Entity["Concept", "Sunblock::65k7n"], 
                    Entity["Concept", "SuspensionBridge::66qcg"], 
                    Entity["Concept", "Mop::v6xdr"], 
                    Entity["Concept", "Sweatshirt::s5937"], 
                    Entity["Concept", "BathingTrunks::c892w"], 
                    Entity["Concept", "Swing::s5b96"], 
                    Entity["Concept", "ElectricalSwitch::5gnjt"], 
                    Entity["Concept", "Syringe::8j57r"], 
                    Entity["Concept", "TableLamp::6239m"], 
                    Entity["Concept", "ArmoredCombatVehicle::353r5"], 
                    Entity["Concept", "TapePlayer::bf5f8"], 
                    Entity["Concept", "Teapot::c54x7"], 
                    Entity["Concept", "TeddyBear::f56q9"], 
                    Entity["Concept", "TelevisionSystem::5593b"], 
                    Entity["Concept", "TennisBall::xk58h"], 
                    Entity["Concept", "ThatchedRoof::w2cjw"], 
                    Entity["Concept", "TheaterCurtain::5kbhk"], 
                    Entity["Concept", "Thimble::9828b"], 
                    Entity["Concept", "ThreshingMachine::372m3"], 
                    Entity["Concept", "Throne::2t9q6"], 
                    Entity["Concept", "TileRoof::5p749"], 
                    Entity["Concept", "Toaster::rp6v2"], 
                    Entity["Concept", "TobacconistShop::88ncg"], 
                    Entity["Concept", "ToiletSeat::z8wvq"], 
                    Entity["Concept", "Torch::j9rg7"], 
                    Entity["Concept", "TotemPole::gbxn5"], 
                    Entity["Concept", "TowCar::ph6vn"], 
                    Entity["Concept", "Toyshop::74q74"], 
                    Entity["Concept", "Tractor::39j62"], 
                    Entity["Concept", "ArticulatedLorry::ph66j"], 
                    Entity["Concept", "Tray::jyx2n"], 
                    Entity["Concept", "TrenchCoat::rq833"], 
                    Entity["Concept", "Tricycle::3537s"], 
                    Entity["Concept", "Trimaran::2639q"], 
                    Entity["Concept", "Tripod::pqth2"], 
                    Entity["Concept", "TriumphalArch::q79sh"], 
                    Entity["Concept", "TracklessTrolley::78g52"], 
                    Entity["Concept", "Trombone::22z3w"], 
                    Entity["Concept", "Vat::vcpt8"], 
                    Entity["Concept", "Turnstile::82gr4"], 
                    Entity["Concept", "TypewriterKeyboard::z8334"], 
                    Entity["Concept", "Umbrella::3mntq"], 
                    Entity["Concept", "Monocycle::mrm29"], 
                    Entity["Concept", "UprightPiano::286t3"], 
                    Entity["Concept", "VacuumCleaner::7rg56"], 
                    Entity["Concept", "Vase::4x594"], 
                    Entity["Concept", "Vault::7k875"], 
                    Entity["Concept", "Velvet::575z6"], 
                    Entity["Concept", "VendingMachine::96kgg"], 
                    Entity["Concept", "Vestment::334y8"], 
                    Entity["Concept", "Viaduct::p32mt"], 
                    Entity["Concept", "Fiddle::q9djd"], 
                    Entity["Concept", "Volleyball::q7bkw"], 
                    Entity["Concept", "WaffleIron::gpqx8"], 
                    Entity["Concept", "WallClock::w5687"], 
                    Entity["Concept", "Billfold::z7845"], 
                    Entity["Concept", "Closet::588p6"], 
                    Entity["Concept", "MilitaryPlane::whx2r"], 
                    Entity["Concept", "Handbasin::6w875"], 
                    Entity["Concept", "AutomaticWasher::6d32z"], 
                    Entity["Concept", "WaterBottle::5wh67"], 
                    Entity["Concept", "WaterJug::759dt"], 
                    Entity["Concept", "WaterTower::4rr5d"], 
                    Entity["Concept", "WhiskeyJug::5gcrh"], 
                    Entity["Concept", "Whistle::pv275"], 
                    Entity["Concept", "Wig::9msqy"], 
                    Entity["Concept", "WindowScreen::wfk7m"], 
                    Entity["Concept", "WindowShade::3rh75"], 
                    Entity["Concept", "WindsorTie::5tt62"], 
                    Entity["Concept", "WineBottle::g4m78"], 
                    Entity["Concept", "Wing::tbhz7"], 
                    Entity["Concept", "Wok::fv9fj"], 
                    Entity["Concept", "WoodenSpoon::nc2wp"], 
                    Entity["Concept", "Woolen::ns82d"], 
                    Entity["Concept", "SnakeFence::837z2"], 
                    Entity["Concept", "Wreck::qr554"], 
                    Entity["Concept", "Yawl::hggp6"], 
                    Entity["Concept", "Yurt::4bbtv"], 
                    Entity["Concept", "InternetSite::639pp"], 
                    Entity["Concept", "ComicBook::ty3qz"], 
                    Entity["Concept", "Crossword::yqtk6"], 
                    Entity["Concept", "StreetSign::ysx2f"], 
                    Entity["Concept", "TrafficLight::b4966"], 
                    Entity["Concept", "BookJacket::sy4d3"], 
                    Entity["Concept", "Menu::g698m"], 
                    Entity["Concept", "Plate::2244k"], 
                    Entity["Concept", "Guacamole::xc482"], 
                    Entity["Concept", "Consomme::37g8f"], 
                    Entity["Concept", "HotPot::kgb8q"], 
                    Entity["Concept", "Trifle::b4264"], 
                    Entity["Concept", "IceCream::825yn"], 
                    Entity["Concept", "IceLolly::473v3"], 
                    Entity["Concept", "FrenchLoaf::x859t"], 
                    Entity["Concept", "Bagel::x38n5"], 
                    Entity["Concept", "Pretzel::967k7"], 
                    Entity["Concept", "Cheeseburger::3z2z7"], 
                    Entity["Concept", "RedHot::3j848"], 
                    Entity["Concept", "MashedPotato::8ys8w"], 
                    Entity["Concept", "HeadCabbage::9c693"], 
                    Entity["Concept", "Broccoli::spbm9"], 
                    Entity["Concept", "Cauliflower::fmp3m"], 
                    Entity["Concept", "Courgette::44yb5"], 
                    Entity["Concept", "SpaghettiSquash::8j979"], 
                    Entity["Concept", "AcornSquash::8p8y2"], 
                    Entity["Concept", "ButternutSquash::6k466"], 
                    Entity["Concept", "Cuke::nzfb2"], 
                    Entity["Concept", "Artichoke::ntvv7"], 
                    Entity["Concept", "BellPepper::9w646"], 
                    Entity["Concept", "Cardoon::s78dn"], 
                    Entity["Concept", "Mushroom::3xw4j"], 
                    Entity["Concept", "GrannySmith::k3786"], 
                    Entity["Concept", "Strawberry::3csyb"], 
                    Entity["Concept", "Orange::w579d"], 
                    Entity["Concept", "Lemon::743j2"], 
                    Entity["Concept", "Fig::d3p6f"], 
                    Entity["Concept", "Ananas::m6nzv"], 
                    Entity["Concept", "Banana::f6z73"], 
                    Entity["Concept", "Jak::p6r56"], 
                    Entity["Concept", "CustardApple::nx482"], 
                    Entity["Concept", "Pomegranate::dh736"], 
                    Entity["Concept", "Hay::vcd3m"], 
                    Entity["Concept", "Carbonara::9my37"], 
                    Entity["Concept", "ChocolateSauce::y5838"], 
                    Entity["Concept", "Dough::8x86g"], 
                    Entity["Concept", "MeatLoaf::t7nnp"], 
                    Entity["Concept", "Pizza::56w88"], 
                    Entity["Concept", "Potpie::38zh5"], 
                    Entity["Concept", "Burrito::4xwy5"], 
                    Entity["Concept", "RedWine::666g6"], 
                    Entity["Concept", "Espresso::rv2y4"], 
                    Entity["Concept", "Cup::q9zjy"], 
                    Entity["Concept", "Eggnog::9v7t8"], 
                    Entity["Concept", "Alp::m4bkv"], 
                    Entity["Concept", "Bubble::qp224"], 
                    Entity["Concept", "Cliff::q56fy"], 
                    Entity["Concept", "CoralReef::669j5"], 
                    Entity["Concept", "Geyser::5w69b"], 
                    Entity["Concept", "Lakeshore::4483j"], 
                    Entity["Concept", "Headland::8n9c9"], 
                    Entity["Concept", "SandBar::4w689"], 
                    Entity["Concept", "Sea-coast::m3d85"], 
                    Entity["Concept", "Vale::88wm8"], 
                    Entity["Concept", "Volcano::9fcbc"], 
                    Entity["Concept", "Ballplayer::7v976"], 
                    Entity["Concept", "Bridegroom::85m28"], 
                    Entity["Concept", "ScubaDiver::kqb95"], 
                    Entity["Concept", "Rapeseed::5x738"], 
                    Entity["Concept", "Daisy::hypz2"], 
                    Entity["Concept", "CypripediumCalceolus::7tzrs"], 
                    Entity["Concept", "Corn::m7hpj"], 
                    Entity["Concept", "Acorn::f62cf"], 
                    Entity["Concept", "RoseHip::333d2"], 
                    Entity["Concept", "Conker::v8p64"], 
                    Entity["Concept", "CoralFungus::f7fp4"], 
                    Entity["Concept", "Agaric::844w2"], 
                    Entity["Concept", "Gyromitra::3v4zb"], 
                    Entity["Concept", "CarrionFungus::wj2ng"], 
                    Entity["Concept", "Earthstar::678m7"], 
                    Entity["Concept", "GrifolaFrondosa::m7rxd"], 
                    Entity["Concept", "Bolete::9g3s2"], 
                    Entity["Concept", "Capitulum::834z6"], 
                    Entity["Concept", "BathroomTissue::ts4sr"]}, "Dimensions" -> 
                    1000], 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart = {
                    "Inputs", "Input"}, 
                   NeuralNetworks`Private`NetChain`part = {"Inputs", "Input"},
                    NeuralNetworks`Private`NetChain`selected = 
                   NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}], 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"drop7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"prob\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {323., {422.5, 428.5}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7400828524493527`*^9, {3.7400831216693335`*^9, 3.740083150094864*^9}, {
   3.7400834550518513`*^9, 3.7400834736115932`*^9}, 3.740083541055862*^9, 
   3.7400835873039093`*^9, 3.740083796810417*^9, 3.7400847227411323`*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"4a10a292-a590-4477-9629-fa371d8600cf"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 8192}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7400828524493527`*^9, {3.7400831216693335`*^9, 3.740083150094864*^9}, {
   3.7400834550518513`*^9, 3.7400834736115932`*^9}, 3.740083541055862*^9, 
   3.7400835873039093`*^9, 3.740083796810417*^9, 3.7400847232881327`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"9ac019c7-e43c-4722-a596-e81e9acd4c8a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training and testing the network", "Section",
 CellChangeTimes->{{3.740084743741415*^9, 
  3.7400847521344233`*^9}},ExpressionUUID->"3cc45fed-b98b-4a7d-aada-\
1eaecbdec5f2"],

Cell["Training and exporting the network:", "Text",
 CellChangeTimes->{{3.740084782340641*^9, 
  3.740084791018626*^9}},ExpressionUUID->"97d07ceb-64ae-4836-a765-\
db5d61ab07de"],

Cell[BoxData[{
 RowBox[{"vgg16NetTrained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"vgg16Net4", ",", "training", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "testing"}], ",", "\n", 
    "\t\t\t\t\t\t", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "32"}]}], "]"}]}], "\n", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<MaxLength2.wlnet\>\"", ",", "vgg16NetTrained"}], 
  "]"}], "\n", "\"\<MaxLength2.wlnet\>\""}], "Code",
 CellChangeTimes->{{3.740084796019738*^9, 
  3.7400848270868735`*^9}},ExpressionUUID->"2aa0693e-4074-4d93-9f20-\
6ea72f0ebf28"],

Cell["Importing the trained net, once it is done:", "Text",
 CellChangeTimes->{{3.740084831288005*^9, 
  3.7400848380283155`*^9}},ExpressionUUID->"61480f1e-98ee-4bca-9084-\
b6d0422980a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vgg16NetTrained", "=", 
  RowBox[{"Import", "[", "\"\<MaxLength2.wlnet\>\"", "]"}]}]], "Code",
 CellChangeTimes->{3.740084841882638*^9},
 CellLabel->
  "In[132]:=",ExpressionUUID->"019d5906-0589-44c8-8f69-412165b0e60c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 100, 100}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 64, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "b3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 50, 50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {50, 50}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 50, 50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "b4" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 128, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b5" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "b6" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 25, 25}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {25, 25}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 25, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "b7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 256, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "b9" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, 
                    "$SpatialDimensions" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 13, 13}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 13, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b10" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b11" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "b12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 512, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$GroupNumber" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$MXPoolingConvention" -> "full", 
                    "$MXGlobalPool" -> False, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 8192}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 8192, "$InputDimensions" -> {512, 4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "43", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox["\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {285., {37., 43.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740084856195431*^9},
 CellLabel->
  "Out[132]=",ExpressionUUID->"f1775166-97e7-4a3a-884c-0ba3f05b37b1"]
}, Open  ]],

Cell["\<\
Generating a testing sample and looking at network performance:\
\>", "Text",
 CellChangeTimes->{{3.740084866917693*^9, 
  3.7400849042088337`*^9}},ExpressionUUID->"6a1ff284-1bec-40ee-82ce-\
d2d84726901e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"sample", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"testing", ",", "10"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
            RowBox[{"ImageSize", "->", "200"}]}], "]"}], ",", 
          RowBox[{"vgg16NetTrained", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", "\n", "\t\t", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"vgg16NetTrained", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "/", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "*", "100"}], ")"}]}], "}"}], 
        "&"}], ",", "sample"}], "]"}], ",", "\n", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Input\>\"", ",", " ", "\"\<Output\>\"", ",", " ", 
       "\"\<expected Output\>\"", ",", "\"\<Percentage Error\>\""}], "}"}]}], 
    "]"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], "Code",
 CellChangeTimes->{
  3.740084917343379*^9, {3.740084976342716*^9, 3.7400851115527587`*^9}, {
   3.740085162965621*^9, 3.740085232167946*^9}, {3.7400863574935136`*^9, 
   3.74008651470842*^9}, {3.740086589472692*^9, 3.740086694459313*^9}, {
   3.740086741010662*^9, 
   3.7400867434384813`*^9}},ExpressionUUID->"b5ca959a-9b7e-491c-8de3-\
2189dd1ae8ed"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Input\"\>", "\<\"Output\"\>", "\<\"expected Output\"\>", \
"\<\"Percentage Error\"\>"},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
kQ==
       "], {{0, 0}, {100, 77}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 77}}], 
     RowBox[{"{", "11455.5986328125`", "}"}], 
     RowBox[{"{", "11500", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "0.3860988451086957`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
TjqLlMOEdgFegjtW+NN7K/7C0m8sPdEtLQ2eLPn+ucaPWQN8KBv3o49+eG/1
Vk1dZSQUHo9EaquKbz0e+/WZ76n1DCyptaLhfH17jVw9OGgZ0vS7Kypaqkpr
4JAeBob2/s9+/uDReGXte243MxQRltUea2q+goc0omtrORhM+eUzxdUf93v5
chvpePlbsyvOXxR9A6VuRugajnV/3xtV+jJyT1bg3eMYdnH+Q5Y5hnOkye4c
9TWr/DL4FNQRwbiFChywAodkWwIJKteX45ijMHcW504z3Wm2NYYzR1EjL4RA
uwYSNG+C4HyGUu42ep6SwgfsoZTQucYM58T2LabyBlo2ihx6op3eMjUpPgbl
6c7APQn0dMrQyi2toZfhDViKifyTi9+YeyyDdn1j9xoydp9eh3z3Fw3vwPTM
al7XWxXfmt0Zqq6unnJN37DPQUqrp+87f1n4tyJ5i1zVWdL48ysNZxW6sEZ3
XakbLa/obChrJEAwtGb6iR+9e3/Jdaa0YHKiY2Sst7Tjneqac7xLTZoLXbzi
Vmj15bKOHzM91Wx7VWHPd+ai+h9cLkAb6uGGumOwt4b2dc4U156h2LN4UH12
MLhnifaXE5ivqim/dCYw3j1KXm6B/pzCWOMoT4Lrzwn8OYI1jgDrE5/3Dz/j
De4gzJt46yY5uMMeXIJ7f0Myf4JUrncY13AjKeVISg3auGGFpLyOpViaJhYM
thtcmOOyZgPq3OsJ5fC2e5wOftWx1ndITgJM3fPT4n+amed2NhXkZup3Ztre
uVJwAn+yWtbTbsJ+rajA9kBZUlJy1X7zZv/V5rNls4/t71X+jUReq1I1FjX/
4FLTKbl2XK15pNBNlVX0NJY2kttwrHreybffv7syeLKqYGq6bHSi7njtNyur
zlhK0RPFDEM5svXs+2ea/vYK/e+KSf94vKXAu8D6WU0BOwglezt/Df3vlm2e
M80CfGx7KNseAizzuF5N9v5BKjhjWJAbgTRPv4JyxTGhA7o/KTStU0N7NH+O
5I3zzRsMyyYW4IrsiYYzkomkbCTFMyR61fHO4d+KJj5RmB/RwGgiv4uYfqG/
emBFa6qgglKg1dUPMWP/KnHtod1x0tiWsZPfUEUrJ9gJOCP2h4V/Px9Td7QU
vLjb9r9itHrsW+pHoo8JZ/6542fnWO96FwfKy8tvuu9e1842nCqee+J4p7Tg
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
       "], {{0, 0}, {100, 65}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 65}}], 
     RowBox[{"{", "44306.4921875`", "}"}], 
     RowBox[{"{", "44500", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "0.43484901685393257`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzNfHd0VNe19x71XlAB0UQTHQECIUCAUEMSIAkJ0Xsv6tKMpveiGXXRcYtj
J+/ZSV7iuGIbMB11aWY0M5reizoY27Gdou+cEXGc73t/fLHXei9rHd11587V
vff8zt77/H57nztzT5YXnvUAgGo/tCk8QU6tqjpB3R2GPuwpq75wruzM6Zwy
4plzZ6rWn/REB7PQ32n0h/fJtn+hkexAGQKiA2pcUKyDEhOUmqDSRqiye50f
gDIz0Mb8y62AGv2ZV5UTykxQbYEKI1TooNwAVLsXcySAOehHsnkwXL60Qd8a
C4Hq8qE5vCtNQHf6sIf8aGbg2D1Zdg+uy5tsANSqtFBjBIbdg2oFig1fimSG
aiO6Gm40dNAMDAdQLFCtA6Y9oEbvS9R6U0yeLKcvfySIYfOtMXgyHT4sl0eF
FnXBmzwUSB72qbRDmRUq7FBhgxIj6lRQ0WMoNQRQhyI5LyKZz4OO9ePOnpcD
1exFMgDT4f2vYWUjlOqhZtCPNhRAcQWQ7L60oSD6cDDaZ40GYjQGocqK8aG4
AJ1JGYEKJ5CeEajPPcsG4YIZzluh2ArnLFDYAZUjUO6EEtRseMv4yuesDkp1
gAAkWjwrjUAfDKC5/CkuP/qwP9HmUWrA/aKP+1S7oNKBu1luw925oAPqKFQ7
ocIC9BE/6mAg2elbaYUzA3BRB7QRT+qQD9opRo834h4ypx8a9HITHnF0BG1r
nEAf8uaOT+E/m3ZeCSf6gIg66wSKAxDgdeNTGWZf1P4lrFBDOLCfBZAdnhSn
d4UBiCYCaqUq4AwF0G0ENLh0ZFQ299YKDBd+wgoXkNywlDugCpnlMN6XTExB
4JzSAOWZB3kMDsmhEj35qBfvWThrMLRC63lWChRrYLXJr0RNKB6AGpt/uZFQ
bfVkjQWh4SANIpQIkxaObLsa7QwBGXV52P9UHzBHQ2lDwP3KkzFCKDe7x27Q
E52Jx1HjRTOFUQyEGhOwXdgykVlyhqFGB9VaD6o+kO2IYNuCkCFRjMBC32q9
WKbQSjlUKP41oMjI5l3AGYMqA9Qgj0MfzdDwPFQ8FFjcDQKbD10NHB0IzFBr
gdZRH6IUmBbsQURk/AZ0aw+2yxv9S5kKyhTYfSoH8Le8QR/esF/tWGCxFJY3
QO7voErqKXbGiOwx5IEgqiakbjiWb49mmkOpBr9KJZT1A1EPbLs3y+ZFdfeI
pHcPkAmIas/k14CsDSTrcGerVEDSAs8WjqwCfeS7vAT6WK46jqOK5uqDeAgx
BdTIgamF5sFp1P5g7sD0DZcg/RWod8QylX4cXTBLH843TxXZp7LNU/4lrFC4
IJrwU1FNwLVBw2jYxTZga8Kq2v0uO1eI1QvobdMkysUNyiWsJ9Nr++Y2KheJ
ZXFixaJm9fIm7Ypa6QJmx0x05KplLadj1jVr4qv29dyeOdzO2Y2a5ZQHUfk3
4VVbStVn0/a/CfSH8zlPl7RokkV9q/nd8YLeeJF8RaMmgds7/5ptHUc6CzWe
dDb62Khb1mqeUzsQU6dawuuJz7kEwr5ETnfsJfOKJu0ygXRJ08CG2v5VzM4I
oWxOvSyD354h6k2qUy6vVcxqNs6+bJ0nUkynPZlRr0zcfhka+rfyuxI3CkDS
v7pWtbTetriy15+pjRBYpv1rWFkJTLM3Wx8gNEWzBqYK1Us21MGeXwRta/Cr
+mBzjmj2nob4nbzludyVhbx1W0rmn6hP3U1ZVlC9cB952VHOGrTdVRV3rjZZ
8tujZ0UbU09F765edIAef5AWj7ZHWQmXPz6bWzE7p3zmydqkNx5WH+IkFJCX
ZpfNPSJI3Fk9bztxzmHRqgOCpQ23DhSwZ+6kTT3WsGIXbXEhYzH/v3J2s2ft
Z6/ax9qceT5hLyMF7b/2tOzK5xd3kpZkFS87VZ9xtHZZekVELmNtRs2KXN7C
7byIXLEv/dYKwf3EXIl3vjgihzNtJ29BLm/xNnpsJn3GsWur2Pe2Ep/M3HgV
Cv4A1VJ/spXw/4uVFYUjD7rdv0bjwzFEk7qn1mmS0xtB0L6+rjNnp3DBLsHG
uk952cT0vJqMa581HajZt+tCzs33BGWcvYXHMo+e33WxuuhEadbh0vSzlF1F
5zNLmEduviu8QCwsPLSlgnL80On809VFb3zEPc/L3FOWePMPrAPFmWdrDu07
U3S87MjZmsOFZzIPV+XtKd/6y88Z+4irT7JTLv+efpK8F13q3XviA2Xr9l/I
OlpyqJxBKjy5f++5oiMVBw+WHD5edfok8ez2QzlHKgrf/vTqQdLeouqCQ5zc
nTXxuzizrncdfLP/TCY9SPx54c3Oi9upixs+qbh+n31QuFn0ydHc2mhJ/6bt
b0DJo+B6xyLUfYp7LqbY3Q0bD7Yfd3N//KFZPIh2wlkLkJ6jiYNA00Vw5au2
tYJYESzpn7ajIYTz2ZldgozttE2ZFXN/08UpKtl4lrHj7YfkXaXLTpcePnrs
wO/fby2lZRaVLjtA3XhWeLjxHeEFRt7J0rQjx9PPXzhwvvTCoeKCm5+X7eXM
3F4a8Yc2wf5zW0urig8fJp4+zTl57uKhc4eOVRw/Q99z/f0z+6pn7q9ceZKy
/SzleOHJrP/8lHmesvH4xexDJwspbHLRkcNHz1fuPVV9ulKw62jxGWL50eIT
h8+cPnXhzJmyI0cvFp4hHzlMy86snHKt88C1zmOZrMBddR7ZHCjgR958XNLw
ccn2mrnHL89sbk+t78hKEUHdwDpm7zw3Mv+MyUu4fnR8ch9jBRdHoHQcLuiB
pImsU6ftecOnSRtRpwpOr4OG3sP17cRMxpLd4ujLd/KP0lamHotqvltUyIo9
WrGdzL544kLGkfLEA4zFBSzkDklHhLuv/pF4krixklp49HT2uepjJ2iFTZ+f
zeVG7efNvnHr1JGqpGMleUdOnTpTWnG2+uSecwUHy04WleZe/fjcAfrMmkuZ
dW9f2FORhSzt7TvVhyoXn63aeZF44HBJ1kX6oaPVpwvOH99ffmbbsZyj1Lxj
NdmHS/JPlu09caHgbMX+fRd2HyTnnG5NaHlSRH1/x4Gr80VPEn5pytnXFCq8
VbBfvDaPM5d/Z801xda6tpyDr89kd6xs1K1BUxtuVg+yxY9s8cEuiT463O0f
xwPwVzbMQktsPtXOyBpDlMCwmteev67Ga3sTJAuh2biY17c8iemfVT8zQwTN
nYm59NDz11dvE3s19+zczZiTe27xKUr+MXr2ptLwlo5T2fzV2xirdzOXneIn
7a9Ye6h6Q0HF0nzqioNN6RsqYveJlxeyZu6oCCtpWXVWsmLLyYAC8oIT4qyd
5QWF5L3HJek7yTOyykP3c+P2CVanVUw7JJ67lznvJCt3PzF9R3nUTnJIekXU
6WtJ9V/svvDG4jye19ZKON0Q8+rdk4XF6F75h6h7DnKzN1cGb2UEHLiayLpT
tE0C6LGZtzdmCyL2Nq/aJohJ5sAGDmxv8o4rgcI3ofJRJAYExSIEhTkQY2L1
+mesvPBx/JXPJG8vNfiQLFF0XUytPkHYtX3P9Rh+x/LL5hVsWRhHEdtk3kF+
mlCvn18rn8G5F9/Qm8ZTrRZrV1/pT2m4vbOwZsMe5pZW6QGxLEskK2I/2VX3
uOBm29FX71/Mroy63pnf1LmTdmt3jmQJ707BK/KjLU928m6tlDyc/5Y5uaFz
bUP7rtZ2zubqRNHts/sb51/rKmrtyKnr3HFNvYdzb11LR+FO2ups8pJf6Y41
92xolW/htS1lt0+nPg5uUca9qk9s7lh15em2Nzor8umrMklLuJ8caO7Ou6Hd
J+k8li6KalalNw4kNSpSOW1bmI+zme3ptep1zZb1EsXm/Nc86nQrhdp52JBw
8/hRI/wj4L/89h9HGCNe7EF/hjaQrYwiPQoveBNqOqHWSECXYikXU1WzmYYo
rsmnaXAKVz6VoZhRqQmk2QMFen/q3aiiuuU7BAtZvcspiikM3Ty2eknDQFLt
k6T6B9t3ij2uGJdz5BHXXalZ16DwlQBh+9bmvrxLqq0CuU+tAcRGb+7ANLEq
e9ulaEHnDjTcko6Eq7p1SQ3A1y/k9C9o0qaiLu+on0W9v3prIwjV8yXmGc2D
URJbsEQfVaeKo91dIXqcxrq3PveS177XAsWyxPqBhWLl0treLOQXXOk8Wm+Y
2BDH1y3m6xJo6kXl/SE1qkhS5+yc14DeP40kDcIuhoznx/MdMiHsd34YNzf/
fGl7briQcEMslKwl1DmmtjhnclQgtgMP0S3NzOruOVRNDM8eQ9UGEPsJLF0A
1xGESPsFE1B0cNU5f1fDdPInmVdGV/IGvRBbpmh9aD2Ru1+FvCafRukmnjqE
rISqLqBLwyTKeE7b+k0c/72/mMJWAN8KTDMInIQLbX6trlRa+8qdVyFNCPS2
aOqAn+T5NIrKn9QzhdK2RNKfXvRWSE37XPpACB0JHD0wkAKSE6htU3dfjcm7
FCNRrRFqZlQ8IZC7oNEawusP4XUnFLzh0WSbf+EJ/HJixbGHQDaGsIajS3RA
d4TwzHNp/dPp6nCWKfyl3/0YE4TSpN/94I/OSX/EWHHGgTkClRogKr3R8/D0
PnVDqBfQODSLLItd0wzb3oSlfBCY1ogcYVVIEn4FF61A1cIrQ6uTSMB/lCY2
Ti2TAcUEDCO8/XXyKjLk1PqxHibWW2MvPQ9tHfUSaggi+dwrmt3pvCVJtHCW
bJpkkFA7ggkwSQls7TSxMmEzH/Zc8bui2UBVe1ajkXJ4iBz+rUPRbOnUpRS4
YssXmqYiHcExeovtYQJdoKBv8a761RnceXR5bNN4EBrfWivceObDkREYT+dt
roPqDrj0IuxCL0i+8cUCcwwo41BmASSIOOZoujGQavDBgEz61z/sx+v/tivH
379C8QpJ/jFgDQYz7dFU7RSWIZCNLEQNTHVk2qvAUsVVtS26ZD21oQHY+kDW
EFbKtNEArmaOoC0plxf9mvxoXf8iiTmCo/VqssUSP5ufKw4raljU3HOA1h1H
kQeJNAG1itA66YqmzqIs1uattPgbllxqVxBF6iu2xvA00fWGeN7TDXmSqH2i
hYI72WL9Uo4lgq2JYCmCeP2e9cq5Rdfn0+/tFPQv4g1EMKUx9bpFEsUsScf6
3dzU1JpVEm0yUe7JUEGtzpMvJfDaI940FW0VgkQ3kzIADCRJXFjvVw7BWSOQ
hz1odv9yFdS/iC5RAsmCWQF/LIBi8arSYQmMXAwpSt6Yd5kahM9CqvVQbQDh
c78yLXARsxqFUitUmAPprlkVA6GS8Xk0QwDXGMPXJG5qAZHJiybzqJUVJHI9
+dqpSAdxnvkQNVFZDVMv3SPnV8Vf+uRcy6P9tY/SW/uzBA8y6z69UMRM3UVN
qb1d0th/mNG+WdyV2ty97XXFfs4HRTtImUcke8nvZV3tL2zoKWQ/zG7o2X2z
/2zj7eLssjUHqne9fr9V9OjUJd0J7uM87sOUlt51TU/TdvM2NX3Bqnuc39C1
taU3t6V7Z1Pb1uZ7u4+yd+XX5PAeH2Z3pzdr0niP4huebLrWue/Sg7LCujj6
00VcXRTTFoKCTIkRKp1InnsQbciQPCapJjIV7ihUGbEUrTH6kA1+NBtyQJwd
qkRqF9m83oM3HMkfnkI04jBV7r7IOaRbX0SfU/nQXTFne5F8DmLrZrJ7UlFE
Femh3gzsp6n5V2ZJNPNLOqBCAxztghxm4t6qw0cqd5bwivaTMo8KduTTEncg
ZtVEyT2/L78qO5exLl0Um9UYs5UVkUoJKxRNPVK3soiyPb8y76goO5+atK0q
5YBgby4tfd3RJcfYe4/WHD9w+mzR2bO7qIdSqzLzqQWn6vfuYSw735CxPGfZ
hdrSPcyUPNrKrMqVWRXxRdQ1ZY2FeSez8i7uzmPvSq5Zmy9Yd7Qx5TBn6/aS
DYdZBxKOxx7/z1mlT5E2j6Q6A6gjyBfcCSj1PykX4Rg2mypsfv4sa2ClGul3
P5rVk+cKpJp9kK5HUDDM/mSjB90C7GGgDgHzBeFIP9Cf+1ZY/Dhj4ZU64BpD
L6mPbWJ5XLMGNmgQKc1YTYIm/XKxNYCih0bzot30nD0ni6up5b9+5/U3333v
vXvdv/niwa9vP3j7/fZlW9IS9yxYsAdmHoPoI7CiGBYchti9sKAQ1u2bvWr7
ylfff/N3D+69c6fv7U/7fnXn0W8f3H7nzu+37EhLyy5671bvrz6T/eaR8a0P
Nf/xUf/bf7z9nx99vHBt0tvvf/Sbu3fQf/3h0eM/Pur43WeP3/6vj7N27Yjf
vP6te52v3O168+7dPzx++Nvbj9764M479x5sOLmOfDuZrphNt8QQMYEE8hB2
rhrjywznZGNaPFBjWT05Nj+ONahSDrWD03nWaSig1aiC+PbomgHfGrUX3xGO
tmxbEMXkzRr0vqjDvJThnFGtC6OagW8KFHVl5tVPkXQuET6Na+jcm1UfxpPN
F5q8OXZg9QVlFScT6U1bNqXevfXg8cOhu/e/+vj++N2Or+48eb4pb1fjB2db
23e2aHcwejfQHic1SNNe0Wx5tWfHpU8uJheue+9u+4d3bJ89/NsHn3/3wb2h
T9u0nzz5YtHapStWb7p93/C7z8z3eyY++ORvH374l9uff33nC7t/6KzPH/f8
5/s9v72lfe+O8bOHY5/f+f6TW46c3LyETckfPR2/1Tnxx7vDH98ZvPXZ6N2H
o592acM2BF/S5oldcXTntFITnrirHMB2AtdFoPwIK5o6mG8N41n9SnuAZw2g
DgRwdLGVXTE1fXOaBhMoyjCeOYJnDqeoApuGl5ClMZyBeRJrLNMEgsFQ6kAC
TbGepooSGqbUymNqn2zI4yTt5hdsYyXV9x1m9M+maEHyHAQq/0O8lOtv/nr9
mo09jzUdj758772RT+589+5Hznc+Uq3blfQr5RFhzyyGahpVG83QR/L0kfz+
4Nq2eVfuH169Y8HdDtPt+39+/6PvP/rsL+/fHn3nk47bvZ9vzF2dnJX+6ZPe
Dx/1/+fHio8//7q9beL93w8+eOCYMm3a7af373c67rSPf3jf9v6d4ffe/8vH
n4wmp21clbzio/uDH979yx8+HL5796vPPn7x0S37Z72yRXunMPsWk83e1c6A
8kEc2MnDOC3GMuNg/oMPcnRRXEMEbcAn97fANYRz9dPP3Qs59IH/lquwtgHF
6sVc3SyubobIPG9tI6RegcxmqL4d1WKdy9fNXiOGrVc9drwJ9M7prfoZdR0r
8rkbt5FyMriraU/TaZpIwTjOgTP6/PZwVl+oKd++bd/TO6b7d8bv3vvzvbaJ
e90TtzpMi3bMaOpJYEjROAYxRwOJbu3J0oFAHn2zd/eqgmmftw18cGv8/uOJ
z+797WHXxJ2uwfsDj+ZtmBmfuvmx0nBPprvTab/3+K8Iq/t3vn30yOUZGHy3
7en7d9SfPB75+JHzbue36H+7eidStm9av23l54+sD9smnjz5/umDbzsfTDzt
fP5R971ZRUCRR1ZYoMTpWTrsWT2KfRABxTAA1foPrHiGcJY6lK4I33QVeJoF
bGVcwTtw7k4YpWd+gzl5QxMwZfFM2fINzdBgXcvsmn9TlVFYR2jpy8hsAok2
ntG7SCDNShMTeE/iiq5Cfcca5v1VLdrtaa9BuRanrHljXhLDsoO163YeLjh1
lNVx78sv7o119U/86oOxu/KJ+zrrwt1hyKg4JmA98z1pgGIHVLo86XZvpiqi
sWfT6sMBjzXS7oFv7zwZ//ThV/e6Jt79zP6ZvDdxV2rKnpN/eKj94Inqcf+L
W3cmPv10Qi6baOt47hUwp0s1/FD24kH/tx+3DyKn++Od7+51fbNq65qkbStv
P+5/3DHU1Tl69xPT03svumQj77a9s/A08J1TiWNwYdDvjNO/xAFoyNiGMJ4x
kmr2mkzcocZWhbKV0ag7KZdBMLCU2j0HUXqxNlGsW0nrnr+5GYTKTULFls1N
QOuZ26he3dK+MYMMr8oOZYuB3zdPIFvYIMvbJg5ulW3NqoMruvlCWaRAFZd4
CdhDPiREruyelK7Y3azlRWf2nD4nlvVNPHg4/rj9m0d9E19Iv7vVq1p1ZKZY
HUdGcmAYSl1QMuRR5vSi2DzpmhCJMiGhHD7Uv/2h4rMvdE/e73v00G77QNv3
ofnjWZnzkgsO3+8b79Z/80X7aNvTib72ic6Hf3lwzzl9XtLHT5SfdJnvKZ7d
lj67L//ui+6/dOm+id8Wn5Afm3YiMT53waY98cm716Ts2bKmaMnaC+FhRwE5
YJkLzju9LjqDq1x+NTZ/hn4KamiC+wErgWIup29+iz41pRG4shnXnGs2CEHQ
m9KgXcXum5l+CTjdKzld69Obgd0T16RJqG9fl18LjR2pBS0EYdsySe/qS8rM
LXy4MpCeLgF+13w0/bF6Z2T/AkSWcDRT0IwI7diDnGW//uCtDdnH+rUTD+8P
qvq+7+35vlv6p27FSNKhlQx5PJIGVCfmgWjKKNMDx+5dPxhz7l7QIjoE7YGp
B2DWfph1BIIOQOAxCD0BSVWR89cuVw98/7hzuL3r64HOif67E4bOiZ5HjsCI
aGSKbVbDFxrzfemXD/r+9LT/T21ay5Lcua1PL4h6t/IUK/n9qK3myxPQPls9
j66PRIQc3brKget3RDsWyBSLD24/yoUK+uPyXgN2x6a1HPjF88TTH0NmC1wx
7Ob0LubL5+18FerVSfUDW3beBL50Ba97ufDJ+sImv4aO1KLLPrVt64VP1jX0
pexoAX5bUkottOrS0fk8WdwqAfDV0+ocUUKXF6cvalfVzIPn920pOP5E/o2i
92uj/M+q3m8U0q/65V8mH0iiyxKJTi+6A5gOoCGNYALkkiJ7KNMwq1o2myKf
U6tdJlEubjQsYphj6I6ZlaoZ9Adp6YWbNfKvZKqv+5V/tUonFLf/anz6nUk1
MmdFzG3tHz/Q/NfHhtuPjbpOk73Lqv3CeGtDcaSgM4Whi/5XS1c/NL5qVuWD
GXmvRBe8Hl38hf8l5+LsG1DxxWJG14pGQ3LaJaB1LqZ1Lki7DI36TayOtc2y
vILmKew7W7aw4YZ2H+PeBn57Rnq9N/tJ2q6bEYh4U9rWcGQJu/4DcLlENxWp
ZvFA7HFe/L7Thccq2WrbhEH1naHvhU72lbr/qwHFs5SDSQz5OoQVzQ4MO7Yu
5iBwkPNqkIqcwrbM55nnswems3sjOcqISrUPxRFBMc7kd2am714v7bLK1c+7
pM91vROmzokxw4TD5oRgWLrPZ9YeWHzCc/WxqbOyCdHpsOQYzDsHdeb5dJPf
T8aqeWgOUzGbp0hJFKNZbyZbG8JWzd/+JqTdhA0twJDPE+oXCQ0LGIoZ6GPG
dUith+rPlzXJ0wTd6zaLIfMSbEOhqSexTp1WeX9p1quw5TKkXIeytnCmZjpV
E4KwatAuKiTOOXJx/9qMgi7lc0XX4Kj+W5PyuX5gXDcwvvXwWqYC2ZUPwopq
gwoDVp0cG1bWVFMgyz6dqgsr7yLUG6eKTVOq9QSyI5BqiayTZ+Qf32TWj6jM
o/2aZ3bNhK7za0W70TlmWLs/5BX5UX7XZkHfxrquDHHb1lb5FrFsUVUH8OwE
quUnAoXzUWaC0BVOVUfTdREkDdCxEA4mKYNpeh+GyYtp8kcslG+PZBqDGMYA
ptafr40SaqdddS1g9gc1WKdTZX50eaDIPL2y07dxcAGuDVmjSAOEa3+ewUKz
iQ5XBkWKeRfqNrz+7tWC4+csQxNGudMus9sHhswDgwbNYNqRBFb/GpLdezJZ
XeMAksNdh8UZbE+6I4jjChYPhvG03ojZIvVKHvaqNvmzOlenFi2US5UynVam
tYw7Jr5yTmj7dTLTnVk7gPMkQaCLY6qnUPtCWdLQZluM2BEgGIOaH/IDP6mR
jDg+UEyevOEA9hAg3Ue3BHGc4UwnFoB0OyZI1VoPutUPF2odOJKwkZqWAV2H
uCvUDnnS9LiIicg/2+pNNbrLo2a86gBNu7xxkLwIqLofVlA19wLpWHLO9o4+
3ahpaFhpdKmMNrXRpDZnHlnB7l+NsUJMBrneCAFjZQOWE6qtcFEL5Tpg2oCm
BJYeKi14uiRavAWy1XknV7jsJtczs3SgT9ahcqiHHGaD7aunK46CUBZfLvVg
2D3Ew74i5N1auCCFUjOUWvBA/GSsKFZfis2b5vQo1QBziMBw+TLs0WUDXpUG
EH/je1EFnJFgztC0i/0g/jqsyoCQBKIGJOPepQpo+Nq7TAXiZ94UJBVd3ggi
irsuL/mTH3XQ/VROYA96Utunn+StPFux79C5U1qj5Wur2dXbOayUOgfkVvVA
5uGFHPkKvCQD2YwFKsx4WQKK8EjUM8Y8iO7rMJwgcoDABZVWnDAp1QGra/GO
YwvsFrlS84Xe+NSuUo1ozdr+jg7Nb+cUAk7oDU6lD0KFFsi4MO0hfBZCG/Ol
jvuSfipQqFWZvCkuP7LDk+zywDlPh1+pxpM5EkF1eRfrgTniX2HyqDT4Moan
lGjRnO6JusMZ8qqxYJKJ2ObkYpUKPa5HM4eDEJi0Qd8LamCOe6IpmIL0AopX
uhVHWct2H07ZsWe7Rt0/rGh7oXw0rng0pGpzDHRnHZrJkS8h2fGV0WVrBv3Q
k6AHq0agWfEiB5ILaqzANADbio/UIFLt8BTKlmYfnqVXPjQZbo04HjnlHcNK
+aC+Vz/4ycK9wOlZTtL5U1y4isdy4Qo+xRJ0WulV5QjHaZafihXRDlV2DySu
q2x+eIv2Mc1AHuRXZQ3E2x+O2HyI1gCSxV3CmMw8Wz1INg+S1YdkCSCZQ4mW
cJI5nGgJJVoD3VdDl8W5MkQh9pHn/e6D1qSUpTp126j81jeKD18oPxxVfuJQ
frHtYARXvpDi9KYi1mrzrrIFoO5MFiurnBgrohOLMq4FR3u0XzUIVWaoVSzN
2BdlVd9zaH/vUv0OgT/S82ho4JFS/+7SPSCUrqEb8PIDNFkgR6CbAijG6CpT
bKV5Bsn60+dB9DwIBwQI4mCog5iMuQA3u0+VNRhvHfD3Ix4IKzdcARgfqxcG
CgPihSAlWoIxShaMVZUbK0zqbDjFWqtauqcmtpyUf/jkNqPm9pfK338je+sb
5a/HlO+4FB9mH/DnyWPxwhubZ43ZG90UXW2ytouxcuItek6u2ROpMzRq1S5s
w+L+Jdv2hTlUt0Y07zxT/vrPys9f9H76TP2ZTv/28r1QK12LKPdLrFBYMPlQ
jVOIxtgq08/CCo0Ubu7hw5ZgBxQicEOGZMdU9uW3kyc4ftScP2r4ZPf5blvC
+46Xx1E8FCiXHCDHHjy+9tipLcaB3/9F/x9fdzf/SXH1S8WrQ4p3dhzw4Mun
o+kPWWm12cdtlgH/hJU7GnNNfgw9Gh2sMUkmqO+Py97r61K+90z1ixey1ybk
v/u6+90vVb/R66+u3At1fSsZhmB0ETQ3MdA0gUzL7OG2/FCS9af7IDYMB17O
hNBA1oLGFD0Mjqi47+6texJHHZ/c/wdQrh+1v39Lsv39v5zuTiGsHL5s6YLD
tDmC2v3p22IM/b+cML3+bRf3e0XtC0XjiPL1nQdB2B+Nyx9WghurYGS3eAnf
j7CiWDw4hkCGDi8IrHHhxUIN8tjsvTCk/NUz2aWveuv/Jn3lq87L48prer0w
fg9I+hYzDIHoCkgLMBzAQqZlwWOBwsi/sH7j/23GGByC3F0jG6NJxlnIa/Bk
YcWBiGzxwUZrRs8fjPdxdHK73mT6y/H3Zn8JOwpiJHexg+RmMmhbY/Pl9S86
RJt5/bWzO/Onm1Wv/EkunJDT/9xP/VrBG1Vezj8EImUEDSGAcDB7u+OhD3Ic
qht8N1YEpMs4hhCGxl1yQrLRCI3907bvhUHFjWdy4de9jL9KRS+6mM8GeDoj
ccV+kMgXILtCD0CdxMqGSchkcP7pQCFTN8xAUFDchWaKIYasn0txl5jx1hJA
MeMCPcUUTDYHuvdx6RAHqx/g+uHuuAg7WQBCkhPDNZnPR/NsnX7F3pooCj2N
TNli01wdflI2MVDzXW/xCyl5rL8OYSVWhqH5nYqnQjw0yIoQEaW7x6LKHQrQ
rTnacIY6CF0ZdZ9qgkZ52PY94Oqv/7Kf9pW0dKKf9KK3bExXobWdiz8MYkUc
3RBOshGwabndkG6b9BTCz+EMVLMf6hQVOwsar3CKKRwvC0RjZ0FPGEC1eFDc
ERLdFKkDDMIPk+APaNtergxB36JOIZCpZi/0EZ+PDMzkI9Et30eOPH56CZm8
wSiXjLdd+Fvvma87Tox3Fw/38XfuR8Q+ANkVItVEiye6MiZptv8GK6Y6CF2Z
7kRaA5rlATv2wGA/d0x+8Zn08Hf9J8Z6Dw5qjytthxYfwgkBNO7Ind1VGDwV
ou4g18YTk83jJ2OF7ot8GY0j3sEZm3CG27vxvi4azSD0ySdHdzSE03Wz6LoZ
aE6hmn0wOOZAqimYagqgo9PMXkgEsXSR+L8MoUiiYrQRhg5/lmLBIWbsufK1
O3cH9/QQh43nDN07jH27DdJjWgU57SDw+j2p7gBOMuMVAnh07HjsiJOB3UpA
aounC2RqfPEUMIQXXrbIgvIL4ZmMMdZ9+Hl7/vede148yf+yd59+YO+ivcDq
m082zKiyokiOkyp0M/ZiPK1bA39ObBeYQWzzZav9uOoIkT6Wq5otMS+lSefx
lBt5qjUsdRgLkUAjICXIVW7myvJZ0mS+ZgnL6EM3etMH4mjKFTWyGIEphqcL
qDPHMDoWC/qTmhyrOIbIYimwR7wRD2eoFhRSF/76Y97GXNhxDuL3wqbzsPEI
bDkKqwphKxEqOwGJNRSF6Fb3ChP39IFQKnPhLbIKngGEOgKio2XDUDyCYiBc
lU8ryoSRTy58dW/3s49SJj7fNfHRronf5Y3cKVh/ENjKOJIpstKOrzZJsRBi
FfaAMgcibz/drjiyEGpncJ16Ya1yWfZVoLctlShS01s81vNhgwSarUvYA0Gc
Ab8m+6L1YkjkQXqjF+nBwstDSwWG6YmNsLEFMl8BvmJZg3axoGduZgNkNsFa
IZB6o8hqH/54SM2QN12zcB9vzaHKrb9pL268vUrUE1GvixJ3zrgqWyd+mMR6
PLfW5clGDFONogpeFYDNye5R4fApdRFQbEdGzjfgyiPTDBfH4Nw4XlB9TTrr
QCqM/+HM8/dzRn+3/vs/5Ey8mz/xi9znf8xfvx+Xv4nmKZUOD3Q1FKkYGCtA
Fyxz+P0crJoVeZd1+Ze0GZQHKzbx4O3Bkngi4nLZDQPrhYqFua8DvXsOs3PR
jteBPxAj0c9v1qRkNhGoj9Ym1UKzYyGzP5rRuXpLrUf1rQ37XgllP50lUS7g
SOMPvR9YLZtytg+oY0EM7aK0yvmnWFnpF+GqNPG1Z0tqZAS+bOo1U2KreoNI
NY83BGQXLuAKxgMna0yoR5NYVbiwVXCMwNfjHEjxKFwYw5Lnel/svs3geue4
7T9SzG8nDP16y4u3tv3pRoblt9vWHABk8JWWyAoHRh5FD8yvLAh/L2RpKOD/
ZKzWkQKSGV47WiGnGZKZkCacsvtaXG13TqM6ntYRvl4I9crN9fIdSQKg9kCD
KUzUs3xHo7+gLTf/hj9PEd5ki+V2b8i7NOOG8txWLlw1LBdKp9YptyykIvY4
jz869YQShI61+axVJziZRYIA7pMZFJUv2ehDU4YKNLEs+WyqIoQ+BMQRnEPA
U4x7HSaKwJUOrzI3VrisY0ZuSEARtWwELg7jFek3e2N3bwDT63sNr2yw3Fxl
vZ40ejNlrDl54JebJrGqsrz0wR+wQtdEcP0crPZdXShqy2A9mf6KdfX2JqB/
vnWHZGZt+w5h77ybrmUbEFby1Preves5cGNwsVAeWNcVv40H1xV7t/ChSbeA
0RXB70xOF/qKn2YgqOv6YkV9c3ldqcmNwLfF4Hc6Br3omsXZ1KWtH1c3Pd10
c2h5tcGLMR7CHoziOGIYxgiyyZc8CtVjUG7HehmFF+rkeksbxqrMnYFHUyrb
iIlE+TCUDiIDI7zaNyc3EQYubbc1rBltWuUQrxpr2jjKT5RfTdiwF7iKOCQA
Mf2YfCXhJVZYVvwcrLi3MzIEcEOzvkm2IpUL1/oPpLPCGnt2SXrjeV2zdl4C
Qcc6wZPsnBYf9FEim3OlN3VfU6jkUXqWGG6YNzUq1tT1ZOXU+V1VpG9vgMvK
leLuhKb+fZsaQWiLZmAm4Cm0JBys35R6Yd7NgRSK1LvEDKfMcEHvUW7wRgwB
QVHqhBIkHIaAOfz3rpkx6cXpl0FMR/F8bfKhWT0rh3BOhmX0eLVv9rY1IJWk
OJjLv+WucFIWjnMTBilLu2vjNheCSB7H0kUjpkG1vnyDgzKZJXD8LH71iiqv
pXtHQX0E85Nt+y8tuNx9bCvdu759e30nMqdN2XXQ1L8ONRS06/uS6jtT6r7Y
sU8yTXx/y3oy/NJ6qOqD1ZL2gtz6oIbuxL03oPZpIvPuJlHHga2tfkRZANkE
VXoCo39pNnnJQX7SVj7wzP7Cv8UctUDlcABx0Jcx5kEdhxIXlDqgBtNRDBQu
YpowW5vECpuWnYB4IN3qVz2EX8NhY6xmpqyFdt5a28VZf61cYD83fYQUZy+b
3caclpYPjb3z+epoxGEws7JiBYFGpMK9WOjnYCVpX5FbD9uFvnmiqWn0yNaO
Y/y72wqa/fJbIQsB1be+ritJ3JXc0JuaKYFdTb55nNDLD3df6869KstCdpjf
6p/fOEX0KKu5ewv33pJdLbD7avBmvi+zN4VtjGHYvRGhrdWvzamJ289e3qpY
jBjIUTWUvQgqHwm4aIYSi/udo0GoGQHGIE40TWKFLAfR4Eo3Vti0HJgY060B
SHtWWxFWhBvymKREuCNYqjgTPl42XXY6UE2cpigL/5wZtLkAGqRz+OpIlgFx
aexxWCu5oGwQw/VzZE5mHVzXLZH0xDT0LM+vD214sj+V5dvUl9ygmHJZH51R
B/Wdu+ofl2Vw5rQotzb0rbgp3Z5FIzQ/3ZklglbVIlHv7MaerVnCAMnD7Lx6
qO9d0DywiNu1evMloKjDuINhVWofoXJlEWdR00f7r6jihDav03o4P+xf6vSp
nNTX7qwLshwUhV4SY7M7OpmwqEcdLMZ+50G3hyLSW6wFxhBQNXBTG5OaC5cq
vD8+73nvAnxQ6fkh3e+9SmCegINCILaFsHVT6KYArJcd+PrYqFzuVVU/A6v6
7hWcxzPrZFOv61dsZgL/Xs7xN+bW9yU2aIKYnZB/DXiPcnh3ivMaljCexDSo
pjV3rSkQ+4nuZe+55sds961XR3IercypDRI/zM1r8OR3TmnUTKO3x+W8AWRN
SKUaOM5IsW5lVk3YxctLGHe96hzexKGg0uEQRHWqHC9fQCC5F4ejiMQyetHd
cZhj8EKmhY5XuLEqc3pU6Xxo5iA0UYq/8kPkgd/jsSoXDu2BExlwPAPysmB7
DhzaBccr4Pz7UDu+mGIKRVoMBfMqtwBHdlXpniZ+DlaFDQtFjwvfsu9j3l++
61KAqD1zWx2B+WhxrTzmmn1xEg8a5JkNsrx1iA8MRdQOQIs8PkdIuKE8tJkH
N5xL6F2BrerMDFFAU29BVj3U9c9o1M2tVaakXQemKaLaAKUDwFTEIlMs4ngd
fxvoSig2eh1Rg5vqvAy8ZPdLGchlUHMLSQLCCpkWijOog6UIKxeB7YxkW0Mr
dZhckUyI2oXU3gp962H8a3fnvtox7/LAojrpLMm9YFFnWJU16rQdjUUgTlTa
sSNPJgxJP6+Ig1oOb8tm6vx1NNgiAm57UrMqay0DXrPvZbYvE/St3NoAQmmy
ULphawtwNV5MKYHzZPHOxkDmvZS0euAp4jiyOH53WmptQLNyJ6KytdKFtKfz
BdL8xUygGiLZI77VVs+rf0qofZzQ+jhB1O3ZOOTDehZdMx6JqA5lUnhaXqpv
FIoZBrdes3ogrDgGAuIPVW6sKpwEkh5/SzYDzYnf6BQNer9mWXxTtVzUP5Oq
jSaOxRJHZlDUwVxXVPX30w8N+ZQ6cWIW53snBbgD34XqXoTzk7ES3a/NbdzA
bcu4ak6tVycKZet33ZhW/VkGqy2/RXt4c70XpzeN07t1cxM0W9azepfXSfN3
XZvJ6UhNroNLtiJaR3qt/EBqQzCrbU3+TeB3bBF276rtO1f4q4U0/ewyAxxR
Ad0VXq9Y+Kp6uUSBq8kXDYQShz+e2ibpgfXl2l0st004a42YFdvgg8gn+grp
nTI3bahWeTL1/mwHsBEZG4YyHQh0kSUPvcXj887bA/eP+R8e8z2rwe8Rn33h
ewhPBzjX4a4IECbTj5P84edgxW8/u4EfkHMTkpthXT1wFHMY3WsyL/tnXw1P
FAG9Z51As0GgXUeTLl1bD9tegS31hKovVgu1CULjqnghZL3ut+2mP7kjQayJ
r3kUk3vdI6PVdw0fzt1fQDaGIasoHoNiOyKHIZe1U+v1wDK5vW88BDNMd3ID
PT/JnVylWHxIlmAUx9AJk1jhZKZ7CsOr7MwhHKM/xQCVZjhvgxIUuJ7PEAzG
Vhn9juphzwic+7M/87kffZhQ8tyjdJyAHHlygsDZGNtLrH6mXTU55rGUIVyt
v8jsw9Eh/kOgKgk8YyRXN4PYGyIwRzN0fgy9B98aXC315+hieZr5XP10ntVH
MOxVNYBLJJUyHzTpUGU+l12zaN3+fE04fcD7lYkZFAd+r7nsezjlxOaEYp1A
jxfLVQ95V4364+qMHSb5D3EQV2eQOVVZg4udARUOP5bBj6f3QNoEZ5LdMZlu
8GdpfWgmvGAVyZzicbhgBJIxsG4wlDvsfWEIzjmBiTSjCpscslKRDurUBKHO
g2XCtIFkf/ke1s+JV2VykIwi7gd0I3AdIEJqy61Saeij3RftoO7QrEBDc5PD
n4q8wBxC1uIjdBd+nxdF2hoT8F0+dC2IbH48k2eNEsRjuCxYrAP6N3D+OZwZ
BMGIpwjxIhNOhSGyVOJ2Lnf+EOfiEFaVw5j5VNr9ypxY4aLQxDb4TYYyd7nN
g2MPZGKfwnXn4mGo+hpO6hDPD6mWg8DpSRrGPFPihDobVotIjCOsJBqsuDFW
VrcM/O9i+8vsrm2yEfBpP37F5p/bpGX+X+3v78QR/vm1OII7+ele7z05Ru5b
T56MTN3d/n4F20u2XIqeYdSD6sTn0N0BtgoNxBCwxtxL680BDGcw8kHUWfIQ
VNvxu94UpxdJH1KtDirXAHc8rNISUGb0RfENF50dwP8LHFMix/RgvPA+o4IL
MlwZR4SW+yc3/TDhvtOHgTPkUaMHNhoFAxrQINpgCGMMRzOixf2mthPok5Xx
IVzLflm0snkRbT64ymB9mQP/OQ77rza3XPWqcXhNFjLQ4yHDwEsm7IBwIBlB
NDaLqPetNEGFCbgv8IKiMg1+gYXrimDYEUHyKdVCpTGA5AghDXowvsR88sQA
7lf9n2eckIH4O/+6b2NOy+CMEk4rQfRN4JEe4H0NxXpM74lWOD8AzRNR55WI
wQaeVWG9SbV5VOuBZseWU+U27wrLZJHUvUrN6ofaZJn4fxwrqHF64jf9rXht
A829nqTGCEyrj2QsmqL3rVZ5141Np1l8kU0iMsawewicU8gaTy6yk0Hgj3m4
f7PCs8qA35m6qAb2cJDwOX7NhzmI0UZXK9MCa4jAG45q+TauRIlXUwie48jA
cPiUq/HS/WoTnjqJZmA6grnOGL4jBt2U6wih2zyxO7h5F9UdAYiTdWH8roTX
zyqN/dRGceFuoiGmO/HqDiJWfN48WwTXMLuqJ5xrmsLSB/MsMytl/kyzL1Xn
zVJP4+mm0TXAs0F5Pz5ZOBxE1HmyrDPEw6vOPIlkm+ZyHD5l/SBwTCUqAri2
UKo2gG9ecv5JSKXci+cIImsJRJVHaY+HyDGHZZjGMISSdcCyeNG10yp7owWm
+eceEbiWaIY5kGHHiwmR56KYQPp7LXiymP6/hpXZ/esozsAq5HcaD7ycXj9z
fSOI9Rv4+phaS0xyK0gsCVxDOE8fmX0TRP2r2LIwiSkq81WgSKOElqkkWdj6
ZlhMh01NU5jSZL4lgKXzqDOkbWkKXCvCK+gonWsuOVMbHHFVXQHrm0CgXtNg
SRRpk6ofJcWzYecvYV0jMGRxtfpV1N55Be8CcyCGpg5mmvzRxEo04QT+j4I8
4WWQ/x/HCrkeikUMhx/THlSl9KDrQ/jGaRVtkSnNwOnZWNMRyVXMSK4Hvnwt
Qx4hVMeuY0GLIoPTHdpimrWOB/y+day+BbveBp40o0V3kvJgd0oTgav2ZykC
0uqCmPeOiTqP1tzdmn3Zk9GxhNoR3WJak3PFS9CTXn1/jkCamNkY1ig/Rryz
kdO58fC7gaSHsbSOJZk3gKWcR1NE8szhiIDhFWjWl5XfH8P1v2BXgxgrut2b
bgkiqfyE1lks1YyCXwG3J23ntcD6gbXpLXDNtGNrPTQZl7K65myr9b2pzuX3
QosxILUWGqV7ee2Za5lAebyE0726Rb09+wrQO33q1LPzW6NrH59skh69NLBb
2JvA6VrQpF6bfwPKP0za3hLUrF1dp1qU0wr10tyrmkP10p2kuwvFsjWC3qSM
VhAqV7L7Z4vwqzR+iBShKEe2/zdw/Q8jhrRbuRHPPrhoqw5ucC6k9M1MkgCv
O2X7FX/20zWpdSCWbkwWQt3AUkn/mlSG31Vpbr3Cq1nrnSEEwaOi5t4TGZKA
hoGkRt0yRtucnGsgUUaL5XOzJYHp3MgUHuxogWQeNPava5AnbRUhs8zKagBu
R1yTKn4jF/KuwAYWbOHD7pvegq71kr601Ebk5gn0vhkC4zSG3ouGOKSb7P07
YFXlpjQMm2+F1JtvmFurT9jSAkh45lwlCDoys5u9a2WrkUhv0sWznq7Mq53Z
1JZ/WTOT1+WdLQFJx96GzuOpwiBG2+Im/VK+dMaWRmhQT71pS1hdDdcH9jcr
N4r7VmU3eAuepjcrUrJboVEdmyyCJnmGpCs7RQii3qXoZG7nnGQO3DDsa5Dn
pDdjrISaOIltVo0KS4kay78FViheFWtB/FVgiQK41ikc/axNl4DcvpAtXSRW
JKVJfEU92XxpXK1qZvoVaNakJlMDcoQR/KcLfuFKSuYC40HyG7Zz65jQpMlo
0q0nP4koeAvoXZ7cvqj8K56Me0mstmWcjmW5V71re1O2iPFKhtqB0DdGV6ZJ
gPkgveh1H3H/cqFs3k3H+rwbQHsQz3y6NrUJ0EWq26aUtEPjWBTV5F5U/++A
lYNwQQ2Sr4MQwa4dQeoyOr4WLg8lU3oimi0Jm+uQgWXU6mIbrNPWoH3F2hR+
0GXZuZz64C0iEPStvOlKOfvJFIlm63IqbKrz3PWWB6UnqskZIdJPIT9auPcX
MVnNoQd+FVlxP5jXH515FZoMK0u/8Bap5mehsPZ0tUC2ei0X0hoIKB4SH4df
c8XX6xK3tAJNNnvTdbj57eJzndDwTRgiwP8OsZ026FNuwFTQvcTOh2YIqZFH
oCmbb4hiKKYK1ZtrOpZKbDNqFMDRT2Er47Y2Ejht22kPN3N6ExmyGK4ugqmO
bBpce3W4SKDeRuyOQ3yDMgC0AWgdTCC2LyQ9XcvuX906Oodv8ufppvO0sZdH
lzGUUVTp9CbHqibnCu7AEmbfep5yPVsdxdYG8XXz0CRIV05l6cNr1B6ikaBi
1b+BRbkbfci3xg4XkWwZ88YvAhsIN/+6rFzqwTGGUpRBV54lcXRzy6VAM8DN
v86nqENSbwJTtrzOuqh5JBZN6EjTETVQpSEgeVihCKSZwviuMI7TAxF7ptmT
OABsS6DQFV7ci67gRVJ5VSsJwqEAkgZqh8Opes+LvfgX7RAmPFs4VeuHeClV
Fc7WxTSOzSNpvASjQSiQIllKHfzf56KTGofs8sCVJrfGqXa/W81z+ZN1PhSd
H3HAC/Fnoo7AdPggTlihBqo6AtH4cjmU9uN3rtnDHrxn3iUanIpB9IM75os0
C9m9MrxsAP8eGr4LMlqrp2AsjOnCK47Kdbh+XarGL+WJvvThjuEKEfrIdPoy
bSEUXQDHNgVRYrIJC23WCAFNPfhHCP+3NQ6CqMIMZJcX1eWNWBZnDD/AyV4Q
PfPlOMPp1oAatzit+zqG5sC/sIfGFyEgGgvnDHkwnAS6I6Rc543+nTzq/k0/
nM+BYiNOR1AGvatM3syhKYyh4AoDgTUSitRijQu/Al9mANaYD20Ybb1O9QFr
OOKkFMTfBiNMkK5ErJjlCihTYwDLjC/zDJWOfwvtjJ9nGIesSrwAHhgjwBjG
epZqCURmU+PErUwH5Xr8+4TkYZwTQ2aDPw4SmIPTS3RB1Q7vi2jovwTSOFQO
AnmUQBrEKxOozshSTWCJxpc1GnVhAOlfD/wDFKMw+bt8lTaosgFndDbRHElx
+V3UAXkQjwW6daUO2COeyEoZo3AaBasRXJ91r8T2eYkV/g2i/war/wNUd6Tp

       "], {{0, 0}, {100, 71}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 71}}], 
     RowBox[{"{", "47991.58203125`", "}"}], 
     RowBox[{"{", "48000", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "0.017537434895833332`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJy9fAd0HMeZpm7vvT3bu3fnO7/du1vf2rf2elfOtmRZsmRRDGISM0HkPDMA
BjMY5JwxyIkAiEQCzAkgQBAEA4g8mIScQeSc0+Sceur+6gZhStqndaC2X3PY
6KmurvrqD9//V9X8Ey3gvPdfvfXWWyHfgI/znhEHgoM9o2y+DX/Y+of4+vh7
MY77h3r5eAV/QPvPcPMw/GPAP3yN3tCh0WioC7PZrNfrqWutVksQxBdKWq1W
qoBOp4Nr6ubeI19xyOVyqJC6tlgsarUaPuHO66/b+4p6Ebx97xXUndevv/zt
XlUGg4GqBGr7o/r/px/wOpVKRV1TKL3+LmiA0Wh8/U+TybRXEpFo7DUebhrJ
Y6+GvQvqqdfr+UKvv9wqKACDSL0dHt/DhLr/hfJU/TCUVAF4fO/ZN3JQTd3r
BbQfOr736tdfBCWpYtQj0AwKhLW1tbKystfrJMjj9fbDQVW1tbVVXFzs6urq
7e1dVVUF38Kfjo6OYWFhN2/epKr9skhTL90bI+qgSu4NBBRQKBSIFHUouVfs
CwP0lxzwCmog4NgTLWrI9sBBr4bp9bfvSf7y8vL169epQYTjdTmh6oFq92SA
z+fX1tZS12w2u7W1tbKyUqlUwp+xsbFQ8+tAUcJDVbjXfbjzOhQUVns6LpPJ
9i6+QmL/vGNzY+3ixRw63dPT0z0jI0OBD5Uvm+VJ9/BlM8PDI0NDw+E7X6Z3
1YN7apUsOysDrlm+PsFBHDrNlelLj4+Ph25yOGwfHy8vLzonwC8qJjomLjYw
0B+q9WUyOH5MH7pHXFR4c1N97aOH3t4MeBfd3e3alctZmek0T9fw8FAnJwc/
tm9cTGxuRk5+dl5e1sXkhMRA/wAvBo1Gd4NHAgKCMjKyUlOT4RUuzh6R4TE5
WdmZGWkcP2gLk0FnVtyvlki2L5cVA0Bmi7Wurm5sbOyPMadfPqyIIE989YcT
EdKt9azMFKVya0eyHh0dyReIGpt4yekZcytT3YPisPCYsNDYibHJpLjoNG7U
8vxYZKB/Xnpqj5gXG+mXnRV+9VpuWGhwUEDwyHBffkFmUkpc2Y0r7CBO5sUs
iWxLJGq5f/sKsmq62p9HBnqtzo01N9TduX19a3OVQ/dMjY3geHuUX84rLMyu
qbkX7M8uLSgsyiyIC46uvl5xu/RacU5uSlJsWkbM1RslIaFRLHZgYlLUg6q7
2enFt8urM5NTr5YWIkKHrMTakjwxPlMi38wuSAUJ1hmt1Q8fTU1N/Zvq/McA
ZSGxIhEi/8OfxNryXHtrPVQvV2xGRoY/r28AmU7PznGl2/uHMu3t3SPCuJPj
M4BVbmZ8W1NtXlp6UXbO04d3b1zN5nJZhcWJTB8vf7+A9bXF3ItpbnSX4Khg
Voi/g5tTVEw4jebE8XXzdrPxcj6TEOa7ND306MGd0JCAADaT7emekxR3rSS/
MD99eLizs5OXl51x78atjLjUcO+gG3llZbklHDrDz5cRFePP8HFjMPwCAiKa
W56185vZPpFO53283Ol+PvQAPy+OL8uHHpqdWTq/NFl2swiwMlhQ9cPH8/Pz
f4Zt/wqs1IoddxdbpXJjdW0uIIADciVV6EMiIneUa4MjnRxOGIcdNTU+FxEe
GuTv1SVuYXuBxHtVV95KTgpOzwy5UpYVHxsX4B/a2PgiryAnIjYyMj72UnlZ
Unp61aOa1bXF+JjwseGupqfVIX6MqZcDBblZhYUFOo02NyXVn0EPZDNLiguK
S/LvV95hsZhlxVcSw+MzYtMKkvO54YnJ0QkF+RcvlxddvXUtICAqLjYlPiEq
Mys1K/XK/VsvsjPyQIUrK+6NjkwM9M7fvfNUpVfEciM3JAoTgZJTMsbHx/9U
ofpqrLY3lq+VFXK5kTS6c1BQQFBwqKMLnRMUesH+pKubXUJcRkxk5pmTtqBl
YeGBzi52Lk7uwYFhPky6k8uZoFBPB6eTsTGJAf7hDC8fN7o7K9A/ODKy+unz
vKJSph+HyfKNiAjz9aIxGZ4xEaFuTo6T4xMhIWEcTgDNmVZefOXOrbvnbM57
eHky/Vn2jg4FBYVpSekMJ3q0f7TLeWeWF5vJZDm7u3mx2e6urKtl954+qw0M
DGR4htLcQ9PTLt67X0mjewUHR9M8wkQdYwqtkpueGBAc5cMKKSq+srCw8Gax
2lpfunPzytbWwvbOSl1drdGE/YpaA45Gp9VKNQorMiO2byiUV6ikuB4reH+k
1mqsyKDUro687ExPy9nc1MBTZvLclCqoCyOB4KbRhF8IxBM8PGUk5TK1CdTC
glQSMDVkGdAa8hGZSq1VG+KjEtQSDTLhFlrJ+1oTyskqXZzbVCvBpRJlpVVy
KaLeaCFPvQFpdIgdEFhcVmLBPhop5Jhjg73ac5FvBKtb10sBmbn58aKiS3Bb
pbWQvhY8iAnawWHGhgTFW3GzzSq9GlqyLdWQLQQU1M8bakA15ma3DWbccpXO
qDVaqPZr9BY4cUegGgtuP1ShURupVyfFpMt2dCqVBZ5akyslJA+QqFRQLDsz
Ry1TWY24GIyLzoTkaktIQByFjl5revK4DdqjNSAd+dK1LZUZGmdFLP+gkrJy
YEDW3X5iRvGn8quvwMqkB05lsFo15NgSJjOBWwRA6BXIaraoMWDODnT8XiiG
zGq9CQrI1PKVrQXAyp1mD1XpdSg8KlGu1lH1w9ADbdQbdkE7b+cOny7uTKlU
u/te465MWLHYIrUVeQeFSHRadmgQtFMh30EWI2E0UHKo0eNiPowAXBeBggJC
4VMq1cNfMFrU0ECbQGydnD3gCYMOF9Nq/ky6/hVYYSysehwZ6OXgNNQaHSnS
FmTRgwQbFbhTft6BChB60Er9NjwmkUhAAQkEIMt9fF2MGGPk7ORO6oyJfBCE
x6zXaXQ6g0JtCAiNhvq8fQPhpSqZHIEo6bRIb4biahXuMlRA8/eHT0+mp0aL
X4QsSmTVGdQKCi6LETHcvQErvVLLpPvAg4QZA0eQwgdcl+oXzdOb6pf1FVMA
uXqDfhCwMhuANusqKm9euHA+PCJqYnrJhFm22Qyaju0W8vZgYM6iWwEtQVYQ
NQ2yyvE12mb7uWhUAA7yZ/madNBNNSKUSL2GLNBNDcYNISc3T0DEne6NX2dQ
I5MSmZXIokEguqRVgredc7I1I5OL+wWEFORbdvAJlYBkA1IWC5PGwA0mEMPZ
BWA0a7cI/Q4WSZMcJwCU2zA6Pl5MKKDTEugvIOz/jlwhw+TkQHxCBNza2Nxm
cULhS6l0hzKskZwYd1sbQrOCLHMILSDDIrJuIrRqNc7AHbbvBaqqYDZdvj6G
LOuIWEUEFF5Fli1klRl1UqYvA94eHhGMLCqk20L6VWRexQVMa8gqtRgkBNK4
0xyhyz5MO3AOCK3gF1kXcD3EJvBlRKiDWSBOBEi8j5sjsgKYq/g0LCECKtm0
6pYI7aYvnW7RW3Vq09eHFQyKQNBQ/fCuRqPakciyLxZvSZQ6A/ZcFh3ieLJj
OIy0CCe3U/+UwPkoL+os7fSPWc7vJIWdcHP8NTfe0+7c6VB/fz/PM9fzggNd
PmLb/DzG/YNE7wMR9INB9GOBvnYctouNzVEv+gWa/aEwz2OXwmxD7X5F++x7
6aGfhXkfpjl87O9rGx/Dsj37sZ/3yUD6oWD6hxG09yM934v0fD/S48MIj/1B
nsc8HE4x6e7hfqxAmj3b5aMw2gdcv0Px3vsjPD+MoO/zcfh1YphjUniwiy1I
HZLJ1V8LVgSomYHHez403G21Yg9YfPkGeDqS/RIGrZXtwWDaH264HcOv8Bt6
Elx3yXG8gTvwPOHJLXY/P++nP/pPoBE66frRD75bdzWIfy98vD55+nli/4Mw
3p1QfnWKqLHc0eZ3oK1uDvsET4u6atNFN4L7K4NmWmIFleyuJ4nCuszW2ktH
P/ohyMmn7/29oDa1ozauuza871FwX01oX014b02MuCb9xKFfkXZM9+GP/9dw
S253XVhnZZDoDmf4cYy4ImSsLYNXk3r8o1+BTZNIZH9JzPzVcqVWbInFzZUP
bpHWEvn6hWDvbyG0GEkUzvalnXpnojF9sS1ceO3k3FPf+fqg7ko67z5D8CT8
+MffAQsP5uvsx98RVwcPPQoYrPTqKrfvLHfqvuc7+AwgDac5/MasHfV2+aC9
Or6/JnqyNmiimjFQadtx74KowqurNgoGIsDpI2SaOfvh34kqI7sqOb0PaAOV
roNwVrgPVNA6KoMP//77KvkiGMODv/jOWHNiU9mZmaecqYfMoTseL2uYEw1h
TXcCXE/+njR+hNH85+dh/l17NTbWm5AYCbfm5hfjkzIW1iVglBUms9FA+Hs6
JzKPCG7S+++cWX5mN3brxOCNU5O17i+f+Yjr/I58+A2TagGZ1m0+/puOe7Te
u46jd+2WHrlKmv1nn7AEd+jiutgQ798h8wDL5efih6E9d72mq2jDNz6bqvls
7oXd6GP3vhpO18O4aI+P0JbI5rd/O/wocuwRG+qfqXWYfWQ3+wg+HYcfc04e
/D4YUWTccj/2dv3l8zP1rpOVF0aun1h66NJ//XRL6ZGR51GBbscItdKKGQTx
Z4vWv8uvgBrfvHXFycnBydl1fUsBXlZisWjJJ31dbJJ99o/U+I7dPbpYfWir
9vTc/RPjD073P7Btf+B6+LdvYWtsXT/727dGa2hrDV5LNfYTN4+M3zw2csem
v9JT9DCQYfs9ZO1h2v9TRyVr+glr7v6FtZrTUxUfzD891Hfvs6FqxkhdbLDN
vyLjqNMH3xq4zx657zpecWaq4thMxaf4vH9k4IHzwd/+N6tlA1kkn/7sr8ee
eU0+OrlWe2a14uRyxamNOvvZp45dVQz6qfeQBfpiUmjlVvSFDAM4RxxPvGKp
xKsTff7ObiDwhzuvp2Wwoumxa0YGgwWn5ORyoMZISxJ3MO/hvh6Mk/8CyjVR
Zbv46MxCxdnpO+dmHrqMPPLoqPU9sf9bGCvN/IWPv9lzz/3lA6fpKtvJqgtT
Dx1fVrsM1fh2PgrzvvDPyDoa4PpL3i2v+YYgEIPFOtvZx0fXWs533z3eU+k2
UhfDOPx/ACuHd/96pIozXuU5XWU3W3VuruoMnLPVp4drPPf/9n9iZTfsXPj4
H7uqPEcenBq6dnCj1mGx8tz43TMva+07H/iy7PaZFDKSSn9OriBwU6tkiNCU
5KVLFEqctNEqq+7dcHO2g3B1Yn4VxyGYZxrKyq95+QU7uvqurW5DmAJvrKq6
7epJY7DCJ6Y2yWhKd+NqoX8Qy9bTfX4Dog2MH2buBABIsDydQhmfiWuSBh4F
vazxG6sMGLkb+LI6rPdhmOhpzMF9/92KgOdID77z7e6amMEHzKFH3r1POaJa
v77HAT01YT2P0minfgUE1u30+72PuD1VAZ2P2H1PmP01Hj3Vjn11Hj1PWIP1
iV4nf4gMo06/+/ZAVeBIldfYA9pYJWOswvdlpc9wtUfnI//D+/4Zp6p0qmPv
/7CzLnKwznfoAQNKDlXSeysZfXV+4rp4p1MfI4sVvPcrwdg9yCwz0DdZeWGG
UmeU600b68tJ0cEAzsBAn3dQBGbTBtX0aG9QWDjo1PySIiQwAmlWNxf7OQEs
uPNyfC0uJkOxvS3dXE3NzJCpdZMzi4mJGRotGe6C00E4tmV70/0Y55pqsrrq
U8aaM6abCibr8+FzqCm7qy33yKf/aEVAZTVHP3l7oKVotDFxtC2uR5QhaE/v
56cPtGT1N16mXzgArXK3PznYfHmoOa2bx+3mJw/xM/pbk/oFid18bo+gyMPu
XSBm5/Z9b6Qpa6yZO9nInWxInWjIGWvMGmlJ7G3LOrz/Z1iJCPPJ/e/0t+S/
bE8da0mZbE0ba0oeakoa4qV3tVxytf0MU3or+jJWmxsrhHrjdlne4tom9P3Z
09qGugfQKqNRH5mcqQEGq9wZG+h4+qIB2JlMYbl0Mc8om+Y3Vz94wgf9Wp/d
KMlIVStnRfDu2w+xddKgGJ/AbYVMj8wmQkdYcETm6upuZ3/4zr3E+mdJne1Z
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
gVk9Murx+qsvxzhg2/0ZDkG+bgUlV2ZW1qHyW2WX3gi/kiu0VirBZUIsN5qf
06dPSplt5fZNFw81px3kZRwTXDzfkH2+oZR25BffQnol0sr3/+i/PMu278o8
Mph5SJxxXJB+Aoq15Z5/Xurlce4nyLriePoXTRdd+cnHerjHhpMP98V82Mf9
qCn+vadph2vymfTz+3BrkcWEwLiqTHhKzIoDLSv2MgTSWy1SUjHxCJrwJKpJ
YUQQjOHUG6aeJrlWSU6DIZNR8wXerjNQ88IKg3ydUnLcNwvmV2YTnsMFwcCT
UK/41a6cGOQYLqSh+JWZmgK3mAkTvMisIMicFTk5ridnMPG8M8073OtcV13q
Ij9xvpG93hSw3Ryyw4uceR76sj7R4cD3kVmNjGra8Z+MP4nffhGmaQmSNodu
NQWvNgQtt8QMNnDZ7u9DkEFzOTjWeGmbV7TVdHH5UYLiGXfnWexKfdxGZ9FQ
S7n9yQ+hvQbCaEYGIwmF+dWkPzmfb9o1YlZK2IkdvVaDuSmSmLHA7WbbyC5q
qRnG17CCmh9W3qDbH2cznPIu31CRxR4+uOvn5c7yps8urZlxJn0LWTX3Hz60
cWO40H3X17YBdMCzouKGrbOjp2/44oqKnPg2Pnp014vlbe8WOLmgpDKn1BoD
mVzDodP8nU9u9lQuNnIXnrN3WplrTW5r7T4L7YFT/NTz+/8Bz3ualY6//95K
a85aS/R6K2etnbnMo68J/ebaQ/ufxXCc30P6FaSXejuepdufcDz1Ccv1lPNn
H0Z6XXA783ua3REmzU6t2DLotdbdFK7Z+iqF++okXiGHqDHfWz5hfm1Vwysb
RRX+gw5Ojffzm2sRAdxSU/OiPbf8/vj0XFZaMljCpfkp/6Bw0ospp0a6gqKj
APbVHTWD5oW0ktmRrnhuMqj04oI0iB0Gwjc62usfESrVmNRyFBXM3dzaMb4a
KXh7MNsrwOl4R2Xa+JNImTh8s91judVmWeA6K2CP8VPOHPi/2L+YlQ4ffXe5
LWuRF73QzlkUec4IXBc6fab5AYs9+Wz7d4AzIItBviMhpQJpCDxhRBCEiTz2
1l5+TYdJL1NLlzBWZqWgb+xWbdPI+FR5aZFaAobLFBYZJ1drkFHRK2q6W/NQ
okNyJcpIzgRO2txw5V4dD7DSrxuupKZJtyc6R0RXHrfheW49kR0UqDPjSWW5
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
FoHNNOgpcHBTycQI+fsVZEuBzOzRRbj4/xhJK/w=
       "], {{0, 0}, {100, 69}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 69}}], 
     RowBox[{"{", "43063.73046875`", "}"}], 
     RowBox[{"{", "43500", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "1.002918462643678`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
qbg8AyDH7W0HuDCK/Skerj72x4j+D++HVWc=
       "], {{0, 0}, {100, 66}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 66}}], 
     RowBox[{"{", "44923.21484375`", "}"}], 
     RowBox[{"{", "45000", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "0.17063368055555556`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJztXGmYVMW5Njf3mtw8WTUxogIa44JgEjWgEi/IJsgy+9L7vu/TPSszMCAD
iMiOKCKLisgNKhI3EkxMNCQaMdEoiUuCBASHmemZ7um9T5+u+9b5pg/tAEYT
RH7c72ma6tN1qqveer+tqs5cZvJX2P7jnHPOCX0ZbxXGpgnBoLGl8pv4UO0L
Oe0+q+V2X73Vbg3eZPoiLk7EPwv+8TL7fzmbJP+Jaom8XvGrcO/JLp/qqohX
ngnyi6585JazQLLZrCiJIAj0Ee+pVApdz0l9DPdG8J7J5uRvIUI2nRf5iPJi
huVFMZPmI8vx8UX74nRvXzyVwY2MjzyZzfDh0qhFJqaEdFS6Jc96enryLJtn
6ZQYzbEkXtFUNz7ivkQiweujrSxLJzO8AUmoz8WjyGT4t+FwuPhiPB6XO3wa
hX5ap9Phvbu7m0nTnGMDcOGVTGUAIPUqnU4X5l2M9fWwvJBLp3Kx9AAd8gP3
JvPM5PJorJaMhFVfNJLLCrytrEhNR3v6JcKIDqdFoa7ojXcKLI6XzqIAVpkc
B6ovHMlnBpo9dOiQ3GGLxYL3XC4Xi8VkQJLJJAZCuH0WcuTIESoAAa1WS2V0
AIOI9seF3EnY39XVxWcczOnrE3NZSQ1FTg0Jv/f/fhD39ESi/lC93moFftVK
FWEuCjn8l0kkUU1IZsV0Lp8T9XptJpvwBpzBZl+GJRJCtFZbCaYlUv0DCi6C
ahw3mqz+/n5AhMK0adOoP7iCd9ILAgoVUIhEIkCPrp9eqa6ubmpq8nq9YFdj
YyOuKJVKe5HoJVGpVKiGaTUYDD6fD1dQUCmUwUDdzOkz1ErVokWLXC5XrVIR
qAupNTqfv06j1esMetyiVqvdTleoLqhVawIeb8gfqK2pCoXqfD6PyaKvVlUp
dYqmtkaNUW13WkINwarKcoNeazWavG5PVUUl+oAumUym5uZmNBUIBNAmAHQ4
HOhDa2srk/QO7zabDX2rq6s7vToICmEWCBz8Iqjl9/s1Go3RaMSMNjaE9DoN
y+fqAr5oNIpqxD2H0w0E7A5Xc0ur0+XB5FvtfHRavcZg0Hk8LqvFZLfabBar
y+E06g11/gA6X1tb29DUWFlVA7QlEHQBv9vlcqBejaK2ua3V6fWUV1f5gnWp
TNpg0gfr/OBLwON0u2yAC2hIveICoMAcoEf9USgUYBF9BejAJWCIKcNH+frp
EqvVCia7JcGvoydej6un+xhmNuD3NtQHq6sqGhoaKioqzJJodQa3x5cTWVV1
rUKpNlotBqtRa9KEmoMKVbXRoGtrbtIoal0Wi0mjAzEcFiu45/F5gYbZ7lDp
tChqNbUAYdasGSCzx+ufMbPE7Q/6gg0KjTZU3whYystLgZXDatBpFel0Eh0D
DuASCsABU4wyOowpQIfxFSkpiEeDgqacXpSofTKVIC1wgFoBOsw7jHbQ58a0
hnu6gBhBii6BeFabA/oFq+Hw+DE62CqDy+QIOjVGVWNLEMhVlMxoqw+6TIY6
h7MtVG/U6hZ1LFSqVVqjweB0uOv8Fqve6TQChAUL5rvd3lqFpr5htkKpq1Vo
GxpbM2mxqanFZDLo9ErA0NRYB5Kjk0QVj8cza9Ys6g+wQqGmpgaAowDyowAY
YeShquAeTNZphAuuFr+I9gEUCnjn3bCY8tkUE9IqZXVTYz2oAkFXSZVsdid4
pdWZnN5ASUW1FybIZlRbNWaHSa1V2G2mkN9j02m8VnO9y60sK2+oCyprFb6A
3+p0GF1OncVgtukDdU6rzajRqHQ6Q32oWaU0ejz1DrvfaLBp1EatVl9fH7Q7
zAajUm9QWa28V+AMLBW6UV9fD73DxKG30ERcwTt5c/gd0Ay0xFhOr2Enx5GV
hFpGAINCTuCuOpmIhYIB+CAykugqzSN66PK4YaYSybTXF0jiViZG0wiQxFye
hw6IInggAtIiLkJAlcnyWILlTTarzeOyuGxo0mozwAOCJLwfeZZMcK9n0juc
Dh8KSqUal4VcCp7T63OgTRh2gEDdhkWVh4BZBoBUluKZATntOjhIYLUGhXnE
dmIypo86iUJVVRUK0MeysjIKGPFKpJJUMxmXwkgpSEj2xyjwhntyez1QQ51Z
D19gc0CDnGgnm81RbJBN5UOBJqvJKWTyFouNScFauK/H6XZgTsnfEThkNGAu
mKQXcL7FNhzeEIFNR0dHb29vMXr/poAw+BVytSTgFTrTE+6jKDQYapCTDFSD
XYVZi0Z6KRZNxPtbZzfXVPEZjEYSFLna7U6v10+tJZNpGjVGR1EumgeXNDot
BV0ULNksdkVlLZpM9SepEXDY4XDRT6cznPAUKlOWMWgUCP6pnWIh9E6s/G8K
7CFAIPMIfSeeoH/9KcHq9KSEPEJxJDtMsqtOhy2dAiwCyyHByZq0Svg7fkOG
ZZJclew2j9tTF0tylcZlXzCEoB12mA+q+xgCV4fNHgw19fWnBqBIpmxWs8Ni
5m0id0qBmSKwslrtSWRDgkTaXB5zhL4hyKE+g2mwFXIEBUwAF1wVEUm+fhp5
hcZpvphEZrIe/bFEUmBJkWdzM8qqBDnZyeehfeVlJdKgsiyXFpMRt0UXcjqQ
svHaWV7VZgsYLN5wUoCLRXxfoVGjBQQM8VgUY4Zi+m1OpyOQ46E4fiuFph12
s8dpYrmYmAUUPBkEDx12Tx7pkpQxoQ76eWL+QpjA/RX7O1zERwwNHT69vILN
QYP0W0QtsCglpa/dcaFtwZJwPNsZjiIwEMRcwOd32cz5TIKl+/lLTM6uc7mA
dpolDguUKltsIZMzFM0zKHZvPq91uwGaxqBnOVBEzPb0+C0ug84NxQIUmIJY
f6SlOaRSzERRFKDd8Z7uo01NDfCGIFE0xuGKxdMtLS0gkswT4AZzRGVgdeK4
TiOjZIHBlOMQaCK3V9LUHo1kNDZ/rcFu84a8wUYjYiuX02IyO60m6N2cxoDL
qHIZau3aqkaHo8XcXKdt0ZU5TSqEVK1VGqfWE1K4/a65c2rtNp3D7vC4DRq1
Xaub7XK71CYrwopAh06LpMdvt1n8frvVXON2KBtDlsryyW1t9VVVFU2NbT5v
q8XaYnc2IwOAH2QSt5mkcceOHSsGBFfwFUCjiBFlpKu0LnG6gMJPyI4Y1EUZ
jWeyuYxELau32eBpLtM5TaE59z7y5EOPPTt8+FUmleKD/S8+tDx08LXH9v92
u0dXfsUFQ9vtS1c2bntqyx/X3b1Lra2/6uYpt3n8+qV3edas/s71P4JejR83
yaOxz3M0blyw/IcXX2nR+t/c3+WqW7pq/ZNPPLP3oouH2zRlf3x+67ZVQbT5
yq936lS1V115k9O15O6lzzxw/wubNu40mxyx/rSY4/Qk4aY1n0NIj3FEIgMc
K8aHj6WwXCMrI3kBcmf0bVwS+aP8Ld0C8EnT0RpcuQxdoYyQiEc7WoO/VBfS
t64sDS2949Hf3vfU60OGj9aVzUq89ejuldOOvujrfXOlsXzstcOuW+x/fKFr
z/YVBzeteL1GOfu7N068ob31lnXLzNsf+erYsfAKE26+rXFmYI1x8UOt666/
6BpTte29vycNDVvb739jy7Odl1w2zlM+7ejPV7+yWnloV9M/fr9NW1E2dOiE
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
tL6sdNR44bw9k7+CqS9u9pPI/wGYKh8q
       "], {{0, 0}, {100, 66}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 66}}], 
     RowBox[{"{", "49589.80859375`", "}"}], 
     RowBox[{"{", "50000", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "0.8203828125000001`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
7lORzJjK5H5O8Yu5c/TMm+GnN/SvXNS/+k7sq+fSXn0775WzpjPncs68jb/8
RvXnv7RHKn/p5s0zV65N33934dqN2c3NwIOHK1u3vbfu9N779fTtO6d/8fN/
3Nm5duHa6+e37v3V9/ZGEy1yc6eOmZVTAcQO3nJS7DiNOF4W4qeBMwtJ9pEE
3C/IOVDuASU+w5rCMhbpnoFsvDexXG2fjPYs8NIbEWOzwtYJ2iE0qTHK44sp
GD6QVoLmtSps3VhO3YHkY+FHRp9PKxPn9QIJkWSAIC2KLBx8LrkUdIrK0S03
lXKSC3VuSPsBqXteQo7GeIY58UegTMuNzXJmgr1fDOvYQGWBcrBUlpoF2saF
ZEUt8/GAgl6U2XqjmBPfF3x/5gK5dCVpZSN1/WLyyY0YsLWNRNhdvpS8ciFv
7a2iv/rKHo7omc27Sze3Zm9u+bZv+7c2fdtb3jt3JrdvD9/amgDoxMi/3Lnz
yu0H56/fv/Wl7/1CT3TIiCmo8sCUhI4pSDtSfAllUVoPJsx5ITMrJealxIdm
VJTmsUh6UmVv56SUqSyjenyak1yFGuqTj4wDJeMkNaptA2q8kZN2GHZTD3t1
tgZBxjHd4cG9WVXwUZJzVJ9TJs8+qgW+l1yKWbs1eKfGXMpLLQSHBHoGJIRv
HY4gew9EuJC4w5KsatQ+wiNmARYwKLXsEwFiCvIh8NtdrIDRyehFqa0v0ln2
XeEPpy/iC9eSljeyVjYy1i5HrVzRLV+JWbgay9qlnJW3j3z+a3s44q/eus8C
BXbn9tzW5uTtrcm7tye3t8e3AKutObH4u3funrnz4NyNB5e//L1/hd+CkvPs
MzLXigAfh8Qrw/2g/vjUGte5xHX5+E6QgX6ZY2GXhe6azjEZTo6qHW2i7Bp2
m/Dx0+sAOrmlCcmp46e1RtLjka4OftZx2FWaW9WWSm5qIUr0PJ9aLTO1xdPd
qvQiJPmImurZm1EpdbTp6bZwUPTZlUGs5qT5y0AqEvJHhYlHVBllOmur2uXD
PMufUKykeV3i3BphVrXWPgF+JcioV1ibo939CmsbkByVtV/laBDnnYDdWNeg
Hq+U5JVKyOGwvB6lrS3B2c76VVa5Eu8LzW1AbbUaskFjrJXlNstIr4D0AR8T
2kcjqT5OdL4spVhlbAQpJKDmP5FY4eP89IawtOKw1FKFeRDg4qVVCzIrVPZW
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
oAcXQTdxHX6x8xTCnPyPYPV/ALha9gU=
       "], {{0, 0}, {100, 70}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 70}}], 
     RowBox[{"{", "41285.23828125`", "}"}], 
     RowBox[{"{", "41000", "}"}], 
     RowBox[{"{", "0.6957031250000001`", "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
CjlmW/sSKxKe6nRivZHGUBLtD/Nchu8ffWZX5YpD7CfylSsLRLseP3YfzFew
Dl68yb9quo46sROq4q/DihkI0gzWrjnvLu0Qz+rBjU2v6zjX7YlL/RG2y/u8
rk9qcMnmXC9q+5hur9Qf6rJ41kvadVbkpe4BksmqiSYvWAIbWIp2k+UpjYrt
scrs7oERZKfyKjUCzvjSZV7AdMYKRFyMSvw0liS2RYlhUGv2q+3Ox+r2Cn5x
+uJvT9wYYf/2rv7B9ajWPvQp+R50bwF7GL/Mivf6Yc37eVdHsP0fZFmt4BY8
Jmva1s490KNDEQk0hxuPhLCBRKMvyHfN/uAIZPX4QfaTecpVx0V7VxyDuZ2p
fK8JsrqeZbWD9/ViUDQ9r5uzD4/ah8cdq1V6pdG2V9x1ftyumTR3zDs3SHTd
U7aeSdsmiU437+yYML8+YjtIV3XP2J/iSDrn3RfmPOf+OHGUo+qemlklk2hn
ZjvuTL9jiO3iDVIMwVpHvCEMWK74UXbbSRp+v7qTaw43emA7v6i2Wx+vf036
88JrHxz/3W3u7+90P7gORepHn5Tvqe/7nNWfrJf41w/r3s+7NoId+DXlvoP3
Pc4ufELWtF3NPfgPVhFsINnojfKcpvuPvLSt6rm9nBePqjbmiA8/kvtA1/sc
yArq9jfmL6OObxVaYW7/6qz295zdIlAeZqvP6M6vFsnPu3w7KeJDNPlOgXqb
SL2ZJ78677lm9GzjyOHTPXx1KaejgKy8BkunVLtP3bufqz5JV9Uq+i7Pz29X
S/foNVvYgtPC/p2MDuqsm5wCUP8wXJFcPjmPVDc871D6wOkpLy0F1A7Tk/Vb
5f+a//qv839/i/vh7d4frEO1DDT+H1m9fgc7eIPy7QP3PckqfFLavFPFPdSt
v49AYtgReO2NwUy9L8FyOb59dNWWqpU7uasPqLfDHueh3If1N3iqf1vW7Us9
ztfrB59nMbdK5cekmnWt9O09naqZqUMCxQmRJkfbtYbD261s75+aHZyc3ado
X8fmHdN0FbLVp5nqoU8mDyj1K4XibTJVPllwhi7sv/PZOhXveR13tYJ/kCgo
kA0SbM6ScATqH9ginZDQK/nEs1NGfRiUzAXxgZTaOfdU/Sblv+a8eSP3j5/x
P7zd//31KNxg4wnFnrq+AtbFf7Dq+FWW1bkblO/sv+8pVuHTkuZdSv6RLv23
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
/hejLEO1
       "], {{0, 0}, {100, 64}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 64}}], 
     RowBox[{"{", "49413.50390625`", "}"}], 
     RowBox[{"{", "50000", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "1.1729921875`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
5tUODs25PxeTBiMClzYKEWICXECSSNKt2T696jerASjD9TwOWOGj5uSGplt5
8KrIFq2AYUKcI26LI5bfsvwloERog980AyXMghayABSRiDbStkyO6lJchyKV
24elhMx6c4KvIIVoKcJiivkExyU4Js1LTVouzgxEinSDJDRrdEYEH4AT5sNF
KZoX09TQrJLaqVANzECsOBhl9JZhIV1iE2YuwuUzXG+qj53NibOFQrQAtcEE
YZhwzqQN8lyIRlT91twhiNIoDASyuRBNJ7ReH5ev17P1Sn9KXBhl+M5Krl7p
i7J9oaLYaMoZQ01oyGv0EKBQLa8CcbFyWwCCbJekh35SdiBVHR9JhImd+kjO
KHlkt+ZztTRhqh5NriXHHY3SkffxXuShAvRquPVeWBwHp+Tn7daqgiAY4+2k
WG3UhlrNcptptRtGO+FgIwvvU7ptrlWVOk2tpyx2GHSjzDRKSqtsTNeLrayy
uLSgnZKpbw0urPbOrsxtt+e123PbrN7pZbpviaF8u6Vtbv+gPLC4PLhoJLtw
WXbBt7IL/gptfsGy/MKhvvl6Y3rBrOnF3GBpzmytd9EQTX130ZylA7OGCzNH
6LlLzMG/G2xVldlLrLnLqvOWqc2W3mgiLusxVQ+RypjulTSPRKwJo/ZdgYs4
LlLDUW/sO5UcxankXG/ffhzqigCBZFxCbg6fyfj5UmMVQEGpqBBnNpfhY6VQ
UY8zVr1oN8lavSSkkdXSVJLtvmtW4nMNNX8SuOcjPrf95od8NR/yTvvDuyOf
CNV8wtMemtMQnfdv/7r+oV/sfOSJl1asemXN2jNPPn7sseUvPvSz5//9wXW3
f/meu0NNP35i9EePj/34sfGfLN//k+UvPvjo/geXj/90+e7vP/TMXb62ZEff
P/9s/U+e3PXDR3f+dOVBnLP80ZdWLj/wxEP7Hv/xrjZ//8zA4BxPf693QEjJ
JHWNiggTakBU/KTSBTEcoFxxqkmkkoNR39h36kukUKBFdB30Pqw5BRZyHH0j
YkBXQatIkS2skIpBwoAbNxqQeCp6oy2lNHhv5KR8mFaTvNGoQKS0SEfpbCif
DRWUFqMQY3rrBiE5P02FeSYiiGHe8LOliNBfs6jYwHWEetcsn1iz+tiqtad/
9KPx5b84/ujDL6976tS6Jw9uXP3iJz9+57Taxl+s2v+z1Yd/vurIwyuP/WLF
K4+sOLZ8xZHlTx1Yue7Qhz56153faPjpY9tXPnP0J4+N/WzF4Z+tOPLTRw48
9uSRJx87tPHJ45m7Fy5KinRa1ZpMhBg5ICC+qF5RdUqCrqEBIst7RQSfyAck
h3srjoZIBLSwij5sCsfRB2j41lUhUqYLkroTuDqAYgOkygFapaT0QoBRMgaw
IhoFZW628sECcna9SQN1h2hNupiW+KSESWRjYGICgiNs1oiZVsK2omYpoA7V
CpU6jp6Wy0fZxm/Oe/Lh/U88efyhR15+YtVra59+a/mjp9c8dWb14y8/s/bw
Z/70L8KBnuVrDv/n2hOPrJ5cvmrysZVnnlg5+eRTp1asPLph0+SffrzGF5zz
5OoXVm945T+fPPj46slHV556bN2rT6w988ijR9Y+cTz19d6BtErHVFiE46OU
Kz6KeBuS0cDhWAj9V7ECOGJYdcM9ABFCCvpKzFCiOo4LJP4SAHlS/lJxUIlq
JMr74E55RHwlTkqRiHdCTMz5Cmo90FCAEsgVOn3e3GCgSCdFqUGH0HEwZxZc
FJyB9vI8qYVqcINGnaZPU4xvSvpd3Lc8RrlGNKI6ndbbg9SaVZNrn3vjFxsu
PbFlauVzUw8/deGpdRdXPHVi7eqjn/usPxZftGL95GMbzj3x9MUV6y4/tfb1
VWsvr1lzYd2aM+ufnvzYx7zJZHbNmqPr1k+uXDO5bv2llesvP77x0opNlx57
cnLtE6capxXySYuPWqJXLvm1ik+revSKQ64IKfJVDF8ZWNmeK1jBvSDEywkD
wQsdCDpqyiq3jJgNFSVpugfRwcdy61C1fURNa4j+8EWV5vJQR9VstED2QDuL
YcbqqBotttVWBnuX0yqYAI4DJaWjLLXZXEajIxJmBHaN3MHhLSAeulGjl2vM
YU9pma+6zFNRvsGpcbkvSjf5B1Y8cXz981OPb3nrZ09ffGLLrx5dc3Hj1qmn
N1xctfLI7bd7PIHuVRtPrth4fuWGC6vWX1zz9OW1T19ct+7C+nVnt2557Y8/
XBMK9MKEn91yYd3TZ9esObd2/aVHgOTzUxufeXPTyrNN0wZ7QxwXVa0YKLpq
1WilaZgp26oFKaqY/ooVqF7VKwPGSIUYEBuMq9xeRQdjHO5ekvcXMXx8NTJ9
KQ5C0MFHNs6xadHqLiMKL5t9b96X5aIMHaZhX3A+aocNJolUFCRquG1ICnKi
n9IiDB3KSz0lusvMJwUpoZpeqeyEVDlgCEFLDFoGmTtXrHJdBSYgJHJ9iYWN
vjnPbTi98ZnXV2+6vGbzuZUbJ9duuACgNm/+5cYNk3/26T/3RRs3bDm2YfPp
DZvPbHwGchbyzCbImU0bT3/0ox6fb8Gzz57dsOEkjkCe3nh+7aY3N27+1fo1
53ZtOt/imZ9NUXSsKIZZHQboQVZStuuqlqfsMG2YoXYtEUanECoWw5SUkTFe
OkrQGJmxBB0qQsPblDsraK91ClGKqhf06XY2krt3zpJCMI8Mgo0xdleZSgta
d7mQFNg0UgZxSfuwGRLNAGeFKTY0wM+08j1GLsUhClRqpSW1JLcCSSZJR4jc
hnU1h7LqhhWfziezfck5rYFZ258589yWtzZtfmPL8+c3PXv62S0Xn938xvat
U1s2n/3UZ/88mMxsff7E1q3n3y3PPXfuE58IhEKLt217bcuW01u3noVAwTY9
86tnn53asu7svs3n2r2zs+kcHcsKEUYNwE2VLABVN2x4qgQcv0IOOo7LFQAF
ZOByrTabibGQSlcVrZAiFYPhnhG01ztpIZ9ilU4DWA31VPKBHBUuMlHaaLcK
SU5qN/MJvojYFxXKjbYeIEHtJrHC3S5RvDZy3oFUb3twwe4tF0afn9q6dWrH
zte3bj+/fdubO7ZO7d4+9fxzFz5z+1ejybbRHedHt/1qdNtbjrxBZPtlRy59
+pOhaLh/1+jr259/DR8h27e9jp8a3Ta17ZkLE8+d7/DNI/XPWF6IsDdgVTWI
XhGsiNyAFan6ZmS5nlSZgA9QsttLgMV5IEIhckHxIOjgYz5SBFZyh16IFyvd
JTpCASghyWutBrDiWzToFeIXXJmR0jQ/95tgVbtUrgMxE7LJbFeob3zr5bHR
qd07p/bseWPnzkt7tr+1Z9vU+I6pHc+9dutn74rGunbvfHP3jqm926d2j07t
3YEz39w7+sbunZf3jAKrQDy8eM+u13fvuEiO7Hh91+gbu0an9u2e2v3cpQPb
L3X7F2TTBdgg8i9Czt+GlfGeWCkNKuCCXqEDG3Q7OA7oAJGrbOjgI5vi6QZR
7TLpFFPusuWMJKYIJQBWsEGhVeebdCohwNsDKyss2SHh5rDylK3aZXLdsBjT
sgl6Rjj70vY3X9wzNb53av++18d2X9y/65cTo1Mv7pras/XyHZ+9JxGbMb77
V+M7pyZ2To3vmprY9avxPW9O7H59fM+l8V0XP/tpTyI8f2Lv5Yndlyb2vjG+
643x3b/E+QfGpiZ2XHx556XpgYW5JMyKJk9w/IbuLV/BipRQXKzkG7HK+nOk
OoeEKC1B0HHVDOA4BVUCkQsaPirNGvwV3yLnonkF+Ui9DKy0RhUYkidNJLMz
gFWppUyedQaFm/dX0KtlimdEjOnZBAOsDu64fHjf1IHxtw5OvPbS2PnD+y4f
3vvLI/vIYL98e219YvaBfb88sHfqAM5BZ+yNA+MXD4xfODBx7qXxs3fcencq
OgP/eHDi0sHx11/a98bB8bdewC/sf/PgzgvHd7/WE5jvYMXJEfLcAVjBU92A
lfwOrFzHjhaAoAPooFoOYyR6BehwBIKOq1fAim7g+4MDbIIGSqDi0KtcuIAs
OJdkgRX8VaWtKpA6J6t6qN/EX3mGxJiJzHpmuP/QjrNHJi68vP/s4YkTB8eO
Hx2bPLrv7Cvjl14aPX3nbfc0xWccGj/ryJlDE5OHJk4e2n/80P6jrtzxmS+n
o62H959y/v3cwX3nD0+cP7Bv8tiL54/smTy1+9ws3/x8ggEllsPGNaxcZ0US
wHdhBe+0dNa9erPhUmv4eaCkNmpmqwVjRJ/whDiHDj7qbabYprt6hcyu0lm2
Wk20xRidjdGFNK92lBEHl06/V4oI0Cvdx9xsHLQ9Q/DtchQukZ4VnvfyzqPH
9x8/9uLhw2Pjh/bsObp3/7G9B0+MH3tpx6E7P/OXzYBi7ODh8RcOj08cnhhz
ZN9VGbvjk59KBSMvjx86uv/Iy2PHDu09dmT8OM4/8dKx43tentx9co5vNq4C
YqxEbMVfUn1lAtSvxwq+qNo9BAflqhDsEeiBMAAfKBvCn+vb0SERM8G6nAF6
Bc6Q82dBGODhrc4S1EDptAdBt5IiE2JH2obg229er0jZR/LIyJty0eysUPeh
HWMvj+0+MrHtzOGdB3Y+PfnC9sPbNx/dNXp838Sdn/zizIb2o2Pbj05sPjqx
yZHNRMa3HB1/7pUXdnzpkx9pTwT2b9v88p6dky+9eHj3brRHx3ac3L/7yOiu
ydGDc30zkMiTPCtoKf7yFawcA7yK1Ts5A1QIRudyA5ghsAKAvx9+5dPEexg7
plv1Jl9Pzwo1n57Ye3zimZd2LT869sSBHf/52sGNZybWTY5vPrZr6xc+/PFG
j+/42PrjEyteGV9xfHzlK2Nrjo+te2Xf+uNjG0+/8Oyf/9kfLGyLXD6+7+ju
DYdG1x3asfbwrtXHx9dMvrDx6OjmydGxef5OOlm8ESv9yhM9F6t3xsFcIA9H
BGQAF7QLLewRlvj74Vc+xQwIlZQmR3k6mW35hu/I6PpDux4+su8/Tr7w8yO7
fvTqxM9P7PqPk3uXn9yzdtqtty9sajyxZ9UJ8vGxE3tWnNy96sTuNSd3rT+x
e/3kno23/dEtmbtvmxxbc/C5n53c99iFAyuP7nrw+PhPz7zw6PHRFWd2bpvv
a2ISg3xIkgOWa4O6Uxh3scLNOGWr61i5DgpW5j5JdJ3V741f+RTQDNlP5ab1
y430DG8YmBwbe/DSyYdf2ff947v+75nxH5zZ929nxx86tu0XX/nIh5vurjm1
fd2p0RWndjx1aseaU9s3nNq2+dS2ZyHHtqxruOsLc6J/cX58xandD55/4cFX
J3748vbvnBj/3ukX/vWVnQ+9unPDAl+ajQ/A3pWg66/cJwjG1YLVO7ECMsAB
3glAwRjJs+Mm/ffGr6BXQVYLOatWMvScYPyVnSteev4fXnj+vsmx753Y9cDx
7X9zcscDZ/f+8MS2hz2fvXVuMDMvEJwf8M33h+f7YvO9mfmeBiLezDxvZNqf
frh72hcPb/jBK1v/cXLn358YvffSob89OX7vmRe+88qOf3l1x1MLvVE20cuH
OCVovgsrxbhSDr2OFagUjA6KhM41foXO74df+RTNS9txyUqX+r2LZvui58bX
XHr5weN7/3py33fPjv3vU9vvPz36t6d3fu/wxh/6b/vconBnITmDjs+i4/Po
WC8d7aejg0RivYVoN5tpkdrirz7/H5f2/cuFffe/vIU7O66fGtNO719yYscD
r+54ZJE3yCUW8mHm7Vi5QDlYea8D5cZBYOUSUdgjQiGwcpb9/D74lU9R6or0
PdlSZjjrG+yPNe1d/a/Hdv3DkZ3LXthYObvvgdf2/f0b+793dtf39q/6nv/W
OwYic4VUUUzwsHrQVzFqE4mZ5GMqxyQ659d9/fDqf3x1+3feeOG+C+PK+f38
yX3Mmf32K6P3vzr60EKvl0ssIJVbh1856xCM/x9WEQ4xDtwJauPmg7BEpUH5
NfzKupFfVTvKdgvhV0gT8lG6mLrCr5b0EH5FFh/6GQ2hMzIgzDTobi3vYGV5
pKqHYHWtJnNjHLw3Uxn8yuJqZpkQFjvvjBYbMrMCd8yLfGZB8LZ8+n/Nnvax
mXd/bL7vc3p30x23/E+1QYJnFgK6EDAFvy34K46UBLIcJVsMNufCX39j179P
Pls5vY29sC83uWv+mX195ya4Uzvsc6P/sshbI8QXCCGGVMj9V55BXJe3AwUp
tw7JaZUOk7WFla4ql+AQ1IqxIqgUPPlwzzAp2gSLV+tXAp0BZ7hSvyp6STWD
C9HldtBRUr9y+RUVcetXguCn+AQ1GBtQewypXaMTnJSQ5YBkBNSryyktJ+5Y
lse6BpfzlUWWSYR4OVyQo31ydKES6b1B+pRwjnwb1BRfVfENw4KUgHFl4ZOv
pAZkOdinJlrygdtf3TRyaVS6uKvv3Oisy/vmXNo94+yOnjfGC6c22X3eb4ix
hVKQw/kkDPlZ26ORoqjX9VTXV7y4woYF0CExKUOpjBajz9cnN8lcmitEC9lQ
ttxZzgfzhUCh0jFU9DMAgc6IwApGB6xof16MskKErbZX2JRgdl7hV1xCHOoY
ViOyGOXoFDUQH9C7DbVNg34CKyEoOWuP3fUkV4G6itXNrcn0lnXPUtW7hKx3
CijOE0+DxH2/ogX79XhTwffpM+vMi89lLzw38+zm1svbOi4923x+U+Pro7NO
rmP7ar5GJiIgaEHVCFC2nyp5tFJdyfaQKbs2ldeEi/ByUiGPxpqNancVEJkd
ptwisRkGw6zOqDJJDp5/ZPoIICUeLHmdXxX8g2wwD3u32yzojNoKfsVC6Lhg
NttimAeM17DSWl2s1F+HlfGbYFXSPcO6t6o7NNuByyA0CW4nlDPjHYVpt558
XDm3uvfc6s4zKxourmp67anMq4+nLj7dffxxuv+uv1RCA0pA0YPWVb0ipVFH
r649Rb1+ObhBOkwoOnI6u8suxPMAaiA6iBQDIrcouTAcewFxkFSbQbFu4FdM
uMBGiGuFQsJmhWbikZAYQseUjAb37mI1GMuaXRZ4BRcTfudYXclKMLSACKyI
DXqrZE0d9CTSXfj6Z195UDj98zlnH246+1Dy0s+JnPlJ9MLytuM/zfV/9S+0
QF4LmJq/jH83/KLlccoyBCt3o8HbeLvZbCLwYcahP8CqmCgoHWohU6AyRbqe
Am7FBEXFGa1JuxIHG3llul5MU3a3KWc4KcXoTQp0hkmzQqvGNSuE2LfqYCBk
SW2CZ5LMjVjBt0uBd2J149qSm8LquqPzixgsWWQIBu4bJpkdlCQ4o3Dnp4//
M336+92v/TB98fvhN38QeeuH0XP/FDz/4/pjP+jLfvFrph9Y2STBcUwYKmp4
ho2rP0jk7VzUbDWR/Kotqt6hLQ71qd0qRGgTpA5JbCXGCPcFZoVAKbdoxQaO
aRMxfKlJUOp5McWoTTKbYgspGlyCa1WBld4BTsuLzhoqYIWgid8nSUFUUuK6
FJDVoO4u0P3tsXKeaGiWD+PiXaxk3xI4fMPPlwMzCl/45OHv9J/8TuNr3w29
/nd1b32nZuoB37lvTzv7vcixB+blPvdl25c1/CBXZWfVkAHXp3uWkF+GXgV4
B6vrZjjoG6QiFFGYOMWk6Rl3zyzWF12hGigYY3+wbyAwAEsUUgKUp9jIFJrp
3nAvlcqrTaLkLFzMRQYHorlckuJaZbR6VwkWzYQpOlR8B1Zq7EasrN8FVlbp
ClYieSIMEuJfgrGDBlcC0wu3f/TAt+YeXRI8v+ybl0e++vrwV3617OtnKl85
ff/dR+5vz916e9m32AJKfmf5CiKpd6nqWepGh6t6dR0rsmolxsDbQHns6VY+
WZDbpXw6L3fKSpdCZWgqCf4AF8RabZbWrgsdMtPOw12z9VS5y7Ra1UqnWYzn
s/FCIc3IXQZVz5VnjeAHnXWMNH4f3KPUUSbePqKoMYPsEQiY1wb7W2KFsFWq
syyiBtewAoUoWyGuGuwu3PYnL43MOFyqO1P56mvmFy8an3+z9NVT6udPjHzt
0L0NuU9/ouKbb4ckJURWbYEbK95liuc+El7fq37l5M7OYp4MD6wKqaLaqRRS
GDtUpb86qwJvD7o1NJMUsvIxCjYoTdcXBXpH5gzlA/1CkmZjVKnTGozlzRnl
vliBbZL7g9mls5aCd7FBCoEDGQGAMhps8szaJ4pe2XFW15d/X0XpbcnX+8Oq
VKqtlmpJ5NLJ5hoHq0AVemKFGKOuqf+Tf/S8mD5o1b0sff4E+5kL6hcn2c+/
atx52P7SDsVTvO0T2j3tpShDNvuEeBFsjWB1P4mt5Pe1d9RkMAqwBSTLQr00
NHNIaORLPTa8OkDLxnNADywrG8qDplIRGsQgl6bh2/sjA8Aq5+9DHOSiFGJi
IU4bPZW+SB5JUJ9vEByDbIcJkyetUkqxmsp2Q0WPGs4aG+0GT/UOrLSbxcqu
XVKqHbacRwkOVoYYgPMxhhIS0avbP7qeSu4Wa8aoL40t/vR4762Hcl8+yH51
lPn8uvw38rd/Sq/tqCBygTiFWPw7sFLrvk1c1g3PUq9dDrwd5EpISAiFpe4K
V88jZiEaIvzlYwWr04IFgSqU26uE28f4bIJWu0xwhiWzhsGv4JFga9WuCmA0
uiv94QKS6AFvrto+BM4gR0mNVE5qZmOp1Fg14w4b92qa17wRK9fP/yZYecp2
7VLAhWgIrBzfDhsnWGk+yvR0D972mZ/ODq3tqx2l6vYVPON533guODroWdX7
pZ/P+3r2c3fI0zrVwCA1rV8JUUpQVj3L9FqClfFeWOkpC2Nx1w8j44NPRnAH
SgSiGG122KAKYPWAFAyfUKwUr3XaYBHD04eQ4JCnkEmp1FYCjEZHpRDjkOMU
g2yppSyHROg2WSKSUK36cqkeWJUImXFWTr4LK+2q3IQZus/IrNql7qNPZ2OC
5lQ4S5qXl++Z0f3hT+Vv+9iij9zS/6Fb+v7glr7/ckvhv9+S/x+3DH78FubL
H+r5k9vlujnVjGIlZDVEkV2KnqVG7f1GnYvVO+8Haaa7z0hJ6UR5ogwQQ1iE
mgElmCdUTowrsCCcBkiFBrJqHfZYarH1pGwCh4yhZXQmIuitFS6l8mlNiuvl
pgrZKBokGY0c04ykbaZKRsx2sdI95rVF8r8NVuTJS91SZ2iGu0cVegtyBTpa
CpaWJmS9tnMk1FSe5rvPH/tuuPWfotMf8HX/jafh3kDt0liM/UaHFRbMiMpO
K+pBhnDRuiVW7X3OY68rP3jj/bB1nBzRMBDABeUpBml4MFKwatDUehVAUQGW
8fNwyzjHzJTEek1pMqFgRlq3U7oVV8sZW4rKNDLQhpKUNsWUoaVtK10iOxkD
khiSpaiK8KdHLS1EFi27SnUDVlcNkDjSm8YKmuC4Ys3h7YS6AygYEXMXWUZV
DhaGIn22Z1bFM7da03dvDfNXddK3PIUl4Z6hxBzdx5TjI1Z0SPQIJMfxiTBn
u2YZWftx9QdvdAt8nUhW60U0PiSZGSvnyatpDa5JSanO2iGB8ROsoH5Woqwn
LC4uS2kdyChRxYrrakgqJW1n0ZogpywxZXJRVUtYWoTsuMSdO/sHyYI3spze
d81Zld6N1RXmfNNYLSFJDf43yBNBVgLo6pYp05ZodUPVaLkS1athrRwwrZqh
cs239a8tM76OtKig+nMyqUjcZ4TuJTmRn7e9MsJEqWYpOBu4qBpkIW9zoUEL
zFD0K5yHh6UUa2kjadE+hvGSp7Fkw2ZUx8AxUi1EFrEzPoGs1HI2cuohla9l
ragpekXOJysxS4yZjE9SIiZZWVpHFg6RnbBBstBU9KpinaLU6cDK9LmPlt7b
Bt305/20DlxVgtiN1JHo1dJy8K/laVXNU5JqVM1jA0C1Bsb1QKnm/1S8f1cO
lTXcsGdErLkXreyAQxb1OetkLM813s6/I9w4xYe3CbH6dx28+hURt381fr3t
qxu+JSBYQVuuVVSPVgpXVY9hBkp2qELcst+2gmUcQWsHylqdZgds02eSLe1e
WagVofDok/VsQUJfJY9Mdrx6ZMEjmWHL7eMrpUYz60zlHsEtOsnTZDhDtdbU
60q6B5fWxGkSuUqgavqrSk1FuacqfpNkkWV/2ZhmmbWVUoCwKdmvQ+0lr6EG
ytAfsgyyVtRqpJtO538Lsfwl9/4BGu4ZGJINL35d9plkBwHJUk3gBqyczQW6
EdaNmGFGTXcH9417t8246W6g1sM6WbDqJd7J9Osl/KaHtBZ5zq4CcMNZW+68
KMB0Xi9gAl4jZLtXx12VgpWhYNW4RzNqdFxX8qhqqCSEDDFsymFLD9tmwCp5
zbLHdPfRfDCCu5VqRLRagEwcjN2IlsluID+xa8Dl6rCzoViHIvEeTgyJOlmY
qoh+shUaQJkps5Kp2BnbSlg47qzsFclG+KDslOmIsateiezg9pI96bLzxgCy
lDpAlk87HkAUfDKuqIR0aKbubAlR7pHUWhWTiNOEgM6FNTakcgGyQF3zqk6N
1PgAsSIbDRBl7JjlLgLnAxLiKQ8uEVLQanGTsGWoRxTJPoZG9mGJEYFs3I6R
HRC0j+JDgpZUK81Vq9606m09pQlhUQjzpLwTloCqGlLMmCH6BMHLA1jey7sw
EroSUbW4gfhCe1jax5GENGEgNOsRzQhrUi0PVHFvcMgC8i+QopjGBBXegZ2s
IK1TPzAbJAwhhBxQGGoYQqwEQ6MDgt005C7oZUMSaJsTJRWoDQgGuGuluWw0
6CBser0mJWQmRDuLnHmryZaTktFgmo0GF+FxBH2cAAC1hFJtqUhRESCXGm0C
dVLR6w18i2hutZS0BgNMm43yyFDI0vEGzW40rIzmvIKANxM6pkbN2EZzVW+q
iDFELqKu5YBu+/QPEisy0UF2SfswG2BAQkDMwHjZONmVCWaCPnnZQkQYbq3i
NIxXy6gkl4/zcr2sZBQuwQkJQWvS5LRMRSi9UbfaLPKKhiRvt9pSWlTTihDn
qp1VsrIiypY7SvhWSAnOc2GeTZFtxWqLgUSDdh678A0CnaDFDK9mRDHMKJiF
Bl3JkPc8aC1liBDXnMXkiu1TjTrlA8RKU8ISG6SWdg0XfHmMPRfIlzsrVJx1
F8hVu4cwNDbMLOkcYgJFjJoKF5GtMzFGbBDFtEjFKSkjlbpLAG0gMKA2qkhR
ARqTZOx2W0iTlzDknWcoVLSA43aXPRjM4b+MThuZ2mA4LzZJQrOajRfyCUbt
NHKpwkC0n00XpXqGixWkJKdjIurlbLjI16tio0lHBMrLSn7R9MjqNPGDxAoZ
NBMoLJlOno0quCV/1u4i67XoBItBVburZOBharirSvlySMOVRklqJO9PMDtM
PsMDHwyc4BOnFnsXy00y0MhH8tANnEC29sQpYFvpAf4UpDqjmo3kqCRtz6zk
k1RfeFBokckDgjR5gYAxw9JnGnKXaE1XS12KlGaFJC2l+WKs2OfPMvWS1GSx
MQm8WgsTGzQ9H6S/0gq1OS0lWcgrk3wxVIB6iA0yJBcukAo/dCNFyvJ2i0l2
DkZoq1XnkkwxkkcLgbZAeewOk4lT/d7FapNc6S653+IgWiiYixXGC0FnMJyl
U4zYqnBNYiFFMw282KZS9ZyL1aJIbzY1wDdSShPjYiWmOKFeyEdpsUXX4RMS
CsnpgvIH7q803sfCIQy1EY8Nn+Oui5CbNHcNAPpwMrBBOFtSn3cen8ELAVi1
QYEewguhbzTr6MM8rVaz2lVhojSf4ErttrsbsRDOVboqdKxIR2lYqzMLjNSs
Co0imxFgg2qHBcRgg3I7eekB28jIzbzSSB6siAmWOL1GlSLb/EtGx5CQVKFX
wKrkJ/tKPkjfznk4xCm7nmzNI9sJGwy1XodvR0iSUgr6RT8Ft48TyN7VEIe4
hngHQbxDKES84yKslBABNR/lrCaz1GLTQQoH3SMQOlQstZXYGAPYASB58U6c
FdMSvJCAANGsmR0lLi3k4JEyotyiKM0K9FNO8WT7J9x7QsRdcSlZb62Y7UNS
0rjm2z9YGzS4Wo68r8l5CxChB86W1aKPM+rLZJtPXIcjBZ0AZwBNIjvIog7P
DEtaXIO4+6TQ6gkdx92DtIcmHDUGtobxCgigdoMFxgVBhwuyiK0QcAYxLiHG
kcpJQioEKARf8jAuLQMfKcIJfgaC6AOqxsdUtaGkNZaluAHOoDpYfZB65XJR
8pYDvwzmLAVkZ6eYDhaqxAyk4XKEVODBwYYyQ6RWECC8FEcgZGteQCb1eT/Z
skf25fkl9yBbx/FeAUfI8SCp/FhIf5y3qyEPukJEkeOHyfZGzJGeMNGHF5Jj
pJwCLkpODpCtlDJ54Rgp1DNByd3vz0dIJcHd8lz23fzj3d9CkEEgf0Hu7LxI
jWyLVkOWGjaQ4zC1PNkr7VeRqY0kh0kyiDORg5M3s7kvqXPfOWYaIeTUuvOW
LfI7bt897ha+zICBTIdszQ46+7gD5AVcyG6QzvB1uAoyevKaBT1qkUzHef5u
BYwS2b5NsjDkOKxXIQlOGIHbeT+VVy15gZX1geaDuJZH1+oMwIXcGVkq8mUl
YCB3ZmtEJ5NFMmhXwhWlRruy9zxAqhBEJ72m+63bx3G0Sh0yuLJJdrhbdsAm
+/sQreo0N3fWkJs4ubNzmgn8AZoetEg26lHRUXxXCrMlr13xlso+stUdEyT5
TT6oI32WMC8BXE5HMljxfqBYmXUm2WsWKCO1NwMlMlifqQdLWsAWatVSuIpz
gCQgUu5Wyn7yKgOcDLmyW99LvpWnqRidU7ox1FodP0XOryGlCYyIzH6NihZ6
ouM3/eSpPSYI+EOryahDBH+5Fhmx7iwXsY1ay6yxyjW2XWvjDkkBJFSSQrZb
Z1AdkO1a/R11hv8H+35jBQ==
       "], {{0, 0}, {100, 70}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 70}}], 
     RowBox[{"{", "40605.26953125`", "}"}], 
     RowBox[{"{", "41500", "}"}], 
     RowBox[{"{", 
      RowBox[{"-", "2.15597703313253`"}], "}"}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzle1d3HEeWZp/Zl32cv7AP+zA7p3taUre82KToQNGABh4o772vQgEoeBCE
RIregFYiRYkiCXoSBL0DvQfoHQjCl7fpM/dGBlCCDDV7RlLvkSZOIhGZGZkZ
8eU1370R9b+Utvnaf/nTn/7k+p+wm6/wTXI6Ff4F/woH+VaXQWfVqGdY3Rqd
xvmu8n/AybfhTw1/qC68plAUhSscx8GeIAiWZfEZhmFgT5IkvpRMJjOZzOue
g1tmb8R1/ITXFXhXPB7P1rPns3fRYsG9E3jYGFRBm8DxAs0L0FHYCIanaJaH
Os0MDfbjZvAXSWZgDxvJokNe3DiGhX9UOsUQGYGjUWOeYUkCTiYT5Gij15R0
Os3zPCsWOIQ6xg3O4/FCPQvC+MKPlewZDDvcCI/CdU4s+CquQ3uAApDBN2Yh
grvwZ3r+/Dl+eBZG8QMhrHiaYBkKYwXgAEQYKwQaJw6R48WWTCadhPMUDJ9k
AaVoMsOKGAwMDeJ2AstglHgqLXAURyGUMmnm57HCncnKEi64n1nxwAPEI/oB
VtlDjElPT09ra+t46H5cQFTC4fCGDRvw4Y8/xLJly8xm8+XLl/EbU6nUqFyx
FM9h0UIDwkDF0yTGIRqPYaxOdhxx2OyXrt6C14cTJDOGJ0HCTgiNBDGe8cgw
lYoJPHn7ynmTVvXg3mN4Ck2h7XUFxovlHAY7PDwMuGURgBG97hZoDPACgLDH
7ROJBOxfvny5adMm/Mwff4IsVsFgcO3ataDU0CAUCmUfiyv379+vrq4OBAL9
/f24YzRFCAyJlYvjGI4bxQrjQLJj4iDKTDIa6n/Vt7BlWTSDbkjTQiSO8Ewk
CdwmHBoC0YP7ACiBS9HJIJGILP50KQgXXCUJ7rVgiQW+3bfffltTU6PX6wsL
CysqKhYvXrxt2zYY786dOyUSicfjkUqlFosFKi6Xy2azmUwmaKwdV0AYnE6n
TCZTq9Vw6HA4DAaDUqk0Go1wCc7AebhFo9GUlZXBSWigUqngDFxVKBRwFQ7h
kt1uh+fAIZyEu6ClxWw0aJROq8lus6jVSpVKYzJb9WabRKk12d3FEnltXcO1
G9fXr2stLioI+L12q624TPXVrsPDMdrqrFy2cn0knvl25x6TxVxWUrpu7UqB
Je7dvbZv9zaBjAh8KhkZqqoI3Ot+ikHnhZ/WRWyuu7q6VqxYsWfPnkMHDq5b
s/bWrVtVVVVrW9fxokZ4vd54PLpjx47KSv/SJZ9/+umnDQ0N0ABwg2FZLDbo
uc1hL6/wAw5wRqczmM3WsjKp1WqF4dvtVrfbaTTqYZQGnd5ustmMVq1Wr1Sr
AEW4USKTwigWLmrWGfR6o8Hv9wNQpaWlPp8PvguAbzLq3TZzXZW/usJvNprg
E7g9PrvbJ9foA/VNGoPZYrVfvHhx9cpVLU2NAk2cOnEyUN2wdOVGkKslK9b1
9o8MDYcXL1mKRbdt985LF88d3LfryP5dAEAqNnjt8vkNrRv37ztCZJCMsgKH
N37cht1KKDh8sfP8rZvXGZo83n4k4C+XlJVo9brWTRuHwsMen1smk5jMOrPJ
UFZauHLp55s2rpeWSVwOZ1FRiU5rMpkdZXJVmVJeWRfQ6Y12m7t1zSavq6K0
WAqgwb0+v3vOvE9sdpPHYdfL1IYyrbZErZCpjVabRKrUGIwqnT6/uMRd7pco
4FC/ID/ParcBhoWF+SC5Xo9LVlri0Busao1dZ1SUSkwGo06nU6o0Npc7UFdf
XhWwOx2nT5/+YvMWtVxhVKvh45lMFrXGkCGYhc0tNMNdvXr93Llz2OqCYOze
vbPzwrmvt29j6IzA063r1oD9qaqqBu1OJsHEg1n8IVwAFAgM7Lu77nz26aKR
gf5Nretq/P6HD+5V1dZ8tnzp2YvnNm7eYLUZGxprDu1rW7a4pawo/8CeXU67
w+fxVvirAavVqzd5/FV2v3fx6mWFpWUF+SVeV5W0WK5SaOtr65wua4kkb8eu
rRazTi2VmhU6r9pZaw+4HeUzc+dX1zdpjRaFTqe3WmEPagxYwXOLSorzCvKr
qip0Oo1cJjFqNU6DuW3r15/WNRpUGq1SBSYCNBckExpL5bLy8vJLly7VgTDV
1A709K5duWphYxMI/4kTJ8B+goU8fvw4mBQwdqBHoCDQGJSora0NoHv06NHG
jRvBC586dQqaIVYwBhT7faFiWRpX1reuhe9ugv7qdSDzFdUBd0V5qbys695d
uwMEXwsWw+OwNtRU+T1OkCuNSl1cJNFqjBqNRaJQ55cWw50gKg31zXNm5ill
2oryQHFhkdmiVyhLTGbQqjKVRKIuljkUVvl8mVZlBJRyFxQoNHqlVqc1mhQa
NbzYYDHnFRW6vS6FSg6mUaNRzZ+XW+H1AFaqEklR7nyHCek8mDIwmIBVmVQC
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
rdQ7vH//x8TyuuqPZ0yauyCnubly5vQP3nvz/zy+c52FIIUdjX/BOCgNipwF
U+uW1Lw7+aN/+/sb4AchWILvkmFpdow88D/AivvFWMVeCRzQ79TjJ/eWrW8F
rE4f3P7w6kmBRtR38bKNocEgYNV9bveFaxeiNIrkti5eJ4R6zh3Y+uDhU8CB
zQgbVywXyNCRfV+dOHMeTcgxwvqVGwYSCQitgb0BS4sThNVuKSqaW5CXM33S
W5KCaRZtwcn2b0GueB6xuEBDw60Hj00u77+/9XdfbWDC1Alz5uVs3rzik2nv
T53wdmTwpZAhxmN1oGO/2We43H1xSu6MNz967+ajexnRQaaBQjP0b4UVG237
crXLrHS6LGVazcGOwzcuHP4sYDdpNDqdzVuxMBaJCyMPbxzf7qxyKy0uTZmt
2VUtRHuvnNjlLq8slhsVpZrGCj+bGLh09rA/UKs3eqV5Mr+zIkggejqUSGGW
qFBJ7Xb9hPf/Y+fW1dLC6WZNPsJKSKXTYQi4I0ikBavX/8HkqVaf+x9TJhQU
z/3yy9Xv/P3fJr3/Zu8T4AwcSlWJKGTINLjWWw+u3n/ZNWnWtGnzZm/Z+TXm
VygvI7KsUUh+VazuXTgWsOvQtIVAr9i4oXXLhhMHvq6yqshEYt++o+VVi1KJ
tECPdJ1tA5M7kuKunu12y00CHT6xd7PHXwVydfLYebtWE+l7ePvqKZ3JGomx
XVe63RbPSCYTE+0VwbCxRNxgVCuk+WtWLLx385ROOrvGqzm4eyOdGkJmBk3T
ceF4qjxQO2nGTIPT8eGkDxTq0poaT8609+fOmPT47i2BYZPh6BhWBIRVjJA5
efnYX9558/3JE5evX5uiSWZstovLIvKr2isu1Hvom83K0nkmq05tt369e0fX
lZMLyy0gV3q9XW30oszPq7t3z+y2+91qh9+o8pTrHMzQ4+4r7Q6vf16JyuOs
rHQ5BCJ4/uT++oUtSrW9ZG5phauyNxIBucowOOXB+ctdZr2sNH8Gk+ozyHN9
VsmRvVs4ZK8QVhBPsZxQXlXz1rsfqI3Gj6dPKiyZV1g4e+6cj6dN+uDcsXaB
pDAKRBolOmiBAqx6Rl7MK8nPmTPr1r2ukVgEZx7TROY/iQr/yyUTFLjkoX3f
5M6bdfTCBXjdhWN7rhzfB70KhTKfLd9CEUC7+3puHjt58Sz0hiGE7au3UAMP
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

       "], {{0, 0}, {100, 54}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 54}}], 
     RowBox[{"{", "45407.66796875`", "}"}], 
     RowBox[{"{", "45000", "}"}], 
     RowBox[{"{", "0.9059288194444446`", "}"}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.7400851047401304`*^9, 3.7400851134626412`*^9}, {
   3.7400851778097534`*^9, 3.740085234098688*^9}, {3.740086363617132*^9, 
   3.7400864626187525`*^9}, 3.7400865095278616`*^9, {3.7400866544911656`*^9, 
   3.740086696967435*^9}},
 CellLabel->
  "Out[162]=",ExpressionUUID->"77e2e03a-d4cd-46ae-9c5a-896dfd04f995"]
}, Open  ]],

Cell["\<\
So now we have a network that can read the highest bar in a bar chart with \
around 1% error. It could read any other bar as well, like the first bar or \
the smallest bar, but I decided on the highest one to get the highest \
percentage accuracy.\
\>", "Text",
 CellChangeTimes->{{3.7400853208293*^9, 3.7400854183009586`*^9}, {
  3.7400867158345737`*^9, 
  3.7400867249272194`*^9}},ExpressionUUID->"e9ed7a77-ecd2-46b7-a44f-\
bdefc67e935b"]
}, Open  ]],

Cell[TextData[StyleBox["Relative Chart Height reader", "Chapter"]], "Section",
 CellChangeTimes->{{3.7400854236785994`*^9, 3.7400854340516777`*^9}, {
  3.7400854765073175`*^9, 
  3.7400854842708287`*^9}},ExpressionUUID->"63367760-08a6-4f4c-9d8f-\
4736677144d4"],

Cell[CellGroupData[{

Cell["Dataset generation", "Section",
 CellChangeTimes->{{3.7400855042548895`*^9, 
  3.740085515321208*^9}},ExpressionUUID->"9a52c627-a349-4e88-9819-\
5039a904c4e7"],

Cell["\<\
Defining a new dataset that associates the images with a list of their \
relative heights\
\>", "Text",
 CellChangeTimes->{{3.7400855386208587`*^9, 3.740085554197093*^9}, {
  3.740085595569397*^9, 
  3.740085618823737*^9}},ExpressionUUID->"7e22a67c-4ab9-4033-93a1-\
38ab75c4d0c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "defining", " ", "a", " ", "function", " ", "that", " ", "takes", " ", "a",
     " ", "list", " ", "of", " ", "values", " ", "and", " ", "turns", " ", 
    "them", " ", "into", " ", "relative", " ", "heights", "\n", "to", " ", 
    "a", " ", "given", " ", "number", " ", "of", " ", "bins"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"class", "[", 
     RowBox[{"list_", ",", "nbins_"}], "]"}], ":=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Floor", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", "/", 
           RowBox[{"Max", "[", "list", "]"}]}], ")"}], "*", "nbins"}], "]"}], 
       "&"}], ",", "list"}], "]"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "using", " ", "the", " ", "class", " ", "function", " ", "and", " ", "my",
      " ", "ids", " ", "to", " ", "associate", " ", "each", " ", "file", " ", 
     "with", " ", "the", " ", "list", " ", "of", " ", "its", " ", "relative", 
     " ", "heights"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"listData", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Map", "[", "\n", "\t", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"File", "[", 
            RowBox[{"FileNameJoin", "[", 
             RowBox[{"{", 
              RowBox[{"dataDirectory", ",", 
               RowBox[{"StringJoin", "[", 
                RowBox[{"#", ",", "\"\<.jpg\>\""}], "]"}]}], "}"}], "]"}], 
            "]"}], "\[Rule]", 
           RowBox[{"class", "[", 
            RowBox[{
             RowBox[{"mxs", "[", 
              RowBox[{"[", 
               RowBox[{"Key", "[", "#", "]"}], "]"}], "]"}], ",", "20"}], 
            "]"}]}], "}"}], "&"}], ",", "\n", "\t\t\t", "ids"}], "]"}], 
      "]"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "splitting", " ", "the", " ", "dataset", " ", "in", " ", "the", " ", 
     "same", " ", "number", " ", "of", " ", "training", " ", "and", " ", 
     "testing", " ", "data", " ", "as", " ", "before"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"traininglist", ",", "testinglist"}], "}"}], "=", 
     RowBox[{"TakeDrop", "[", 
      RowBox[{
       RowBox[{"RandomSample", "[", "listData", "]"}], ",", "161000"}], 
      "]"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{{3.7400855321676784`*^9, 3.740085534728648*^9}, {
  3.74008563136617*^9, 
  3.740085815163269*^9}},ExpressionUUID->"a5ec2bca-6f24-4fc2-96a0-\
a7e31bbbf0d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Network setup", "Section",
 CellChangeTimes->{{3.740085840941593*^9, 
  3.740085842888788*^9}},ExpressionUUID->"f2d69f65-efab-4a2d-99e3-\
d38da24ba171"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "defining", " ", "a", " ", "few", " ", "building", " ", "blocks", " ", 
    "for", " ", "the", " ", "network"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"loss", "=", 
     RowBox[{"CTCLossLayer", "[", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"classes", "=", 
     RowBox[{"Range", "[", "20", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"decoder", "=", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<CTCBeamSearch\>\"", ",", "classes"}], "}"}], "]"}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"convUnit", "[", "c_", "]"}], ":=", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"c", ",", "3"}], "]"}], ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "Ramp", ",", 
       RowBox[{"PoolingLayer", "[", "2", "]"}]}], "}"}], "]"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{"putting", " ", "the", " ", "net", " ", "together"}], "*)"}], 
   "\n", 
   RowBox[{"ocrNet", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"convUnit", "[", "50", "]"}], ",", 
        RowBox[{"convUnit", "[", "50", "]"}], ",", 
        RowBox[{"convUnit", "[", "50", "]"}], ",", 
        RowBox[{"convUnit", "[", "50", "]"}], ",", 
        RowBox[{"convUnit", "[", "10", "]"}], ",", "\n", "\t", 
        RowBox[{"TransposeLayer", "[", 
         RowBox[{"1", "\[TwoWayRule]", "3"}], "]"}], ",", 
        RowBox[{"FlattenLayer", "[", 
         RowBox[{"-", "1"}], "]"}], ",", 
        RowBox[{"GatedRecurrentLayer", "[", "50", "]"}], ",", 
        RowBox[{"GatedRecurrentLayer", "[", "50", "]"}], ",", "\n", "\t", 
        RowBox[{"NetMapOperator", "[", 
         RowBox[{"LinearLayer", "[", 
          RowBox[{
           RowBox[{"Length", "[", "classes", "]"}], "+", "1"}], "]"}], "]"}], 
        ",", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\n", "\t", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", 
       RowBox[{"NetEncoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Image\>\"", ",", "100", ",", "\"\<Grayscale\>\""}], 
         "}"}], "]"}]}], ",", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", "decoder"}]}], "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.7400859154991937`*^9, 3.740086045064481*^9}, 
   3.7400860900479493`*^9},ExpressionUUID->"49fca4f3-1aba-4a71-b7ab-\
098ad004e2a0"],

Cell[BoxData[{
 RowBox[{"ocrNetTrained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"ocrNet", ",", "traininglist", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "testinglist"}], ",", 
    RowBox[{"LossFunction", "\[Rule]", "loss"}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "32"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<RelativeHeight2.wlnet\>\"", ",", "ocrNetTrained"}], "]"}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.7400860488638783`*^9, 3.740086075242655*^9}, {
  3.7400869260836225`*^9, 
  3.740086927808645*^9}},ExpressionUUID->"7b7ec6a7-a366-4245-a21e-\
085ab6ffbff3"],

Cell["Importing the trained network", "Text",
 CellChangeTimes->{{3.740086932151928*^9, 
  3.7400869387133627`*^9}},ExpressionUUID->"c9c2bd66-0633-4f42-bc14-\
495577ebc388"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ocrNetTrained", "=", 
  RowBox[{"Import", "[", "\"\<RelativeHeight2.wlnet\>\"", "]"}]}]], "Code",
 CellChangeTimes->{
  3.7400869586986375`*^9, {3.740087001932578*^9, 3.740087008245962*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"3018dc09-5814-4770-9392-f633603504a4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"ctcbeam search\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 1, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {100, 100}, 
                    "$OutputSize" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 98, 98}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {98, 98}, 
                    "$OutputSize" -> {97, 97}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 98, 98}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {97, 97}, 
                    "$OutputSize" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 95, 95}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {95, 95}, 
                    "$OutputSize" -> {94, 94}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 95, 95}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 97, 97}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {94, 94}, 
                    "$OutputSize" -> {92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 92, 92}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {92, 92}, 
                    "$OutputSize" -> {91, 91}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 92, 92}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 94, 94}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{50, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {91, 91}, 
                    "$OutputSize" -> {89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 50, 
                    "$SpatialDimensions" -> {89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 89, 89}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {89, 89}, 
                    "$OutputSize" -> {88, 88}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 89, 89}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 91, 91}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 50,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 10, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 50, 
                    "$GroupNumber" -> 1, "$InputSize" -> {88, 88}, 
                    "$OutputSize" -> {86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{10}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{10}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 10, 
                    "$SpatialDimensions" -> {86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10, 86, 86}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 10, "$InputSize" -> {86, 86}, 
                    "$OutputSize" -> {85, 85}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{10, 86, 86}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 88, 88}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 3]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10, 85, 85}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 85, 10}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 85, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 850}, NeuralNetworks`RealT]]],
                     "8" -> Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 850}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 850}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 850}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 50, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    850, "$SequenceLength" -> 85], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 850}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "GatedRecurrent", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "ResetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "ResetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "ResetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{50, 50}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{50}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 50, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    50, "$SequenceLength" -> 85], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{21, 
                    50}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{21}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {21}, "$OutputSize" -> 21, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 85, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 50}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]]],
                     "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["CTCBeamSearch", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19, 20}, "BeamSize" -> 100, 
                    "$AlphabetSize" -> 20, "$InputSize" -> 21], 
                    NeuralNetworks`TensorT[{85, 21}, NeuralNetworks`RealT]]], 
                    "InteriorStates" -> 
                    Association[{8, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "8", "States", "State"], {
                    9, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "9", "States", "State"]]],
                    NeuralNetworks`Private`NetChain`opart = {
                    "Inputs", "Input"}, NeuralNetworks`Private`NetChain`part = 
                   Null, NeuralNetworks`Private`NetChain`selected = 
                   NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {100, 100}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{1, 100, 100}, 
                    NeuralNetworks`RealT]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"100\"", "\"100\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"97\"", "\"97\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"94\"", "\"94\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"91\"", "\"91\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"88\"", "\"88\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\"", 
                    "\"85\"", "\"85\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"85\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"850\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["GatedRecurrentLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"50\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"85\"", 
                    "\"21\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"ctcbeam search\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {36., {8., 9.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400869613261023`*^9, 3.740087010010274*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"f7ab621d-c174-4da8-bfad-3fe13c0fa4d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "defining", " ", "a", " ", "sample", " ", "of", " ", "the", " ", "list", 
    " ", "data"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"samplelist", "=", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"testinglist", ",", "10"}], "]"}]}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
    "visually", " ", "representing", " ", "the", " ", "output", " ", "of", 
     " ", "the", " ", "network", " ", "reading", " ", "the", " ", "relative", 
     " ", "heights"}], "*)"}], "\n", 
   RowBox[{"Grid", "[", 
    RowBox[{
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"Map", "[", "\n", "\t", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Show", "[", 
             RowBox[{
              RowBox[{"Import", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
              RowBox[{"ImageSize", "->", "200"}]}], "]"}], ",", 
            RowBox[{"BarChart", "[", 
             RowBox[{"ocrNetTrained", "[", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"BarChart", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
         "samplelist"}], "]"}], ",", "\n", "\t", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Input\>\"", ",", " ", "\"\<Output\>\"", ",", " ", 
         "\"\<expected Output\>\""}], "}"}]}], "]"}], ",", 
     RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.7400886686105504`*^9, 3.740088680616866*^9}, {
   3.7400887338931823`*^9, 3.7400887472832513`*^9}, {3.7400897574271894`*^9, 
   3.7400898227889414`*^9}, 3.7400899211614976`*^9, {3.740094508375554*^9, 
   3.7400945734807863`*^9}},
 CellLabel->
  "In[176]:=",ExpressionUUID->"57b8b285-95e1-4986-a0de-b818286a0cce"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Input\"\>", "\<\"Output\"\>", "\<\"expected Output\"\>"},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
l51pKj/TWNN2tPZY3ZHvR9vYFW7d9SkPBSfO1eb0MndNyWrPVntwGfkPrlDw
ruTvh1K/uep7u+fLBUGg9Vbif8AKzCBqUZASTeCStijww9OCw9drPFS3avRf
V/ZUQa8ku3T3mNdIkX20jJ7K1NP1JeeYVbSy4vOdzaz66kYyqZFcz6hrYNXR
WymtHdRjreTOpobGtsaWpgZWe1MrpbKBTW/c6IO2ldXcwWxrpDKZdXRGA41N
bmyisVgUWktjE51MaWY1AmNSaW3s5iYGE7R1VdWNNBaTwgAGOnWVtS3sVga9
iUxhUMgMKoVJpzIYNDqLRqZT6pqodZSawy20mhOtVDb5CLmypIl0sINe0Uop
76CRWBXMljrSHbz1XGfata6yY6Sic9TS1vL4p7L6S/TwM1VZS+N9rXt3aO5X
z+Ppy9LESY7/a2GIVegHSJSJSFZOG1ipRMHLaDK3YYdKUvds4PAwK/o7Tslj
wW64x/O5NAt0LtS7PZOQHiK0y+3Ft9Gek+1HybXFjeyjTS21rOY6GrOWRm9g
gn80No3CbGpm0tlkOovMaKbUU2ooLBKLTWO10mjMBjAC+mRmHZlWB1owQmXU
N7IZXcfba+oqqfQGCo1cUXW0uaOlgU4GRqLWd5w8TmbSgYFOHZVcT6eTGI0V
ZCqjtaOp81gViVxHpbLbWilMansHu4509MyZzsH+8yxaFZNaca67mU2vYFHK
7sixntYzjfWkr7/qpjX4M6qTHo32nWaWnm/MeyStutwc3l2VeX+w/To76iE/
6+lw3KNr3tPcYAUebYV9fsbKeYN3abEgFRoHYlAjPfT9tV2i1mAuy22AafdE
EDc/mjk3kjMpyr1M3tTX5Ha82vEsK/xMc/y9kZZ2Vm47e297S2lL475m1oH2
prL2xgNsRklLa2k9Na+x+QCTVdLeWsyi53U0V1LJZZTGCmrLETr7AL2xuLWp
oKulpKNpfzNtP5tW1tp4tJm9v6nlILuZxGqqZzXV0hnlDPrhY11kUnUpu7Ga
zT5cU1fU0dlEoVFJFDIAk8aoqa8/3NFBb25uqCUdYrKOsph7aQ1ZHazcM60l
x5n5xxkFx5v2sMm7mkmpF9pLW2v2XGo9fAs5eq418Epb2sn6+HOUxIeC2hcj
By7SXG4wks7XhGt+R71QB/FZ0LM+T/1IvE4STQAFmKeNq9soFkGuAGeY6XPT
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

       "], {{0, 0}, {100, 58}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 58}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3023255813953488, 0.}, {13.440071556350627`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5599284436493739, 0.}, {1.4400715563506261`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               28.88996579023766}, {-7.466178791979296, 45.93626935115712}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5599284436493739`, 0.}, {2.440071556350626, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{29.826880425372764`, 40.87855207442454}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.559928443649374, 0.}, {3.440071556350626, 16.},
                 "RoundingRadius" -> 0]},
              ImageSizeCache->{{41.81546670955964, 
               52.86713835861141}, {-31.512746129768573`, 45.93626935115712}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.559928443649374, 0.}, {4.440071556350626, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{53.80405299374651, 
               64.8557246427983}, {-17.084805727095002`, 45.93626935115712}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.559928443649373, 0.}, {5.440071556350626, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.79263927793339, 76.84431092698517}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.559928443649373, 0.}, {6.440071556350626, 14.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{77.78122556212027, 
               88.83289721117204}, {-21.89411919465286, 45.93626935115712}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.559928443649373, 0.}, {7.440071556350626, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{89.76981184630715, 100.82148349535892`}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.559928443649373, 0.}, {8.440071556350626, 6.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{101.75839813049402`, 112.8100697795458}, {
               16.58038854580999, 45.93626935115712}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.559928443649374, 0.}, {9.440071556350627, 14.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{113.74698441468091`, 
               124.7986560637327}, {-21.89411919465286, 45.93626935115712}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.559928443649376, 0.}, {10.440071556350627`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{125.7355706988678, 
               136.78724234791957`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.559928443649376`, 0.}, {11.440071556350627`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{137.72415698305468`, 148.77582863210645`}, {
               31.008328948483555`, 45.93626935115712}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.559928443649376`, 0.}, {12.440071556350627`, 
                19.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{149.71274326724156`, 
               160.76441491629333`}, {-45.94068653244214, 45.93626935115712}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.559928443649376`, 0.}, {13.440071556350627`, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{161.70132955142844`, 172.7530012004802}, {
               26.1990154809257, 45.93626935115712}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3023255813953488, 0.}, {13.702826475849731`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5599284436493739, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5599284436493739, 
               0.}]}], 
            LineBox[{{13.440071556350626`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {13.440071556350626`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3023255813953488, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.27191413237924866`, 0.}, {15.430851795789184`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.569148204210816, 0.}, {1.430851795789184, 11.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 
               27.29148761901275}, {-7.466178791979317, 45.936269351157065`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.569148204210816, 0.}, {2.430851795789184, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{28.22840225414785, 37.68159573197471}, {
               31.008328948483506`, 45.936269351157065`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.569148204210816, 0.}, {3.430851795789184, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{38.618510367109806`, 
               48.071703844936664`}, {-31.512746129768587`, 
               45.936269351157065`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.569148204210816, 0.}, {4.430851795789184, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007177, 
               58.46181195789863}, {-17.08480572709503, 45.936269351157065`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.5691482042108165`, 0.}, {5.430851795789184, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{59.39872659303373, 68.85192007086059}, {
               31.008328948483506`, 45.936269351157065`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.5691482042108165`, 0.}, {6.430851795789184, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{69.7888347059957, 
               79.24202818382255}, {-26.70343266221073, 45.936269351157065`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.5691482042108165`, 0.}, {7.430851795789184, 
                0.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895765, 89.63213629678451}, {
               45.436269351157065`, 45.936269351157065`}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.5691482042108165`, 0.}, {8.430851795789184, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{90.5690509319196, 100.02224440974646`}, {
               31.008328948483506`, 45.936269351157065`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.569148204210816, 0.}, {9.430851795789184, 6.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{100.95915904488156`, 110.41235252270843`}, {
               16.580388545809946`, 45.936269351157065`}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.569148204210816, 0.}, {10.430851795789184`, 
                14.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784351`, 
               120.80246063567039`}, {-21.894119194652873`, 
               45.936269351157065`}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.569148204210816`, 0.}, {11.430851795789184`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{121.73937527080548`, 
               131.19256874863237`}, {-50.75, 45.936269351157065`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.569148204210816`, 0.}, {12.430851795789184`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{132.12948338376742`, 141.58267686159428`}, {
               31.008328948483506`, 45.936269351157065`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.569148204210816`, 0.}, {13.430851795789184`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.5195914967294, 151.97278497455625`}, {
               31.008328948483506`, 45.936269351157065`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{13.569148204210816`, 0.}, {14.430851795789184`, 
                19.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{152.90969960969136`, 
               162.36289308751822`}, {-45.94068653244214, 
               45.936269351157065`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.595], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{14.569148204210816`, 0.}, {15.430851795789184`, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{163.29980772265333`, 172.75300120048018`}, {
               26.199015480925652`, 45.936269351157065`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.27191413237924866`, 0.}, {15.734030549057383`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.569148204210816, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.569148204210816, 
               0.}]}], 
            LineBox[{{15.430851795789184`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {15.430851795789184`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.27191413237924866`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
TvWBtsbPX3np792q4ytYPVdN2DN6SBSg4MmFwd6dRDzPzs6Xf3nL6USaBV1G
dtKS/pHFpo1NKXFxaHbamJ2WLDNLI32t6Zn7gEK7+8byd2c7nRNDw60J6SUu
hSgAGWA/wBxShqcXNzw+SPhKKTLgsoyEPFpOaSq/6vV/aqg/09N1Rt14sLHl
TEPrueaWE62th9pb9sPa1nysuen8K6/+g5LmK3n+4/ziuXzQw6W0jJxurBQe
bG16sDN4S1CQz6efbvbziVQ39t+8e//MF8chS5WQIzy+YE6HqqrUF8+dVjJW
Z6Qqy0yhqvqWazcvK8msLT5zj4FBFjs2IUg8QYtCwgXW9RQNLHtqKsqiYIXh
co9uesrR/IqVv7z/4Ghry+Ga6uL6plP1Teea1Sda1Ifb1fvb1aUt6mPqxnMv
v/q/RezLZJTRWz6SnicQPgkr2mkoKkwxm7UjI2NXL9eAx9U0NHV0NyFZb7Fp
sopOQILW2Ng1Otgn2uYRazlw6Auwomt3axqba2VRC5IzMbtk0YkPRvIprxYl
5bUnYSV+EytsDziWeSpB/KqVv6y/f6Sv5Uh73d6OxpMdjZ93N5T1NBzoadzb
07AP3rc1nn315V8inOYrV+MODbI7WPyhsQIHnJroyc1N1WqXblytt9tQbWNz
xZXzYFcUY8goPLZkQQ8eNN+7eQ1xRuDMhOTdYFf3G1qv36pE8hIvGNMKDmKd
rcdxEDIvIq6IUT3dtNwVDMxQXgmJWIHUi+Endu1r/9Bx/+hU6/GxxoMDNYcH
ao48qtk/XFM8XFvwqLZ4oLa0u/bUyt/8Au9Lpii8eKzABAYHu9av33Du9HU4
yezCUkx8uG5pYEk/mZhVanSg0dH52MgwsKuZ0Z7UjBJg8fbeocycVAieU9M9
qtTCaaMsekQCJM6RkZHfXTR7LKjcWCmVWFzVEt0BkX7nN3/Teql47GbByNXM
maoDsM5VFc1X5c/fz5l5kD9eve9RzfHV/+e/4mKg4n0vHCuZelB1OTBwW3Jy
6t6iE3igH6GCoqyU5MDNW9fdru1hlC47enC/KmhTWODWlvYRvR3TckFRTkjQ
ByE7N9+u6wTfM1rcEj06Oppk8d9Rlf1K+QJjRarE7vREBAlO/e7v/n3VvujW
0tCWPdtr8j6ryd9Sl/9pXcFHNYUfPCj8+FbRZ5XFIW/+439CgoNci6RcoVIR
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

       "], {{0, 0}, {100, 74}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 74}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
3FQ6oEoK2OXfh6tRFaXtNkGJe6+UvwFUfYc+CVjlTMbKXl1aV03yUd7anjpF
t4bVUkstSVzbD5+13isr5G6asiRb70XnylY+shxRnVeUcbcApbWryAXJKywV
so7r+eX0jWM2SR+Cn2kVO43SAU2hDL0+mRRVe/W0sfJCwt6V0TveNNcea6o/
Y644jtn1vqmm3Kous6iL0dv/2FST29mQY6vKit7/lqGhrFlV4GgoXPY6SltV
1lWf2V0pIm9DjcOJXpgUsAojv3xJfz+z3aDshTOZe/6t5SFvQMd3WlNp23/X
VpnXWZfRUSMnb/43pzF/TC2dsyeBTPc9+pXiWdvRgdqy5NjVI9YjnTplS33e
jRJcKvY9efwy82XZmL7M3ZQ/aso4l3EwMWGdjLTbdDvDbeRMI5TLR3ZJOV+k
MfdrL8pdZumAnnCtfHMm5+Mswg7NacmUXeK0YTxNlGEjYxhSZlHXKYjbb5TJ
7hyX7ProX/a+j3pYiFeVMKuVJMzyn9TnEHTF2NqCWOC1qgoTNGXxDwoO7fno
RzdKCHVlmMqiuNV/QN0upTcUReoP7xJuQ82apc8Qql9D4uz6b8w9P9v4Goq4
DsUGvV2XGGqRuTVc/sZ/1ZTiakr2qY/sE275CTCEwBcF9dT/0aL/7+BO1kcn
2MtzMasL6V/JcH85k7PV/+jS/WPEPMaqdMyy9rsZ/XXZ3qacYURRe5quIG4Q
xK9tqcoZqaPM2HnXj++hod9OZ+w03cz0ONK7VcTbZ3anMD9MjlnTdDN9BOa5
Woi9mn1jZrK7KTeD9BH/0Eff5DLuFFO3vY7Crv6nOuVBUx5Or4hKfPfHSMrB
xuyDUMYe2of/VJcVBRVG12Tuw37yL/dzEwyFUSplxLrfoG6kxdUqtjWkfpm0
GTWjFYUQEMHIA5WUSaPQY6SFHHxXBT7kkD+DaK4KrGT9j2vT9z5M+7Iqa13S
5h/M6ZIWDfRFI+HbdPPdYKVelr/5sGDPbNvxMbti0C6xVTBSSS+317B6VaLj
/I8eVbAnLOzGypijklWDhqLG26lHuF8MaaWNFeQ86YfdSK79uqSU9dljvdzW
wE2XfNCiTm27LLou3dCtYw3YKUNI1KSF6LKlS2NfJ2/58zlFXNVRKu6TfyZ+
iKpP2WbKOABLdsveRpkl25pTt8HJGxnvomoUkVDmwXrFXtKHLz1MjYYyD2gU
e7b+GlWfR2sqxlhy94rX/9hZKXpqED03CYCKAia6Vxc9q4tdUJNCOkbISH6u
ZcrX/xguijEd2Wco2Sz+CuWuos/rCSE7GcSQ78zV02a6F2HWl+2/nP7VmE3a
oiKZ7xJuHN4ybBT5mtKLKK/113JmWgX6K5tOpax2mopmm88WUT7orhFZ75LL
s9b4+076bMdKGataG5JUd2n56Wu9vadnDAWX+KubqvDDTQxvC8kJYSdhuRL/
Pm/v8uOJETeUsQmrUISVKG3uHmvuIUtGROJylCN9T3POdkv2Dvp7KK0y3pQX
ZVBGED/8oSon1p57wKTcv+WXqKosrCZtjz5rB3/Dj31QdhBKmlJRx9TYcW30
vD3hqTkhZGIFq3FPNYQQIpSu+5EuL6ZKuak2f6MA+DFEEjBg/bqY7+OvgjBj
ooH5tPmU9Qo/m/aKpyO79kxc/Vn0lDljEkq/nr710QO+1yGBvtlruckELXpA
XXw1c0ffPXLbnfiqC4eMDzmDcOnV3AOPG8SqKzF3LkR3Qpk91Zl3snc0VsS7
mhkBG9GlI7sMmUXUNUrcpjuFvHuH6XveRe1fjqotPKjKi9bkx8S/gdLmHVAX
7FAX7Tr0NqquIFKbv1tTuCdiGaqu8ACUtwnO274e6KoUW5ezXV+6m7r5B4GO
wxMWSXcDftLBnLDg3JYYlzHymY3nU9G9KoJbxeF9+TPtEfq9/N215RHUzajF
jtwJiDSqjgzA352rSS1j1pY1XJ07YSjXXaNUnY81XOddSN81rMvy2g6DcntU
oXBbUizXMGDnEHRy0Hy6mP2ptz7RcHTr9WO7HzmKu5Ajedy17Q945uu4iyU7
+xtLxyynyoRrHqnooxBh2oTzwIxJQ0Zq3Ioc8o62qlOPtCcI23/H2PPvj+sU
j6sV/XWZ/J2/7K9N7q0R9KsSubtf6q8TD1azhxv4nD0vgcA1UkV31nG//BOq
u0Hu1EpHVBzsZtSwXTZs4bhauSNmjNMSN4VEOtURCyZWQMeagdhBSzJ7608H
tDl9BvljgwS7CQUW7jEd5UkzN/CdRQURO6uoJxJXTetOeWxXzpZE1Nzl6G8l
5zC+7K7Pba1Mz+ZseKQpnjLnPa5JyuVtbDec1T7My2V/OXpH/PgqLYu3ssla
Wv8wI5W9bkSV3XKDK6e899h61FqbV5i4vrWS5TRz3I3EcQupX5eUTlgV++Wr
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
tQ==
       "], {{0, 0}, {100, 63}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 63}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 
               35.971457463440785`}, {-31.512746129768573`, 
               45.93626935115712}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.37851467504866, 
               55.511677997303565`}, {-36.32205959732643, 45.93626935115712}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                14.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{56.91873520891144, 
               75.05189853116634}, {-21.89411919465286, 45.93626935115712}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.45895574277422, 
               94.59211906502911}, {-31.512746129768573`, 45.93626935115712}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.99917627663699, 114.13233959889189`}, {
               40.626955883599265`, 45.93626935115712}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{115.53939681049977`, 133.67256013275465`}, {
               6.961761610694275, 45.93626935115712}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 2.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{135.07961734436253`, 153.21278066661742`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{154.6198378782253, 
               172.75300120048018`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{8.451201747997086, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.39075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                15.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{17.838294141185884`, 
               32.486541675493726`}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{33.42345631062882, 
               48.071703844936664`}, {-36.32205959732644, 
               45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007176, 
               63.6568660143796}, {-17.08480572709501, 45.936269351157115`}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.5937806495147, 
               79.24202818382254}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895764, 
               94.82719035326548}, {-31.51274612976858, 45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840058, 
               110.41235252270842`}, {-31.51274612976858, 
               45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 0.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784351`, 125.99751469215136`}, {
               45.436269351157115`, 45.936269351157115`}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 8.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.93442932728645`, 141.58267686159428`}, {
               6.961761610694268, 45.936269351157115`}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 2.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.5195914967294, 157.1678390310372}, {
               35.8176424160414, 45.936269351157115`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.10475366617231`, 
               172.75300120048016`}, {-50.75000000000001, 
               45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5460988028072107, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
               0.}]}], 
            LineBox[{{10.453901197192788`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
2+p9B9688MMfHTY7k7kyK6gsEN135J3Bg2/0/9q/uu/dU5OvHu5/6hmHzhR/
5fVzh94aeGxj82tv9CL/pbsfjrX+UYuz8+77Hn1p/8nXDl/YtNXxxCbzS3//
1qant65519TzNVEMBgXZWY8VJVz6iGJYTSSKbgg03CvcEsbjI2AFIUInLO6w
wx+3emJb6syPb9Jv3eE+cHjg2PGxTc+E3nhr/OChkd/67Y0HDl1949joV+7d
uP9A/4E3Bjc+49lSG9p/sPfoiSsOfydeP35N1tZXXh945eCVu7+65ScHLhw6
2r/xGevGzfY337768v4zm7f6j58cf+nHZwKR70AkAW8g+vxrb/QdenOwpi78
2JP29z+4WVdnVhVGooMjKROCi5AhngglU500a8LvJNcRbgOOMEbkohNtSJxx
GuBJNCV8YEIYngZcUKgsMIqCbu6EsrLCvPDA3R6aV8EottW6Xj80+OaR8bra
7jeOzH5wKnv3vc8ce3sEhPmtr3zr8DtDwOfJzbZ6Q/vR4zdfP9rvDLWWYM4Y
M9tTr70+/Prrs/fcW3/wzbMnTp1/pgbuefDAgQtH37z6xOOO0x/MHz9x0+3d
Ax0F7eQNdL7+5oW33r5Sr2vbUdd17Nhk3XYnnNlyqdI5Pha14uKyjzAlCE8D
4kPA0hQEcRJQkDNASFIh/H/G42vyT0AtwIVL1R4sGiHYYYOg30ORMKz8cnaR
oNtR7zn1/vR7xxdrt+06/PrMieML99zz9KnT4+d7J7987yPvvH/9xOnrwKq2
oe3td6ePnrjqjbQtK4slVvRHd1+4WDp1iv36Z7/l9qcee2rD5s11tdstl/rn
jx+75rQ+e+i1wVPvT9lsHbAOuQKzu2PnL944fKSvpib8B//J1n9R2lHr1rAq
rmLFxyevRA3VcK1T2yLiIybQFASBhuEjpiNeISMMxO7du2FHoLrpRlzV1Hih
QFNkNC+B+hzGHIDSpqq8HkmB3ZMyuSxYrGv0nP5g5oP3l/QNe06/nz93Jnvv
PU8dOdJ/9NjAl37noROnRk5fGN+81V2v6zh1Zum9D27CrkmsKLGy1ZE8fnzq
wjlWV9uZK2ljQ2sN9bbtW+26+vCO7eHjx0Yu9aV9np5MTuMw4unevtEzZ8d0
jalmw7NvvTleX/fxsWIV54pCJFaZ/qVGRB4ZYR+JVxBG4EMaEu4Bq8xFkLyb
zeYVJDlWNoe9Ud8QiYXhZ0Jem4y+vr6FD07NbatJnD2dGegvPPRQ4/kLE5cH
57/47/7g+LtXL/bP1NUjGOns7c2euzBlc0XLrAjNFwh1nz23cOGsUlMTzxU1
NDSvbL4AFbS0wExN8Qtnp0+fGnE6UuAVrrbY/GfPXx2+mq6p8Vpbnj1/elFX
r2GlebtVWFUgkj5UDBG4gTNQNcQcZEhjgzDJZJJ4RRnG7Szy8KCglwR6YBTy
xEzCCjJ748YNZLI5bcLc5fb+5xefX86mNRmUwCtHX+9U34WFJl3b8OXSByfH
P/Wrv+3zdm55xvS1rz997tzk5cGF+vqAXpfq78v0D8zanVE+b1+22yKnTk1c
6i03N3Xi4ShcXFpWObsAV80W843RzODlmVRyr1aiso6OPe+/33/srV5zc6K2
JjQ8mNc3aBM1d8Dqw1UW7FqYp/n5eZzq9XoqB3RizhMZYVWJRaTWIMIoB3qM
K38xgU+TG0Tk2bklfyC0o6He5XHjdCmds1h8Q4OzA30ztTWuoctLs5NqOLCT
utmkD964lrt2ZUlX79XtCA30zl4dWvR7E2Smw8GOa8PL14eKzcaYIkMjZQHX
cjaznIHvDcsbOn9++Pjx805nOJuDyIPAlunpzNClKZ+7y2RIXDw3YdQ70SdZ
WhWxyhv/cKwgejSVCgmiBQ50CWhA6EjnCDtIU9OoSYDQZCkKW1tbq20lzR4T
M2dn5+nthUIRBBe4qvl+KttRZxy9Pjc+ljY2ugcHJq8NTXudccQwqsQi3s6p
kdzI4KxZ523W+Yf6p0eGZ4O+ODRKIVdMxbuuXpnuPTO6o7aFpncWlmZ5DAhN
olotzumpBfw87iCuFgtywBu5fm3ixrU53Q6brs41OZZtMtpWsGLCc/hIvjdB
QTyhmQFCT7RAk6giQ4WAFPpN6HbYO4gtq+gx0n7AkIJK3IBwz+8P+nwBOBpw
8XK5gs8b6u8dnBibsZgco8Nj14dGQ96I9j5lFnHGxy5PXO+74TH5PZbgjaHJ
sSsTQVcIV0vZInz9sWvj1wfHcKNWUoS8wzUoSzxkrq+vGxkZGRy8gmep8oqU
uW1eNB71J/V15rmJpWYjdVIVw/noWFFlcqVIysScMJgjREksSRDBcKT5dsYX
OOAt4F5ytKgRIEkOKsJmHM0mWzzWmoi1ghvov9PuGOzvS8/P2VvMo1eujF29
Cr6ykgSsYm7/jf7hyaFRp8HkMJgmhq+OXBqKeoLavA6uegPDAwOjw4NNunr0
jymyrBRpzkdlJbvNNHzl0sj1q6Ggn6lVqpp7TxajeWRo2KCDhlmZHvl5sYJQ
kD9PdMKpMIhQOxA6ioCQIaVNyxNQU6SjKNF0KAFb4Inm80kS8/kigELnM+k8
jstLaUND3aW+M1cunW2o3TjYe3L82kBb1M/kMmx50u242X9+euiSx1DvNtZO
Xbk4OtAbx6vkM2Fxr/vqwOkbw2eb9VswYqb5wJKsFEplcLjY0tIwOHjhylC/
3+3QdL2krAAFY6xINn3jyJV+g75eEybOQ+4q/Hy8ogQ+kINEfoJYmqGrlEEh
nASSWbJ6MIs41tbWMr7mKFrbuHEjuROEsNcThDLRpKag+RBel3Vuanh44F27
+ZkrfW8PXjjeHnUxOc/kbJunaaL/xPTgKa/haa9xw/TQibH+k0mPjcGcalhZ
rl06PnbtmEn/OFP4fMSKrQe18nr9luvXL06MDaN9jXXwemlGBi6/krfpt44M
nTUYtmmmWObCy931O2O1Vs+TOSMfGyBMTU1BoMhBRSMQqxxPyIg2d+zYwXi4
J0Lszs5OcI/wJD+WNBhVgOJKxNvaWrtmpxa5DlF2bNt4ufft0+/9JBaoG79+
4vzJn0Y9BlZaZPJiu7duvO/g9KWjPsO3fcZvTA0eHOs7kvI0sZKMsSe9Tdcu
HR67dtBseJApWUCRXaYQGFTJbtv2xOXLp8dvDAY9Dg0iYKWtaktMKjAlbTVs
HBl8t8mwBQxEZS625Z8LK0gf6AS5o6knKgRoECvhT1LCKQpJpdOqBHkawjIy
7mihAk1iE+XocR1t3YZGU3u8mwtFqacjHPI27O2x1m25f3rsnZtDR3clraw4
wwqTXd5Nk30vTffv9xu+5jfeP3H57272/bTd04hHQvclPQ3XL+2/ee1ls+H3
MHxWUeBSuVguLydirr7ed8+fficWdGtYlThWGJSUYcq8Tf+t65ffbDJs1mbC
1mOlrnfU12IlNDnIY7VaGXcjxXwLualIpJGokNZViZCQShS2t7eDTjR5RTNC
yPOYVOVzgSWPy2+3uLtbd5dzUmZhlsmg8VR28VzU/9Rg38vn3/tRxFWD4TB5
qsf/2OTFH0z3/bXf8FW/8csTl75/s/dvO7218ACgzVKerdcH/u7m1f/TYvgq
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
UtxCmX8gtf4fNTo9NQ==
       "], {{0, 0}, {100, 67}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 67}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 31.069708750998913`}, {
               40.62695588359926, 45.936269351157115`}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{32.00662338613401, 
               45.23803799594704}, {-2.656865324421439, 45.936269351157115`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                15.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{46.174952631082135`, 
               59.406367240895165`}, {-26.70343266221071, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{60.34328187603026, 73.5746964858433}, {
               21.389702013367838`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{74.51161112097839, 
               87.74302573079143}, {-31.512746129768566`, 
               45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.67994036592651, 
               101.91135497573956`}, {-41.13137306488428, 
               45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{102.84826961087464`, 
               116.07968422068768`}, {-50.74999999999999, 
               45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.01659885582276`, 130.2480134656358}, {
               31.008328948483552`, 45.936269351157115`}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 11.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{131.18492810077092`, 
               144.41634271058396`}, {-7.466178791979289, 
               45.936269351157115`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 7.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{145.35325734571904`, 158.5846719555321}, {
               11.771075078252132`, 45.936269351157115`}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{159.52158659066717`, 
               172.7530012004802}, {-50.74999999999999, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5507086830879317, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
               0.}]}], 
            LineBox[{{11.449291316912069`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.2871198568872987, 0.}, {14.435461676069906`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.564538323930095, 0.}, {1.435461676069905, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185887`, 28.03363819851003}, {
               40.62695588359924, 45.93626935115709}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.564538323930095, 0.}, {2.435461676069905, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{28.97055283364513, 
               39.16589689096927}, {-2.656865324421446, 45.93626935115709}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.564538323930095, 0.}, {3.435461676069905, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{40.102811526104375`, 
               50.29815558342852}, {-26.70343266221071, 45.93626935115709}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.564538323930095, 0.}, {4.435461676069905, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{51.235070218563614`, 61.43041427588776}, {
               21.38970201336782, 45.93626935115709}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.564538323930095, 0.}, {5.435461676069905, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.36732891102286, 
               72.562672968347}, {-31.512746129768566`, 45.93626935115709}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.564538323930095, 0.}, {6.435461676069905, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{73.49958760348211, 
               83.69493166080625}, {-41.13137306488428, 45.93626935115709}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.564538323930095, 0.}, {7.435461676069905, 0.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{84.63184629594134, 94.8271903532655}, {
               45.43626935115709, 45.93626935115709}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.564538323930095, 0.}, {8.435461676069906, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840059, 
               105.95944904572475`}, {-45.94068653244212, 45.93626935115709}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.564538323930096, 0.}, {9.435461676069906, 3.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{106.89636368085985`, 117.09170773818398`}, {
               31.008328948483527`, 45.93626935115709}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.564538323930096, 0.}, {10.435461676069906`, 
                3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{118.0286223733191, 128.22396643064323`}, {
               31.008328948483527`, 45.93626935115709}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox["3", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[3, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.564538323930096`, 0.}, {11.435461676069906`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{129.16088106577834`, 
               139.3562251231025}, {-7.466178791979296, 45.93626935115709}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.564538323930096`, 0.}, {12.435461676069906`, 
                0.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{140.29313975823757`, 150.48848381556172`}, {
               45.43626935115709, 45.93626935115709}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.564538323930096`, 0.}, {13.435461676069906`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{151.42539845069683`, 161.62074250802095`}, {
               11.771075078252117`, 45.93626935115709}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.602], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{13.564538323930096`, 0.}, {14.435461676069906`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{162.55765714315606`, 
               172.7530012004802}, {-50.74999999999998, 45.93626935115709}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.2871198568872987, 0.}, {14.718428512453555`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.564538323930095, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.564538323930095, 
               0.}]}], 
            LineBox[{{14.435461676069902`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {14.435461676069902`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.2871198568872987, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
yYHL8/NXaA0VGdiRRMlvwqqDgT4Nk7UkWeqTjDdiVZdTDBeyLZUx+H5V7mSb
bVyhd6rNvcDinat1LXIUT3MWTMgt+tqT/0Ve0ciCkm98ZV8UlXyRWzjO6Zvk
LhvtKvq8wDd0aPGgwUUfFuSNyi2c4iweay34JL/k/SFDBw8dVDqkDBzfLSv7
uKDoSwCyt+iLgYOHlBYV53s+LCr6tqhsnMc3wVM8urDkS7fnW7N7gi1vhqfk
l9ySH5x5X9tcP5UNGmGzzf3w46+0xtllQz+TqWeUDv7R7Fxd8v4sjXOFp+RH
SL6x5N1pSuNyd9FUQr3c7p2Oa7bml82Tanbnlc6H5SCrzIKI8rzCZWrDtlTJ
odjfNg920+EWuvQ5R9mW5QDJ8JbYXpWqOhshqUpWHyAc29WOzbBxO24vV9jW
WwuX6JwzlZZZptxpFu9UR/74/KLPC71fOBwz1c5ydf5qRf4cnffHopIxvuKf
De7FmrxNupIlMu8Uq2+8t2yMJe9bi3d0cdn3+cXjte7pWu8Mg3dmbinIYJ8a
LRONrkXG/MUqz0yta7Kv9HtX7kSNc77Gs1xfsNRYMNOcO8WWO9NTMNvmnocb
thkLl4nUW9TuX2Wm5VJjpdKzGzLuxawb+ardCsdGVL9VaVuNaTbqbL9iqg06
2yq5fr3WuhRXg8dLCPVmT+EGuXH/AOxs5G/zKzCHvgyXtbLxmlD0XozsWprq
CeS4zoJvcqVXswxnsjQnE+VHU5UHIeMBuXMXbNyYoQBzzTbItElqXWZwjnHa
Ruq0SxD9Psi1L8O8Mcu4SJe7wJS3VGDYILRuk+UvEZsXKXMXGwp/wSwTMcMc
R9Fcc/5csWEZZF6FO8uNRdP1rp8I7WLCukXm2QzZlkCG6Z7CsSb7TIlxFWzd
BNvKIeNiwrxYa1tl8SzkSQ+KTPuj0Zt825EY9JTYuDMRqU6SXU9SXEjEL6cq
TyZIzqTLj6bhx7IVR3KUlenSXWmSgyL19lSkMkcGpq1dQtUhU95e1FIVJ7/J
JX6jX0E94VIwn9a9ndkRQdxli7pEjrt04QOO5HKc5AHfeLxvSpvAdSgk/TlR
eI4lAgzwSbi8JkzxOAYQG9MipX4SIV8nVFULHdXR6qMR+H6hbR/q2hUrB6xg
pcYzRaJdLrFsVeUtQAwzRcoN2twNhGNFhmKTUL9BpN+hdJdLzYsE8jUSwx6Z
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
TjlkFWacp7cu0FkqNJ6dEXC9/r1NuGmB2jBHa1ind4CR3tL41kDKubhisdNR
YfYcpPGesRVNdMmDGOygULKNUO1BHAfitTWRSkAhAFZVazbNiMyYGp4IYhBg
tTEeqmOpyL6OxzTtLH7yd0507eifv4mWPo5Ukv3E5DvwLbbmoyjNxVk754Wk
LwnnTfKMmO3+cifQ9Wx5N0NKsuWdffktb2X0MGCgVTuodVX/6jOQuv2AU2GN
bBwwauBvvxur25pBh3DPNLFsrs6yzeFbgmi3OH2rrd5JqHyz07dT7toYiVxN
Mj9SDS7Xub6TYOuGDP2VMOwMgx7KSssx4xStftHQgfMs1o0J6D3dwK1K20+Y
ZNa7RQsslj2MnOdh8k6O4ioj51AOukWIHZUXHEnQ13HUF5IMvnTh2fIN0yOz
J0ekbJ7+85hc5/YY5Gmoigxy1tCUC9JSfzTga7/56Qsuepurohay34ae0OXj
Q9Gn49aV/1vS6hD+VPfnC71fH+jL6/w/OSRwSHAMEJEM9BUTbg3KochnyF+w
6k/lriY2tcb3JlidSTfux50LvHk/e51TFJqfkngHnWUVavcGmXUzYT0o9+yI
ltzgqp/CxZtR0xKTY6HVuUljPxGnvCPM3aSwzzHaptsdy42ubTHYdbxwm9I5
V2ecajct1xiPsoXP2LJWrvxhNH46Q74f1m/H7fv59gccY1WCyTMg/cLOii+Z
KRPS4IU/fzfKbT0VK295R0L2wdui9Cu52Qv0ttUjRg+L5F1PsXfQ5CRT2RIg
PB6cWf4nbm2UceWfs+eWjRpnGVzRP+N5v5yXTAnwos4Q0YtQBPhVSyCvtzj5
F6pAZa1uPyntLWb+PqvmyM/B7s3G3Flqw2yZdqFEc8QzeG68cJNItw0y7ld4
KuLxW1xNg6BgbZZiJqaaodHtsuYfCcfqpaUzk6EZWtMEjWG7e+COKPy21Dcv
FVlksk5QKfd5S47QchpDpU+Z0nvhkjNJxD7IsEFur4CsdyKtVfHWgenCfUsW
TRWoP+amrVw4eWyR61AY3NMfJ/shT8MIcNFFcsfaL8d8lgT4le15sIIMkpB0
cRM759rbiS1s3eY/C1YPGrNq0MiKwPT6gKw2FtzGELfTxT1syUu2pIsmBpj8
FZbXFbzg/7rK99+3Bq7xEUd3O1J7U+jZT7jmC2QbrHlzcqSbhboKsXG32rM+
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
OllIFxt9E6z+Lxh4qVY=
       "], {{0, 0}, {100, 60}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 60}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 32.486541675493726`}, {
               11.771075078252125`, 45.936269351157115`}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{33.42345631062882, 
               48.071703844936664`}, {-31.51274612976858, 
               45.936269351157115`}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007176, 
               63.6568660143796}, {-50.75000000000001, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.5937806495147, 79.24202818382254}, {
               26.19901548092569, 45.936269351157115`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895764, 
               94.82719035326548}, {-41.13137306488429, 45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840058, 110.41235252270842`}, {
               21.389702013367835`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 12.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784351`, 
               125.99751469215136`}, {-12.275492259537153`, 
               45.936269351157115`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.93442932728645`, 
               141.58267686159428`}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.5195914967294, 157.1678390310372}, {
               2.152448143136411, 45.936269351157115`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 4.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.10475366617231`, 172.75300120048016`}, {
               26.19901548092569, 45.936269351157115`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5460988028072107, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
               0.}]}], 
            LineBox[{{10.453901197192788`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 32.486541675493726`}, {
               11.771075078252125`, 45.936269351157115`}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox["7", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{33.42345631062882, 
               48.071703844936664`}, {-36.32205959732644, 
               45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.00861848007176, 
               63.6568660143796}, {-50.75000000000001, 45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.5937806495147, 79.24202818382254}, {
               26.19901548092569, 45.936269351157115`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{80.17894281895764, 
               94.82719035326548}, {-41.13137306488429, 45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 5.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{95.76410498840058, 110.41235252270842`}, {
               21.389702013367835`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 12.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{111.34926715784351`, 
               125.99751469215136`}, {-12.275492259537153`, 
               45.936269351157115`}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{126.93442932728645`, 
               141.58267686159428`}, {-26.703432662210723`, 
               45.936269351157115`}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{142.5195914967294, 157.1678390310372}, {
               2.152448143136411, 45.936269351157115`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 4.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{158.10475366617231`, 172.75300120048016`}, {
               26.19901548092569, 45.936269351157115`}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5460988028072107, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
               0.}]}], 
            LineBox[{{10.453901197192788`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJytXAd8FGXeXu/OO/Vsd94piHTELt5ZQAQpgkrvBNKT3U12k82m9x5CAqE3
qQECoRdBQZQiRpRelU4I6dlsr7MzO7M73/POm6x4n+J38s1vCZPZd97yvM//
/3/+77yT7pHxE6P+IJPJkh/Cj4kR6UOSkiIyJz2JX6Zok9XRWqVihDZFGa1M
6hf5R1wcjH8K/CPnok8kn185fD6B5zlR9OLj9XE+0YOPlTH6RJbhrKLoEXhG
YF2ijxd9Xp+Hc7tY3CUIPlTJSx+ceTwekdzfdkgFUC1Pm7Db7fTE5XLdfeIv
g58+Ul9bPQ6H4z9uREl/h+lFm81GW6R30QKCdNDrtELaltPp9Bf2t+6TDpxw
HEfbleD4ZaxoSUHwcJwbiOHExdjsTgvvcwsiS0EDUOiLBBTBSvQKqIplPWjW
w3t1RhMdA5qjfbZarf5fcbAse3eLtM9Go9GPAMMwtCd0IGaz+e6SuAgY3W73
3XfdXewXD//E4YTWj4OeoLafYPl591CeYPgrWLXf5b2LWrxP+ggEKJ73sj4v
J/o8Ik8+Zn0rgcsnVldXr1ixAlUCKM5L0NLr9cuWLUtJSQkLC9u1axcaBQ4L
Fy4MDAxUqVTr1q1DmQMHDsTFxZ08eXL79u1+wtADQ8DwS0tLxfZJ//rrryMj
I5uamvwDP3fuXEBAwI4dOxQKRVRU1OrVqzF8/8AxanpOf1IQ6Dl6cvPmTVqM
TiJqMxgMfhDwK50OMl+/ziuJWl7/B0Rq1jWw4BfvEny8xYap9Br0Ogmito/V
YnI67UuWLHFzjM3ldLgZjPTIkSOACCfgQ05ODio/ePDgxo0baUNFRUW0M1ev
Xs3Pz6+oqKC0oQfGgiGANp988gkd461bt0SJPAUFBSiJ4aCfGB3GAvwvXLgw
d+7ctLQ03OU3Xj+TaYW46Dc0epHOjsViuRsBagX+whIov+qvMAQMHEynWF28
dLZsbqkiSp6albZk2dKTp09YTObCgrz42JiIkGB8kuO1sTGqqOjImBhVaHhQ
UnqyWhuTkZGBqsaPHx8bG6vRaGJiYsrKylJTU0NDQxMSEsC0oKAgMGrSpEnp
6elgy9ixY7Ozs9VqNRii1WrlcrlKOnAeHh6OMqhh6tSpuA7+JCcnK5VKFAZp
UX7cuHGZmZkoHBISgp+4gvpxgsKJiYlz5sxBiziJjo5GVagH11EmPj6+vr4e
/URt4dKxb98+AIVuoJ6srCx8hXkkPPx1rCTXSlCCy8Ln+o3Lq9asRFm92bRm
bXlN7Z1rV67OmV22YE7ZN4cPFebmyMOCFy2cu2Pnljitumhm3o2a66q46MLC
/FmzZoEDN27cwMRhaOgkeos+nzlzBkPD8CdOnIiLhYWFGD7wRN9wQrGKkg5c
BIwYOBBGSYo5IJo2bVpSUhImIkk6qAFidGgFdAWH0UpeXh5awQTt3r179uzZ
+BbcA7FPnz49c+ZMmAAoevv2bcBIDW39+vXXr1+/du0aasMVMBZeAgUIze7p
2ylWDocNXotx24+f/D4iUpGSkTlh4mRdq4Fxuis3bJxZWLC1cqNGpUyMiwkN
mZ6VnRopDwmXB2oSY5Qx8vj4OPQT48JIwR/MGoYAYqBvmE0ABUDoSKdPn44p
jpQOkBB8ACC4Bb9ShHHgOqqifMCNgALg4DoqBwfALlSCE4okvgoODsYtaBQ1
r1q1Co2uXbv2q6++onSKiIjALRs2bPjiiy9AKmCOe9GTlStXnjp1Cki2tLQA
AvxaW1tLAPl1XsE/UAOkP3WtjavLV0m8si1ctKSuvrGxvikzPSM1MWnVJ8sA
VFjQtA0Va+bNnxURGbhg8ezvz1SptdGbN1fCjYBIaLexsZESBn3GFfQHPh+j
o0aB0QFGgEO5QU0Jv1IrQzEMB5ggImA4uAhn7scNt1DccA5+AgTcCDRQCaYD
13ELPCFsH3y7dOnS4sWLT5w4gdaLi4svXrz4zTffoCrKK5gq4svly5fBXuqI
YIwwinv4q/aI6WVZhrILWO0/sE8TFy+Pjpk7bwFuMhnMhfkFMwuL4KwSNOqg
gMmJCbEqtTw8YnqkMjg5Mz5UHhwdrQR7wQHQA/0HSqNGjcJsAh94KpxgRMAE
Y8dXMDEMEydAAIWpxeEc32K8lJzgCb4CMynZ/KZKTRu1oQxKUueDRvETQKEt
gIZzGDgKoLDfZmGGra2t+Ba/UtcHZ15ZWUldJX4tKSmhBPtNLerxsO2hkDea
DSazlYgBj4CbwKvP9uw1tZJQaGptXjSvrLHhDuOGDvSwvL2xtT45I9FqNfvj
GkaHXomSiqCTCF+B0J+bmwtWIBj5BSFmCgELxouIhsLLly/HV6hnwYIFiIno
fENDA60QY8GNUAiIoZQG1IHA2dK45he9gAv+ivoW/HRIx6JFi2gQRKyk8c6v
YOGm0FuU+fLLL+HBSD2/jhUqBFCAq90MIa68VDhZ7TaO9zTU1S+YN3/ZooV1
t6shROeUFtusRirYITB40TOzrDgkJAh+EraP4WAS7w7fVF1jvIjyoBOFESjB
G1NxCNEF/mMIIAMQw8Xvv/8eaIAzqBBeFwyEpQATk8m0c+dOehfKI5Tgir8h
nGOkoBxsjTbqxwTm5kf47vL4CbdGf62qqoJJkjK/jpWUkbSFQlgiyzkhQR0u
u0AR80k4w/NbzOCVh3F5OVb0CU6XFXehpN3tEMQ2nmCagBIsgs4g8MG4cAL0
aFcxZHAew8Tsw0AoaADQTwlYB+YOvhoGKEpaCGOn3+IiCuCEKgR6LypEtWgF
lQBqcBKNUsdCJRa9148STX/ullgUTKru2tnzy1hhIqTCd394gaSE0O2EYE6k
PDaLwHO8m/lJjkolSWdIwiNaHHa0RZMO9IqCAEDoeOno0G0MBK4JFEIZuCPQ
pq6uDt/Ce9MOAwH4IgwcXgUnVHLjXjSE4cPPUIiAGA30ONAWxQHOELOAE9Ts
Hxo9oUZHNaff/OlBs867U5572KBfMyDBoWaI4h7BDaz0Fh1NdnDFK7AUJYF1
O60WD8sh0SASSBv3w9UrQrtmphNKWYRGMcU0PaTo4QACY8aMwQn4gNHRgdDy
OCZMmEBBAD4IDf5baCeBLW7B6Kiy0ul0tAlajMYINAf6iW3B/Wew/AwN6fCn
h6LUf7d0kIHc07dTrKjXIgsGgtsrcjR3drqtNquB5s5mfYuUOHuvXr5SVFTc
2Nh8/sKlopJSq9Pln6PJkyfT+QUINEDjgEuHIwI94HngpdEfjJoaF1wupV9z
czPULIIdzmHFoB91y3TsGBdiIuUMVRG0ZuBDT0aOHIkA4b/ipwrFmXLeTzC2
/RDbmfYzYClWXvKT+u326xi70I4i7nXTb3liW7wgIHYwoJbLLSkKYn0ei0F3
6tSZrdt2STm0mJFb0GqxsF5OYiBIpYpVa0JDw1WauAh1qFw7PlD+YZQ8MBmC
SilXxGlGyBWT4hOiM5KmBIYowtNTNIWx0Yqw0NE52VFBIeOmByuDwxLUcWmT
w0OnJIQEpisnKhRBmpRAbWpCQf6U6R+nJQapIsZFhAcrEwvHhmvDtNFhMdOD
wsampWkUgfLIgOjkhMyIcKXYvkDhX8mhJ+3rKm0X/X6DXgeY0owzLgQvXvQy
PliLXcKHB5E4B7EssqAg+lgdfA8LSvkIKjwDGG1mQzUQxHwIBGf8czKM8dA3
3x3+5hTAczk981asMgluTkRpgmd4qDwxNrVjh27P9u79l66ywo2j85cP+sdf
Zf17P9+ra6du/fvKhn34RnHxYwP7PN71hYCxi+Tj5v79QdnqZRGrVwX0H/R0
l+eHTAia3+XlYbKuHSZv1IzemCDr/Nyg+JK3k8v+3O/tYRM6nanKmjLosVee
7zg+af1HWZtkHf5YtFGbO39a3zc7vPH0m8lTi1/p0v+9vsPvaUS/cditdaKP
ETkS6q2810mpRWIc01x/BzhIQEMO6TmJW5xLdOodogvazASgG5xkJuCsYGqA
69Cx4/sOHvc4Cdc0WdnVllZWdPLkK68yUi0PArVSRgUFdh7wZMam1+d92rfz
32R9u3b+aHD/f02ZIBs8bOCu3X8Y+u+Hu70eMLJSMWrtP/8kW/fJpLXlHwwY
8vBzvT4eE7Tm2ZdHy3p2/GCXsv+uGFnPnv9OXvL6jA2yfn0HjHti74YxUSMe
6/b0ox+n7RtUfFTW8Y8pa0PLykPeePmR4d0/Kg0rf73LB33f+uh+sILMETmb
1+SuWL6hwWzFKHVG04HP9wRNHl1SlH/xUkOL3sG77gCr8srdIYo8jSrfWG8Q
vRbOWTd/Tbk6qyguIbOprpZ3w3c5l5WvD4qIiwxW7d19YN7qNQ2M1e61eESi
RUMCI3JS8jnW18RYA9I/TKt8cf6evs93keWoYRfsLZGXTZjybNlc2dB3/tLt
rSkjt8pHrZOwmrJ+zfCBgx/u0uvjcYGrOr1EsBq6S/3uLo2s5/N9UpZ1TV0h
e39Yv9GdtIquQYOe7PKPv0/Mrfp30meyZx5/Y3Kvt4Y/8ZcHZG8/1S9l/Lwe
Tw0Y+n7AfWLlZczg1YKZCxkCnO/cpR9mFuaJHvsP58/MLFlBeVVz41hyVjF4
VX3dkp2YxZnuNNedzyydVe/gf7hSk5WWCl79+OOJ1NyCdZv2ZibnB02LOHHl
Kpwah8gDqcWxUcqYaZMC0VOryASkDsnY8kLR5pf//oRMPhnhj2kWRdnIcW+U
b5ANfe/B7u9OHLUjcnQFsFq/bErF6o8GDfpr154fjg9c0enlUQSrnTF9dyXI
er3wesqKHlnrZQNH93j3uWljukaMeKHzU51Gpx8ekPG17NmuY2NHTw7vFxc1
ecQr49KnL3i584h3350i/nIM/D8dPsEEcwOvtpRv1TlcJq/nh6vXtlZWEMP0
8RmZc/QmhrHevHT2i7JFq4EVYxeLs2aInOHQFxsrP/scaBgt7OyZxSJvOXBg
R/mmrTBVgRFTk7JBJoso6G16SWCIcZrErNTMiZMnuET2o6jXUjZ2LdjS+7U+
spxkyAamFlgN+ei1ZWtlQ4b+ofv740fvCh9d8RTBKmDDqhGD3/9rt55DJwQu
e+6lEcBq8E7tO7uSZb1efCV1VfesDbL3A6bFR4tsnci1xiiShsV+MSzz+6f7
j7eKrMvbJPoc7/ccGjY8tV+fwNf7jPXdH6/0Dbcw/UtmL61pNWCAR6q+PX38
mMhaWadt1uzVDHFlTVcuHvzuzBW39Mhhw4oK+KsjX26qunARvHK6xeVLFhta
bp08efj4+Us6swc+buG8TwycxyZ5PwQRk9muUsdFhIeyvJMRHVOS+5YeeCNt
Xae/d5QpI6ZaGT3BauTEHqWLZEM+lHUfNnb0p2FjJKyWTtuwcuQQYNVryITA
RV1e+kjCKumtXemyXi8Dq975W2TvTRuliCWr2R5nbFTOQPnu8YUXZY+85iax
HRGKefHJF/t0HPzGK5P+9dak+8GK5/THDu8DVsvnrYANAqvPD3z52e4daMJm
0pfOWmV3+QSm9uSxXbv3H202iYiZJTkzG66dOl61e+fBQwaBoAFeOSwNx48f
3LZ3Hytpi/ycmeerb6M2J0sEA64pVOoJE8dIxDREzfggpbJz/tZez/WWJSYq
WdEBmf7A5OA3F5XLBo+Qdf9ozBg/VoGVK0Z/MPCvPXoNnBQ4v+uLw2U9Og3d
kfzWriwJqxXPJn0iGxA8QVMIUSyyfKy6cHjM3o+Sqv7y7HCiAnkX0rLc2MzR
AwJee31MjxeHCr+JyD15dfPHM5rgqDi5tslqt4re+uaWrLRkOLGWhtpYTR7h
lai/fOGr/JKFjFe8ccU4M7sYvv329e+TCgoRB2/VtORkpAus8dq1MxkFM+ys
ePn8zVkz5wMoA0+sz+sRrQ42ODIyLz/LxRnsPl1wyjsZm7uV7v3XY51kEYrp
rOhuFH1/HDv5XzMXygaNkPX4cMzYHWFj1xKslgRXrhj7wcDHevZ8b3JgWdeX
hhGstqe/szMHNvh66pKXclbJ3hw/SVNGcgsPhH36R5o9E7JPPPzMhx7piZnN
1Ijr+HBe0caJ94PVxorFytCpMYGKxOikoChVxd7dqG1WcWG8Kjx42pTDRy5I
lbeKPl1W4ZzwaOjDvKP7vwZW0Ay5c+aGaNNUsSlHDx2EvwKJ8kpmh8jjYxQJ
Z05espNIAfXGE7nl8YWrVapYBU/6a4xIey+5vPOCAwMe6yxTqCPh/3WiT9Zv
4LD5K58cNUn2lxdCQj4PHr2kwyMPbFujLF8yevCAx7r37DcxcNZzvQfJXuwx
eHPaq+Xxsud7v55Q1id7sazPh6MiCwUJK4U6f3DUpknZVY/88wMYJVHUsBWB
h+vgJEl9n7xavXTujVM/ojaHT9SxLvAqPTmBdxqhr2YUf2K2eeCvmmpPz164
SmcRb10zU15d++Fo6oziJsZ3/tJN2KDL1lRdfbFg1hyDzXv9h5rMtHw9y0kP
S0S3k7e4PSHRUQ7WxnpM8CFTot6Y93n/1DUvPN1bFqmOdAo2kyh0GjtxQHaR
7J1+/3hrzJiRyycOLXz6IdnCGaN3VYb17/tot+ffnRhU0qHnu7KeXT7aljVw
R57sjT79U0vfL1wke21QVObyujrex4oBYUnj0j+bnP31o/8YSkQixQpfeIX/
B6x8CFbO5aWL1i5d55b81ZeHj+zdtV1wmeDbs7LnGcy4rD/y5Ybtew/pbcSD
5qfmMfpq+KvlmzbbpdYzUpJhgwcP7q7c+SkR/0Y2PSXX4vWRRTQp7UYnlYnx
So0yOUUDrgXK++Wu61Oy/f3Or/41RC4X4JRF4dmhw8YVFD81eKDsoY6RIeti
AuY//oBsw/KwLetCBw95pvtLAyaFlRKsunYYuSlz2LZcWe+uLwVFvSqP6T4q
YPjkWCl9EENisifl7Bug2PDoPwf4yJKQRxoTklZYpJe7d+77f+AV1e23LlXP
WrKsyWX/7uSpMye+Ixd5dtknW3UkNuoP7l937nINjYOrFq40118+f+qLw6fP
UKwWzCmDFv3qq11HT5xGfxirsHpFBbmN5XzSApjN6w2IkgdHhvKC2223JKRM
yFj6+sI9Yx58ShYcAS3qsQvOR3q/8MQ7b8t6d+r4xjvhAfPHDVB3eFi2uTxy
0bwx7w3u8OzzfSfJSzu/OEDWvdPYTVkfbs6QdXqiy0ejZN2fl/2tY7g6iyah
EyISB6rWKeaffvSZvsCKJ499acZKcn/pKfDvF1gWU40/xznw7XdHzp0+duLk
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
Cb7/lf/9D4lfxvY=
       "], {{0, 0}, {100, 64}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 64}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 
               31.069708750998913`}, {-7.466178791979289, 
               45.936269351157115`}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{32.00662338613401, 45.23803799594704}, {
               2.152448143136418, 45.936269351157115`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{46.174952631082135`, 
               59.406367240895165`}, {-2.656865324421439, 
               45.936269351157115`}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                17.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{60.34328187603026, 
               73.5746964858433}, {-36.32205959732642, 45.936269351157115`}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{74.51161112097839, 
               87.74302573079143}, {-45.940686532442136`, 
               45.936269351157115`}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.67994036592651, 
               101.91135497573956`}, {-41.13137306488428, 
               45.936269351157115`}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{102.84826961087464`, 116.07968422068768`}, {
               2.152448143136418, 45.936269351157115`}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 2.}, 
                "RoundingRadius" -> 0]},
              ImageSizeCache->{{117.01659885582276`, 130.2480134656358}, {
               35.81764241604141, 45.936269351157115`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 20.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{131.18492810077092`, 
               144.41634271058396`}, {-50.74999999999999, 
               45.936269351157115`}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 2.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{145.35325734571904`, 158.5846719555321}, {
               35.81764241604141, 45.936269351157115`}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{159.52158659066717`, 172.7530012004802}, {
               21.389702013367838`, 45.936269351157115`}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5507086830879317, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
               0.}]}], 
            LineBox[{{11.449291316912069`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3023255813953488, 0.}, {13.440071556350627`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5599284436493739, 0.}, {1.4400715563506261`, 
                0.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.838294141185884`, 28.88996579023766}, {
               45.43626935115712, 45.93626935115712}}],
             StatusArea[#, 0]& ,
             TagBoxNote->"0"],
            StyleBox["0", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[0, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5599284436493739`, 0.}, {2.440071556350626, 
                11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{29.826880425372764`, 
               40.87855207442454}, {-7.466178791979296, 45.93626935115712}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.559928443649374, 0.}, {3.440071556350626, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{41.81546670955964, 52.86713835861141}, {
               40.626955883599265`, 45.93626935115712}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.559928443649374, 0.}, {4.440071556350626, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{53.80405299374651, 64.8557246427983}, {
               2.152448143136418, 45.93626935115712}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.559928443649373, 0.}, {5.440071556350626, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.79263927793339, 
               76.84431092698517}, {-2.656865324421439, 45.93626935115712}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.559928443649373, 0.}, {6.440071556350626, 17.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{77.78122556212027, 
               88.83289721117204}, {-36.32205959732643, 45.93626935115712}}],
             StatusArea[#, 17]& ,
             TagBoxNote->"17"],
            StyleBox["17", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.559928443649373, 0.}, {7.440071556350626, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{89.76981184630715, 
               100.82148349535892`}, {-45.94068653244214, 45.93626935115712}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.559928443649373, 0.}, {8.440071556350626, 18.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{101.75839813049402`, 
               112.8100697795458}, {-41.131373064884286`, 45.93626935115712}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox["18", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.559928443649374, 0.}, {9.440071556350627, 9.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{113.74698441468091`, 124.7986560637327}, {
               2.152448143136418, 45.93626935115712}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox["9", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.559928443649376, 0.}, {10.440071556350627`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{125.7355706988678, 136.78724234791957`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.559928443649376`, 0.}, {11.440071556350627`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{137.72415698305468`, 
               148.77582863210645`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.559928443649376`, 0.}, {12.440071556350627`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{149.71274326724156`, 160.76441491629333`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.559928443649376`, 0.}, {13.440071556350627`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{161.70132955142844`, 172.7530012004802}, {
               21.38970201336784, 45.93626935115712}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3023255813953488, 0.}, {13.702826475849731`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5599284436493739, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5599284436493739, 
               0.}]}], 
            LineBox[{{13.440071556350626`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {13.440071556350626`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3023255813953488, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
yHFgBXZhDapICYFVuIdMNh96Jj/174YVeZVl7ufn6vawkJlyVCCZJ9qjD/7K
//1vf/Q/uvrvLb31C/G3/nn24b+zPvoPe5s/ajPA6rEHf0lq5oTbljInu4v5
Q1U523shVtnXCKu1YuQjkce2uHhC3Fmno7Cm1VLE6ZX9cd0Z+OtCTDzVIajA
F3mTOqBABHTGtYgYB5hQp9C3A154e+AJoMjTCj6KxFDokg1kmOGmnExX2dKx
rE6ryJ3v9nwQUugj9mnZuZC75OhnZHoiWB31g+/59R998dN/0ZY/tfK2L+0+
9M3CI981Pvrj2ubft7mv7NPv+dUHSgc76SGrXdac8326aSWPpNyCt7+2epU1
85WgZjbt+njvevrW/tnRtpJUjnX+QIYLigpxQOGMqkCGOZDgi/iW8VRpFeUS
s0EeTHRskkfzWzDJDXkbnh+EAcFoSU3A3OTACzkDuCg4f8LLoxFx8GV4O3nr
daKm52z6ksl/XMwNaPmEf++7f+1Hz/7Rcx3lmdW3fyn37m+y7/9r8/Hv12N/
Hyh/MbQ/8Bu/4FwoW91Cpi3i/mA43MgPsQIXDePga+Kv1BMD4FAV8vIqVePi
yi5MCQjUzg8Bwpa6K7eRp1jgmdAZ/+IQoQ1cFHlfVE8id5ZaptZzQd3DPWSw
BWJ6XTNazoFzsr3FllfHu1XaWOJjUTNFtfWX46Lwn3OPOzPSMyY2zaXOmdxE
kNrKQ+964w++/sfPdtXRyts+m3/vs8Jvf9N96q8Pkt+b2v+1mvuNf/VA+RNm
aiYUh+TmdMcBvSlMSO6MHAdcFOCjTt0zVnKHyJq45czqS3xUC7x1JaFi9RGw
DoUNY5frGpCIuZs/EvieidQ4aqW3/SLyZZIpD8i2zA0mAk3btNKpOpPa55IH
XLRaIE+o2zpyHGCFfDB8PkjeFwqcu+0hk/dOe6pwZiERjo1y2duK8MmyPqm+
5Z2/9r+/+YXPj7zTjUf+I/XBz2mPPduI/HmP/cvL6jcuao/+1hukGbc94eiZ
g8S81LJYRIcx9PP5fBBcdJE73ytnoE8V/+NH7uX+ldLSshKjOpo4cp/k1pa0
+IaX2W5Q2mXDuGjE9ygc3tLiV9i1/Il8+AcBvGjESP7u7pM7fhF2Bz6f3efj
leKmn9+ql7YPOWbxYYgxqMC3R4Rt9tRAFkke7vTMu+WDmEihKUtTl7nUUzMu
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
PF3GqWSX7F2E2hWa4f8DzchwxQ==
       "], {{0, 0}, {100, 64}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 64}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
ZwdkZad60q5/nXL7XN7graobA4zLt2SXLnZ+e/aTb8+dDka/3zVSpTKkyY0p
wC/atSSwFCaQQYjASH4IQQ1OWL09luaOU/81QTgDrZtcLbAh5c7EAJNckT6T
OUbi60g9D/OB8bAm4S3G9cqJkt2eKuEUWTFL2H5vudJKAMWg6lp9IjuqZ7xq
n666fYCapAiW6lOo2giOF8OdyikQpm7iZDT3rVcNJ+/xlgknUzmTSW9mQg7v
hQ/tS9R/kjJ3scTdl28dpNy89snJMxePHbl55cwoOgROWvfBV9Lsyx1JI58U
ms5t1V7bMnCV2f/tsdNnbx45c+3ChXPv/x5ygJt4ppN841Di8Ik03ZXS6T7K
0GXlzYufXjx1pO/Mt1e++WbV7yFfifP624njn5ImT2ZN92+9d4N1q099/czu
qye/vHT2YjD6Q6AcZBa80I4R2xEqC1RhjQNq6vtk92Q1uRFcEHg9sTRHBN0a
JptBdj/O4k/josTPxIp/g1AuazFv1DiKq/tCI2SQhJ7f4GV/4l4s7Byt69I3
rKD/IunQhwTNH2S38w6MiLDVoSR6JI4SiqgKRVJWy3QFAieeYotocRSmVEHb
D3EODJUdcORKdYl8S7JgJvWdjZB9LWvutEKHW+Kdh1M93+ZZbtRdOtt5pe/q
kW8uXb90Dx4UlLT2j6eEydN7c8z78mZPlrqurJ/6tm7g7LHLx++dOTrUd/rK
R89DDvEwF9qSBg4kTR1JsVxab7jaMHyp5fr50+ePXbt8euDbb06tegFyRJx6
W4PWHcLrjqfr+ypGrrNuX9X0nz546eTxc+cvr8R9pJrexHGhGN44pi+c6w3m
eIOb5sKbZqOAjPyBVbU5Wvg4gX8fyXBEsKyhUie8YSAkQgjRmDbKRtf32upi
uUtbjSWEzqVqWzLvHrpzoiyZt+LjMX70ztfaPDVNQynCwcIk4fKD98TYbauI
tCAyO4zUGEXirAMFI8eBZnvClKbkzO2oBn7pV1PbZYNQlT2R60yguhLe3gJp
UX8w/HGi8Yvc+StV9pvl186X9d/s6Bs+/cWZz09e/BqHWI5a+fOTfJyhN921
O+vx0fUzl3P1F6uGzh6+emzg/Dfj10/eWPk7yKdc7KXW1KG9afqvUxwX1xuv
NAx/q7l27urpYyMXTk2d/+biSsBKkjzQgjZ9jDUeTzb0bR65xr51taPv9OEL
Jy+cPH/jA8Iaia6c5kU1zkU1zgczZoNA5tq5ELrzfhTjKVa8BwT2LKreFEK3
hvAcEWof5sDj4jZzfqdxi2q4gtdfghO/I7yTGyf4pcqQstdd2D6cm0B/ef8g
E9rwosiBFHvRvNtFCazQnj5mNndNx2jWHkOB6mpJovhDrimZ4Y7n+dZ2ONOT
tsHzqpLVp7MUd5Eg6HFnSTv0+KUlkKhkCA4KiVsFIcEhiTkQWDbkfRTkDbCw
P4OXvBON//26DyEXWhMmu0ieXU9YaS9tvntx1+VTl84cHe07ObjyN5BP2SlX
mnNG9mSbvkxzXVhvvNw09G3HlfPXjh+fPHXGcvLI9eUv/Owbcc5AM9F0gLjI
auga/8aV3ZdPHzt7sv/4+ZF3CRFC3bYmL75uDsihSNpMOHU2cud83M55OEj6
P7DaaY1m+mBAmcvmYPIZqMgUt/PqOqTkuc7pqvbRmu4JarJyXbehJpr5y15H
keAOeq+2IIX5x8+G+RjGa1IfTPUYJxneksCMOjjIS+O81aVL7jEntd9dD2W9
wLSQuA9QDOuK3b4CeFlsbm1eES9orymXboygzyIVj8t2XEP1jicfnyz+4srm
z65v2z1R3jxWeNjVsGtqc4+xvHu8rPPcFigacmF38q1mtHNPzqOjm7yXiyau
bL55tfXc+ZMnjo9ePjm68teQzxmZfeqc8d0Z1i+TPOcLzVdqhy61XLp4+cjJ
0RNnTSeO3PjwhWe/ERXcUxOt+/Gm4wmG/hK/XV3ZdeXUifPHb544O/EeLlqs
3UH1EBtnocDvFsu6xhlE4wwQVD+GLIobKnyIAw5INa4R2SN7FpKUOlJqx5/i
qUuRtHfw7DWy/u27tA0I7guCO8RDnpKuoXRi4+8P3hKgG5dzTMksRwr/7jY0
LWjvYA2e+rzkbkrrVGHPaCVe/irDmdLkQ3CsEZLRjFRWAbQ4OZ8d3T6SyXCE
1rrXAMnNNaYrvehmF0Y5liGbLmB5kpmzJJ4Bx5tENM8Smh2A+Za3wyFfdBHu
7Eox7y2eO7bNfqVi+Or2Kzfkxy9/+dWp8YsntSuXPPMlPfOmKnV6N9H5JWru
fAo4ZvSy8MqlIyD4nzg/fuLY5eUvPHNUmDeiwjr3IazH4db+rIlrDQNXNP2n
vrp0rO/MmaEV2DDFVBXHiWN6YzjecLEzXOyI4TpR/nbBU+Gd7caynUimOVbu
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
jZXBKb/K07wbUv1Mp3Zz+1Ru+1hqouCXaao/BlGWyC2lIgtM5ouXeMgthk3F
TfE5VaHtg8Wd3gKWkST0pviLBRfQVyCKohbzoL/R54X+A6wCfY8fWVFn4pp8
KPYciWFGiiZiPtGlolIhrbx1dw6kjXyaOHY25d7FQtMdxZ3zPf1nTx47cvHE
lZF38cGt41USK9DYcSAU+LsHXn+3hOvAPc0KwVwrvlH7sVXcNl4d3bjkUwcF
z31/v1aquSHsHZUFVy455NzRacjHiJdpRpmaAfZnk3QS41XlvXK04I0D2u1t
tws7JjYT5C93mwphdMjekfzWgcJmQ12Q8LdSO5I6tYJmhIPYnrUzPLUiKKf1
Pc44gapLYDrI/IC2Z/grqScNNJCpQVL7qay4P7LCLLKi+eKoXtT26aj2f8/a
PZ/UPY6Jz4Hs2o28fjzrWE/0nctZw3eqpoZaLpxuudZ/7Ntr337Td/Ul2J9a
JiskVrx/4yIoVbyhIH7yF0sV14+xvdNcsM9dKbq1QdC/KbsjVHa7CMb6pfhW
cs90mfrehvTmlW0TlbK7BRjJUsGdxN2msu7hzUTmu7JbNXH0NzrGS3bpy6S3
N8PZb/dot5HFSztH0vdbKtp07GjxezwdVvOQyPXim20bMpvCcuvDYxr/TWJO
kc0V8GfSF3eiMtw4sAL9Q6BCUQFh8xO06H9mBZI+CID+csCFVi8k1d3+UDUa
H1oE4XQGdewJOXOefK4/8+pg5ZU7vMMnOedu7Tl288CBvoPBG1eop0sCrEBp
EwOSjsAdKraDYhnxNKtWK5Y3hECJX0QK3mgZrVXdq8BJXjjkK2ufTttr3xRL
W6oeqeox1IU0QfbPZisnMerBIiJ7xWG7Jqbp1S7LevlkpnqonsCPkvRVEASv
dGhTebfwrWOMON4qkSmd50KCYp+jSyVUv5dRvwYn/b3KlyWYzWwwYxb3637P
CuWvcf4pVv48uHi7R6A3guD6sNvurdz9H0ldTlzbEDliIyQ6HxKdDQlOh4Rl
QiLSIWsSIZE5v30DB3kvc9nP4BC5IVdow/mTKShvPaFCV7DEHie2wwOd8CdL
acRpbGkg0fc6KqOoL++zCcLrl4luF/aYSkV3kyOov22Zqjk0IwhqgihNSKUR
3Ty9OXj7y+prtcDkam6FtfjydlkkMTVrd48K0ZxX5Drc599toZ0rwvBXSy35
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
w8qJC+D6ceb1fwAZ2PzC
       "], {{0, 0}, {100, 72}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 72}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.16753018225064, 
               93.8285943049222}, {-2.656865324421439, 45.93626935115712}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                8.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.48241399211994, 126.14347811479149`}, {
               6.961761610694275, 45.93626935115712}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.79729780198923`, 
               158.45836192466078`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{4.451201747997087, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
               0.}]}], {{}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{31.852646372381365`, 61.513710495052926`}, {
               35.81764241604141, 45.93626935115712}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox["2", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.16753018225064, 
               93.8285943049222}, {-2.656865324421439, 45.93626935115712}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                8.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.48241399211994, 126.14347811479149`}, {
               6.961761610694275, 45.93626935115712}}],
             StatusArea[#, 8]& ,
             TagBoxNote->"8"],
            StyleBox["8", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6719999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{128.79729780198923`, 
               158.45836192466078`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{4.451201747997087, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
               0.}]}], {{}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.0195484340859432, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
H4FEBeYisCPm/wEhVHJh
       "], {{0, 0}, {100, 68}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 68}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.62669940820986, 
               110.74882782811574`}, {-50.74999999999999, 45.93626935115713}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJy1vAd4U1e6NXzc1C333nsF23SDwbQ0AiEBQkINvYduwGDj3iVbvfcuuffe
e7csW+4d0wlJCMkkkxl/WyYzk5nv3u9/bvLf53k5jySO5LPXefd619rluJ26
tu+cPgRBtxDgsO/k3W03b56M3G8K3nx+9dbF81fPnvno6u2z58/e3HDKAHy4
E/w7A/7pXkvg4/97IUKMSjFaPqKfC+sXoYckxlohSsNHaISoYSFSuxyjyzH+
LvioUSZKyzQeZJt0sU1budg6jnE9H9UiQPWJ0ZNc2BQXNsdDz3AxGjq6iWpc
TrMso9jXZlhW40xriObNVNNOCrqLhuplYQbZCI3AeFRkPMpHa7ioQb7xAA87
wEEMKAynlQZzcoNpidGEADHMxwxxTdVsi34atotm2sk062aZ9DDQ3UxkNxfZ
D66WZzgkNBwRGY2KYWP/21jJjEd48D4urFeKHVGYjYsxw/8VVr/BxUONMtAa
KraXbtrKsWjmWzUILZv4pi0cdBdoOBs2wYJP8kymeOYamkkzAIrhUE5zq890
rMq0q6fYt9JsOsjYdppJr8ByhIEa4GOHQXAwOpREVsMCCzUL0SszmlQazMgN
pkDbBcghHnaQZ6bmWPZRsK0001aGeTvDtINp3MEx7haaqpXmY0LEMDgTYAXi
fxsrOXaUh+gBoTAbzbGalILrR6gFyEEdXP9C7DfQuBgtzbSfYNFOtqpnOTSI
PZok7k08uyYGtpltMkhGaCjoEY7VBNdBw7BvZriWcfwqSH6VBP8qakAzM6CD
7NyCt2ig23bJvaao2B6maT/DpA8kDIBC4jzMtxugo7pkiDGQWlKjMRFsiIca
4Jj08ix7ODZdHLt2rn0Hz66DbdXCMmniYFvEFt1Ka63CZEKBnpYiJgBiUvj4
/ytgk78/ipBarnE/y7SDYdYMgmXSxTDtolk0UizrdW9N20DfoZu3ZtqVpjvm
4+3LCbYVNKcKvHVehl0OzbuC41tPdinLsMvH2RURbMsz7crTnArTnMCZxeAt
2boKb1eR6FHw0Esa581NCxIQQ5XkUFVWoDjFVZzsXBxrU5RoV5LlU4UPLk0N
VqSt5xJ2CGPWMuJC+Rnh2bgteTGBoggneryPjBnWGOecm+xakOyUneygzHKv
ZK1oo/rUpFnnU62r6eaNIIUoZs1kq3KSXQnJuZTkVs5e0cJa2cQIqCK5F+Ht
8jKtCmi2lXzHFoWjRm6rFZtpeWiNDDb+rzCa/L9i+vdHPlpNsKlKdpVnrZOI
P6oir6xI9s6h7crLel+QtU4k3VYvWNt8z5MWfyztxvHbdz5LjNmdeX31nbS9
uOSjuAefJyYdyEj7khB1IDnyk8SMfczoXbi7x5NuHY9++EVi6qdZSVuJ6XtY
979MjzgWfe9oRMSxW19/FXnzWFTsF5EJB2IfHqRG72Mmf5qZuC/l9hcJV448
+Prk1zfPXrtx6Natw/dvH40FcfOL+zcO3LpxMOLO4fh7n2c9+IyQfDA1dV9m
3Ae81A+ys/bI095jZe3lZrwvvOMtZOxoYuxQMN7jpoZSH66iJYapMj8qTnqP
k7qTCVqUHMyPdWdJw+s5AeVc7zqmQwvZomkZpdF/Q+y/Bk0XXOO+dOeijFBp
zI60lI+JqRsVEX60O9tS4val3d8cT9olIIbnXQqKu3Tu9KErn3x19uTl09cj
jt54cPrWxbPnjn91+PzxkxePnzl/6tztS7funrh//vDlr66fOHL1y3Pnjl8/
funGxzfvHHxw8czlUxeOnzl36PT5Q0cvnDlx8dy1cydvnD174czNc6duXDtx
/sapsxcuXj556ezxi4eOn/388qVzl86dP3f20sWLly9dPnfx8okLV45fvnL+
1OFrJw5cOX/w+JX95658mHTrI/Lt95PPbrp851DEjc8fnFyXHLNH8vDjxLg9
0dEfxt5/L+PCuoy7HzIjPkq+92F83EeUayuSvnZLIm/OAVlN8c4lOVVmWtVI
4aNSuHb5+Pv4r7skG9uHdymj7yq5tyc+Yk9c6k5lhC/j1uqUtM+pN3fcT9pH
TXtffnltwqWjl4+fO3Tswomzl76+eebW7dO3zp65eObSuYvXL5w+e+Lc0fM3
z965cSbi9InzZ66dP3H15JkrJ69duHZr/70HR+Ivn7h+/uylS2cvXz739eWz
Ny6duXr+7LmzZ0+fvXz+xKVTx84fPXX+BIDl6oWb107dunT8yuXTV08fP3vi
y7Nnjl84c/b8yXMnTp46evbEmSunos9/effi0XM3j964v58Sv18ctYd4ZuuV
y8cvXDx+5fB70TcOUG7sj7y170bkgZjoA5kXN6ff/4Qduz8zaX9m2l723XWE
OytJzPdKM33lNK9iunMj0aoRUNB/BmL0vwtAVll2tZSwssgP0x7szcwIy492
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
BwvTTEM1UrENbHSPVP+JXH+Rh+4UoFsVBqCHzjCMe4BGpYcXJHjxge5iYnvF
QR3pdvl4TCPOoZj0OeHKvss1Vc8qmt6WVc/ZOWxvrvuhpHC6sr57+65jqrxv
qqr/bm4RVFzaUls3WV45uzX8YnXVo+rqOTQ2JLtkuLx1XpDfAjMPrK5fbK97
O1y1ZAVtDze8vtrgnB36/dLy2drql00Nrz/cfbOmca6wdMDOPrSq6mVlzZPi
+m4jM6fyqifFpU8bOp+u3HCkvnmpLu/nCxvj7/tk4Y2rxMipfOQzFWxOiFIz
TNRk7BzRZIGOHeVh1DJEnxKmBiwkNVp4pwpoxr1kTDfDpJ9rPcQy7yNhWukm
nSJHDduyk2nZzjBrpZk1gQJNN29kWTbT7Goz3YtxtpUcaAqkLsuuju5WSrdp
IZu0Eiyb8N6l8Vuot0JSYz2zU93LskC99ixg2Q4kY/PwO/GRh+8XVswrq19U
1Ly0d9xd3vQ6t2qqplm75b2TBXV/q2hbwlqubGodKi8fKyldOPQlsbzoZXPp
0wCvz6TlU9LmiZKBIYf1G3O7F0obvmmWfLvd8Np9n9K7wSUuyAOV1S8qa74r
q3y5fsM5gHND66KJxYbSitc1Da/zyjuc/ELL6l7llL0orJv98GBkTvnb0vyf
jq6OiF9BYZq3ZMMfFRu8VEHzEoSWjRmloZ/T0K+4yAXAz0V62mJoVGkAkuod
VuM0sx6SeTvFqZXl0c206yOatFPt2iW+Q3kBUzKPYVD08ZaVGTYFZOcqsVe/
LHiQvK4i3beQhu3imw+KAlqF6xqogbVpLqWxZrnEgFLcVknaB3z8zoKs0DIg
rTPtyjP1GlXB6ofhSTdORR67klbR96a87rmt/a6KhtcNnd83tizs+OBSffdS
Sctf0OaB7V1TzY2P21t/3Lb9fk3lt31N39pahFV1/1TQ/ayorx+yt83vf1RY
+2q6dmkTdDHZvSnCpWSV+fnKyheNzT+2dfy8e090ReWTrr4fzKzD6ppeN7a/
aO4aN7b26Rz8W17Fs/rOl5s+vFzd9ve2+qWTa2MTArk0kxYZNFui/00u9BhA
wcaM0zCP6einfMSC0kBXFoGKWMZqZllejrPthhNNyqKc+OIdHWmmzQTLPpp/
d4ZTFcWsmWHeLg7WprgVx/kKmBursmzacJYtyd55pNDCdC85L6iG4dqAsy9P
8s0lb6xIcc8Rb2gjeJTEOQnv+ZFIG4sA5oC4yqxm4pD8y588vBQVtevkxZzG
wfaRb8xtw7obftW0LvW2v/3s0/vN7T+Bpnn57WxsHOtsfd7b9fb9j2629H7T
2j1nZr26vXepruWHxt4JU2efht5Xbc2/TJQtvQ9dz3BsiHWtWIk41t36tq35
m+6uH3Zuv9Xa/La940dr+/CW7um2/tGWvgErJ9/23lfNHd82tj/Z9cmNhobv
NfVLl9bQHrpn0817gUrM0X8ihWaAggJVj2YyTAdchBoFBa4AWiyAHisMfwMK
BMWiI926PNGbx9tak4atp9pp6Gvbkl3yuWYdQtN+6UptvLvq7gocOTyPYtNJ
tRyIshdTtuUmBtFF22tTTMtTLaoiPXi0j4rjPLiC1U00WyAXy2JXcqibS5mm
/WJonAu1sl3Lbp/C7Tp/6kxEdPvgox7NK2fbnY/bl4Z1lP74y08TOtveNtY/
cXUNG+h93tv6cqD7h/d3X20ZeNo4OG5iv7Kve6m96Zeunjkbp4Cunu/7mv82
Xa7DCm9fn+RUsRr51UD7jz0tr9Rdb3btuNPZ+peerr/a229p6xnvVA+19w3p
vtX7sr3zdWvHs08+udnZ/Hq8cenrVZyHrkVUC12ZUxo+kupNL2OloZv2gOBi
NACfHL3HudBTQMX/HBInYCto9hVsnwJFSCMBWce072Ztqk1xksrhnfmw4ULf
0VQ3xb3gROpWKUCPi+nN8FaQt8m/tknmbmpKN2vh+GrueTDSwjgJPjTeqmqS
RUu6ZUPcCjk9rJph2iGE1KWIyQy06s6RTISd68DAyznt0vzQkiO0c5PhxVDo
/G6fiF1rbo71LA33/cXJdoNW/Vrd+e1g79uP9t7oGHrZNjRj7hSi7l/q6fhr
v/qxg1tQ78CbofalueqlD6BrOLv6ZMeq9ciTI52/DrW/Gev7y6cf3FF3/qLp
/aurw47e3icD6sWe/nkHp3X9/W96e37o6fru009uDXS/mepYurqO+dAtF+SJ
ED6igi0o9GeB2wWaCkgFEO+wytZ7DOAC3P4vrCyyGW6FnKAC8ao6smkTyaaB
EpqX7EEXoEqUyOacgL4UD3lkSAppq4hhUUUzrr5vT6XuzE714yu39cRgy+Jt
KyLdmOwPi1K9uYI1dXjbuiSbijhvOXNtDcBKBhvN1x8HdiP1jPDLI1efqJcm
y38dzf1byp7CCE/JRVvGhWDi9d2054NLUwO/mqMDB7ufjw+8HR38y559N3vH
vusZfWTrunpkaGmo79dh7XNXj1WaoTfjfUtP6pc+hK4CrJIcqsNQp2e6/z7d
/fPcwK+HP74DEBtT/+LhtGO4/7vR4R+GBr5zd96mVf88MvjLUN8PBz+9rR18
M9+3dGMj9aGXnGTRJEAO5cDms/XnpPBxPmoYyAbgQXjoYQCdUn8RxLLa/A0r
ppeEtFKUFs7D7yjK9GgHLc0MFSQHp1A9aVRXEWN9zT1PwU1/QuZWGd5Tkukl
exDAImzJIXhIxCE1KV450R7KOF8Va0MjkAeikHZA+8k+cpy3lB9YTwWGFDUv
hUYI8NLY/bRLR2Pufkz7BHN9F3TtUyiS6tWa4lh+109wK5wy2/jrwuCvbjah
T2aXZrV/mdT+Zd/ntzVTP2qmnjl6rJ0aXZoc+tv42AsPr1XDI99Oa/7+omXp
I+hKmm1dsn31VuSZJz1Li71/ezL4t6/23JrT/DA7/NbbMXxq8JfZkaWJwb95
u3w4NfzLzOgvk4NvD++/OTn63aLmbze24B96C4iWVcDs58Bncg1mFUbvZl7U
bGM1wAp0SeBfdBbmd1gJAwtpq1XJO0RJ23NIgb0JNhW4UGnaWjInWE73z6aG
VlxzpV/2xGWG5xAD82ghpaTtpWnrZXeN04juUs76RtrG5tSVRQke2bHmSv7K
NlJABTG4kBQk466sJqG7RLCFGtPvs2BlyQfYd46mZXykinITJTrlJqILyPAG
kkltun9+3HbuN51Lr8Z/8bAHsLx+NP52Zuzt5wdvjk7/MDLzEuTS7Nhf5sf+
Mj3+zNs7eHTsxfzIz6/bl3bpXUq3qU1xqNmK+OpF79KL/qWXmr+e2nv50ciL
hZEXPk7rZrU/L44vTWuX/F3fmx35YXHizaz2m2MHLk6PvXo69POt8PSHPiyS
VbkA1Z0Hn8rTn1UCdwNfnnjFaABWwDKD8ieF/YvYQXCcejj+HcS1RUl+Crpn
e5pdbVZoXbJfqchRLbFVC1a1RrrTr/mnZIUXsJz6+U7DSW4KUnj2w0ASK6yC
aNOEt2mO9hERdmQ/cKVzgurYDl10t9ak1cLM9TlkdLvS8LESmuPZdD74EJ9w
knzBNoW9oiUTWymzGlQhRtiItkyP/Hsh+Bct3z0dfubtEjI7+eLJ5Ku50Rdf
fH55bPq78eln7u6B82MvF8dfzI098vEMmBiffzL2/XddS7v0zwGs0hxqtsGP
fNP/11fqn18NfX9m34nH49OPJqa9nL1nR18/nvp1RvvGz20D+O7TmUfzY9PH
9h+ZH3nyQvPTnS0psb5MknWRAN2eB58AWGUbzABNtTz2O8xDawFWOnfz22DU
b1iRsGqexxDNvzrGUkCyr8LZ1RBDu2Oc6piwCWAb5UE9if6ce6szSeGlNJNR
Onw8wUZJ25F7e0Ua98P6DFgzKCV33BiEjyXxQXTuqhoWqpto2npnBS1ho5Rh
3FGIeJFj8BjkT/J+6rH1F+J9xUSLGi6mW240VGw0z4XayO4Fsevwv2i+fz4+
5eXqPT469WRydn5k5uCBk1NTzyYm59xd3RbHpp6NzyyMTvp7ek+Pjz2bePq2
++fd+iczrGvS7au2wQ6+6n/zSvPtK+3TMwc+fzKleTQ94OlqNTM+vTjzbHp0
3tfde2586Ons8MJY//FP9z7WPP6u9+fIsLQ4n9+wykGM5erNLGM1LULoRmCW
Y/TdUOfvp4bJxn1ADOBcS+iBVVSnmkzHmrQ1zSk+nUKzRRl2RrqyLdqDciMw
jRBWxrGYEprNZ7gUUrfnfO0dz9xZnYVq59hrAVapOzhRfkSgS/kmA8DU3A6g
4Hbkccx6pNCc3Ogx3rwq+SDhzmfRxFUFdPNWIWIwW3+iCAIU0Yd3kCVsSvmu
d2xxvMPbw35iQvN4vO/xmProwS+nJqanx0f83G1fTPQ91XYtatX+Lg5TI51P
R0ffdL3co3cEZ12Fc6rabPjx99pXLzRzCwODpw5++Gyhc26qwdEBmp/vmpvt
mZ3qs7MweLHQtzDa9O2jriMfbnvV/+zXnqV7Qamp3nyWY7UY2yWB1FJoFGC1
LKXG3w2Vvxsz/w+seA6d8cY5SZ75t615ivXqNMdi+s62B6456cg6KraJv7Y2
bgUnchWDGFZNMG3FIeoe2PBoO/KT17Ak7zclocsSsVV33TjM3SXxPjzhmmaa
dWuaRfkDPzpxYz7TrFcOXxTDH6VZVSQext07cJ+8qhiYdzF8JFtvugiaVyD6
cE6C+LAH3/a3LU6Ue3saT423PxmrezJWf+zzD2fH1LOj3QGumFfjVc+0FU+H
21e4mE+PVD8f63zbObtX/0CmdVmmU3m44c5HHUNPB3q+nek/dTBsRJ0/OVq0
ehVseEQxPZU/Npy/NtB4Sl05018xP1Bx+8vPf2h980PxUtoaTpKDkIgtYcNa
spFjZdhnQJ8vS6l3A+mj75YNgDT7tyUHvnnUAGXMennMhoKswNpUt7yMMGl0
MCHTj4/3FVG2ZN/2pdzw5RHDagmeuURvVUygIGtzTqozS7iqNN0rP9G3MM4n
m7auLs2hSBDUnu5RkOqjwPsLAbdTjHv46AUBeiHZpiTuSOKdz2+TQkqAehHC
x0CNzofmpKiONBdmzNZrr9Wlj6dkfh56s+NVT8Zyno3mfHVgw/xI87y2boUL
9HpM/mJY8nKoJsQFuTCS+3Kk4scOzT69PSTrkiyHoo9N3nve1/VMU/18vOLw
Hv/JofzpsXw3F2hqij4/w3g0Ldm2GvNK2/bDiPpFb/ON9w4mhKeCRsU7ccF3
hQ5dIky/BDYigkYVhu+wAt1w/J9zfJJ/x0rqJxWtK0hen0fY1pjmVpLmpkra
wEhcm8lfr2KtVFDDFFfdMi67gjyp4QQUilaXZoap0tZLo02JNM982ppq4vra
1KBCnVSwyuYENGb4FRFXFdFDCoBmICDbOchpofEiwCrm0MObn13FryiiGvfz
EFNyo0c5+jNC49YkN2LU1jOvBxXPJmkr3aDFkYIXY+wXY8xT+30XtaWLw8XB
ztC3Y+RvhsnfqPPXOkOPRwSvtKqf2tv3QzupVgVEu7yPMZued1W/GFR+N5V9
Zp//i6mq7xbrQ3ygb55R5yfiXk0zfU2hV529P3XNvapR7zYOi/JMjzbnkJzL
s0wreebdHMSAFDEh1J+QLo/m6cY/l+doJMtAgcr4e6yUHhUkMyXVtS7FvDB/
VV+ms4LxftFDDxbfok5u2qgMKY/3JN3xp9FCq4XmTUKzujQfAT5MnOTNYQRX
k927Up3rEgMlpHBlnAuNHVRJdm6h+XbiQoqoIRUkVJMYNS03fpZqXfbw4IOv
d59P8c/PQvcBAOXIx0qjGb5pU4In7sHWo9+q2S/GcasdoZca1etR3DdjqecP
2D8dUT7VytY4Qz+MJ3yvTXjdJw51gp6OkF4NsX9sqT4IbWZY55FtlJ/AQ160
5XzTz/jLtPDcHq/JFsVsd8FqN+j1bNJE98VvNJkfuSF+bXm21LX0rerZMfhx
YUg1waxC6qomwZs4qH42bEhhsiBDL4jgAKgZIWJ6ufzpJtnfLVeQ/g4rsU0d
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
/z8FZeuV
       "], {{0, 0}, {100, 68}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 68}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3707501820830299, 0.}, {9.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{17.83829414118588, 33.99073806219264}, {
               21.38970201336784, 45.93626935115712}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{35.18357703347182, 51.336020954478585`}, {
               26.1990154809257, 45.93626935115712}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{52.528859925757764`, 
               68.68130384676452}, {-31.512746129768573`, 45.93626935115712}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                14.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{69.8741428180437, 
               86.02658673905046}, {-21.89411919465286, 45.93626935115712}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{87.21942571032965, 
               103.37186963133641`}, {-45.94068653244214, 45.93626935115712}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 13.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{104.56470860261558`, 
               120.71715252362235`}, {-17.084805727095002`, 
               45.93626935115712}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 20.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{121.90999149490152`, 
               138.06243541590828`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 11.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{139.25527438718746`, 
               155.4077183081942}, {-7.466178791979296, 45.93626935115712}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox["11", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.637], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.548798252002912, 0.}, {9.451201747997086, 10.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{156.60055727947338`, 
               172.75300120048013`}, {-2.656865324421439, 45.93626935115712}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3707501820830299, 0.}, {9.632810779315367, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{9.451201747997086, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {9.451201747997086, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3707501820830299, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3023255813953488, 0.}, {13.440071556350627`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5599284436493739, 0.}, {1.4400715563506261`, 
                5.}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{17.838294141185884`, 28.88996579023766}, {
               21.38970201336784, 45.93626935115712}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox["5", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[5, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5599284436493739`, 0.}, {2.440071556350626, 
                4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{29.826880425372764`, 40.87855207442454}, {
               26.1990154809257, 45.93626935115712}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox["4", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.559928443649374, 0.}, {3.440071556350626, 16.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{41.81546670955964, 
               52.86713835861141}, {-31.512746129768573`, 45.93626935115712}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox["16", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.559928443649374, 0.}, {4.440071556350626, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{53.80405299374651, 
               64.8557246427983}, {-26.703432662210716`, 45.93626935115712}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.559928443649373, 0.}, {5.440071556350626, 14.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.79263927793339, 
               76.84431092698517}, {-21.89411919465286, 45.93626935115712}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.559928443649373, 0.}, {6.440071556350626, 14.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{77.78122556212027, 
               88.83289721117204}, {-21.89411919465286, 45.93626935115712}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox["14", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[14, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.559928443649373, 0.}, {7.440071556350626, 15.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{89.76981184630715, 
               100.82148349535892`}, {-26.703432662210716`, 
               45.93626935115712}}],
             StatusArea[#, 15]& ,
             TagBoxNote->"15"],
            StyleBox["15", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.559928443649373, 0.}, {8.440071556350626, 1.}, 
                "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{101.75839813049402`, 112.8100697795458}, {
               40.626955883599265`, 45.93626935115712}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox["1", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[1, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.559928443649374, 0.}, {9.440071556350627, 19.},
                 "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{113.74698441468091`, 
               124.7986560637327}, {-45.94068653244214, 45.93626935115712}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox["19", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.559928443649376, 0.}, {10.440071556350627`, 
                13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{125.7355706988678, 
               136.78724234791957`}, {-17.084805727095002`, 
               45.93626935115712}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox["13", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[13, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.559928443649376`, 0.}, {11.440071556350627`, 
                20.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{137.72415698305468`, 
               148.77582863210645`}, {-50.75, 45.93626935115712}}],
             StatusArea[#, 20]& ,
             TagBoxNote->"20"],
            StyleBox["20", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.559928443649376`, 0.}, {12.440071556350627`, 
                12.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{149.71274326724156`, 
               160.76441491629333`}, {-12.275492259537145`, 
               45.93626935115712}}],
             StatusArea[#, 12]& ,
             TagBoxNote->"12"],
            StyleBox["12", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.609], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.559928443649376`, 0.}, {13.440071556350627`, 
                10.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{161.70132955142844`, 
               172.7530012004802}, {-2.656865324421439, 45.93626935115712}}],
             StatusArea[#, 10]& ,
             TagBoxNote->"10"],
            StyleBox["10", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[10, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3023255813953488, 0.}, {13.702826475849731`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5599284436493739, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5599284436493739, 
               0.}]}], 
            LineBox[{{13.440071556350626`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {13.440071556350626`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3023255813953488, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.7400945388529606`*^9, 3.7400945445460653`*^9}, 
   3.7400945760431547`*^9},
 CellLabel->
  "Out[177]=",ExpressionUUID->"279440cb-6b43-439f-91f6-ebf415113fed"]
}, Open  ]],

Cell["\<\
For many of the bar charts, the network is doing fairly well. It is getting \
the general idea of the ups and downs and the number of bars. However, It has \
problems distinguishing between bars that are close together and of similar \
lengths as well as very low bars. The first error is likely due to the \
inability to know how many bars there are and going for a default of 1, the \
second error is due to the low loss associated with low bars.\
\>", "Text",
 CellChangeTimes->{{3.7400946020174212`*^9, 
  3.7400947665484447`*^9}},ExpressionUUID->"2fe923bf-d533-4130-b4fb-\
f9dbd0c9d741"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combining the networks into a graph-reading function", "Chapter",
 CellChangeTimes->{{3.7400948070854387`*^9, 
  3.740094817432265*^9}},ExpressionUUID->"2c8849e6-a478-4d26-9155-\
f9bb434e2004"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"readGraph", "[", "graph_", "]"}], ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"vgg16NetTrained", "[", "graph", "]"}], "/", "20"}], ")"}]}],
       "&"}], ",", 
     RowBox[{"ocrNetTrained", "[", "graph", "]"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"readGraph", ",", "Listable"}], "]"}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"Import", "[", "#", "]"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], ",", 
          RowBox[{"BarChart", "[", 
           RowBox[{"readGraph", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
       RowBox[{"sample", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}], ",", "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"\"\<Input\>\"", ",", " ", "\"\<Output\>\""}], "}"}]}], "]"}], 
   ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.7400948522623496`*^9, 3.7400949755543737`*^9}, {
  3.740095011155795*^9, 3.7400950194608507`*^9}},
 CellLabel->
  "In[181]:=",ExpressionUUID->"41cf982e-6a63-4eb0-89b7-e031dcdbdbaa"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Input\"\>", "\<\"Output\"\>"},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
kQ==
       "], {{0, 0}, {100, 77}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 77}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                11455.5986328125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{90.83685801696475, 
               119.10262931249187`}, {-42.73640873395342, 42.21982776950161}}],
             StatusArea[#, 11455.5986328125]& ,
             TagBoxNote->"11455.5986328125"],
            StyleBox["11455.5986328125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11455.5986328125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzNvId3HOeV5g3P7M7Mesb22pZt2eMsyxIlimImQRI559CInXPOGZ0T0N3o
nDNyZs4EiZzROSCQlCjZnpmz4a/43gZJm7Jlz+o7u+M557JOoapD1a/uve/z
vFXNX2BZ7cS/KSgo4P0DWLRjRGVcLqYP8t/BH51MHoXEJODrmHwCicC9iP1b
sLEM/MODf/l1V4b4lcKZofxxpGkvV1xpEORX8YV34V8H1pnFvl4/2vX69Z4U
2ZMmgnjjxW+87I/ijz//39/rfL2S/5ZU/uu8IJKUN+Pl9qNjIP7h28FJpWhH
p0b5iqDIzj2uah07+q/9/TsUa4rjeyox7jB8h322FMuWoNsSVFeG7ttjONME
SwxtS6C9B2RLAmFJwHxP8bY0dOh3NHOiN/ic7N4junNUd4YKjsSTovhSVH8G
BDgXrCuLBlRfB96dJYFwpt4M8u/XQ/tM0yYy9JTtSBKDhyzzLsYSxQUOmLYk
wZ4CX0Ee+Zxv2IH6ntF8hxTTLjyYow/nOO4dom0VG4gyh9OCoTg/EuN4tmiR
NMexTQAMRz5hWeMIw24nOHhPmmvbZrpibF+K/1WTypFhD8YYpjg4GJ4tKQgd
Ku1xoW2XH9pX+FJCf1rgT3FdMWogxRg55A7tsy2b+OFDsJ3mz5AN693GjR5n
AueME71JhjfB9sX5vpgwEOMHYtxgjB2MsTwxmidB9SUY4AW+BMsLAmyMc7zg
dGI8b4z35hJsHDuUmlbwnijTtEYYPZCFc2JPlO3YYQztSwJpnnmdqH0MJwyV
DCyjA1lOMMNzrFHGkn3hLT4/0gzpO9EpPdktP1vLfNd4hzi7p/PvcL27jPAe
xxkneHJEcFHASZnXwQfyw3vyr8TKk38vHZy7bYscyQp18yjLMjmSkoxn1ZYF
2nhaGdwUWB4RAxvc8BbXu0Ifi0vGourZjMm/0jeyK5/J6QIbguuHpvCWLLSh
CG9qhzYHhjcNo5v6kQ3dyLp6aF0V2dCGN/rB9qEtPdgV2dRH1g2hdbA+OLRp
Ht40v7kEL/AtyYOrijvPvMF1ZXhd412Wg08Yjw9GtnRD2/2BNZVnSSIchtnn
BcM7uqFNTXhVMbbZrxzCykLomU2L9668z4MNPdKQBppG1/Uj2zr3ktC7KfBH
BUM5qWuXM/as3xMXu2J8d5z3lViBogZ5yw5XQZQfdGtOEqylwqFOyXAv3lhd
Rz+OVJSQB+rRinK4pBglL0P0FXewLiIFNa2kyxBqcSerlKRua6Ve6uGWQxjF
nczKLlZNL7cBymsE0cut72FVgY0wfmMvv6GbW9fFqe1i13Vz6nu4Db28RrD8
kuDVoyQtnewKsKwnXEKIm/DKLpiwqYFYlN/LqcdKIQIrEcprQIlb4YLmbnYt
lFMjtOB4RmwntaIFV4oRtINoxZf1MGtpAzCuDYXtb1JNUXwrCoq7qUb04QX6
j+vVH/GvQZxR1ldiBUrD+YjGd7VGnshFnl7WIASvbBSY0XIX3RDuQ3HbQ1et
NxbGiHyYyiqYuRdG07uoPDQIz5CJ3Uek8VF4NhRKbKUIMEQOmsTFUPh4mpAI
gsLHEXkYAg/OkuNpfSiSsBfH7QRB4HdTxDC6FEkU9BxF15tBEPR0k5roCqJ1
ZJAiJcConV2EdjwHxZbTeCoWjNgFI/ZI+kUEBhpDgSOJMAID2UtoE+oYKHoP
jgWzBox0Eakd0WQLD6JZUF4/bfSBj6FHUwaglpty+Qj1+r43ktb6033Dh7LR
57KvyIoVXOyj9rde3XLpQozBURFPj2VrcQQBFE7rIvGxdBGFwMKjqRgsBYMi
onqR3TgigsOnjU+ESVQcloA0mHRkGh5PQmPwCDQBiSGisGCdjEaTUCgiEk6E
kdk4PB2BIvXAcB1QXDuC2ImhduMZUAQRchRtbwaMBEHRYSgGkqNk9+C7UDQU
moqCExHdyC6ry0Jj03EErFqrodOZZDIVBJ/Pp7EpXAmDIaBiqSg6j6YcUPCl
vA4kBEVDQCldWp8ML4PzbJSBSWkJ6mQd62yN5MNqxbso/yX1Y9hXYxVnO+4L
OBb4yIJZG2GzDOguei1Ti6dIMdYRA5zWo7GrvWNeOBnJkXL9Y0EcA4+jwCgs
jEItxBLgRArW43NyeEwcEUVlE6lsPAgKB0viYolc/FGQ6QI+lcsnsTgEJgPP
oOIZZCKbTOKAS0D808Cz8TAKFC/AqZ0qioiIZaOgpC4cE80W00RyHo6MwRHQ
fVIxDocjEcgEHJlAIMCQ3TQOicwEX03kSdkIArQb26EwSWgSEltD5Q5Su9gN
lH64+ZpcPy0c2jLY1jn9S+jBdbw7Qf9q/SrBmsmZmM5OqKKsQ1TUyrnUzLrE
tiA6OBU9vFqcorObXdfJqCPL4QgupBlXieJ2wBlNCHoTnNpK4iFgxE46nwAS
hsBEYBjdaAYExWxDMFphzFYYCwJjdcBZMAQDjaJjQSDpKAQNDqf2wqjdUEoH
yFs4reONAH92QekdPSxIG7WRIEN1MVqxQiiS04lgtCMYECyzB0XrxtFhLAHI
0XYKnUBnUkBuM3gEIgOBpUGRVJCH3XguDM+H9tJbOyi1EjeDZUZDJXUIVT1c
UwNVVTSJT7UNnMCFiwyr6KFD4VccBykgtcD4/jKCUT6I8K4QxGhc4l/neZbY
V/cG7A9oQxt9U3G174mA42iF9hWNL5tn1lxEWdfYIzeK1zr52DW16Jhdtc1u
2Oa2HaPLRu8D3cxOoEfUEHhgmFpzomUNNH3H+Ioh8lg1ua6/HrOMrWimN/Xj
q1rTLE3ihzJMLcOL6tkd2/i6w/toYHzTdTMzbL+lYJqhkXkDUlLvnJWDHg5n
N8w+9pNF0Ik7/huPx7CsTqqo1xKSmEOSdlzJ9ILnxmaohVo0vmrzPFBeTTmH
t/rbZOdC2zLXGhcM7v4oD6SHJ8nw5EUg7Suxcr2Uo6/iNcC83sZ7krixT9jO
XYwvSZz+RDjxlGddhZsW4ayhcs1N6HRGH1pT1lHPBB/pKPrOXlHZ+LoutCCa
TfQHlvnD26pr+46RqAmqqexRlJlvsRGakl5FYf8cHuy9lu13P6GP7UquZrXO
eapuDmG6jVdM9E7GVL5l8VjM6FlU+FfUQGOY7nDEYfh0zIQbqIZJivmO7l5+
SRenuJddjhY1ILh1PYxKFKcmfFONEdXS9R3++8rJDSN2oHYiZqC4Gvpv442P
yT2Wc44tqm2bGNnnAoUM0uMo8oL5K4Ii2nJEK4g9PAhbDgvCnkPbcyhjtAso
c+8+dmCz3ZVC2uMwZxwZ3CPaonB3Am9YQgdjfe3y83M5h39Z1SY8NZfW1rF/
4l0lT6RF7coPGqUf2pYFw8nBGvb58Ppgt7LCMS8JbWiQ+orAurRNemokqgIr
7bKzPerL/lW5e1EKZBhMW1nD/WgsMTCe1DeLT06m+tskJ0z3yCClW4UftvJP
+B+JZncHb8QcdcQTMFHltW3n0EMVRVN3L+2tJR+b3BkY2VFXcX4VivYNLhPC
OcHEZxL9Bty7RwJew5XD2JLw154o74C+KitrjmzeA0E8CvwRtDyx0GcM1Xp7
5AUD+ILAIX3oE97Eb/sUCy3OHCLwPO+qxp6qyrnvuxalgECH7DxIlS7F+yM7
rPA2o1X+fpvqpGtNMpqywrWNznkdQls/vG0KrKg75JfdC0Kkviy0Lh+L9Tfx
T3XIioAE9a/ogBZt7yvtlBePRg1AZHYpLnqfCDD6K5F18eimFNN/uYn53tWY
Ibwgn9ka7OAU4tUN4Xnt5FJ/O/PM3M5gPePDoXV5ZFtaI3wXSH1vig2sWeg5
y3WAMyWh5nSv6xDpPcQAk/UKV/orF6Atw7BmWdYs42WAP+0Zmj3DcGc5hk1i
6ECCCZdf5v60VPSrvluoyRc6cIGcWbR/jzvwhFLDP3PrcGhi21ZD+Wh8Q4lU
nR3f4l/LqJv5x9rE567vB9xPdLWUs2PrZgi3cHLbNLSkbOZ8dCtjbmR/MLml
no4ONDM/6hAWzmxbxzcsUxvONlYRQlLvvqW8tuOBsC+NLGq7+BdBcxt+omil
f4yRlN5PesL3VJOLJlCG7ZQi0CSvb7pgwpKx5X6Munx4Wz0SV/cYLwZSIkeC
od9CGncQjj1c/06nKd1rP4A7D1DAk+Y7zFGf+aqsXpI5WubDmWa4UgxPkhXI
CP1Jseo+DuOusa/16ef5SHND/2P68KcC/SbUuErGuxpaROUzu2H/fSNa0jCz
OkiQl9ivksdX5FhFRTP94uii+0Z0jKaDz636CLLWG1veqaVBuKAYZAJccGX0
sXpySY+V1BJkzWPzttGHjunFAFbQCae3zD2OXF+I4Pit1xe9CHZF6Ibq/q4f
y6vuIl26sexZzczNPHKThHlZe30pPDFvRwqrQw+0SHml477I/JAL0V5wR4VD
z4DdY7qy1OCnbNc+ybaHtqThhljPa1b4r8rq5byKJ4N+FWmsN4UHzTyQoLi3
qcEYVzDRQXTWjMb1gXUt6DmBLXUwww+kuZGEultVfQV+DkJvQXC60GwIklGN
YpVyNM0QwhmSuBkrhDSja+EMGIzcDSd1NUOrERSgM9sh6Eo8B0Lid/USaxkS
JILS1o6sx9CRvTgoXyHsRnYDGSCWclvaqqlMFI4IQeGb2EIogd4kkmNaOgtJ
7E44vqkDVocidhHpSCiuFcOGwBl1XfSqHl41UllPsLQ1Sy/a18X2bb5xk2aN
0e3Axz1lO3IUV5Z0NH4BStiX8QrCq0mno0mbl9NQr9bJf5i3Sedr1gv4pFGu
HAyEJ4PypfDBBDkYpw2n+c51qvo6UneNMLSmG1rrxxjr/Tsy8xp28hOpd1VS
TjqLlMOEdgFegjtW+NN7K/7C0m8sPdEtLQ2eLPn+ucaPWQN8KBv3o49+eG/1
Vk1dZSQUHo9EaquKbz0e+/WZ76n1DCyptaLhfH17jVw9OGgZ0vS7Kypaqkpr
4JAeBob2/s9+/uDReGXte243MxQRltUea2q+goc0omtrORhM+eUzxdUf93v5
chvpePlbsyvOXxR9A6VuRugajnV/3xtV+jJyT1bg3eMYdnH+Q5Y5hnOkye4c
9TWr/DL4FNQRwbiFChywAodkWwIJKteX45ijMHcW504z3Wm2NYYzR1EjL4RA
uwYSNG+C4HyGUu42ep6SwgfsoZTQucYM58T2LabyBlo2ihx6op3eMjUpPgbl
6c7APQn0dMrQyi2toZfhDViKifyTi9+YeyyDdn1j9xoydp9eh3z3Fw3vwPTM
al7XWxXfmt0Zqq6unnJN37DPQUqrp+87f1n4tyJ5i1zVWdL48ysNZxW6sEZ3
XakbLa/obChrJEAwtGb6iR+9e3/Jdaa0YHKiY2Sst7Tjneqac7xLTZoLXbzi
Vmj15bKOHzM91Wx7VWHPd+ai+h9cLkAb6uGGumOwt4b2dc4U156h2LN4UH12
MLhnifaXE5ivqim/dCYw3j1KXm6B/pzCWOMoT4Lrzwn8OYI1jgDrE5/3Dz/j
De4gzJt46yY5uMMeXIJ7f0Myf4JUrncY13AjKeVISg3auGGFpLyOpViaJhYM
thtcmOOyZgPq3OsJ5fC2e5wOftWx1ndITgJM3fPT4n+amed2NhXkZup3Ztre
uVJwAn+yWtbTbsJ+rajA9kBZUlJy1X7zZv/V5rNls4/t71X+jUReq1I1FjX/
4FLTKbl2XK15pNBNlVX0NJY2kttwrHreybffv7syeLKqYGq6bHSi7njtNyur
zlhK0RPFDEM5svXs+2ea/vYK/e+KSf94vKXAu8D6WU0BOwglezt/Df3vlm2e
M80CfGx7KNseAizzuF5N9v5BKjhjWJAbgTRPv4JyxTGhA7o/KTStU0N7NH+O
5I3zzRsMyyYW4IrsiYYzkomkbCTFMyR61fHO4d+KJj5RmB/RwGgiv4uYfqG/
emBFa6qgglKg1dUPMWP/KnHtod1x0tiWsZPfUEUrJ9gJOCP2h4V/Px9Td7QU
vLjb9r9itHrsW+pHoo8JZ/6542fnWO96FwfKy8tvuu9e1842nCqee+J4p7Tg
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
       "], {{0, 0}, {100, 65}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 65}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.332737030411449, 0.}, {11.44929131691207, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5507086830879317, 0.}, {1.4492913169120683`, 
                31014.544531249998`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               49.140475976486854`}, {-20.87247117243365, 38.74689437998485}}],
             StatusArea[#, 31014.544531249998`]& ,
             TagBoxNote->"31014.544531249998"],
            StyleBox["31014.544531249998`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[31014.544531249998`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{1.5507086830879317`, 0.}, {2.4492913169120683`, 
                17722.596875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{49.902157119532305`, 61.58096019156326}, {
               4.4643997786028535`, 38.74689437998485}}],
             StatusArea[#, 17722.596875]& ,
             TagBoxNote->"17722.596875"],
            StyleBox["17722.596875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17722.596875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5507086830879317`, 0.}, {3.4492913169120683`, 
                4430.64921875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.342641334608714`, 74.02144440663966}, {
               29.801270729639352`, 38.74689437998485}}],
             StatusArea[#, 4430.64921875]& ,
             TagBoxNote->"4430.64921875"],
            StyleBox["4430.64921875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4430.64921875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5507086830879317`, 0.}, {4.449291316912069, 
                26583.895312499997`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{74.78312554968511, 
               86.46192862171607}, {-12.426847522088146`, 38.74689437998485}}],
             StatusArea[#, 26583.895312499997`]& ,
             TagBoxNote->"26583.895312499997"],
            StyleBox["26583.895312499997`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[26583.895312499997`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.550708683087932, 0.}, {5.449291316912069, 
                44306.4921875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{87.22360976476153, 
               98.90241283679248}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 44306.4921875]& ,
             TagBoxNote->"44306.4921875"],
            StyleBox["44306.4921875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[44306.4921875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.550708683087932, 0.}, {6.449291316912069, 
                33229.869140625}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{99.66409397983793, 
               111.34289705186887`}, {-25.095282997606404`, 
               38.74689437998485}}],
             StatusArea[#, 33229.869140625]& ,
             TagBoxNote->"33229.869140625"],
            StyleBox["33229.869140625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[33229.869140625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.550708683087932, 0.}, {7.449291316912069, 
                39875.842968749996`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{112.10457819491434`, 
               123.78338126694528`}, {-37.76371847312464, 38.74689437998485}}],
             StatusArea[#, 39875.842968749996`]& ,
             TagBoxNote->"39875.842968749996"],
            StyleBox["39875.842968749996`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[39875.842968749996`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.550708683087932, 0.}, {8.449291316912069, 
                42091.167578125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{124.54506240999073`, 
               136.2238654820217}, {-41.98653029829741, 38.74689437998485}}],
             StatusArea[#, 42091.167578125]& ,
             TagBoxNote->"42091.167578125"],
            StyleBox["42091.167578125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[42091.167578125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.550708683087933, 0.}, {9.44929131691207, 
                39875.842968749996`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{136.98554662506717`, 
               148.66434969709812`}, {-37.76371847312464, 38.74689437998485}}],
             StatusArea[#, 39875.842968749996`]& ,
             TagBoxNote->"39875.842968749996"],
            StyleBox["39875.842968749996`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[39875.842968749996`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.550708683087933, 0.}, {10.44929131691207, 
                2215.324609375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{149.42603084014354`, 161.1048339121745}, {
               34.024082554812104`, 38.74689437998485}}],
             StatusArea[#, 2215.324609375]& ,
             TagBoxNote->"2215.324609375"],
            StyleBox["2215.324609375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2215.324609375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.550708683087933`, 0.}, {11.44929131691207, 
                31014.544531249998`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{161.86651505521996`, 
               173.54531812725094`}, {-20.87247117243365, 38.74689437998485}}],
             StatusArea[#, 31014.544531249998`]& ,
             TagBoxNote->"31014.544531249998"],
            StyleBox["31014.544531249998`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[31014.544531249998`, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.332737030411449, 0.}, {11.67162240264208, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5507086830879317, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5507086830879317, 
               0.}]}], 
            LineBox[{{11.449291316912069`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {11.449291316912069`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.332737030411449, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzNfHd0VNe19x71XlAB0UQTHQECIUCAUEMSIAkJ0Xsv6tKMpveiGXXRcYtj
J+/ZSV7iuGIbMB11aWY0M5reizoY27Gdou+cEXGc73t/fLHXei9rHd11587V
vff8zt77/H57nztzT5YXnvUAgGo/tCk8QU6tqjpB3R2GPuwpq75wruzM6Zwy
4plzZ6rWn/REB7PQ32n0h/fJtn+hkexAGQKiA2pcUKyDEhOUmqDSRqiye50f
gDIz0Mb8y62AGv2ZV5UTykxQbYEKI1TooNwAVLsXcySAOehHsnkwXL60Qd8a
C4Hq8qE5vCtNQHf6sIf8aGbg2D1Zdg+uy5tsANSqtFBjBIbdg2oFig1fimSG
aiO6Gm40dNAMDAdQLFCtA6Y9oEbvS9R6U0yeLKcvfySIYfOtMXgyHT4sl0eF
FnXBmzwUSB72qbRDmRUq7FBhgxIj6lRQ0WMoNQRQhyI5LyKZz4OO9ePOnpcD
1exFMgDT4f2vYWUjlOqhZtCPNhRAcQWQ7L60oSD6cDDaZ40GYjQGocqK8aG4
AJ1JGYEKJ5CeEajPPcsG4YIZzluh2ArnLFDYAZUjUO6EEtRseMv4yuesDkp1
gAAkWjwrjUAfDKC5/CkuP/qwP9HmUWrA/aKP+1S7oNKBu1luw925oAPqKFQ7
ocIC9BE/6mAg2elbaYUzA3BRB7QRT+qQD9opRo834h4ypx8a9HITHnF0BG1r
nEAf8uaOT+E/m3ZeCSf6gIg66wSKAxDgdeNTGWZf1P4lrFBDOLCfBZAdnhSn
d4UBiCYCaqUq4AwF0G0ENLh0ZFQ299YKDBd+wgoXkNywlDugCpnlMN6XTExB
4JzSAOWZB3kMDsmhEj35qBfvWThrMLRC63lWChRrYLXJr0RNKB6AGpt/uZFQ
bfVkjQWh4SANIpQIkxaObLsa7QwBGXV52P9UHzBHQ2lDwP3KkzFCKDe7x27Q
E52Jx1HjRTOFUQyEGhOwXdgykVlyhqFGB9VaD6o+kO2IYNuCkCFRjMBC32q9
WKbQSjlUKP41oMjI5l3AGYMqA9Qgj0MfzdDwPFQ8FFjcDQKbD10NHB0IzFBr
gdZRH6IUmBbsQURk/AZ0aw+2yxv9S5kKyhTYfSoH8Le8QR/esF/tWGCxFJY3
QO7voErqKXbGiOwx5IEgqiakbjiWb49mmkOpBr9KJZT1A1EPbLs3y+ZFdfeI
pHcPkAmIas/k14CsDSTrcGerVEDSAs8WjqwCfeS7vAT6WK46jqOK5uqDeAgx
BdTIgamF5sFp1P5g7sD0DZcg/RWod8QylX4cXTBLH843TxXZp7LNU/4lrFC4
IJrwU1FNwLVBw2jYxTZga8Kq2v0uO1eI1QvobdMkysUNyiWsJ9Nr++Y2KheJ
ZXFixaJm9fIm7Ypa6QJmx0x05KplLadj1jVr4qv29dyeOdzO2Y2a5ZQHUfk3
4VVbStVn0/a/CfSH8zlPl7RokkV9q/nd8YLeeJF8RaMmgds7/5ptHUc6CzWe
dDb62Khb1mqeUzsQU6dawuuJz7kEwr5ETnfsJfOKJu0ygXRJ08CG2v5VzM4I
oWxOvSyD354h6k2qUy6vVcxqNs6+bJ0nUkynPZlRr0zcfhka+rfyuxI3CkDS
v7pWtbTetriy15+pjRBYpv1rWFkJTLM3Wx8gNEWzBqYK1Us21MGeXwRta/Cr
+mBzjmj2nob4nbzludyVhbx1W0rmn6hP3U1ZVlC9cB952VHOGrTdVRV3rjZZ
8tujZ0UbU09F765edIAef5AWj7ZHWQmXPz6bWzE7p3zmydqkNx5WH+IkFJCX
ZpfNPSJI3Fk9bztxzmHRqgOCpQ23DhSwZ+6kTT3WsGIXbXEhYzH/v3J2s2ft
Z6/ax9qceT5hLyMF7b/2tOzK5xd3kpZkFS87VZ9xtHZZekVELmNtRs2KXN7C
7byIXLEv/dYKwf3EXIl3vjgihzNtJ29BLm/xNnpsJn3GsWur2Pe2Ep/M3HgV
Cv4A1VJ/spXw/4uVFYUjD7rdv0bjwzFEk7qn1mmS0xtB0L6+rjNnp3DBLsHG
uk952cT0vJqMa581HajZt+tCzs33BGWcvYXHMo+e33WxuuhEadbh0vSzlF1F
5zNLmEduviu8QCwsPLSlgnL80On809VFb3zEPc/L3FOWePMPrAPFmWdrDu07
U3S87MjZmsOFZzIPV+XtKd/6y88Z+4irT7JTLv+efpK8F13q3XviA2Xr9l/I
OlpyqJxBKjy5f++5oiMVBw+WHD5edfok8ez2QzlHKgrf/vTqQdLeouqCQ5zc
nTXxuzizrncdfLP/TCY9SPx54c3Oi9upixs+qbh+n31QuFn0ydHc2mhJ/6bt
b0DJo+B6xyLUfYp7LqbY3Q0bD7Yfd3N//KFZPIh2wlkLkJ6jiYNA00Vw5au2
tYJYESzpn7ajIYTz2ZldgozttE2ZFXN/08UpKtl4lrHj7YfkXaXLTpcePnrs
wO/fby2lZRaVLjtA3XhWeLjxHeEFRt7J0rQjx9PPXzhwvvTCoeKCm5+X7eXM
3F4a8Yc2wf5zW0urig8fJp4+zTl57uKhc4eOVRw/Q99z/f0z+6pn7q9ceZKy
/SzleOHJrP/8lHmesvH4xexDJwspbHLRkcNHz1fuPVV9ulKw62jxGWL50eIT
h8+cPnXhzJmyI0cvFp4hHzlMy86snHKt88C1zmOZrMBddR7ZHCjgR958XNLw
ccn2mrnHL89sbk+t78hKEUHdwDpm7zw3Mv+MyUu4fnR8ch9jBRdHoHQcLuiB
pImsU6ftecOnSRtRpwpOr4OG3sP17cRMxpLd4ujLd/KP0lamHotqvltUyIo9
WrGdzL544kLGkfLEA4zFBSzkDklHhLuv/pF4krixklp49HT2uepjJ2iFTZ+f
zeVG7efNvnHr1JGqpGMleUdOnTpTWnG2+uSecwUHy04WleZe/fjcAfrMmkuZ
dW9f2FORhSzt7TvVhyoXn63aeZF44HBJ1kX6oaPVpwvOH99ffmbbsZyj1Lxj
NdmHS/JPlu09caHgbMX+fRd2HyTnnG5NaHlSRH1/x4Gr80VPEn5pytnXFCq8
VbBfvDaPM5d/Z801xda6tpyDr89kd6xs1K1BUxtuVg+yxY9s8cEuiT463O0f
xwPwVzbMQktsPtXOyBpDlMCwmteev67Ga3sTJAuh2biY17c8iemfVT8zQwTN
nYm59NDz11dvE3s19+zczZiTe27xKUr+MXr2ptLwlo5T2fzV2xirdzOXneIn
7a9Ye6h6Q0HF0nzqioNN6RsqYveJlxeyZu6oCCtpWXVWsmLLyYAC8oIT4qyd
5QWF5L3HJek7yTOyykP3c+P2CVanVUw7JJ67lznvJCt3PzF9R3nUTnJIekXU
6WtJ9V/svvDG4jye19ZKON0Q8+rdk4XF6F75h6h7DnKzN1cGb2UEHLiayLpT
tE0C6LGZtzdmCyL2Nq/aJohJ5sAGDmxv8o4rgcI3ofJRJAYExSIEhTkQY2L1
+mesvPBx/JXPJG8vNfiQLFF0XUytPkHYtX3P9Rh+x/LL5hVsWRhHEdtk3kF+
mlCvn18rn8G5F9/Qm8ZTrRZrV1/pT2m4vbOwZsMe5pZW6QGxLEskK2I/2VX3
uOBm29FX71/Mroy63pnf1LmTdmt3jmQJ707BK/KjLU928m6tlDyc/5Y5uaFz
bUP7rtZ2zubqRNHts/sb51/rKmrtyKnr3HFNvYdzb11LR+FO2ups8pJf6Y41
92xolW/htS1lt0+nPg5uUca9qk9s7lh15em2Nzor8umrMklLuJ8caO7Ou6Hd
J+k8li6KalalNw4kNSpSOW1bmI+zme3ptep1zZb1EsXm/Nc86nQrhdp52JBw
8/hRI/wj4L/89h9HGCNe7EF/hjaQrYwiPQoveBNqOqHWSECXYikXU1WzmYYo
rsmnaXAKVz6VoZhRqQmk2QMFen/q3aiiuuU7BAtZvcspiikM3Ty2eknDQFLt
k6T6B9t3ij2uGJdz5BHXXalZ16DwlQBh+9bmvrxLqq0CuU+tAcRGb+7ANLEq
e9ulaEHnDjTcko6Eq7p1SQ3A1y/k9C9o0qaiLu+on0W9v3prIwjV8yXmGc2D
URJbsEQfVaeKo91dIXqcxrq3PveS177XAsWyxPqBhWLl0treLOQXXOk8Wm+Y
2BDH1y3m6xJo6kXl/SE1qkhS5+yc14DeP40kDcIuhoznx/MdMiHsd34YNzf/
fGl7briQcEMslKwl1DmmtjhnclQgtgMP0S3NzOruOVRNDM8eQ9UGEPsJLF0A
1xGESPsFE1B0cNU5f1fDdPInmVdGV/IGvRBbpmh9aD2Ru1+FvCafRukmnjqE
rISqLqBLwyTKeE7b+k0c/72/mMJWAN8KTDMInIQLbX6trlRa+8qdVyFNCPS2
aOqAn+T5NIrKn9QzhdK2RNKfXvRWSE37XPpACB0JHD0wkAKSE6htU3dfjcm7
FCNRrRFqZlQ8IZC7oNEawusP4XUnFLzh0WSbf+EJ/HJixbGHQDaGsIajS3RA
d4TwzHNp/dPp6nCWKfyl3/0YE4TSpN/94I/OSX/EWHHGgTkClRogKr3R8/D0
PnVDqBfQODSLLItd0wzb3oSlfBCY1ogcYVVIEn4FF61A1cIrQ6uTSMB/lCY2
Ti2TAcUEDCO8/XXyKjLk1PqxHibWW2MvPQ9tHfUSaggi+dwrmt3pvCVJtHCW
bJpkkFA7ggkwSQls7TSxMmEzH/Zc8bui2UBVe1ajkXJ4iBz+rUPRbOnUpRS4
YssXmqYiHcExeovtYQJdoKBv8a761RnceXR5bNN4EBrfWivceObDkREYT+dt
roPqDrj0IuxCL0i+8cUCcwwo41BmASSIOOZoujGQavDBgEz61z/sx+v/tivH
379C8QpJ/jFgDQYz7dFU7RSWIZCNLEQNTHVk2qvAUsVVtS26ZD21oQHY+kDW
EFbKtNEArmaOoC0plxf9mvxoXf8iiTmCo/VqssUSP5ufKw4raljU3HOA1h1H
kQeJNAG1itA66YqmzqIs1uattPgbllxqVxBF6iu2xvA00fWGeN7TDXmSqH2i
hYI72WL9Uo4lgq2JYCmCeP2e9cq5Rdfn0+/tFPQv4g1EMKUx9bpFEsUsScf6
3dzU1JpVEm0yUe7JUEGtzpMvJfDaI940FW0VgkQ3kzIADCRJXFjvVw7BWSOQ
hz1odv9yFdS/iC5RAsmCWQF/LIBi8arSYQmMXAwpSt6Yd5kahM9CqvVQbQDh
c78yLXARsxqFUitUmAPprlkVA6GS8Xk0QwDXGMPXJG5qAZHJiybzqJUVJHI9
+dqpSAdxnvkQNVFZDVMv3SPnV8Vf+uRcy6P9tY/SW/uzBA8y6z69UMRM3UVN
qb1d0th/mNG+WdyV2ty97XXFfs4HRTtImUcke8nvZV3tL2zoKWQ/zG7o2X2z
/2zj7eLssjUHqne9fr9V9OjUJd0J7uM87sOUlt51TU/TdvM2NX3Bqnuc39C1
taU3t6V7Z1Pb1uZ7u4+yd+XX5PAeH2Z3pzdr0niP4huebLrWue/Sg7LCujj6
00VcXRTTFoKCTIkRKp1InnsQbciQPCapJjIV7ihUGbEUrTH6kA1+NBtyQJwd
qkRqF9m83oM3HMkfnkI04jBV7r7IOaRbX0SfU/nQXTFne5F8DmLrZrJ7UlFE
Femh3gzsp6n5V2ZJNPNLOqBCAxztghxm4t6qw0cqd5bwivaTMo8KduTTEncg
ZtVEyT2/L78qO5exLl0Um9UYs5UVkUoJKxRNPVK3soiyPb8y76goO5+atK0q
5YBgby4tfd3RJcfYe4/WHD9w+mzR2bO7qIdSqzLzqQWn6vfuYSw735CxPGfZ
hdrSPcyUPNrKrMqVWRXxRdQ1ZY2FeSez8i7uzmPvSq5Zmy9Yd7Qx5TBn6/aS
DYdZBxKOxx7/z1mlT5E2j6Q6A6gjyBfcCSj1PykX4Rg2mypsfv4sa2ClGul3
P5rVk+cKpJp9kK5HUDDM/mSjB90C7GGgDgHzBeFIP9Cf+1ZY/Dhj4ZU64BpD
L6mPbWJ5XLMGNmgQKc1YTYIm/XKxNYCih0bzot30nD0ni6up5b9+5/U3333v
vXvdv/niwa9vP3j7/fZlW9IS9yxYsAdmHoPoI7CiGBYchti9sKAQ1u2bvWr7
ylfff/N3D+69c6fv7U/7fnXn0W8f3H7nzu+37EhLyy5671bvrz6T/eaR8a0P
Nf/xUf/bf7z9nx99vHBt0tvvf/Sbu3fQf/3h0eM/Pur43WeP3/6vj7N27Yjf
vP6te52v3O168+7dPzx++Nvbj9764M479x5sOLmOfDuZrphNt8QQMYEE8hB2
rhrjywznZGNaPFBjWT05Nj+ONahSDrWD03nWaSig1aiC+PbomgHfGrUX3xGO
tmxbEMXkzRr0vqjDvJThnFGtC6OagW8KFHVl5tVPkXQuET6Na+jcm1UfxpPN
F5q8OXZg9QVlFScT6U1bNqXevfXg8cOhu/e/+vj++N2Or+48eb4pb1fjB2db
23e2aHcwejfQHic1SNNe0Wx5tWfHpU8uJheue+9u+4d3bJ89/NsHn3/3wb2h
T9u0nzz5YtHapStWb7p93/C7z8z3eyY++ORvH374l9uff33nC7t/6KzPH/f8
5/s9v72lfe+O8bOHY5/f+f6TW46c3LyETckfPR2/1Tnxx7vDH98ZvPXZ6N2H
o592acM2BF/S5oldcXTntFITnrirHMB2AtdFoPwIK5o6mG8N41n9SnuAZw2g
DgRwdLGVXTE1fXOaBhMoyjCeOYJnDqeoApuGl5ClMZyBeRJrLNMEgsFQ6kAC
TbGepooSGqbUymNqn2zI4yTt5hdsYyXV9x1m9M+maEHyHAQq/0O8lOtv/nr9
mo09jzUdj758772RT+589+5Hznc+Uq3blfQr5RFhzyyGahpVG83QR/L0kfz+
4Nq2eVfuH169Y8HdDtPt+39+/6PvP/rsL+/fHn3nk47bvZ9vzF2dnJX+6ZPe
Dx/1/+fHio8//7q9beL93w8+eOCYMm3a7af373c67rSPf3jf9v6d4ffe/8vH
n4wmp21clbzio/uDH979yx8+HL5796vPPn7x0S37Z72yRXunMPsWk83e1c6A
8kEc2MnDOC3GMuNg/oMPcnRRXEMEbcAn97fANYRz9dPP3Qs59IH/lquwtgHF
6sVc3SyubobIPG9tI6RegcxmqL4d1WKdy9fNXiOGrVc9drwJ9M7prfoZdR0r
8rkbt5FyMriraU/TaZpIwTjOgTP6/PZwVl+oKd++bd/TO6b7d8bv3vvzvbaJ
e90TtzpMi3bMaOpJYEjROAYxRwOJbu3J0oFAHn2zd/eqgmmftw18cGv8/uOJ
z+797WHXxJ2uwfsDj+ZtmBmfuvmx0nBPprvTab/3+K8Iq/t3vn30yOUZGHy3
7en7d9SfPB75+JHzbue36H+7eidStm9av23l54+sD9smnjz5/umDbzsfTDzt
fP5R971ZRUCRR1ZYoMTpWTrsWT2KfRABxTAA1foPrHiGcJY6lK4I33QVeJoF
bGVcwTtw7k4YpWd+gzl5QxMwZfFM2fINzdBgXcvsmn9TlVFYR2jpy8hsAok2
ntG7SCDNShMTeE/iiq5Cfcca5v1VLdrtaa9BuRanrHljXhLDsoO163YeLjh1
lNVx78sv7o119U/86oOxu/KJ+zrrwt1hyKg4JmA98z1pgGIHVLo86XZvpiqi
sWfT6sMBjzXS7oFv7zwZ//ThV/e6Jt79zP6ZvDdxV2rKnpN/eKj94Inqcf+L
W3cmPv10Qi6baOt47hUwp0s1/FD24kH/tx+3DyKn++Od7+51fbNq65qkbStv
P+5/3DHU1Tl69xPT03svumQj77a9s/A08J1TiWNwYdDvjNO/xAFoyNiGMJ4x
kmr2mkzcocZWhbKV0ag7KZdBMLCU2j0HUXqxNlGsW0nrnr+5GYTKTULFls1N
QOuZ26he3dK+MYMMr8oOZYuB3zdPIFvYIMvbJg5ulW3NqoMruvlCWaRAFZd4
CdhDPiREruyelK7Y3azlRWf2nD4nlvVNPHg4/rj9m0d9E19Iv7vVq1p1ZKZY
HUdGcmAYSl1QMuRR5vSi2DzpmhCJMiGhHD7Uv/2h4rMvdE/e73v00G77QNv3
ofnjWZnzkgsO3+8b79Z/80X7aNvTib72ic6Hf3lwzzl9XtLHT5SfdJnvKZ7d
lj67L//ui+6/dOm+id8Wn5Afm3YiMT53waY98cm716Ts2bKmaMnaC+FhRwE5
YJkLzju9LjqDq1x+NTZ/hn4KamiC+wErgWIup29+iz41pRG4shnXnGs2CEHQ
m9KgXcXum5l+CTjdKzld69Obgd0T16RJqG9fl18LjR2pBS0EYdsySe/qS8rM
LXy4MpCeLgF+13w0/bF6Z2T/AkSWcDRT0IwI7diDnGW//uCtDdnH+rUTD+8P
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

       "], {{0, 0}, {100, 71}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 71}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                33594.107421875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               62.91905463540866}, {-18.878687886842876`, 
               40.740677665575625`}}],
             StatusArea[#, 33594.107421875]& ,
             TagBoxNote->"33594.107421875"],
            StyleBox["33594.107421875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[33594.107421875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                9598.31640625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.11823877741647, 90.57562050836923}, {
               23.349430364884626`, 40.740677665575625`}}],
             StatusArea[#, 9598.31640625]& ,
             TagBoxNote->"9598.31640625"],
            StyleBox["9598.31640625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9598.31640625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                47991.58203125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.77480465037704, 
               118.23218638132978`}, {-44.21555883787938, 
               40.740677665575625`}}],
             StatusArea[#, 47991.58203125]& ,
             TagBoxNote->"47991.58203125"],
            StyleBox["47991.58203125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[47991.58203125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                11997.8955078125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.43137052333759`, 145.88875225429035`}, {
               19.126618539711874`, 40.740677665575625`}}],
             StatusArea[#, 11997.8955078125]& ,
             TagBoxNote->"11997.8955078125"],
            StyleBox["11997.8955078125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11997.8955078125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                7198.7373046875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.08793639629818`, 173.5453181272509}, {
               27.572242190057374`, 40.740677665575625`}}],
             StatusArea[#, 7198.7373046875]& ,
             TagBoxNote->"7198.7373046875"],
            StyleBox["7198.7373046875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[7198.7373046875, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{5.451201747997087, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
eU0+OrlWe2a14uRyxamNOvvZp45dVQz6qfeQBfpiUmjlVvSFDAM4RxxPvGKp
xKsTff7ObiDwhzuvp2Wwoumxa0YGgwWn5ORyoMZISxJ3MO/hvh6Mk/8CyjVR
Zbv46MxCxdnpO+dmHrqMPPLoqPU9sf9bGCvN/IWPv9lzz/3lA6fpKtvJqgtT
Dx1fVrsM1fh2PgrzvvDPyDoa4PpL3i2v+YYgEIPFOtvZx0fXWs533z3eU+k2
UhfDOPx/ACuHd/96pIozXuU5XWU3W3VuruoMnLPVp4drPPf/9n9iZTfsXPj4
H7uqPEcenBq6dnCj1mGx8tz43TMva+07H/iy7PaZFDKSSn9OriBwU6tkiNCU
5KVLFEqctNEqq+7dcHO2g3B1Yn4VxyGYZxrKyq95+QU7uvqurW5DmAJvrKq6
7epJY7DCJ6Y2yWhKd+NqoX8Qy9bTfX4Dog2MH2buBABIsDydQhmfiWuSBh4F
vazxG6sMGLkb+LI6rPdhmOhpzMF9/92KgOdID77z7e6amMEHzKFH3r1POaJa
v77HAT01YT2P0minfgUE1u30+72PuD1VAZ2P2H1PmP01Hj3Vjn11Hj1PWIP1
iV4nf4gMo06/+/ZAVeBIldfYA9pYJWOswvdlpc9wtUfnI//D+/4Zp6p0qmPv
/7CzLnKwznfoAQNKDlXSeysZfXV+4rp4p1MfI4sVvPcrwdg9yCwz0DdZeWGG
UmeU600b68tJ0cEAzsBAn3dQBGbTBtX0aG9QWDjo1PySIiQwAmlWNxf7OQEs
uPNyfC0uJkOxvS3dXE3NzJCpdZMzi4mJGRotGe6C00E4tmV70/0Y55pqsrrq
U8aaM6abCibr8+FzqCm7qy33yKf/aEVAZTVHP3l7oKVotDFxtC2uR5QhaE/v
56cPtGT1N16mXzgArXK3PznYfHmoOa2bx+3mJw/xM/pbk/oFid18bo+gyMPu
XSBm5/Z9b6Qpa6yZO9nInWxInWjIGWvMGmlJ7G3LOrz/Z1iJCPPJ/e/0t+S/
bE8da0mZbE0ba0oeakoa4qV3tVxytf0MU3or+jJWmxsrhHrjdlne4tom9P3Z
09qGugfQKqNRH5mcqQEGq9wZG+h4+qIB2JlMYbl0Mc8om+Y3Vz94wgf9Wp/d
KMlIVStnRfDu2w+xddKgGJ/AbYVMj8wmQkdYcETm6upuZ3/4zr3E+mdJne1Z
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
gVk9Murx+qsvxzhg2/0ZDkG+bgUlV2ZW1qHyW2WX3gi/kiu0VirBZUIsN5qf
06dPSplt5fZNFw81px3kZRwTXDzfkH2+oZR25BffQnol0sr3/+i/PMu278o8
Mph5SJxxXJB+Aoq15Z5/Xurlce4nyLriePoXTRdd+cnHerjHhpMP98V82Mf9
qCn+vadph2vymfTz+3BrkcWEwLiqTHhKzIoDLSv2MgTSWy1SUjHxCJrwJKpJ
YUQQjOHUG6aeJrlWSU6DIZNR8wXerjNQ88IKg3ydUnLcNwvmV2YTnsMFwcCT
UK/41a6cGOQYLqSh+JWZmgK3mAkTvMisIMicFTk5ridnMPG8M8073OtcV13q
Ij9xvpG93hSw3Ryyw4uceR76sj7R4cD3kVmNjGra8Z+MP4nffhGmaQmSNodu
NQWvNgQtt8QMNnDZ7u9DkEFzOTjWeGmbV7TVdHH5UYLiGXfnWexKfdxGZ9FQ
S7n9yQ+hvQbCaEYGIwmF+dWkPzmfb9o1YlZK2IkdvVaDuSmSmLHA7WbbyC5q
qRnG17CCmh9W3qDbH2cznPIu31CRxR4+uOvn5c7yps8urZlxJn0LWTX3Hz60
cWO40H3X17YBdMCzouKGrbOjp2/44oqKnPg2Pnp014vlbe8WOLmgpDKn1BoD
mVzDodP8nU9u9lQuNnIXnrN3WplrTW5r7T4L7YFT/NTz+/8Bz3ualY6//95K
a85aS/R6K2etnbnMo68J/ebaQ/ufxXCc30P6FaSXejuepdufcDz1Ccv1lPNn
H0Z6XXA783ua3REmzU6t2DLotdbdFK7Z+iqF++okXiGHqDHfWz5hfm1Vwysb
RRX+gw5Ojffzm2sRAdxSU/OiPbf8/vj0XFZaMljCpfkp/6Bw0ospp0a6gqKj
APbVHTWD5oW0ktmRrnhuMqj04oI0iB0Gwjc62usfESrVmNRyFBXM3dzaMb4a
KXh7MNsrwOl4R2Xa+JNImTh8s91judVmWeA6K2CP8VPOHPi/2L+YlQ4ffXe5
LWuRF73QzlkUec4IXBc6fab5AYs9+Wz7d4AzIItBviMhpQJpCDxhRBCEiTz2
1l5+TYdJL1NLlzBWZqWgb+xWbdPI+FR5aZFaAobLFBYZJ1drkFHRK2q6W/NQ
okNyJcpIzgRO2txw5V4dD7DSrxuupKZJtyc6R0RXHrfheW49kR0UqDPjSWW5
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
FoHNNOgpcHBTycQI+fsVZEuBzOzRRbj4/xhJK/w=
       "], {{0, 0}, {100, 69}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 69}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                40910.5439453125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               62.919054635408656`}, {-41.98653029829742, 38.74689437998483}}],
             StatusArea[#, 40910.5439453125]& ,
             TagBoxNote->"40910.5439453125"],
            StyleBox["40910.5439453125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[40910.5439453125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                43063.73046875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.11823877741645, 
               90.57562050836921}, {-46.20934212347017, 38.74689437998483}}],
             StatusArea[#, 43063.73046875]& ,
             TagBoxNote->"43063.73046875"],
            StyleBox["43063.73046875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[43063.73046875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                25838.23828125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.77480465037702, 
               118.23218638132978`}, {-12.426847522088174`, 
               38.74689437998483}}],
             StatusArea[#, 25838.23828125]& ,
             TagBoxNote->"25838.23828125"],
            StyleBox["25838.23828125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[25838.23828125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                19378.6787109375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.43137052333758`, 145.88875225429035`}, {
               0.2415879534300771, 38.74689437998483}}],
             StatusArea[#, 19378.6787109375]& ,
             TagBoxNote->"19378.6787109375"],
            StyleBox["19378.6787109375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19378.6787109375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                21531.865234375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.08793639629812`, 
               173.5453181272509}, {-3.981223871742671, 38.74689437998483}}],
             StatusArea[#, 21531.865234375]& ,
             TagBoxNote->"21531.865234375"],
            StyleBox["21531.865234375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[21531.865234375, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{5.451201747997087, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
qbg8AyDH7W0HuDCK/Skerj72x4j+D++HVWc=
       "], {{0, 0}, {100, 66}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 66}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                11230.8037109375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 50.38452439799449}, {
               17.132835254121122`, 38.74689437998487}}],
             StatusArea[#, 11230.8037109375]& ,
             TagBoxNote->"11230.8037109375"],
            StyleBox["11230.8037109375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11230.8037109375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                38184.7326171875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{51.14620554103994, 
               64.06905703457853}, {-33.54090664795188, 38.74689437998487}}],
             StatusArea[#, 38184.7326171875]& ,
             TagBoxNote->"38184.7326171875"],
            StyleBox["38184.7326171875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[38184.7326171875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                44923.21484375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.83073817762399, 
               77.75358967116257}, {-46.20934212347013, 38.74689437998487}}],
             StatusArea[#, 44923.21484375]& ,
             TagBoxNote->"44923.21484375"],
            StyleBox["44923.21484375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[44923.21484375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                29200.0896484375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.51527081420804, 
               91.43812230774662}, {-16.64965934726088, 38.74689437998487}}],
             StatusArea[#, 29200.0896484375]& ,
             TagBoxNote->"29200.0896484375"],
            StyleBox["29200.0896484375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[29200.0896484375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 
                31446.250390625002`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.19980345079207, 
               105.12265494433068`}, {-20.872471172433627`, 
               38.74689437998487}}],
             StatusArea[#, 31446.250390625002`]& ,
             TagBoxNote->"31446.250390625002"],
            StyleBox["31446.250390625002`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[31446.250390625002`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 
                33692.4111328125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.88433608737613`, 
               118.80718758091471`}, {-25.095282997606375`, 
               38.74689437998487}}],
             StatusArea[#, 33692.4111328125]& ,
             TagBoxNote->"33692.4111328125"],
            StyleBox["33692.4111328125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[33692.4111328125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 
                8984.64296875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.56886872396016`, 132.49172021749877`}, {
               21.355647079293874`, 38.74689437998487}}],
             StatusArea[#, 8984.64296875]& ,
             TagBoxNote->"8984.64296875"],
            StyleBox["8984.64296875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[8984.64296875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 
                31446.250390625002`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{133.25340136054422`, 
               146.17625285408278`}, {-20.872471172433627`, 
               38.74689437998487}}],
             StatusArea[#, 31446.250390625002`]& ,
             TagBoxNote->"31446.250390625002"],
            StyleBox["31446.250390625002`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[31446.250390625002`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 
                26953.928906250003`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{146.93793399712825`, 
               159.86078549066684`}, {-12.426847522088131`, 
               38.74689437998487}}],
             StatusArea[#, 26953.928906250003`]& ,
             TagBoxNote->"26953.928906250003"],
            StyleBox["26953.928906250003`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[26953.928906250003`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                20215.446679687502`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{160.6224666337123, 173.54531812725088`}, {
               0.24158795343011974`, 38.74689437998487}}],
             StatusArea[#, 20215.446679687502`]& ,
             TagBoxNote->"20215.446679687502"],
            StyleBox["20215.446679687502`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[20215.446679687502`, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5460988028072107, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
               0.}]}], 
            LineBox[{{10.453901197192788`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJztXGmYVMW5Njf3mtw8WTUxogIa44JgEjWgEi/IJsgy+9L7vu/TPSszMCAD
iMiOKCKLisgNKhI3EkxMNCQaMdEoiUuCBASHmemZ7um9T5+u+9b5pg/tAEYT
RH7c72ma6tN1qqveer+tqs5cZvJX2P7jnHPOCX0ZbxXGpgnBoLGl8pv4UO0L
Oe0+q+V2X73Vbg3eZPoiLk7EPwv+8TL7fzmbJP+Jaom8XvGrcO/JLp/qqohX
ngnyi6585JazQLLZrCiJIAj0Ee+pVApdz0l9DPdG8J7J5uRvIUI2nRf5iPJi
huVFMZPmI8vx8UX74nRvXzyVwY2MjzyZzfDh0qhFJqaEdFS6Jc96enryLJtn
6ZQYzbEkXtFUNz7ivkQiweujrSxLJzO8AUmoz8WjyGT4t+FwuPhiPB6XO3wa
hX5ap9Phvbu7m0nTnGMDcOGVTGUAIPUqnU4X5l2M9fWwvJBLp3Kx9AAd8gP3
JvPM5PJorJaMhFVfNJLLCrytrEhNR3v6JcKIDqdFoa7ojXcKLI6XzqIAVpkc
B6ovHMlnBpo9dOiQ3GGLxYL3XC4Xi8VkQJLJJAZCuH0WcuTIESoAAa1WS2V0
AIOI9seF3EnY39XVxWcczOnrE3NZSQ1FTg0Jv/f/fhD39ESi/lC93moFftVK
FWEuCjn8l0kkUU1IZsV0Lp8T9XptJpvwBpzBZl+GJRJCtFZbCaYlUv0DCi6C
ahw3mqz+/n5AhMK0adOoP7iCd9ILAgoVUIhEIkCPrp9eqa6ubmpq8nq9YFdj
YyOuKJVKe5HoJVGpVKiGaTUYDD6fD1dQUCmUwUDdzOkz1ErVokWLXC5XrVIR
qAupNTqfv06j1esMetyiVqvdTleoLqhVawIeb8gfqK2pCoXqfD6PyaKvVlUp
dYqmtkaNUW13WkINwarKcoNeazWavG5PVUUl+oAumUym5uZmNBUIBNAmAHQ4
HOhDa2srk/QO7zabDX2rq6s7vToICmEWCBz8Iqjl9/s1Go3RaMSMNjaE9DoN
y+fqAr5oNIpqxD2H0w0E7A5Xc0ur0+XB5FvtfHRavcZg0Hk8LqvFZLfabBar
y+E06g11/gA6X1tb29DUWFlVA7QlEHQBv9vlcqBejaK2ua3V6fWUV1f5gnWp
TNpg0gfr/OBLwON0u2yAC2hIveICoMAcoEf9USgUYBF9BejAJWCIKcNH+frp
EqvVCia7JcGvoydej6un+xhmNuD3NtQHq6sqGhoaKioqzJJodQa3x5cTWVV1
rUKpNlotBqtRa9KEmoMKVbXRoGtrbtIoal0Wi0mjAzEcFiu45/F5gYbZ7lDp
tChqNbUAYdasGSCzx+ufMbPE7Q/6gg0KjTZU3whYystLgZXDatBpFel0Eh0D
DuASCsABU4wyOowpQIfxFSkpiEeDgqacXpSofTKVIC1wgFoBOsw7jHbQ58a0
hnu6gBhBii6BeFabA/oFq+Hw+DE62CqDy+QIOjVGVWNLEMhVlMxoqw+6TIY6
h7MtVG/U6hZ1LFSqVVqjweB0uOv8Fqve6TQChAUL5rvd3lqFpr5htkKpq1Vo
GxpbM2mxqanFZDLo9ErA0NRYB5Kjk0QVj8cza9Ys6g+wQqGmpgaAowDyowAY
YeShquAeTNZphAuuFr+I9gEUCnjn3bCY8tkUE9IqZXVTYz2oAkFXSZVsdid4
pdWZnN5ASUW1FybIZlRbNWaHSa1V2G2mkN9j02m8VnO9y60sK2+oCyprFb6A
3+p0GF1OncVgtukDdU6rzajRqHQ6Q32oWaU0ejz1DrvfaLBp1EatVl9fH7Q7
zAajUm9QWa28V+AMLBW6UV9fD73DxKG30ERcwTt5c/gd0Ay0xFhOr2Enx5GV
hFpGAINCTuCuOpmIhYIB+CAykugqzSN66PK4YaYSybTXF0jiViZG0wiQxFye
hw6IInggAtIiLkJAlcnyWILlTTarzeOyuGxo0mozwAOCJLwfeZZMcK9n0juc
Dh8KSqUal4VcCp7T63OgTRh2gEDdhkWVh4BZBoBUluKZATntOjhIYLUGhXnE
dmIypo86iUJVVRUK0MeysjIKGPFKpJJUMxmXwkgpSEj2xyjwhntyez1QQ51Z
D19gc0CDnGgnm81RbJBN5UOBJqvJKWTyFouNScFauK/H6XZgTsnfEThkNGAu
mKQXcL7FNhzeEIFNR0dHb29vMXr/poAw+BVytSTgFTrTE+6jKDQYapCTDFSD
XYVZi0Z6KRZNxPtbZzfXVPEZjEYSFLna7U6v10+tJZNpGjVGR1EumgeXNDot
BV0ULNksdkVlLZpM9SepEXDY4XDRT6cznPAUKlOWMWgUCP6pnWIh9E6s/G8K
7CFAIPMIfSeeoH/9KcHq9KSEPEJxJDtMsqtOhy2dAiwCyyHByZq0Svg7fkOG
ZZJclew2j9tTF0tylcZlXzCEoB12mA+q+xgCV4fNHgw19fWnBqBIpmxWs8Ni
5m0id0qBmSKwslrtSWRDgkTaXB5zhL4hyKE+g2mwFXIEBUwAF1wVEUm+fhp5
hcZpvphEZrIe/bFEUmBJkWdzM8qqBDnZyeehfeVlJdKgsiyXFpMRt0UXcjqQ
svHaWV7VZgsYLN5wUoCLRXxfoVGjBQQM8VgUY4Zi+m1OpyOQ46E4fiuFph12
s8dpYrmYmAUUPBkEDx12Tx7pkpQxoQ76eWL+QpjA/RX7O1zERwwNHT69vILN
QYP0W0QtsCglpa/dcaFtwZJwPNsZjiIwEMRcwOd32cz5TIKl+/lLTM6uc7mA
dpolDguUKltsIZMzFM0zKHZvPq91uwGaxqBnOVBEzPb0+C0ug84NxQIUmIJY
f6SlOaRSzERRFKDd8Z7uo01NDfCGIFE0xuGKxdMtLS0gkswT4AZzRGVgdeK4
TiOjZIHBlOMQaCK3V9LUHo1kNDZ/rcFu84a8wUYjYiuX02IyO60m6N2cxoDL
qHIZau3aqkaHo8XcXKdt0ZU5TSqEVK1VGqfWE1K4/a65c2rtNp3D7vC4DRq1
Xaub7XK71CYrwopAh06LpMdvt1n8frvVXON2KBtDlsryyW1t9VVVFU2NbT5v
q8XaYnc2IwOAH2QSt5mkcceOHSsGBFfwFUCjiBFlpKu0LnG6gMJPyI4Y1EUZ
jWeyuYxELau32eBpLtM5TaE59z7y5EOPPTt8+FUmleKD/S8+tDx08LXH9v92
u0dXfsUFQ9vtS1c2bntqyx/X3b1Lra2/6uYpt3n8+qV3edas/s71P4JejR83
yaOxz3M0blyw/IcXX2nR+t/c3+WqW7pq/ZNPPLP3oouH2zRlf3x+67ZVQbT5
yq936lS1V115k9O15O6lzzxw/wubNu40mxyx/rSY4/Qk4aY1n0NIj3FEIgMc
K8aHj6WwXCMrI3kBcmf0bVwS+aP8Ld0C8EnT0RpcuQxdoYyQiEc7WoO/VBfS
t64sDS2949Hf3vfU60OGj9aVzUq89ejuldOOvujrfXOlsXzstcOuW+x/fKFr
z/YVBzeteL1GOfu7N068ob31lnXLzNsf+erYsfAKE26+rXFmYI1x8UOt666/
6BpTte29vycNDVvb739jy7Odl1w2zlM+7ejPV7+yWnloV9M/fr9NW1E2dOiE
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
tL6sdNR44bw9k7+CqS9u9pPI/wGYKh8q
       "], {{0, 0}, {100, 66}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 66}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                49589.80859375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 
               53.4444504557041}, {-45.051404393355526`, 
               39.904832110099505`}}],
             StatusArea[#, 49589.80859375]& ,
             TagBoxNote->"49589.80859375"],
            StyleBox["49589.80859375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[49589.80859375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                12397.4521484375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{54.61893971467687, 70.60171726592507}, {
               18.290772984235748`, 39.904832110099505`}}],
             StatusArea[#, 12397.4521484375]& ,
             TagBoxNote->"12397.4521484375"],
            StyleBox["12397.4521484375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[12397.4521484375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                42151.337304687506`}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{71.77620652489784, 
               87.75898407614605}, {-32.382968917837275`, 
               39.904832110099505`}}],
             StatusArea[#, 42151.337304687506`]& ,
             TagBoxNote->"42151.337304687506"],
            StyleBox["42151.337304687506`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[42151.337304687506`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                29753.885156250002`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.93347333511882, 
               104.91625088636702`}, {-11.268909791973513`, 
               39.904832110099505`}}],
             StatusArea[#, 29753.885156250002`]& ,
             TagBoxNote->"29753.885156250002"],
            StyleBox["29753.885156250002`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[29753.885156250002`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                34712.866015625004`}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{106.0907401453398, 
               122.073517696588}, {-19.714533442319016`, 
               39.904832110099505`}}],
             StatusArea[#, 34712.866015625004`]& ,
             TagBoxNote->"34712.866015625004"],
            StyleBox["34712.866015625004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[34712.866015625004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 
                17356.433007812502`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{123.24800695556077`, 139.230784506809}, {
               9.845149333890244, 39.904832110099505`}}],
             StatusArea[#, 17356.433007812502`]& ,
             TagBoxNote->"17356.433007812502"],
            StyleBox["17356.433007812502`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[17356.433007812502`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 
                19835.9234375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{140.40527376578174`, 156.38805131702995`}, {
               5.622337508717493, 39.904832110099505`}}],
             StatusArea[#, 19835.9234375]& ,
             TagBoxNote->"19835.9234375"],
            StyleBox["19835.9234375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[19835.9234375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 
                9917.96171875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{157.56254057600273`, 173.5453181272509}, {
               22.5135848094085, 39.904832110099505`}}],
             StatusArea[#, 9917.96171875]& ,
             TagBoxNote->"9917.96171875"],
            StyleBox["9917.96171875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9917.96171875, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{8.451201747997086, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.39075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
7lORzJjK5H5O8Yu5c/TMm+GnN/SvXNS/+k7sq+fSXn0775WzpjPncs68jb/8
RvXnv7RHKn/p5s0zV65N33934dqN2c3NwIOHK1u3vbfu9N779fTtO6d/8fN/
3Nm5duHa6+e37v3V9/ZGEy1yc6eOmZVTAcQO3nJS7DiNOF4W4qeBMwtJ9pEE
3C/IOVDuASU+w5rCMhbpnoFsvDexXG2fjPYs8NIbEWOzwtYJ2iE0qTHK44sp
GD6QVoLmtSps3VhO3YHkY+FHRp9PKxPn9QIJkWSAIC2KLBx8LrkUdIrK0S03
lXKSC3VuSPsBqXteQo7GeIY58UegTMuNzXJmgr1fDOvYQGWBcrBUlpoF2saF
ZEUt8/GAgl6U2XqjmBPfF3x/5gK5dCVpZSN1/WLyyY0YsLWNRNhdvpS8ciFv
7a2iv/rKHo7omc27Sze3Zm9u+bZv+7c2fdtb3jt3JrdvD9/amgDoxMi/3Lnz
yu0H56/fv/Wl7/1CT3TIiCmo8sCUhI4pSDtSfAllUVoPJsx5ITMrJealxIdm
VJTmsUh6UmVv56SUqSyjenyak1yFGuqTj4wDJeMkNaptA2q8kZN2GHZTD3t1
tgZBxjHd4cG9WVXwUZJzVJ9TJs8+qgW+l1yKWbs1eKfGXMpLLQSHBHoGJIRv
HY4gew9EuJC4w5KsatQ+wiNmARYwKLXsEwFiCvIh8NtdrIDRyehFqa0v0ln2
XeEPpy/iC9eSljeyVjYy1i5HrVzRLV+JWbgay9qlnJW3j3z+a3s44q/eus8C
BXbn9tzW5uTtrcm7tye3t8e3AKutObH4u3funrnz4NyNB5e//L1/hd+CkvPs
MzLXigAfh8Qrw/2g/vjUGte5xHX5+E6QgX6ZY2GXhe6azjEZTo6qHW2i7Bp2
m/Dx0+sAOrmlCcmp46e1RtLjka4OftZx2FWaW9WWSm5qIUr0PJ9aLTO1xdPd
qvQiJPmImurZm1EpdbTp6bZwUPTZlUGs5qT5y0AqEvJHhYlHVBllOmur2uXD
PMufUKykeV3i3BphVrXWPgF+JcioV1ibo939CmsbkByVtV/laBDnnYDdWNeg
Hq+U5JVKyOGwvB6lrS3B2c76VVa5Eu8LzW1AbbUaskFjrJXlNstIr4D0AR8T
2kcjqT5OdL4spVhlbAQpJKDmP5FY4eP89IawtOKw1FKFeRDg4qVVCzIrVPZW
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
oAcXQTdxHX6x8xTCnPyPYPV/ALha9gU=
       "], {{0, 0}, {100, 70}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 70}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                30963.928710937504`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.39771862876363, 
               103.90375994314346`}, {-25.09528299760641, 38.74689437998485}}],
             StatusArea[#, 30963.928710937504`]& ,
             TagBoxNote->"30963.928710937504"],
            StyleBox["30963.928710937504`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[30963.928710937504`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                41285.23828125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{106.3245101740772, 
               133.83055148845705`}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 41285.23828125]& ,
             TagBoxNote->"41285.23828125"],
            StyleBox["41285.23828125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[41285.23828125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{2.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
               0.}]}], {{}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
CjlmW/sSKxKe6nRivZHGUBLtD/Nchu8ffWZX5YpD7CfylSsLRLseP3YfzFew
Dl68yb9quo46sROq4q/DihkI0gzWrjnvLu0Qz+rBjU2v6zjX7YlL/RG2y/u8
rk9qcMnmXC9q+5hur9Qf6rJ41kvadVbkpe4BksmqiSYvWAIbWIp2k+UpjYrt
scrs7oERZKfyKjUCzvjSZV7AdMYKRFyMSvw0liS2RYlhUGv2q+3Ox+r2Cn5x
+uJvT9wYYf/2rv7B9ajWPvQp+R50bwF7GL/Mivf6Yc37eVdHsP0fZFmt4BY8
Jmva1s490KNDEQk0hxuPhLCBRKMvyHfN/uAIZPX4QfaTecpVx0V7VxyDuZ2p
fK8JsrqeZbWD9/ViUDQ9r5uzD4/ah8cdq1V6pdG2V9x1ftyumTR3zDs3SHTd
U7aeSdsmiU437+yYML8+YjtIV3XP2J/iSDrn3RfmPOf+OHGUo+qemlklk2hn
ZjvuTL9jiO3iDVIMwVpHvCEMWK74UXbbSRp+v7qTaw43emA7v6i2Wx+vf036
88JrHxz/3W3u7+90P7gORepHn5Tvqe/7nNWfrJf41w/r3s+7NoId+DXlvoP3
Pc4ufELWtF3NPfgPVhFsINnojfKcpvuPvLSt6rm9nBePqjbmiA8/kvtA1/sc
yArq9jfmL6OObxVaYW7/6qz295zdIlAeZqvP6M6vFsnPu3w7KeJDNPlOgXqb
SL2ZJ78677lm9GzjyOHTPXx1KaejgKy8BkunVLtP3bufqz5JV9Uq+i7Pz29X
S/foNVvYgtPC/p2MDuqsm5wCUP8wXJFcPjmPVDc871D6wOkpLy0F1A7Tk/Vb
5f+a//qv839/i/vh7d4frEO1DDT+H1m9fgc7eIPy7QP3PckqfFLavFPFPdSt
v49AYtgReO2NwUy9L8FyOb59dNWWqpU7uasPqLfDHueh3If1N3iqf1vW7Us9
ztfrB59nMbdK5cekmnWt9O09naqZqUMCxQmRJkfbtYbD261s75+aHZyc3ado
X8fmHdN0FbLVp5nqoU8mDyj1K4XibTJVPllwhi7sv/PZOhXveR13tYJ/kCgo
kA0SbM6ScATqH9ginZDQK/nEs1NGfRiUzAXxgZTaOfdU/Sblv+a8eSP3j5/x
P7zd//31KNxg4wnFnrq+AtbFf7Dq+FWW1bkblO/sv+8pVuHTkuZdSv6RLv23
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
/hejLEO1
       "], {{0, 0}, {100, 64}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 64}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.39075018208302986`, 0.}, {8.451201747997086, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                9882.700781250001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 53.4444504557041}, {
               22.817412607023712`, 40.20865990771472}}],
             StatusArea[#, 9882.700781250001]& ,
             TagBoxNote->"9882.700781250001"],
            StyleBox["9882.700781250001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9882.700781250001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                39530.803125000006`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{54.61893971467687, 
               70.60171726592507}, {-27.856329295049306`, 40.20865990771472}}],
             StatusArea[#, 39530.803125000006`]& ,
             TagBoxNote->"39530.803125000006"],
            StyleBox["39530.803125000006`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[39530.803125000006`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                37060.12792968751}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{71.77620652489784, 
               87.75898407614605}, {-23.63351746987656, 40.20865990771472}}],
             StatusArea[#, 37060.12792968751]& ,
             TagBoxNote->"37060.12792968751"],
            StyleBox["37060.12792968751`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[37060.12792968751, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                44472.153515625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{88.93347333511882, 
               104.91625088636702`}, {-36.3019529453948, 40.20865990771472}}],
             StatusArea[#, 44472.153515625]& ,
             TagBoxNote->"44472.153515625"],
            StyleBox["44472.153515625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[44472.153515625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                49413.50390625001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{106.0907401453398, 
               122.073517696588}, {-44.74757659574031, 40.20865990771472}}],
             StatusArea[#, 49413.50390625001]& ,
             TagBoxNote->"49413.50390625001"],
            StyleBox["49413.50390625001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[49413.50390625001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 
                2470.6751953125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{123.24800695556077`, 139.230784506809}, {
               35.48584808254196, 40.20865990771472}}],
             StatusArea[#, 2470.6751953125004`]& ,
             TagBoxNote->"2470.6751953125004"],
            StyleBox["2470.6751953125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[2470.6751953125004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 
                29648.102343750004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{140.40527376578174`, 
               156.38805131702995`}, {-10.9650819943583, 40.20865990771472}}],
             StatusArea[#, 29648.102343750004`]& ,
             TagBoxNote->"29648.102343750004"],
            StyleBox["29648.102343750004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[29648.102343750004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.644], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 
                39530.803125000006`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{157.56254057600273`, 
               173.5453181272509}, {-27.856329295049306`, 40.20865990771472}}],
             StatusArea[#, 39530.803125000006`]& ,
             TagBoxNote->"39530.803125000006"],
            StyleBox["39530.803125000006`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[39530.803125000006`, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.39075018208302986`, 0.}, {8.612410779315367, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{8.451201747997086, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {8.451201747997086, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.39075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1: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
5tUODs25PxeTBiMClzYKEWICXECSSNKt2T696jerASjD9TwOWOGj5uSGplt5
8KrIFq2AYUKcI26LI5bfsvwloERog980AyXMghayABSRiDbStkyO6lJchyKV
24elhMx6c4KvIIVoKcJiivkExyU4Js1LTVouzgxEinSDJDRrdEYEH4AT5sNF
KZoX09TQrJLaqVANzECsOBhl9JZhIV1iE2YuwuUzXG+qj53NibOFQrQAtcEE
YZhwzqQN8lyIRlT91twhiNIoDASyuRBNJ7ReH5ev17P1Sn9KXBhl+M5Krl7p
i7J9oaLYaMoZQ01oyGv0EKBQLa8CcbFyWwCCbJekh35SdiBVHR9JhImd+kjO
KHlkt+ZztTRhqh5NriXHHY3SkffxXuShAvRquPVeWBwHp+Tn7daqgiAY4+2k
WG3UhlrNcptptRtGO+FgIwvvU7ptrlWVOk2tpyx2GHSjzDRKSqtsTNeLrayy
uLSgnZKpbw0urPbOrsxtt+e123PbrN7pZbpviaF8u6Vtbv+gPLC4PLhoJLtw
WXbBt7IL/gptfsGy/MKhvvl6Y3rBrOnF3GBpzmytd9EQTX130ZylA7OGCzNH
6LlLzMG/G2xVldlLrLnLqvOWqc2W3mgiLusxVQ+RypjulTSPRKwJo/ZdgYs4
LlLDUW/sO5UcxankXG/ffhzqigCBZFxCbg6fyfj5UmMVQEGpqBBnNpfhY6VQ
UY8zVr1oN8lavSSkkdXSVJLtvmtW4nMNNX8SuOcjPrf95od8NR/yTvvDuyOf
CNV8wtMemtMQnfdv/7r+oV/sfOSJl1asemXN2jNPPn7sseUvPvSz5//9wXW3
f/meu0NNP35i9EePj/34sfGfLN//k+UvPvjo/geXj/90+e7vP/TMXb62ZEff
P/9s/U+e3PXDR3f+dOVBnLP80ZdWLj/wxEP7Hv/xrjZ//8zA4BxPf693QEjJ
JHWNiggTakBU/KTSBTEcoFxxqkmkkoNR39h36kukUKBFdB30Pqw5BRZyHH0j
YkBXQatIkS2skIpBwoAbNxqQeCp6oy2lNHhv5KR8mFaTvNGoQKS0SEfpbCif
DRWUFqMQY3rrBiE5P02FeSYiiGHe8LOliNBfs6jYwHWEetcsn1iz+tiqtad/
9KPx5b84/ujDL6976tS6Jw9uXP3iJz9+57Taxl+s2v+z1Yd/vurIwyuP/WLF
K4+sOLZ8xZHlTx1Yue7Qhz56153faPjpY9tXPnP0J4+N/WzF4Z+tOPLTRw48
9uSRJx87tPHJ45m7Fy5KinRa1ZpMhBg5ICC+qF5RdUqCrqEBIst7RQSfyAck
h3srjoZIBLSwij5sCsfRB2j41lUhUqYLkroTuDqAYgOkygFapaT0QoBRMgaw
IhoFZW628sECcna9SQN1h2hNupiW+KSESWRjYGICgiNs1oiZVsK2omYpoA7V
CpU6jp6Wy0fZxm/Oe/Lh/U88efyhR15+YtVra59+a/mjp9c8dWb14y8/s/bw
Z/70L8KBnuVrDv/n2hOPrJ5cvmrysZVnnlg5+eRTp1asPLph0+SffrzGF5zz
5OoXVm945T+fPPj46slHV556bN2rT6w988ijR9Y+cTz19d6BtErHVFiE46OU
Kz6KeBuS0cDhWAj9V7ECOGJYdcM9ABFCCvpKzFCiOo4LJP4SAHlS/lJxUIlq
JMr74E55RHwlTkqRiHdCTMz5Cmo90FCAEsgVOn3e3GCgSCdFqUGH0HEwZxZc
FJyB9vI8qYVqcINGnaZPU4xvSvpd3Lc8RrlGNKI6ndbbg9SaVZNrn3vjFxsu
PbFlauVzUw8/deGpdRdXPHVi7eqjn/usPxZftGL95GMbzj3x9MUV6y4/tfb1
VWsvr1lzYd2aM+ufnvzYx7zJZHbNmqPr1k+uXDO5bv2llesvP77x0opNlx57
cnLtE6capxXySYuPWqJXLvm1ik+revSKQ64IKfJVDF8ZWNmeK1jBvSDEywkD
wQsdCDpqyiq3jJgNFSVpugfRwcdy61C1fURNa4j+8EWV5vJQR9VstED2QDuL
YcbqqBotttVWBnuX0yqYAI4DJaWjLLXZXEajIxJmBHaN3MHhLSAeulGjl2vM
YU9pma+6zFNRvsGpcbkvSjf5B1Y8cXz981OPb3nrZ09ffGLLrx5dc3Hj1qmn
N1xctfLI7bd7PIHuVRtPrth4fuWGC6vWX1zz9OW1T19ct+7C+nVnt2557Y8/
XBMK9MKEn91yYd3TZ9esObd2/aVHgOTzUxufeXPTyrNN0wZ7QxwXVa0YKLpq
1WilaZgp26oFKaqY/ooVqF7VKwPGSIUYEBuMq9xeRQdjHO5ekvcXMXx8NTJ9
KQ5C0MFHNs6xadHqLiMKL5t9b96X5aIMHaZhX3A+aocNJolUFCRquG1ICnKi
n9IiDB3KSz0lusvMJwUpoZpeqeyEVDlgCEFLDFoGmTtXrHJdBSYgJHJ9iYWN
vjnPbTi98ZnXV2+6vGbzuZUbJ9duuACgNm/+5cYNk3/26T/3RRs3bDm2YfPp
DZvPbHwGchbyzCbImU0bT3/0ox6fb8Gzz57dsOEkjkCe3nh+7aY3N27+1fo1
53ZtOt/imZ9NUXSsKIZZHQboQVZStuuqlqfsMG2YoXYtEUanECoWw5SUkTFe
OkrQGJmxBB0qQsPblDsraK91ClGKqhf06XY2krt3zpJCMI8Mgo0xdleZSgta
d7mQFNg0UgZxSfuwGRLNAGeFKTY0wM+08j1GLsUhClRqpSW1JLcCSSZJR4jc
hnU1h7LqhhWfziezfck5rYFZ258589yWtzZtfmPL8+c3PXv62S0Xn938xvat
U1s2n/3UZ/88mMxsff7E1q3n3y3PPXfuE58IhEKLt217bcuW01u3noVAwTY9
86tnn53asu7svs3n2r2zs+kcHcsKEUYNwE2VLABVN2x4qgQcv0IOOo7LFQAF
ZOByrTabibGQSlcVrZAiFYPhnhG01ztpIZ9ilU4DWA31VPKBHBUuMlHaaLcK
SU5qN/MJvojYFxXKjbYeIEHtJrHC3S5RvDZy3oFUb3twwe4tF0afn9q6dWrH
zte3bj+/fdubO7ZO7d4+9fxzFz5z+1ejybbRHedHt/1qdNtbjrxBZPtlRy59
+pOhaLh/1+jr259/DR8h27e9jp8a3Ta17ZkLE8+d7/DNI/XPWF6IsDdgVTWI
XhGsiNyAFan6ZmS5nlSZgA9QsttLgMV5IEIhckHxIOjgYz5SBFZyh16IFyvd
JTpCASghyWutBrDiWzToFeIXXJmR0jQ/95tgVbtUrgMxE7LJbFeob3zr5bHR
qd07p/bseWPnzkt7tr+1Z9vU+I6pHc+9dutn74rGunbvfHP3jqm926d2j07t
3YEz39w7+sbunZf3jAKrQDy8eM+u13fvuEiO7Hh91+gbu0an9u2e2v3cpQPb
L3X7F2TTBdgg8i9Czt+GlfGeWCkNKuCCXqEDG3Q7OA7oAJGrbOjgI5vi6QZR
7TLpFFPusuWMJKYIJQBWsEGhVeebdCohwNsDKyss2SHh5rDylK3aZXLdsBjT
sgl6Rjj70vY3X9wzNb53av++18d2X9y/65cTo1Mv7pras/XyHZ+9JxGbMb77
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
Z1AdkO1a/R11hv8H+35jBQ==
       "], {{0, 0}, {100, 70}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 70}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.4116533139111435, 0.}, {4.35360524399126, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6789999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                24363.16171875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.727704872310866`, 
               89.51448453166718}, {-12.226425417366904`, 38.9473164847061}}],
             StatusArea[#, 24363.16171875]& ,
             TagBoxNote->"24363.16171875"],
            StyleBox["24363.16171875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[24363.16171875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                22332.8982421875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{91.85744536649668, 
               118.64422502585299`}, {-8.003613592194156, 38.9473164847061}}],
             StatusArea[#, 22332.8982421875]& ,
             TagBoxNote->"22332.8982421875"],
            StyleBox["22332.8982421875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22332.8982421875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                40605.26953125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.98718586068247`, 
               147.7739655200388}, {-46.0089200187489, 38.9473164847061}}],
             StatusArea[#, 40605.26953125]& ,
             TagBoxNote->"40605.26953125"],
            StyleBox["40605.26953125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[40605.26953125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-0.4116533139111435, 0.}, {4.430862345229425, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{3.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {3.4512017479970867`, 
               0.}]}], {{}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.4116533139111435, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzle1d3HEeWZp/Zl32cv7AP+zA7p3taUre82KToQNGABh4o772vQgEoeBCE
RIregFYiRYkiCXoSBL0DvQfoHQjCl7fpM/dGBlCCDDV7RlLvkSZOIhGZGZkZ
8eU1370R9b+Utvnaf/nTn/7k+p+wm6/wTXI6Ff4F/woH+VaXQWfVqGdY3Rqd
xvmu8n/AybfhTw1/qC68plAUhSscx8GeIAiWZfEZhmFgT5IkvpRMJjOZzOue
g1tmb8R1/ITXFXhXPB7P1rPns3fRYsG9E3jYGFRBm8DxAs0L0FHYCIanaJaH
Os0MDfbjZvAXSWZgDxvJokNe3DiGhX9UOsUQGYGjUWOeYUkCTiYT5Gij15R0
Os3zPCsWOIQ6xg3O4/FCPQvC+MKPlewZDDvcCI/CdU4s+CquQ3uAApDBN2Yh
grvwZ3r+/Dl+eBZG8QMhrHiaYBkKYwXgAEQYKwQaJw6R48WWTCadhPMUDJ9k
AaVoMsOKGAwMDeJ2AstglHgqLXAURyGUMmnm57HCncnKEi64n1nxwAPEI/oB
VtlDjElPT09ra+t46H5cQFTC4fCGDRvw4Y8/xLJly8xm8+XLl/EbU6nUqFyx
FM9h0UIDwkDF0yTGIRqPYaxOdhxx2OyXrt6C14cTJDOGJ0HCTgiNBDGe8cgw
lYoJPHn7ynmTVvXg3mN4Ck2h7XUFxovlHAY7PDwMuGURgBG97hZoDPACgLDH
7ROJBOxfvny5adMm/Mwff4IsVsFgcO3ataDU0CAUCmUfiyv379+vrq4OBAL9
/f24YzRFCAyJlYvjGI4bxQrjQLJj4iDKTDIa6n/Vt7BlWTSDbkjTQiSO8Ewk
CdwmHBoC0YP7ACiBS9HJIJGILP50KQgXXCUJ7rVgiQW+3bfffltTU6PX6wsL
CysqKhYvXrxt2zYY786dOyUSicfjkUqlFosFKi6Xy2azmUwmaKwdV0AYnE6n
TCZTq9Vw6HA4DAaDUqk0Go1wCc7AebhFo9GUlZXBSWigUqngDFxVKBRwFQ7h
kt1uh+fAIZyEu6ClxWw0aJROq8lus6jVSpVKYzJb9WabRKk12d3FEnltXcO1
G9fXr2stLioI+L12q624TPXVrsPDMdrqrFy2cn0knvl25x6TxVxWUrpu7UqB
Je7dvbZv9zaBjAh8KhkZqqoI3Ot+ikHnhZ/WRWyuu7q6VqxYsWfPnkMHDq5b
s/bWrVtVVVVrW9fxokZ4vd54PLpjx47KSv/SJZ9/+umnDQ0N0ABwg2FZLDbo
uc1hL6/wAw5wRqczmM3WsjKp1WqF4dvtVrfbaTTqYZQGnd5ustmMVq1Wr1Sr
AEW4USKTwigWLmrWGfR6o8Hv9wNQpaWlPp8PvguAbzLq3TZzXZW/usJvNprg
E7g9PrvbJ9foA/VNGoPZYrVfvHhx9cpVLU2NAk2cOnEyUN2wdOVGkKslK9b1
9o8MDYcXL1mKRbdt985LF88d3LfryP5dAEAqNnjt8vkNrRv37ztCZJCMsgKH
N37cht1KKDh8sfP8rZvXGZo83n4k4C+XlJVo9brWTRuHwsMen1smk5jMOrPJ
UFZauHLp55s2rpeWSVwOZ1FRiU5rMpkdZXJVmVJeWRfQ6Y12m7t1zSavq6K0
WAqgwb0+v3vOvE9sdpPHYdfL1IYyrbZErZCpjVabRKrUGIwqnT6/uMRd7pco
4FC/ID/ParcBhoWF+SC5Xo9LVlri0Busao1dZ1SUSkwGo06nU6o0Npc7UFdf
XhWwOx2nT5/+YvMWtVxhVKvh45lMFrXGkCGYhc0tNMNdvXr93Llz2OqCYOze
vbPzwrmvt29j6IzA063r1oD9qaqqBu1OJsHEg1n8IVwAFAgM7Lu77nz26aKR
gf5Nretq/P6HD+5V1dZ8tnzp2YvnNm7eYLUZGxprDu1rW7a4pawo/8CeXU67
w+fxVvirAavVqzd5/FV2v3fx6mWFpWUF+SVeV5W0WK5SaOtr65wua4kkb8eu
rRazTi2VmhU6r9pZaw+4HeUzc+dX1zdpjRaFTqe3WmEPagxYwXOLSorzCvKr
qip0Oo1cJjFqNU6DuW3r15/WNRpUGq1SBSYCNBckExpL5bLy8vJLly7VgTDV
1A709K5duWphYxMI/4kTJ8B+goU8fvw4mBQwdqBHoCDQGJSora0NoHv06NHG
jRvBC586dQqaIVYwBhT7faFiWRpX1reuhe9ugv7qdSDzFdUBd0V5qbys695d
uwMEXwsWw+OwNtRU+T1OkCuNSl1cJNFqjBqNRaJQ55cWw50gKg31zXNm5ill
2oryQHFhkdmiVyhLTGbQqjKVRKIuljkUVvl8mVZlBJRyFxQoNHqlVqc1mhQa
NbzYYDHnFRW6vS6FSg6mUaNRzZ+XW+H1AFaqEklR7nyHCek8mDIwmIBVmVQC
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
rdQ7vH//x8TyuuqPZ0yauyCnubly5vQP3nvz/zy+c52FIIUdjX/BOCgNipwF
U+uW1Lw7+aN/+/sb4AchWILvkmFpdow88D/AivvFWMVeCRzQ79TjJ/eWrW8F
rE4f3P7w6kmBRtR38bKNocEgYNV9bveFaxeiNIrkti5eJ4R6zh3Y+uDhU8CB
zQgbVywXyNCRfV+dOHMeTcgxwvqVGwYSCQitgb0BS4sThNVuKSqaW5CXM33S
W5KCaRZtwcn2b0GueB6xuEBDw60Hj00u77+/9XdfbWDC1Alz5uVs3rzik2nv
T53wdmTwpZAhxmN1oGO/2We43H1xSu6MNz967+ajexnRQaaBQjP0b4UVG237
crXLrHS6LGVazcGOwzcuHP4sYDdpNDqdzVuxMBaJCyMPbxzf7qxyKy0uTZmt
2VUtRHuvnNjlLq8slhsVpZrGCj+bGLh09rA/UKs3eqV5Mr+zIkggejqUSGGW
qFBJ7Xb9hPf/Y+fW1dLC6WZNPsJKSKXTYQi4I0ikBavX/8HkqVaf+x9TJhQU
z/3yy9Xv/P3fJr3/Zu8T4AwcSlWJKGTINLjWWw+u3n/ZNWnWtGnzZm/Z+TXm
VygvI7KsUUh+VazuXTgWsOvQtIVAr9i4oXXLhhMHvq6yqshEYt++o+VVi1KJ
tECPdJ1tA5M7kuKunu12y00CHT6xd7PHXwVydfLYebtWE+l7ePvqKZ3JGomx
XVe63RbPSCYTE+0VwbCxRNxgVCuk+WtWLLx385ROOrvGqzm4eyOdGkJmBk3T
ceF4qjxQO2nGTIPT8eGkDxTq0poaT8609+fOmPT47i2BYZPh6BhWBIRVjJA5
efnYX9558/3JE5evX5uiSWZstovLIvKr2isu1Hvom83K0nkmq05tt369e0fX
lZMLyy0gV3q9XW30oszPq7t3z+y2+91qh9+o8pTrHMzQ4+4r7Q6vf16JyuOs
rHQ5BCJ4/uT++oUtSrW9ZG5phauyNxIBucowOOXB+ctdZr2sNH8Gk+ozyHN9
VsmRvVs4ZK8QVhBPsZxQXlXz1rsfqI3Gj6dPKiyZV1g4e+6cj6dN+uDcsXaB
pDAKRBolOmiBAqx6Rl7MK8nPmTPr1r2ukVgEZx7TROY/iQr/yyUTFLjkoX3f
5M6bdfTCBXjdhWN7rhzfB70KhTKfLd9CEUC7+3puHjt58Sz0hiGE7au3UAMP
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

       "], {{0, 0}, {100, 54}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 100}, {0, 54}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 
                24974.2173828125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.461672904455895`, 
               50.3845243979945}, {-8.204035696915383, 38.74689437998488}}],
             StatusArea[#, 24974.2173828125]& ,
             TagBoxNote->"24974.2173828125"],
            StyleBox["24974.2173828125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[24974.2173828125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 
                45407.66796875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{51.14620554103995, 
               64.06905703457855}, {-46.20934212347015, 38.74689437998488}}],
             StatusArea[#, 45407.66796875]& ,
             TagBoxNote->"45407.66796875"],
            StyleBox["45407.66796875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[45407.66796875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 
                11351.9169921875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.830738177624, 77.75358967116259}, {
               17.132835254121122`, 38.74689437998488}}],
             StatusArea[#, 11351.9169921875]& ,
             TagBoxNote->"11351.9169921875"],
            StyleBox["11351.9169921875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[11351.9169921875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 
                22703.833984375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{78.51527081420804, 
               91.43812230774664}, {-3.9812238717426354`, 38.74689437998488}}],
             StatusArea[#, 22703.833984375]& ,
             TagBoxNote->"22703.833984375"],
            StyleBox["22703.833984375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22703.833984375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 
                38596.5177734375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.19980345079209, 
               105.12265494433069`}, {-33.5409066479519, 38.74689437998488}}],
             StatusArea[#, 38596.5177734375]& ,
             TagBoxNote->"38596.5177734375"],
            StyleBox["38596.5177734375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[38596.5177734375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 
                34055.7509765625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{105.88433608737614`, 
               118.80718758091474`}, {-25.09528299760639, 38.74689437998488}}],
             StatusArea[#, 34055.7509765625]& ,
             TagBoxNote->"34055.7509765625"],
            StyleBox["34055.7509765625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[34055.7509765625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 
                36326.134375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{119.5688687239602, 
               132.4917202174988}, {-29.318094822779145`, 38.74689437998488}}],
             StatusArea[#, 36326.134375]& ,
             TagBoxNote->"36326.134375"],
            StyleBox["36326.134375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[36326.134375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 
                4540.766796875}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{133.25340136054425`, 146.1762528540828}, {
               29.801270729639377`, 38.74689437998488}}],
             StatusArea[#, 4540.766796875]& ,
             TagBoxNote->"4540.766796875"],
            StyleBox["4540.766796875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4540.766796875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 
                22703.833984375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{146.93793399712828`, 
               159.86078549066687`}, {-3.9812238717426354`, 
               38.74689437998488}}],
             StatusArea[#, 22703.833984375]& ,
             TagBoxNote->"22703.833984375"],
            StyleBox["22703.833984375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22703.833984375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 
                31785.367578125002`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{160.62246663371232`, 
               173.5453181272509}, {-20.87247117243364, 38.74689437998488}}],
             StatusArea[#, 31785.367578125002`]& ,
             TagBoxNote->"31785.367578125002"],
            StyleBox["31785.367578125002`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[31785.367578125002`, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5460988028072107, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 
               0.}]}], 
            LineBox[{{10.453901197192788`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.3479427549194991, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.7400950278553333`*^9},
 CellLabel->
  "Out[183]=",ExpressionUUID->"c51ecbfd-8c0f-41a8-9bd4-a642231f9ee3"]
}, Open  ]],

Cell["\<\
We see that the network has gotten reasonably good at reading the bar charts \
given to it, however it is not doing so well on pictures of bar charts I \
looked up on the internet. For some of them it is getting a rough idea of \
whats going on, but none of the readings are useful. I have high hopes that \
this project can be expanded upon to reduce over-fitting for the specific \
type of graph. One important step is varying the image size which will \
introduce some variation in the labels.\
\>", "Text",
 CellChangeTimes->{{3.740095043585183*^9, 3.740095087654852*^9}, {
  3.740095226777855*^9, 3.7400952657655706`*^9}, {3.740095324411392*^9, 
  3.740095375195541*^9}},ExpressionUUID->"9c99285e-f310-4757-90e8-\
2624ea442963"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{"#", ",", 
            RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], ",", 
          RowBox[{"BarChart", "[", 
           RowBox[{"readGraph", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
       InterpretationBox[
        DynamicModuleBox[{Typeset`open = False}, 
         TemplateBox[{"List",TagBox["List", "IconizedNameLight"],GridBox[{{
              RowBox[{
                TagBox["\"Length: \"", "IconizedLabel"], "\[InvisibleSpace]", 
                TagBox["5", "IconizedItem"]}]}, {
              RowBox[{
                TagBox["\"Byte count: \"", "IconizedLabel"], 
                "\[InvisibleSpace]", 
                TagBox["1843460", "IconizedItem"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],Dynamic[
           Typeset`open]},
          "IconizedObject"]],
        {
         Image[CompressedData["
1:eJzt3VFoE3ccwPFjg9EXQXCygeiY3WBVwkRYJg0UV13nnO1KtOShCI0s00Jx
UivrVHAI7aOCom760FH0JfaxT0UYyMQHGejApxbKgntQRF1ljD3dfs3fhZlc
fz3bS36X9Pvhb7mc9d/k+u2lktzduwe+SX/9mud5R5vkQzr77SeDg9nv9q6W
Gz2Hj/YfPJz76vPDQ7mDucFtB16Xlb+/+DO/7AMAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
wslPTJ4ePVcoPOjozMqCrNmTzmX6BmVBbsrK6ZlZ47uIle3S5WuS4pFjo7I8
NDwiy3fv3Z+6cXNsPC83ZWVP70Dlv3r46PGTJ0/lY63vLlYeKU2ylCG9yc5T
ynR9yke5KStdqGUSyS7Zwba2Z2p/h7HSSKLyXO8Xd6GSpV98fpddqyzITVkp
n2B8F4FGl+0/GTjcTyJgzlvTtmHT7rKx6p1P3W/ggDmp8YOt3WVDKiVRxASJ
IuZIFDFHoog5EkXMkShijkQRcySKmCNRxByJIuZIFDFHoog5EkXMkShijkQb
Q+C76xvjLfck2gDc4Uut7Rlpck86J0NWZvoGs/0n3dEidY1EG4B0KFlKpWPj
+emZWbnpjgz1i8csW9+75SLRBiB7y7v37m9o2Skfz54fO3HqjIQqcUqrLtQy
8jlu1PyeBns+cnwut3duYH/l8Em0Icjzu9t/+sU96q3bd2RBbsrKwM+Xz3Gj
lndSMXfs0LMvPnqWbntpdKf+3L/bJ1HEwHyi3aln+7a/NNJtJIqYIFHEHIki
5kgUVZWfmLx0+VrgCDlDYycq/3sN3Dhnz481xmsr8ZfpG5SK3n7/s7IhK0PO
0NiJSo3emrbK7eM1JUm0NrL9JyWYsoTe+/BLGSFnaPhEJcjKhyDdkmhtkKiO
RM2RqI5EzZGojkTNkaiORM2RqI5EzZGojkTNkaiORM2RqI5EzZGojkTNkaiO
RM2RqI5EzZGojkSd0iFL8vHuvft+8UKftTk6iUR1JOoXN8LZ82MuztOj54aG
R9wRoPmJyRoc5kmiOhL1i5GMjed7egckSInTvYdWOY7ea0puaNnprU1F9dVJ
VEGi/n9XpXdXn5dQJUt57LJQunZtVZGojkSd0sXl//+oa3PFeRLVkai5ek+0
dG6WshHVExCJmqv3RL03WgMOLFqbkl+TIpmfRM3Ve6KB80tUJ06diWR+EjVH
ojoSNUeiOhI1R6I6EjVHojoSNUeiOhI1R6I6Eq2Bv69ffZpa/3TXlvLx8Zv+
X89J9J9ffg7ePqn1/m+//vDTdRKtNkl0/kTfZQnt2/50xyYS9V2iu7YEbJ9d
W0i0NkhUR6LmSFRHouZIVEei5khUR6LmSFRHouZIVEei5khUR6JhyPaUVGSh
ozPrDqkbGh5pbc+4A5aXiUR1JLoo6XDqxk1pMj8x6ZbHxvPuTeM9vQOBn+9G
yPlJVEeii3K70FXrUlKmuwrSrdt3JM5C4UHg0Q2yUv5J+AMfSFRHoiFJnH7x
TQvuAspSaVRvhKj3RGWe+dfQd2x6aaTWy1dZaH4SrS/1nujcwP7A+edyexea
n0TrC4nqSNQciepI1ByJ6kjUHInqSNQciepI1ByJ6kjUHInqSNQciepI1ByJ
6kjUHInqSNQciepI1ByJ6kjUHInqSNQciepI1ByJ6kjUHInqSNQciepINIxb
t++4xzs9M1soPPCL1whzF65dPhLVkeiipm7clJFIdkmfQ8Mj0szDR4/3pHOl
45iWiUR1JBqG7DndxWpDXabWa/bWpjwvEXJyEtWR6KJkF+p5b+UnJqVPCaan
d0Aeu8QplbrDQpeJRHUkuijZhUqc7tQNsly6Oq2sjGR+EtWRqDkS1ZGoORLV
kag5EtWRqDkS1ZGoORLVkag5EtWRqDkS1ZGoORLVkag5EtWRqDkS1ZGoORLV
kag5EtWRqDkS1ZGoORLVkag5EtWRqDkS1ZGoORLVkejSyMOP5AKgPokuhkSX
pqMzG+ERoPPfgnRb2VASdSPk/C8SLZu/OxVxohXzK4nK/K+caOD2IdEFPHz0
2G3hyiNAXbevNH48dPjCxuYLLZvLx8bmq1fGE8kurykZOELOf6m9I2Dyls0X
t2yVv/W8RODkre2Z/MRkmPkvJrcFz5/cpswvP+Mh579y/PuFto/8VaZvMHj7
eIklfC9kTN24adFU9GQLnz0/VrkXnZ6ZXcKYKfwRONyZJRYay5y8Xuav9vYp
G+5UHo0hqt9FAQAAAAAAAMTHSn79KA4Sya4NLTurMXOh8MDzVre2ZzwvEdW5
psv09A7InfeaklWaf3pm9sVDqNqXgE4q6ujM7knnojpFZOXksjD/8ujla5HP
XzpFsOzlqnH//WKi7tVn+RKe11yNLwGdfIvdCczd9zpaxb1oYv7Vfy9RjYSO
HBut9p5N7rb7KROr1qV4xq89iUeeKOefK0OfkDw8SVSeIv3iCagzfYORzy/T
yvwPHz3OT0xGciLrSpKoewgyf5V+HYJCtn/pvXBDwyORvxnAXU5ChvzGWKV3
GkilMr88iirt30oPQbYPu1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAwAr3L5p5AzE=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {65.5051724137922, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1: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
J6R0EL7jMUAIKXa8Xu//A9ksAfU=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {111.7655172413807, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1: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
LQb1QbCx5hCyXnWgV7GvR753vH5fWejCUyVBURpJilYRVl+ZruafVFXGKnmk
ptB7SU1iH773QbfReO/x5x88e/KJrvuxXtetNzx4+gWpP+h+dPv37+PFCrHP
YkPojX8rezo+Pg5xLSoqCpYzMzPv3LnT0dEBy0ajsampCZB89OiRwWDQ2fXw
4UMKPaRR24g438Os8R7XHhlo9+puCza2B4y2nB5s9QUPtfnBY3+zt1Hrrqs7
1a0+MSjbmnPm1/vygnylkjilNFJVmqes8laVxyiqSU2h93L6/YNPdx497JkU
syfM93BS+PGUqDOJUadjwtziwkl9JDbIPS6s3zI2OT6Bck7oto9av41aDej9
/Oc/b2hogLgWGBhYWlr60Ucfvf/++319fSjqPX36FILdsF1DQ0PEPJw/cPSs
2JCUdrRPcdws2m5qDjBdz+u7nm9ujx06lzB8PhE82BXf1xGjbw5/pgl6Uutv
lu3P9l5+lJMToGqKFklDufn06iJ/URGF3uzKjGE7fNzzm1TZHbWMa6308w2l
l9uqr3YWn2skdTSv2DMjbgjDBoYGpw5Nf1sJZ09Pz/3792/cuAFJ5pMnT65c
uQLQAVwousFTjif4sLk7pW4dhfCMH4DtHx4aw2wjmGXcnhhAz5jU4/YCnLDY
S3H6oNUsTlA/hmGa7FMm6V5T/cmepojxrvjh9si+S+n95+L7ziWazyeaziXo
O8L0zb66ejed+vCQ0oUdsmUjM50mEISpSsJkFSFSQbi8MkJGbnd+8baIgM63
30YT345bLd/OpbJQDaA1nrRa0NEGKL7+idExVCOd2WK1jIxNdZegqwWvGZn4
+k96Neobm9wf6Mdoq2ecbyps13DONpV0NBR0aIibWbDatMglrRqwbwXDPTUW
zzDxw9XothZW+6nYb0NQ2oAbZq+ZkGdi9p4dZj/lB+uJ45zErYXmZjSLxYqn
BPiADotluk88ODri7HwNQIfvIWrH0JTps1pvR20O6DWH4eh1hPddSrWjFw/o
GbtiDe1huiYfO3oHBxXrWMGbAb10Ph/QC5WWI/TCpRWkniv0CBFgjU2M2+zD
aUiNNkb3Qp2qKt/a0XkymUcn9gX4FrTWFZxrJNCjt9fDI5jZrkUubtMgzyF6
6OawRERDC89JI+cMPaIqWG3Ej4vvJ3mNsOK9ZnTQ2GIdG4HkHS9UWJit3bGj
d9Io3WWqP97dFDreFTvUHma+mDLQGYPoM3Xi6BmavPS1xw3qgwPytYDehuI0
QC9UyQyRlAVL+BD7vmvoIdCmKoD9s/FkA88krKSeinuoJRyHmIeZx4a/ncMU
pDKNjO/196G31NK7GgDA0o5GAC2/rc6RuKLWesJziN4EPvEHjg+eZtgLnDjN
R2zjeN58rtCzTf8DmedI38Bw/8DX1EM87RkH7mz2HUXb4gDOkgC9+uzjRukO
Y92x7qZgO3qh5ovJgF5fV4y5K87UFW1sC8bRqzuqV+0H9EqCNq0vSk3j8UIU
xYBekJgH6IVJykk9V+jZHIoaQ9FubAIfPOBE45CNWvH7euMbWvAKNDQxNofo
GYfH9vh55zfX5HdqAUBILIGvvNZax5m90STDaL7TuU04ZwjRhO6vR9xWj9Bc
oTc8PoanwVYbcf7Fig/Cgz6XjdSoAk1gtn7L2KBtYsg60Tc0OIv7M2JHzyDZ
bqw78qwxaKwrarAtxHQxYeBsJKLPdDbC2BZkaHA31B41KPf3y9YwA10BvdTq
6mB5UbCYEyiqhrQzVFxG6rlCD/U1zGbz6OjouL2TN2WolaRG++eQ0kP/ZQ7P
9uoHR3b5eOY1qXM76gFA6M0VttTlNKsdcQMT853OLXpQUI7HH1Dejtkpc7yl
7Nz29aY+BnZhdMI6PvHg4eeZxQUpTHoSs4DUCdm02FxaMrsgobQgi8/Jq+KI
a5QjE7PWHgN6dVlHDJKthrpDzxoDxroiB9uDAL2hs+FAX39nZB+g1xpo1Lrj
Z/eUe/qkq4sDNroUpqRUVQXJCoNEpQHCKoh9ISIOqeesr4dGg1gsKI0cGhsd
x6zDk+NE/3qG4dnRyYkRe5oKtOKjH+e0r6cbGN7p7ZHToMxpr8ttVBU31zGa
a7ObVBAB8VBoN4BJeA7RQ7dmJjp3M1ByRBL1Cucw4RyFTgfed8M/97FJ50eL
TxKw6fVSUpc0yBlaKb1Znl7Ly1RVh+an05gFE7NXJ4atOHp68RZA72mD/2hn
xGB7gPFCrB29cEDP3BFqbvE3aE8DegbFHrNkVZH/hnWM5GQuF9ALFLIBPYh9
wcJSUs8ZepMWmwXvbkCFGLCOi7Q1lbVyjlJcKK0mNbNGXCCrZitFwoaaKoWE
XV2pN5sstjkb2dvbP7TDyx2fdaqtFgAsaqotaKrJalQ6EgdIIsMGc3uYBXMY
Mk1cnkCEQpvNNgPAuTm5gNns3Qq86zFptdx79vBYQmhxZ21JVyOpSy82FJ6r
K7hYn3+xrvRqc1RpflJR3iz2QXD0sg/pJZtw9Bp9Ab2BNn9Ab7AjbMAe+BzQ
O2hQ7HJEL1DKAPT8BdzvInpWbHJ0DC9tDDNZx1LZjLRKZo6Um6qoJHVaPT9e
XJos5tBEZZGMTM+YMGgVx179bjpTT9/gds8zjujRG9WZDQrIOZEhAoIBRuTv
VF/v+Zq7S2UnbeiyAHwoOvbpkydQYpktquJ2LanZXc2lHY1lnU1FHZqcDnUg
OzuztGgWT0mPYpgmy9MsX2WuPdajDRzv8hxujDR3hQy0Bg+0h/a1h5vbwsxN
AaZ6D5PqmEm+v1+8ihmyeV1JWiy3wkuS7ytk+fEr/aqK/QSlpD7KZ2wM9+24
ccNqv6XsVDm/evTwpth+GBn+HbLY0tglGTIB52JbWWczqdnn2zhdbZyzTczO
xmhpxZGEyO7BfvwSjlnboRH8wki8/ZmYHB7FiwLDDCP2ZBedSZzAT/HaJqdO
K5mePZkXmlhUX16qkiYotRladmq7OLe+jmANjKZbRDO/nWZmQUWyH9/H7CM/
rfZP+C4OFPlOoZfRrHSGHquzid3ewDnbWNBRD+gFsLJeBXom2UpTzdGvoBfS
1x5qbgvB0dOcMSqPIvSKgzetZabGVJZ7ivMQer7cIl8+m9Rzjh78vAg9mpTP
Pt/ChvIkM+tca2lnK34M/9WgN4aZjTbTMDY0ghn6rU/HMcMgpn9q6RnHzGMY
rDcMYUa7TSNY3yg2iFmNa5Ky8lSlJUphWn0zTcNObBIXtbZ+FToKvRfWFHpo
rN2Dx4/PpMQAes5uDVlsP4lT0qGlt9dldaj8WVm02UavPtPDEb2hhggcvbbA
/rZgAj1j/Wmj6rBRtrdPtNIRPR9BiS+v4ruLng1D6KWymOkSXklXEzol/VUz
O5tZHc34MfwObZSk/HB8xOyiB33OoQF89BI2gFkg2g2PQ65vHYSds2GDVtuA
BRn/cwT/VbrvqheFhmUo2QUqQU5bZ7a2OrZelqdtJFgjpltEM79R6L2AyNHD
T56SGR9K1Fxb3Faf21aT2a70Y2elswtncW9GHNDr1gSMdXoAeqbO4P7WgP62
QHN7sKktyNTka6w/ZVQdBPTMwhVFQa5rilOiK8o8RLnefKZPdblPZaEPj0Xq
OUcPs/dnU0qKU0VVgFVRm4bUhe0NzLZGZkt9YbsmUlw26+jVlQZXJv1KEf/r
upgVsshfKBN+Xp/0uxbaW/KE1xR2KxNfUyW8VpP8Wn3yr8AaxoF5Hp75GmGW
kktracrVChNq61LVNQRrYGLuqdRaMYXeC2gSXemPn7C1Yp88enQ6OZrWpMht
qXHm/EY1o7UW+oO0NoUvKzOtdJbRq8twN0pXGNVHEHqD2nA7en59rQHT6Hkb
6twMygMG6S6TYHlh4MbVRclR5Rx3YY4Xr9i7qsy7guFdXULq7wh6ycyiJH5F
QavTu9/SAbpmDX4gsbUuQsQ5FBc+u+h90Vr3gWibSbRvUhjfJzpuUOwbELtb
lW4mBe5+xckB+clhxckRxfFh+ZER2ZFzRetdQkLoTTXJirLERlWWmpdYp02v
r0GgIafUiJCT1UIKvRcQOXrogNVXDYl9tlaR16SCyJjaJvdmZ6ZyCmex5g47
oPes3n/0rDtCr6/Fu6/Nz9QWYGz1NzZ6GepOGJT7DbIdRv4yRsCGVYVJkWWl
ZwTZntVFXlyOV3mBVxWT1N8F9EZsOHoJ1WWOJ8JmOLexht5QW6BV5TfXhAtL
p9Abm7WTC1fVdVcFS3WyHRZ1rqnB51nrsaeqAKP8uK7R39jkD3mFudG7r8G9
v96tr/aYSX3kU77rhoCgRLkiQV2e1qGmySrj1HWJ9X9gDTlJJUCm0HsBTVps
k5OYxRG99EZ5BvSayUzT4jOr5zYq05sVKa0yL1bGq0DPIFluUB0m0DOeDZpG
z8+Ongegp1fsQ+gV+K9fyUiM4LBP87MAPc/KUs8yuie3mNTfEfSSigvjuKXQ
iBHnwmY4W6vK06jpGiVgGCZgzzp6Z+vaLivnm+q32zQlpnNhz657d3ckm5r9
dOejDedjTOehfx1mbvc3NnvotCd7ao89LFu09rRfhFAdV1+ZfFaWJuTEq2ui
1GyCNXCikg9OUPDAFHovoCn00Nm9jx8+PJUU9Rz08DuJ1ElzYKFJDuh52tGb
xX0F9GppZxzRG9CE4ei1eplbve3o+QJ6+ABO5R69dLuBt9QRPY+qwj8W9GIr
2fjNWRwOzn/pQH29IrdelV+PsxnKZx2MDZtd9K5rLrxb88ZIzUZMWQidaOPb
fkOX8m3nY8ydsQOdMQNnI4faQwebfPvrTxsUR3TS/U9K39wZEJ1S2xVZWxas
ZidWF6U1aKNri78K3Q8WvTFscmrs38jopHVgEjPglxuMjNis46TGBuxHFc32
mWImMN1TvQs9KLWBlaKRkjq9UZVeJ4fMM0kjia3lexVlZZaxLM6HAX9TTWBY
I83DLFlhUh7sVnuPtRwfVPsbWr1MzR59TV4DjT4DDd4D9e596qMmOaC3dUCy
vCR4IyScIezSY9XZbtzCU1zW6cpctwoGqXexaRvCfM7dvm2zn8CaGkn76i+V
nfo57QOnxwG9UmYkrzSpwekdkdIaVRkNqvR6aapW5ldVtDsm+MmAeRbRO9/a
9Fn5mkHhXn17wFBb0Hh7tqErYrA13HQ+ynwuCr9OpCOivynQpDljUB/UKXb/
vmLDphCfaElVnIofrBRmKNnRKkmUXBSv4CHHyavBsbIq5OPFGSeTYkdsU6cF
bahiz91AuOdottCbtA3jg2/HJkeHJ4YwWx82jp8mdZg9b4ZHxw1Waz82Yh6G
AhrBnt7TuyQkJgtkyfUSUqc1KNNqZdAsJ9aLY2p4noWZ3xp65kbPKfQ0Z2ag
B1EP0DtalXWykvFHgV4iu/j56KU2KGlaJaAHzZ0vtxDQ+2Kw79tArwuMj5Ud
aAsH9MwQ9abR2xjiHSmtilXzgxQCmoIVpRQDerFKHjEDQLS8CjlKxv0Bome/
5mAEw2dCxAOaHsOMk5NDY04D/TiqFZMYnm6OjPXc//BgUSK7VZNUJyZ1cr0s
RS2BupFQJ4pWV78y9JYZlfsBvdHmIwNqH32Lh7HptLnJYwACX4MnZEF96sNG
+U69dHO/eBkzaAOgF8xiI/TcKktOVeScLC8g9XcKvUStBBJ4Uidr5OkaBX7Y
0BG98Vnbz/NtDZ+VrxoQ7NF3+A21BYy1ZRm6wgZaQwA9c1d439kIfOxQk5+p
7pRBeaBXvuODivUbgr0iJNwYFS9Qzk+Tl0QqRBFyIYEbIg45Ulr5A0TPBn0Y
mxl+6TGLtc9iuXjjbrOG1SUv4imlpC6RaKpUzXKphtdcq6mVsSs5/y/G11Ol
cTZ7c2KtJEkpgtY4rkYQparyYGRkcEpmET2oXA3pZ0ySJYDeM7XHNHpnEHr9
EPhw9NzMqkOAnk6yqU+0tDhw/YqChKAS1hFu5omKgpMVTLfy7BNldFJ/d9CL
qGYDeikAF5kT8VuVSVNqRNDc+VQyZh29c63aT8uWDwh269q9B1t9x9oy7OgF
mzpDTZ1h/R04hv0NvuZa/HBWr3T7+2Xr1gV7hooqIpVV/jJespwZJheGSfmR
ci4yMQUHuiT5B4ie/WVG+z8QQMZud3RcFZz8feUxE28DqZ+KfmMSLx3lrelW
bOznbb+Rv+d49NYqudjZPJZxKmG8jA9VAhKPSCX3laBHOwXoGRR7nqndR5oP
9qu8dM2nDY0nTY2n+xs9+rX4EW+z+qBRvl0ndQX0igJcltPjA5klhyszjpfT
T5QXnyzLOs7JJ/Uco2cfRAxpYwKrCKHnrImLU4uS1GL8CEatCKH3dKgfm73R
x+da63H0hDsReqOt6fpOfLSe8WyIuSMEQt5Ac1C/1susPq6X79ZJttwtW7sm
0D1YVB6m4PpIqxKlRcEyfrCE54ib4yXJP0D0hsewgbEHlnFseFSHYYP3NNpP
RBsx1XZiBsuZbtw+rD1sVR191ri/W7a7Nmfz6phdYXy5sxm9ouW8GHEVVIlo
ZXWEotK9gDa76I3ZbNp0N6N4IaD3VHVmpPkAjl6Lm6HpuKnJra/hdH/D6b66
4ybVPoNsC6BnFi4p9F+3LD8uoJh5qIJ2rCz/eFnRCU7msdI8Us8VepOo2jmg
F17FStCIIXkgdYxSkKAU4kcLa4TeFQWvAL3aT8uX9Qt29LZ5DrR64+h1BfW3
Bpg6As3t+Ji9/mb/Po27SX3EIN3VK978TunqVQFngoRlofJKbwk3XloYJOUF
ie1XJU8bv0xSUoZfNiLm/ADRszevn0O9GrL0Q+C7LG+5W7XMqto80BJA6qd1
IUZ19KQ0VKc92afa0Vq0cmfu9iT1l3J4R0NHO0pYmajkRymqwuUVCD3r5KyV
qR29E3b0dj1Vn7Kj54HQMzaeBPT6tKf66o8i9Hol602CxQy/tUvzYgG9g+Xp
Rzl5xziFx0szjrJzST3H6FngI/ExKfElhQg96DqROkrOi5Pz4+XV8WrBH9Cb
vWPzXS01D8qW9gu2TaHXlqrrDMTRs49bgIWBRr/+ujMm5WG9dHuvaOPt0lUr
/U/7CUqD5RUekso4CcNfWh0grkK4EcSBg0Sl4B8iemPYyPgtiHrGif4xDDur
uHZVuH6s4VB/RwqpjVfj+trjJxRhz9THjILtDalrdiUeSapqJrrMMxwurowU
VEBrDOn9q0Rvvl6+E9Abbtrfp3TvbT6ubzyGo9fo5gw9/6LiPw70LC+EXqSs
OlbGi5PhB/O9yumvBr3FOHrt7gOtntPo4YMW+lod0TtIoLc8AEcvSFbuLq6I
ERcAev4ibpCkDBwo5iAHiEqR5xA9NA2gyWTC7FNDmM1mzGEeJGIBEBsdHUUL
s3TPBfx7juL/Wcexkc6GjmcVy7qVu03NgX2twXj3uSti8Fxk37kI6E0bzoYO
dIUP1nmbGg4Py06Z6ze9nb1kY3JIgKjC2TyWwcrqVDHft6YSCtxHwNyaG1vI
Zs9iieITRKR7GcSL9YrtT5RHhxp29snderVH9DVHTDVHodffX3vSXHPUqNzb
K9vaK9loli4uDt2wOC/Kk56/j5N+kJV7oCT/aGn2IRa5NxUnrQny6Lx9C90p
DIiw2Et7YvxL9w5Dsv8KE6QmpvsYHhr/0vma58hmnwrAfpgljlXoxykIkHCc
lXNYjSBSLcDbN2XVqbLc7VEBXwB6s3eR+uWOxocVK6B339t0alB7eqwh3tjm
PdLgaWrxMbf69rX49zX59GnOmGoP6xQ7e+SbHpeuWxJy+pSAHSqo9Kriegtz
jovYEdUcdBUkcWEIMUx9d3b8saSYMfu3tlhQO/ctoQcE1dTUMBiMwcHBrKys
zMxMNNE0POXp6RkXF4eIQ2vQbYleKXrGpgBzS1Bfe+hgZwTQN4VeR0h/Z9hA
rRegNyR1M9W5AnobkoL9heXOJtMLlHNTRDwfdQU0ca8MPQ8H9Lb3yU/Y0TuE
0OurOTGN3maIeoBeUch6Ar0DJTkvh57VghFzBkC7CGR97U+AbhQ1OoozODY2
Yfsm6MWWMBB6zso5VM2PUPFxBhVcN07OK0Nva0+j24Dm5Kg2xtDqidDD6Wv2
62/wBvSMNYd0iu09UtdH7LWLg0/NQC+8igQ6NEx9DtGD3+7999/PyMiAHwi4
e/fdd1UqFaz/+OOPb9y4cfXq1cePHztu/8qjXqO/uQXvPg8Aa13hQJzxbIih
IxihZ9QeQujdzFqM0HM2mZ6/tCJJgN/UAJIKb37xlpyY2UUPnyAi3UMvWqST
b3miOgLomWXHe7WHHdEzqfFZWQC9HrGLSbII0FuUG+mRn7e3NA3Q28/MO8LO
OlhCbmfofXWyX9t0fSE3sYHjxs9n48vo+ZbSAT1n5QzZRai8ChZC5ZWvAr1L
7ZrPy5f3VW8B9PrrTyD0hrUexmZPc7MPhDxAz6xxM6kP6uTbuiUbH7LWLApy
c+OzQvgVntxKL0H2MSErjDuTODAapj6H6EF7CNlmTk4OLMfGxn7wwQd37941
GAzPnj3TarUajebDDz8E+h49evTw4cP33nvvlUe9Bj9zUwCgN9gRCvT1nQ01
tQcb24Jgob/G06A5OCg5aazdeCNz0frEID/BH3rNM+wj4sRXV3gqINNgefGK
Zh89G1abdlovXgDoPVYeHGzYapYf69Ec0tUcgBbYXHvMPpAe0NsFTXGPeK1R
vLAw2GVhToR7Xu4edup+Zva+4tzDrMwDTHI7Q298YmhicsRiHbOPM8RRQnM2
OiVvurTHx0dHRges+JwrkyOjz71rqs1+mYj9CCdCz19c6qycAyC3l1bis6jJ
Kk6WZm+L9J9d9C621X9WtsRc7drdeLxfc2xEG6VvOTOkOW1s9DA1eZobPfu1
Hn11J42qAyi7+Lxk9cLAkyeqmUHVZe4V5R68zKOCktBKliNuYGKs7Byih1RY
iF/LVlVVdeLECWCKy+WOjY2lpKQwmUyUcDpOWfZq0dN6mxt98e5ze9BgR3Bf
R5CpLcDQ5m/uCOlTe+jrDwyITxhqNlzPWOiSEOjL5/gL2aT25LNiuWVnpCxf
folndeHm7OjZRW/IiqOnE73VK9uE0DPJjvZoDtjROwhdD3PNYagPensWBOgZ
RAsYQesWZIefyc3ZzUrZV5y1tygH0NtfnEFq51EPdeJw7nASxyfx+atwTEZI
bZnEk0y7xwYH+9GdKLDnH/1H6Flw9GKYBT7sfEDPWTn7issCRGWBfBb0qY+z
MmcdvQtttZ+WLTRVrX/WcKSv/uiwJlLXfHpQc9LYcMbU6N7X4AHZJrRykNjr
JJt6xWs/Y66a73/8eFVxYBXnTHmZe3XGYV5xSEWJ49B0j8oiZPeKwrlFb2ho
iDicQvTKkdAEgJh9isX+/n4A8FWjZ9BAh86nv9l/oC0Q6MMHq7f6G1r8IPaZ
Ve66uv39ouN69fprtAXr4gN8eJDDl5D6TFVxVDn7lJjpXV3sUcUA9Bgs1iyj
l34KR0++8ZFi34B2k0l2GNDrVe81qA9MoafeB+h1S9d3i1fphfMLAtfOzwo7
nZO9qyR5b1HmnsLsQyUZ+4popHaO3qR9sufRiQmHmxFbYYMJUuNPTUxtBj/y
5OT4+MTw6NhzZwO2oZvN4Uc4EXp+IrazcvYS4B0o/2omJPbHSjK2RvjNLnrn
W1UPOAsAvafaw+a6w0P1Yb3NJwE9g9bNrD0D3PXXn4Y+tUmxSyfe2CNa86Bo
xTy/Y8e4RQHc0lOc0tPc9EPVRUFlX8INfKacgTznUW9wEP8t0HFO9CeaGBBN
vEnwZbHr1Ua9OnezxhNy+IEWv4E2/742P3Orr77ZG3JOk/IMoNcnPKZTuVxN
n782zt+7mu3NZ5L6VGVhBKfkpLDIq6rInVuwKStq1tGrSTuhE71BoGeUHurW
7O1V7zao9+GBT33Qjt7Wbuk6hB49YA2B3p7CDEDvIJOcu+eiZ58kcxJNXoTf
tHh0GJscw/tlpEYzd6Erj8ymqZtG2Xt8zuWAXnQxHaHnrJw9eHgi51dVDBHw
FaH3SelbRu66LzSQSxwarAvuaToxUH/MBP07jZu5/jR+JBmN1hOv7xWs/KRw
+Vu+R49WFvpXst1K2acq0w5WFQZypogjoDtdVoA8h+hBOEOzu8MC5CSYA4AA
F3EXdfQnwvBbRs/U4mOcRq+3dt8M9Lx4xaR2q2CElzJPCAo9uYVnKumzjt6g
BUevV/i7HtmGR8o9A9qNRumBGegZVHuhJ2hHb6VOMA/Qm5cZeio7ayczCdDb
zcgC9PYWppPa6cmFiQlIMmFlf99Ya/OlyLD0M25hUeHZwWEZ5A5IjY7ICg1K
DvSPiQiPf/vmu5jDOSNyIfQmp9DzZuUBes7K2b0a7zr5cougT32USZt19M61
KAE9Q+VaO3oH7OgdA/SMmuNmjVt/vRuBXq/IBaH3ps+RIxUMvwoWQu8Al4HQ
IyIdwd0pDn3Oo96L6/mn1IeH7R1De4YD1WNo0Pm5VRv0QbB++M8CzbbhbFNd
d/kbfeqtkMAjm5s8wH3NnsjQvplUxyZUu5/JDo9KXDpzF2+IDjpewSRasxl2
4zOhc31EVOhWST9RnruBFs5glsxiOeD316O5m0TzDNKNX0j3Dteu7xPu0am2
6WQ79PKdkP+YlTvNim0G6Wa9cEMv32VIuKgk0AX6eifzsreykrYXpu+kZxxg
pO5yYld6/Jthpy9evTFuQwNdbfYLFfGjH1bLBBTeiMXCFTUVlDYpGt9Xtt4T
a2+TWlr3gbLlurT5aoXoVlAE+87772H4jHlO69aE7Q836oLvGFGUfzwv9WRF
PpGwzbCnkO0jYLtzGW7VjL1FKVuiA7pHBrHZmwP3Yovmc87ivsp1PfV7Teod
w0ofXd3BIcUhaNkgqzfWHQOb1Dh6RtFGE39ND3vxa0Feh1nsoJKM3RVZRzk5
x5nsk5yUk5x8Um/JijmcGIXvL94JttmmbujxXdQ3Hs1Cfvs7e+NiwYawcWzc
OowNtNc19HIWDdceQN1nR/oQgAi9ceUuQG9EvO5r0Ttp71wfFjKg2hwvy/nW
0dsB6JnkWw3STTrB+h7eukHBQmbAuhno7S9I+T+iR2c3yhvuKVrec4aepPa+
ovmapPEaoBcYzppCz/mPRoreifI8Z+h5CFjefNaZyoKTVQWvFL3uul0EeoPy
gwR6htqj+JxvDuj9MsjzAIsVyKQBekfKco4VswA9Z2Nlvx/oQSIEjwMDA9CX
n5hAR78nnXE3bsYTTfxa9XF8o46a9kf0+TreDjyB155CxkdCTttUf9KoOjyu
3PlUegjQO5uzYH20/7Hy4lPlBaQ+XlUIneuDfAh5ecc42bOOHn6Tr/QzjuiZ
BbsBvV7pdp18G6BnUmwD9PQSV51wXQ9/DUIP+noncrO2lCRuY6TtyKcBejud
+AXRy2c1SDV3pY3viLXkFqnvyxqviLRXygSAXqkdvaEXRy+8MA+hd7qCQeoz
PKZnNfNUef4JLn1PYfLso9da91npgr7KNdPoeePoKQ4YVfiRZEPtYTAsG2Tb
DMINRt7qp+xF/xvosb+kJKA4fWdZxmFO9uHikhOlyc4G7H0P0INUc2hoBG1C
HMG24hfDOrs5FH6VLN7XG8aPznWomnuZi/vEu4yAWP1J1Il2xNCIT+11aEyx
7Qvp/mHR6o7s+S5RfkfLCp0lEkcq6P5sxv7qvONluUdLs9anh70K9IzCt/SS
DU8ke4ZqXAC9XuXWXtlWQM8o32pHbws8i9Ab4C8o9l8Lfb3jOZmbmQlbC1K3
56XvoyfvcOKvRW/UagX08kq0oto7wvq3RZo7pOYr3pdorwjqr3D4b/uHsm7f
u/d89Mat05PATKN3LDcF0HMro5Mb70rDr5B7rCJvNyNpc5Q/jt7s3dziQkst
oGeuXNldv8Oo2jak8IL+PqAH/WiD+oC+5hAYlvXSrXrBOkP1isesBf8d6L63
hOlbnLaNQzvAyTpUxDzKTjzMziH19wC9L2+DH1AbGx8aHumfin1f8cSgHmpR
n8UEjE5iYxea2vqqFuuEa1D2PpXD1x8HmzUnwJBX6BX7R+Vb8XouWtGR89a6
SJ8jHLqz1uwgJ9e3hL6Xm3O0NPsIO3PW0RuxYnVppx3RM/F3AXo90k29ss2A
nlGxxShztR92W93NW9nPm1/khx9mOZadsak4HtDblpu2Nz/p/4JepbAxl6kR
qG/xaq7za26Tukp6V1h7mVd7hV31tl8w6/Z79/E5RJ0fBplCz36TFQI9aL6c
XVd4vJwOOcYxFp7a7SpIfAXo1XzKfgvQe1a33ajeMqT06K3dMyDfq1fu0qv2
6mrwE6l65R6dZJOOv1pftexRyfz/8j+9s7jIuzh1Cyd9Hztjf2HRIVaCs1FD
3wP0xsfxA6RTpwVtfxis+9U7slmmrsfEv6c94uFpZ4e2aVCy7Al/sb4GH4GM
3w4ScngHDCGv0Mn3jsg3PRbvHhQub8/+3dpIz8Ol+c5as32sLK+iXMj2D7My
D7MyXNJCXwV6BsGbABe+S+p1gF6PYgtCzyDfbFRswtGTrLOjt7yvel6h7+q3
MkKOZtFci+K20FO25qTuyUvcnp9E6q9Fb8xmA/Syi+qqFTcqFZe5ihukrhC+
y1Nd4KoullTe9A1i37r7PmafY8OZxix/uJUzVMgwRu7RnGRA70ipU58ozTvC
xFO7nfSETZF+s49e6ZumimXP6rYZVJsHFad7anYPyHcDejrlnl713l71fp1i
Z6/YFdDTcZd+xpz3//xO7Sgq9CxM3sRO3cOm7WUUHiyJ31+SServAXr2AS9T
3I2NYDlZrEI6LzmBkZFfSeqsLCYtszqUlltA46YVMoN9wx+XvWGo2WBQHwQT
V8hCVxoZ8gpAb1jm+ki0Y0CwpC3r9TURHoc5uc5asz3MDA9GNmT7h0rAtFlH
b9jiDD3XXtkmhJ5Bth7Q6+GveFa9zFz1FsNn1Zu0YEBvY2Hs5vxkQG93bsK2
vERSvyB6WYW1XNm1ctnFMsk1cvPvVCkuVCouMStu2NG7j6PnPOGcQs+CTv1M
oXeMk+NsmDf4GCvncDHtIDtzR378rKN3vlmJ0Htau9mgcsXRq93ZL9ulU2zX
qXYBej2qPb3yHb2Sjb38Fb3cRZ8Wv/Ufvm7bihjujKQN7JTdrPQ9BYz9JXH7
mBmk/l6gNzEwiJ8QHBnGq0doULqY3ybhd1WKL5FaLD4vkr7DUZxTi9/OKZP5
eMY8YM37VLgKofdV+iCv6JXtGZZtcETvUGmOM/R2F9PcC7J2cGgHmbRXhF5t
6ilH9Iy8nYBeN9QBHD1X3LL1veLVM9A7kpmO0NuSnTIr6FVKr3Ik59nCy6Tm
8O5w5ecr5BeLy6/7BLK+AXrWF0IPivpoSfahovRXh94D9humiqUz0OuVb+tV
7gTu7Oht6xFvQOh9Uvzmv/meJNDbUZK2s6BgHzMW6gOpvwfooWkFrLZxm32o
xBn/hGr1DV7dPWndHVKrG29Im25VtXwskZ2nV172PONvKFvfw1uC5/B2G1S7
wUb1HmRIKgZFO0yq9abK7b2y5TcyliyLDtiTn+1sDOTusuzjBRmQ7e8thsJP
XJ4ckMcqec7IRVTgI2ODI+MD9lMHY1bLqMOIx5k2j2LarIPGymVm8Vq9ZOeo
fPuAeN1DwTq9ZJNRvMkg2mgUbTQIXQz8NXreaiNvpVmwoDDY5bdZIbvTk1bm
h7vkJ27ITdmSE7shL57UqzPCfxt04vL1tydRfj5mwdGbtJ/ttY1bLANWK1bF
a06gyYv51+j8S8W8i6Rm8a8X8lqL+ReymJc9Qwrfe3DPig3Ynnspq216hhZY
SChm7MqI2Via6qyc97Kz9hbT9pfQ9pSkb86OBvSemI2ORzjRrVGt07Lgd8ub
GBntRwtW2xgqT+h2WPAT+bAwbrHf12bCZu0fHqqr0/RyXtdL5xvl283V63sU
24ZV6/sUR02KHbDGKNtikG42il2NovVQ2nrBOl3x2v8OObq+KPVIdtqW4rx9
zJit+SlbmWnOjiS7pIUdSIzEjw9OTl3PMWGZ/G6y94LonfaLr1Jdr659T1xz
i9QKzXWx9lZl08diyYVp9NY5okfQhwAE9AaEW41KF2PFNkDvesbCpVG+gJ6z
gVi7OFnH6LTNpWmA3g56wteiZxoYHp++8mbSil8OYB83gq8jNdSbOtq+Twt+
+7Ri0VO+a79wA0TkgYYDdvRcDXbu8GNugB5/pTP0NmfHrM+NI/WLo1fEu5pX
faHIiUt41wqqWmAhs/iKRzAD0LNg/S+OXnxRwU5aNKDnrJz3sDL3FKUDeruZ
aS+CXjlXIpFrqviKaoFSIK6prJbBckWVtFKorJbUVIlrK4XqanG9QNZUKagr
KZdlZuR+XvALk2KRUb5zQOBqqNkxonYxyQ7j3E2jR5S2XrAG0Pt58BGE3uai
3L3F0T809E75xlXIr1Sq3uGr3ia1RH2VX3ujTPORQNiVV37R47QfQg/P4e3W
K3cgG1Q7wZBUAHoGxTpDBfSnliH0dudlORuItYOdcSQvzZWVsrswhUDvOTUO
9tnUPzE6gQ0M2wZHnB4dItwzhLUy3EZlG8dqXaEO9PHX9pYvecRfr5fYuROj
RhjnDmyoXmHiz2cErftNZvCutMQVeWHr8hLW5yS/HHo26xh+hzkbjl58uoxR
dTmHe66gsovURdzL+ZVNDO65jKLL7kEFdz95zwJR77kXLtgHO2BomoS4Qjqg
B5mbs3LexaTtYqRC+7arOBWh90Wf6TnoZeXLeeILfMlFeBRIL8GjWHEV/1N6
Xqi4JJBf5kkvCRVXxcqbPMkVTtU5D3ffz/J/0a9a3iPa0s/fqFdvH1Ss0ovx
aTcMdu7wAp8ubR1/dW/Rmv8KOuxSmHI4K3VTYc6eoqgteclbilO30ZNJ/f1A
D5gj0DvpHcORXOTI3oaeCKmhhCvl11k1H1TzOnM4F91P+QJ6vYLFOvk2ZD3Q
p9huAPTs7pFt7RduMijW2NFbco02b0mk165cmrPRINDQHcpJ2cBM2sVI3p4f
vyzJ//no3brzSWR0ZmgYLSIqDxwYlhkaleMVkBAUnklq/5i86J2/eFTyVnfV
gofclQPCtUPCNU9Frjoxzp1e5GIQrtULVwF3Ot5yQ/VyI29eQeDaX2cE7UxN
WJ4bujY33iU7aVNWtEtOLKlfEL3YVAm98mJGWUdeWSepC8ov5XAa88u70gsu
nQlgvPvxe5MQ9SamiCCVxYafYED3XgD0dqRHrWclOyvnHUWQVCTvKUrdWZSy
KStqCj2Hvt4M9GLTJVzpDXHtXYHqDlhU866y8UP8z9o7ovr3hHWwcFdUf0+q
/b2g5n6Z+NaZ07497DcAvUdcF1OVyxfSDUbxYp14F3Cnt3Ons5f2FHf8Fd2M
Vf8ZeGhtQdLBjGRXRvbuwshNOYmbCpO35CWS+vuH3nHPKJbwXInomrPufznv
AjwWyu5Xcjuy2OfPuPkg9PDytBs1a/gJMru7ZZv6BBv1ipX6ctduyaKr6W8s
jvTYlZfurDWD0t6fmehSlLCDnrg1N/Zr0bt772FKKquK11qjuaPWvCNRX9e2
31W3vK2ov0nqtEIFO9jVUrttQL7yMXdFH8S1iqVPql2maoJoLV4ZBDh3OHq8
pYbqt+gBawC9HSnxy3JC1uTErctKdM2MWpcdQ+rno2ez4dcgAHoxKeLcsnNp
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
/vnjBSPkIVbRrlZR3lbh3iPlEZNjXCdG++hto0OWzosIuHtH85VwBHO3BRWJ
Hh+fErer1Y8r+QLx+e677/bv308fQIGCqqysrKioQOjH74ZxxHp6jtfGemT1
5i0KlsmzPcN3+8glWmS2lzx3aXxRUFQGlPaiRa6tKXaX08Zc2zxOb2vJmNK2
0bI5Y+y1jbYNmWPgcI7x/9hGHmzY4Zwa4weH0zbS+xX50rVrP1XfVd2XgOM1
9Uu8Vwcr9wXEF/r/a1/wmnxZ3G7wBqRPb3NT5Kx2n3492fJayuv1aZM0JXAp
bzSlWXSkWFK7kTye2v+SxmmaGOuNiF1OsR6lWRDrSaoOMdarrDqqY/X4WC81
o8BDlgjRcw3PWh61W2+TRe3xjMv3VWT7yfNdFqd/uWpUR+LEuuxpmid59bXG
LZq0bd3nDm1ZDq1bp8p837aMibaU9+JwWiv9SPSmB3mK31JXM8Le08JdEXwi
0wOU2f7yXJ/oPf5xX0AheCtyfOOhzfbKlHnU4EKztuQjn+b1o5u2vs47nFdS
bTpTJ6D1pPa5hFE6Vs9ihcI23kvK6iHWW6gM79Xq0dv5KNPYhxInaBMscXFx
VVVVpaWlghj6bd68OSEhgdxLnJdZxvr6emBCH9rQ5Da1Dmf3vftqFQbvkcMZ
GJsDq7c0bLve5hq8bUlolktUvk9w6rKY3U4LlzQmTrmYPOpy0ni9rTHd5uqG
iQ1pFlc2TL2YPrZUMXqEbPHkmBAp1pUSPSk6VFSfdV6q9ArJ8gjL9Yja6a3M
dg/ftjR4u2fELr1tsTI33s2hOcnySvLI81utLm2d2JAy+uJWi6ZkS9Y0ldVJ
4xs2j0NrTR61xt36r9EeDuFBY5QekKwJ0QGTo72l8J8UH/T68g+rjhz7IcN5
685NTd205m1v97u7yOFM2pqPWI9Ezz10m962xD/VJSzTNSR1WXius8vWL1e+
cStxcsNOB81ymL52LWNqW+akes2vHYyLr7e9RUT42Ah3KavHRA+e24QIj6ky
17r2a+rOH4M9ncUFz7BU7wgNYm7BWV5Re9wjdy0J/dw9MsszItsjfAc197As
am6h2z/60K/hszH1W0ae3zzpWtL4syljrqWPaEi27UlnIvWZta+9sth5pCLU
OsbNOnq5dcTyUYpIK7mblNWDxmAOJ2K9TvU9zWNTt++Sk0waQycQ6ysgggii
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
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {63.61551724138626, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1:eJztnTGI80x7rpWcJrBNCndbZdvttgq4CrgJuPIhEHCVsH/CwfAf+HUgHHw6
t28RMKm22/qttt1yu223dOnSpXuR53jwMJ8ky7KlGT+PdV18LPJYGl1+PNJt
yZ73+7t//d+zf/vrLMvyv5E/s3/5j3/4y1/+5f/+z7+VB//05/x//fuf//T6
j3/+P3/69z/95e//9X9I43/+VZb9s6z//5cBAAAGTgEAADBIyEEwx6lB23Iw
tx/zzWt+fn6Ox+M2/ZT4+vp6eXl5ODCZTErPfnx8SONoNJJdPz4+zufzn5+f
7jt19HK8d3QA0AY5COZQkoNXHzuSbv5WzGw2C596f3+v3q6RuPRR2PGA7eV4
56QBdwZDGszRMQe776jj7tyG2+12fyB86unpSZ7K81yelYcSf3LlJS3T6bTj
TnvZvMdOAPTAkAZztMzBj4+P5+dnaZG/sty8mrtFKekTPuuXF4uFrDAajV5f
X11ylS7ZqjKbzUau9WQT2VBSTB6GfZ7aUFaWxu/vb98iUeguCWu3rXbSXISL
SiQaUhN3/3Y+n+92u1oHaZeyyEWurCY5vlwuS+EOoBxyEMzRJgddfIR8fX1V
V5PGcB13OVbKQYmzcB055xfn4kzy1H3B55GH7hKveUNJTL/TMJhCn3DbaicN
r66007MlKiFRWOtQqo8gHxvOvYcAiqg9GAE0U3uWLp3k3cn59+/fsix/sxO3
Fl3uyN/tAbn8CZ91y9IoV3NyjfPr16/skGjVfkpIVroNw25dgDZvKCu7CzSH
7EsyxV9LVretdtX+1Z0tkXvhcrmX53nDCw+vYd33m3JtWPvqAHRCDoI52uSg
v7Lz+JNzuJq7avNB4y+RwjX9sxKF1WdrDd0vYfyPW1y3tQK1SJpIJLl8yQ43
RWsvZmu7av/qzpbIbyhR2PDC3TeYsq1EtuQpN0XBHOQgmOPUoK2eq2sjsuGU
fjbpWuage8onQvsADZGtJFZcyry8vNRue5FhrcbZEp3tVuKydA1bvaMLoBly
EMzRJgfdFZn7acfZ1ZqvB09t23DsXH096K7RwgmD7lrM/U6mum0pcOWFhCu4
3k69upYlavnC5Yp1uVy6W6/cFwVbkINgjjY56L78WiwWkhHuS6vaSyq3mvsG
TfLCXXxdlIOyYTVK5vN5dtX3g+6LRVF1X7fJtvISssPvOWt36u58rlYreSj+
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
TiMck7W7dl9SlPqJUeHaN7rWszkH5SU4/1A70pAIP1vKqViyILyvUnscNSy4
s4RsVXuW6KjnfsYT3naoLeylv/O59Bwr74tLebkwd+d2uWZ331r6T1y1O6ou
nBILX8KpewjKc1AGcOnKxd9Pbi5IaavaFbqIlTaXweNb3G1SeSvd/YTmXfv7
82e3ql2hu3nxxwK2LFrY6L5lEL0uV6ntuaLOta8rtl5zMdsP2qjlba5b7a5P
nXZ6r/CpHbWUD8eJfH7ODmd+fyM30pBo6KpZ8uzA6FfPXcuHn7HbF7b5uLtC
211BhJ+v3M1Sf8u0tv/aN7r9ibd63LVRvQnuFzJhS/hrmea3oPYTlN9W/nZ8
4aXNw89sctDJpb18tvn5+Tn1dvgb4P6z6Nmtalfobh62NF+cFidK7d1KP+jt
ERHzH1b9J4c2dfabRxJr0Dt7pV9aaPDst7ynbH1jmHrVXTdfD/ZI7SCv9QzP
hKeGqLtd5j0jDYl+c9CdJfq9HvTL6/U6/LFoc2HD5ebj7opzrFz3yZWpu/Pg
kIfiFo66NhVrf0KoLmvOweVy6X984pHEl/bi3ClFauvv//s7q4vFwm0rC37l
5smJp+oTtsv48T/mKQ6XePKxUxrDO+Slsrtb1rLTllu5mwzuK2D34fZU0c5S
fdP9w9qitclBeVOijiWRcTf2ZTz446VNnd1C7euqrtZRT96jUK+5mO0HbXEs
r/+FebPw2ZdTW0zZtf96yH8pU911cfxCx33J4r8LOGXevrYNH89Caj2zw88e
pFGOpmph3ddGxfEHM6GwPCULpSHx/v7ufrZ0Bf3mYMjZuX5tSl1aR959901c
cbqw1W3luMvqKI5ntuo5thl3Bg7HmHunwpY2FWt/Qqgua85BGaXVT57S4o6+
5lOK//mTDGl3hLptpVGiJDwimicnniIcAPLxSQ5Ar+q+jpe9yHnm1Nvhfh4c
/latYSt3XSzjSlaQfbnfO52p3Tnz2hdbW7Q2OSjDL+pYEhlRcmJ+4m2bOruF
2tdVXa2jnvQT6jUXs/2gLY7l9afBjjlYW0y/6/A3zNVdF8HvRWVzf5vxlHnH
HKyeaWs93eEsh4acOauF/fr6kjOG68F/3+T6yQ6fLcNf5ku7W7ml9tlXUftU
m7N6dvghsZ/tfnau3xU56D5du1NQbWFrnRuOO9db9RzbjLsvEU6od18zNc+S
qy60PyFUlzXnYALOTk7UgCRgOGFEDturP686en91UrouZ4/b0pd2vJfvytty
R/1qlHZ9KV1yMAGyUzmywusOWZbLGQ0jueRwdq7fdc4dX+mpT9S2IAebJyeG
C8mmTVXx07iqnJ11eHa+VXfkhS8P+G6vm8hTW8zayV/90kb77ITE8JqlX3x5
q8Kn3tzaeWrVV3HFri/l7HV6da5Zyumo2eE3meFeZDn8duns8RXPtpqDZ+f6
VWcln5oR7Py7D9pqDlbHXsPMxIazQW3lI50NyMH2kxOTTZuq0vA58Oysw7Pz
rXrRkxEb/mL2uok8pybcVSd/9Ut77bOqMfR8eavC7ed81TZesetLac7B2rlm
Kaejup36G7wuR4oWQyLB5NmwYi3n+lVnJTccU34uc1+SxemDpXmU1p4NGipf
9H02GHgOXjQ5Mdm0qSpyOmpzLgqdw38SpHm+VY/UdltrlbWe5Vc7+euG2g2q
yQ6l8NKp5Zyv2saUqrU5WDvXLOV0VLdTOQm7KWwul4tLhkQ82yyg5Vy/6qzk
9jOCr5YsPaz23GaUtpylGOlsMPAcvHpyoqe0eSRPd6/GP5Qx4G8UXDdlJnYO
Xm1VLWbt5K+ba9eqps/Bs2/u2eLH5gqrlNNR3U4lPtwe/a812g+JeLbhB4NL
5/qF/6hp80DtPQebxdqfDWorH+lsMOQcvHRyYrJpU1VK313KceEvY89OmTk7
LagjHWf2FX+s8Km9lCZ/3Vz77ETL3mk/6e/mOVirGp7KwjLWzjWLPR3V43f6
8vIip1z/fYdvPzsk4tmGe2k51686K7n9jODukqd6bj9Ki3OVd/R+NhhyDl46
OfGiaVP9Ip9RZfzINaDs/evrSwaAv397dsrM2WlBHek4sy9cri1m7eSvm2uf
mhvY1//NraVw+zlfKXOwVjWrm+J3aq5ZddJiJPxO3S/t/adN3352SMSzLe1F
Kul/Q3Lqfa/OSm4zI7jLoG2Tg+1HaXGu8pHOBkPOwUsnJ140bap3JP7cr6fk
k56f+lq0mDJzdlpQRzrO7Cv+WOFqMWsnf91cu1bVDY++DNsIt5/zlTIHT9U2
q0zxOzXXrDppMRJ+p+6C1Nv69rNDIp5taS/u96jNc/2qs5LPzgjuOGjb5GD7
UVqcq3yks8GQcxAAdNJx0mJibNlCFXIQAFTRfdJiSmzZQi3kIACoovukxZTY
soVayEEAABgy5CAAAAwZchAAAIYMOQgAAEOGHAQAgCFDDgIAwJAhBwEAYMhk
AAAAw+a/AdS90iU=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {50.68965517241388, Automatic}, Interleaving -> True], 
         Image[CompressedData["
1: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
4/Xla9II3fbr6x6++5dQ7Y0fdfIfH/jd9u82nDBlzuJvWmq79dME6dkFT11+
2XTL1JEzOkcum911IQwr7AfYiwrzxivb1VK3bwL5y1txbqzf+anBWQyD2Svs
FYVVnK4YWVAY96Vv1EHHFVCKybJ9Dz/42+82gtmOHXR4c2ALpbM1db24qPnd
2m+qiFqiqveav3yGCuSKF+6tru899+aHyHCgniBqqoixo059/I47mr7fctAv
zqQK6IVXlnauqWlr3jJ96gVVYBqi+v33PvEaErMFrLAfZu9254CY47Ui2raN
XJ2V9zHgCL2RRb3MiK+CYTB7kb2iMOSNUlgpO90GE8VcMQWhLF7IOnvJoqQR
L6Ji3m1PgqCWTxVy2dKOwTryCipoJbeDfTQaRTs0BBvlSjlnMKkdX9+LuXRC
y2csz0y5LMLXwn48e0thXr+IXRTd62L7Jv/YigiSTSQSWGQYzF5hLykMOd0R
wVHO3WBOTVV0m/jy5R0X8f8+wJSzdwQCKxbLmXTSHcLXiidSxb+P2ettBkJ0
vrsXikjmOVTJVYoJcFcyYcfjSW+AKTtZwA2JP4a9m8Iggu1qSIRTinb+Ze47
eAeZyWTgOL2oWPnX//4xGMxuobJXFFbxpAU+SRXLCdtKFwvItI2So6CCapue
awSJBdE4Yx86uy+U8qmyN2I9KsQzFuxAswo5t5+8M3w9KKmM0ro7zC9K7bov
DJ6ZSZfTaXwt7L8jChz85AXJW4eFFRVYJJGHdXhclJx1lqF+KoWVM+5oKqWS
9+dUnD5z/MzLxk2fNWb6pSOnXzr6vy7/85E9tIz8b681/sKTr75+4vgpw6dd
Muaaa69IpTJuYPzvM/tgMJifgN2qMPgUFyrOYPJe778dpnAXt1Fo18xezoga
BVQpFyvJZN7aNXMXKCwPzkJOc5/TiogK6ZxV3BG3nMlZkHtvl7vDXDzrjJS4
c9KUXCqr75h2rFJIx2XHYuVcLu9msx2D/7ojeexKbe5RVbzJVryJyH6mCovF
YjRNp1KpSCQC/7Usy5nSlGdFlgJV0bxkmDYfC9DRUEw0lESeo6KWKkY5hRJ1
iaMtmX1m4fw9/5cIb4T7flbctwreqUpyxpzTFr527TOvX/zMsikLl01duGza
/GUznGX51PnLvUf23DLtmTecZeHyybDMd156mvu6U59+46J5SyY+/9bkhUsu
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
/MKsyOX3hP6HwhEREUVekUFYCM19/Pny+ncq3v385Y5PFndsq2zfUd327etN
2/7Z8fXfZf95Xfbh3+s2ZhXPF4LnvYL3hCmCGxk7e/aLLhKtb38fc8rRhziO
Nrv5uEFjYfrklo4tfTzFnOB/Bej0qX/494c74E3soT48F6KThxmyeZDFoO/j
2x89Lo+hj69Y8HAwlwnjzInUlj78IkAt6BHW1eRLG+SbJTl+usSxiTDglEAi
is8n5FAul588eRKwBQfB8/J4PFBk2IAjQLGRQljo1OBm/Ez1+ZnswvH1bX9c
UZ+7ojFhRfOUFbIHVjXFrGqMXdWQtKIxaXlTwrLmmcua46OTxsP7L2+KX948
DYw/Ilxu5uK1k6rqJ695Z0ZdY1Zqdpy7L9zBShBGRDT8ihTCknMefG39B2+8
s/PvW3e8+fbhxR1HKjuOv9i4729b9j3b8lXtB/tWbv0iO28BXMHG9TkD/Bwd
uOvD7LF133Hvr15c8sZNv5uAf4D7OGR36Ow+3PvlVxaK/1C/uVEY+Iy7SAK6
YvGktfXvqBwYhfY+t5/FNLIHTH3IFQgijx3xfW9OSxA5cc1iRX5rHx/riAc1
+wJ4Xqmgiws3c6LzAWHAJigRuGCQWyGEA7bB54IMw7bdbgeiwTlAOjiNGrmI
xIEpl80WRwBPo+mcPT+uYums5ZvyVm5OXNk4dVXjxDUNU9dsnrFmkxhs1eb4
VZvjombxa+oT19THr9k8HQxfqz4Rjq9siGvYmrGiaeZK2dS6jZmFxemIn5zY
5XEPwy0iIiI6Q5FCWGr2k7VNu1596+BzrXte2XryZdnxii2qf8pOvvSB/M+t
u1/fsqu26VNxUqEwHWp4mS9cSykt1O7JM+/75sjB2+6evHPHEWSyIL8/Y85D
oovHxd9z1dyUOz76zyfgXcVm5YkuEMXdef3c1GnNWz/aKTdfdstt2UWzM2YW
mjWOp//+tOiqcSLRz2l1n82sE10oGnf9zc+88Cp9bOddN14hGnflM4vXaO0B
3IAYsAPFhBjofoRxvOG9MYkwYBD4VpA3JS+hIF1dXU6n8+jRo263+9ixY1AQ
KDUcHEEvrM8b7PPj5XJwLyZu3XXGxv960aMTCuf8tGjehSXzRSULRKXzRaXz
RKVzLi6bc/Hs2RfMniOKns2ZfcGc2aI5c7Dha82+sGwuvnpBqSgjX1S0QPTQ
k79OmDkpHIpIfDAiopFQRBAWDKKM7GdWy4680vbds80HX+lQ/n3jicUy3T+b
lc+2dz7bdmjxlv3rO3aWZj8aJocQ+YFXB1PWL3smd3aGA6FH//TCKy+8gdx9
vXv33hGTxAT8LsUnt10keuvtd9//9ujdcUkezm3v3HujSFTfsXW7grn2t5M2
Nn8YcqCOhpbk3Ew2FFq97q3ZpY+vW13z2psvsPw46A82177xzCI3XhIamfgQ
ER5hdi48nxU6HxAmkAg2WJYFbEG258+fL+J13U+vPrJ/N02pV6zdILrgogtF
opde/JtKb1bSLE1pjbSWoo0qNbVx/Qbsq0a5lg7xq+uE+ierd7mpxx5PVKk3
m0zLWMvrVssLVutfbeYXbOzLVvZ1m+l1h+kVB/uy0/RyNFKn6RWn8VWcml4E
c5hexca+bDO/aDG+6HK87g28cfzkq088WBB0I19f4H8uHhERURQUGS8siNIy
/7Sq9dirrUf/1tq5+D3DX+p7X2nV/0Om+XOb/K9vd70s21PT8GU+IMyNodHn
9vaHLBruvvVS0SUi0UUXiUSX33TdzV6tpmXNmj+9tJhfL0y+KGt8a1vHisa3
/vu1NzGCvPaylISO9/+9X6W/4ua7+Kml0N+efVZ04TjRRZdedtWNd9050WTQ
/tfvfi268MqmjneRh7nr5qtFl16zXPZvzCwc7ogbEgOnNSSOcYSBG6VSqSBv
kFuz2Qy7DzzwwMcff0RTqj6ngVUe2vHF+9f99q7t33Xt+eo/v/jJpU0f75Q7
kF4pZ5VdKp25S2VcXl2LF8gJRTvijp/sK8B/FPhJZEqLb2H1VU7Tn7ymeZyp
NGAq4UyzOOMcv2mOl4V0FhgXnVS4EN5lS7CZ8EU5nAGwUi9T6rXNtTL/KMu9
H89exj9AxA8jIhp+RQRh/hBKKfxTXduBV5r3vdh2rPwj9plmxV/fNj3/tvHJ
VsWzbV3l73W9uO4/ibkPCgONPR6X0O2x55vP77z9lkCI8wVDwJff3nb7vzu2
rF6+7P5JU+E0luq5/VfXt7a2rtnY8Pt77/V4+7w2yx23/Xpzc5NSz/zsplut
NneQC4GPkFdUKEQY8qslBjnO98XXO/5w1z14tcyQH7Z/f894j58POzz/gupN
JhOUCPLW2dkJ/IKNhQsXfvrpxwrFCaPuBNu9Y/OayunZJZ0mF/IYM8XTX1r7
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
LMte3JK6uFW8uFWyuDWMsIq2yVFJ26Yu6Yh7tXli5Tvjy7fcVdkxobw5vqph
bkbZZA55AqeNCyMIG1aNAYT9iLQ6vYqiVYxWa9BplYxardea1EYwjYFWGihG
YzRrWUpPy7XKjes3EIQRhBGNHvFOGCpblPX6mqS6LVNxOGLzlMVNk5bIJi9p
e2Bx26TFsoTFsqQ3W2PfbJv6ets02FjSMq2iZWqFLDqpLHZJU3xNW9Lq9+Nf
2fT78saJda0Z1RsWZPOzcwxywbynghIjdSsIwobUGEYYRavBGC1l0FEavVrD
IwzIBUiDbdgw6Vgon0ojDyMsuiIIIyL63woeNpsD5ZVJKzZmrdwaX9EwZcnm
qXWtcev+lVLTPrWmbXpNi6S6JbW6LaGqfUYVpG3impbUumZp1CyzriH3jRUJ
FRtilqyftLpdslpWVLv2kez8aeHOLywBYd7IdqwThA2tsYswkJamgFcUraN0
tFpHA7YYg5ah9FBILWwYKROUT00QRhBGNNoEfowfZefOWbJ87oqmnFVN+asa
8uvWZ5SviF9Wn7y0PnXpxvy6jYV19Vk1m9NrNmfVbMpfun720vXzomTL1i1Y
ve6hpcuKNjeXNG8trW8pqazLqa5+oqQoDX+zwy2HQZ5fnnBzYoQoRhA2tMYw
wmjdKRN2DVo9EE2P97W0Tm+gGdjWqJUEYQRhRKNLIcyB+Olxjzx1X+FcUW6x
qHj2BXPmX1Q2VzRrPm9zLymbe1nZPFHpAlHpfFHpvEvK5lxdNvvaKNmsWdc+
Mv+GsvxxxQWi/HxRbo6oqOCSF/6SmpkyHgU53OiJeYX7wvgxzmR2juHTmEaY
nrd+eGn1NPbL1AxFY9cMHDQ9padojUqNEUam+SUIIxpF4oIe28I5k1TaFxy+
PzndfzRbHnHYHrWZ5znssx22uQ7LYw7L4w7rIrt9vt22yGp7yG59xG59LErm
sDzidzzptS7yu2ejwMJg8Emr+Tn5yTcWlP0OIQMKebDTyHteQi9eIHJd6wRh
Q2vsIgyYxQxCmBE3IdI4wMOoMzAYZ2q9QQOHdEotQRhBGNEokxcFjY/N+Y1J
/4TdXmRn8836DJ8112+R+sxiHyvxGXPAvGya1yzxmNN4S4meec0pbkMSXNrB
TLLoJ7H6RJdlkcNY/sjcXyKkRCE7CgldYBheXAh/WwjChkdjGmFGWsdgz0tH
MWoWdilaAWbU4qAOmlboDSpGZ9ApKYIwgjCi0SUgAscuzLzBonmKs81C7oXI
PhuZC13yeMSmIFMaYnIRk49MGfzDDGk6gq+MJSVaxqYFqVTUV4iCOSiQ7TNn
OfUL7bo35mZfj0JaFHSioB+Fwi4Yx882RRA2PIogwnQ0NorvawIfh6ZUAj7g
CJjwKsAEbFhKpsf80jF8t9eAF4YRxugAYdgjIwgjCOMV7Ld+RX2EBdH/pJAf
cfYHs2/1mf8asJRw+ly/RoqsRcich5hUbIYcbLBhlCBGig2+PiZJ1AwumokM
aX3qKQFjnN+YGTA96jPWzMv5BQrpUNCDQvy3W2hFJF7YMCpSCAM8afRao8Wq
kGsNWr3NqLCbelRdR62MSanQGk3WbmUP63CwFr9cadJoKaPREP3C6XnDEvrF
cKQ9pdVTBmFbH+4L027YsCFCj9sQIggbcfVDKjQYUsJKu4NCyEJhoIXQ6LLT
s31Gub5H4XNdoSAK+Ofk3mEzPuuxZIWsUux5GbIQk8N/U8Cy+Sc2ERts4N00
DJpoGVwxE6dsPLIlcUw6Z3rITVfMz78FhQx8R9igLrCI/gQiCBtaEURYj1pO
s6zT4dfI1XbjSQt9xKju1srlRr3FwFo1Bt2BE8c1lMvmQMeOd9ns7LCWc5Cg
UMKGXq+HbbVaTRB2fiPMj85YJoMgbMSF/ZlgWd5dZtOfnbb0kC0VP5yGDGTM
wQ4X/o5kwnckZEkAw3CB4/gBjt6XBV+R356JbAkckyogbF7BLQgZ+UBE/BuI
/2YHf/yT+j/dCYKwIRVBhCl0KjiD0rEMvKX6ECBMr+h0sCzL2HqUGp2R1piM
lKHveCdtYm1qjXxYyzlIBGHnO8LQGTUM12/9x0+N9CEaIRGEDdwJgrAhFUGE
qfVahU7X24MbEgFheuXe+++4tXrx4u5OhVZvBIS99+knItE1aq3DwJhNrH5Y
yzlIBGHnMcJOd8ROe2nQ8Yg2BBH9X0QQNnAnCMKGVAQRpjczcIbT4Re8MJvh
6HWXj2vcsEGvA6/Leaz7xMdff/WzG+7YtPkdo8mqVPUMazkHiSCMICysH6xn
TjsYHGV23oggbOBOEIQNqQgiTK5VyrXa7i71/l37Zk65/TKR6FKR6NorrrhA
dPHlV18rGie6+JqrL73iJoXKerJLzpqHIZzjh0UQRhAW1g90OA0+c9TaeSCC
sIE7QRA2pCKIsF6NgmZZM+viPP45RWJA2K9+dvVFIhEgTHTBRaJLxiVK0/fs
75ErLazZTvrCCMKGXd+jwA8jjOOnuQuPVB01Cg7qsxuCZWOFdARhA3eCIGxI
RRBhRhvbKZcDwrqPd9mYTqfpxC+vv2rt8uUMbVbp9Gq9Vk5TTg9Sax0UbTQw
IzZEmiCMICxcw/9A8AbUQy6ErAjZ+RjF0aPgoMhJ7tQQgB84jSCMIOw8UgQR
pqI1jNWqUTMauZpWHuizdusVnRaDgWVstNF8rPuEljV1y1kd7TaxNo1WMazl
HCSCsPMVYai/bj8z/jCAZ1bAB3ycDSGzL6RAyBDqXwdqdFgwhPpsDr2wIlUg
6BUg5fX6vxeXEozsYh8jI4KwgTtBEDakIogwJaXuVqlYk9PO2hjNYav+u8fm
l17CNyRede31P73hetGF467/xe927u6k9SYdpRrWcg4SQdh5jDB0enPcKS8s
wCGWNRYUS4pnx6bl/LZ43v25JZOzS2JyS2JGQ5pbPKOoNPWhR8o8XvPAuoo+
ny9chDMpNoSbdo6IIGzgThCEDakIIgyP/DIY1CqDTql1mLqO7PngusvHjb/r
LrvFvXv/oR61XGMy9iotdic60dljd5iHtZyDRBB23iNsoDkOfxDggvm9ghfm
z86PrVn5xLIN81c1zaprzKhtTqlrShkNad3mwhffmJ9XKEbI5fVbPX12eKIc
DodQBIIwgrDzVpGNSKRMJkrHUiqdxyrf/dXWG6659MuPP+7tUhlYq9lp7VQp
u3pNJ7sZh7Ovq/v4sJZzkAjCCML6HZlTXpjLiRcrTM28Z23jU8vri19bPq22
ZVp12wOjxABkre++lpMfj5ATECZ4YW63m+O+X2FyBGEEYeePIogwmjUoKcpq
8dBqyqA+ZGeOpSdMW7NsmYFiFRqqS9njCgZYa0gY2kzCOQjChlunAja8/TGH
+KDHhT+cYBBxQWte6f0r6+evbMpaIUte0jijfNTYkvrMimWPJSbfj5A9hJyQ
eT/nOVUugjCCsPNVkW1INFgsetqi6JLbmE69cu8t1115iUh0oejSy676iWgc
bI274upffr39u2PHu/QG7bCWc5AIws5fhOEyBAchDNc2vr5wbePx0XMemrx0
Y2HtprjlbXE1bUnV7cmjxGpk+asani8uS0bIGkIOyLzVZjqtXARhBGHnpSKI
sGPdJwBhlI5l9aagR7dv+zu33/Kzi/lwjgsvvUJ08QWAsBtvuWv/QTljtDic
lmEt5yARhBGEDUaY8HF4fa4+Tlc87+4VDXl1DdOrmsZXtk4ub586SqyyOW3J
yoey82N9AUZAGDxOfr/f7e4jCCMIO58VQYSxDlu3SqVWUKyBUfTs5zxar1mv
OnGcYUxKrY42UHK1Rm/qO9FlMFmcJ052Dms5B4kg7DxF2CkNRHScGh0WDMJB
c0rur2s2ZK9onblsy6Sq9kmVHaPFqmQpdRsfKSqLAy/M4zUHQz7IvMfjOVWm
U3Vm8LTSnaMiCBu4EwRhQyqCCOtSyinGyOgMZsZgtumPH9+DbCZW0WM00Uqd
ymk2q3tVWqPtUJdGQZl1eouOGpmZfgnCzkuEBUPh1XQHt7zxkRz9NT2H7Plz
J1esL66VJVS3TapqmVrZGjNKrKpZUrdhbuGsSQHEwicSDD9CUKjTl4kJf0j+
sI957oogbOBOEIQNqQgizOy0amhKfkLOUHSn/IjeJP/lFZddI8ItiVdfd9Wl
ItFlItF1N912oFtrsPtPyrUEYQRhwyZ+aLA3wFc1odDAdBzChxIQzvAhd/6c
6eXrZ1XLkqraplS1xFS1TB8lVtMECCsrnD2BRxg3CGF94ejK/tBK/rifbykl
CCMIG/uKHMK0Kr2ys6fbSvd5bP4u9X61/kDQxFjxvImWXnXPypqXrrxItPuA
qocObN9/nHU4dPSwlnRABGEEYQRho10EYQN3giBsSEUOYepeXZfRatKctKm6
DZT5uNF+mDp61K2zUDqjUqdwsl17tv9n0rScE8qAycV1qxQEYQRhwyaCsHNM
BGEDd4IgbEgNA8JoytSj6vbaFXt3fHzR5bduef+w0mDVMnqCMIKwYRNB2Dkm
grCBO0EQNqSGrSHxuafn4vkSL7lpzzEjbfV2yuUEYQRhwyaCsHNMBGEDd4Ig
bEgNTziH6CK8/CUgrHnLv09o2aO9lNnhJeEcBGHDJoKwc0wEYQN3giBsSEU0
qF5JMQajjjYztMlmPHriALKazYouE0trDRqLjlJ19ipoRsk6tKy7R2nQUcyw
FrVfBGEEYQRho10EYQN3giBsSEV0ml+tUquxMiZFd6eO0fYqTzhUiqM7tl11
9aWicaJrL7n00M59XWod4wl816MzsO5IIcxkMikUCpvN1tPTo1QqLRbL0aNH
4aCAqiNHjjAMYzQa5XK5w+GAE2Cb4vkFx3W8GhoavF5vZB64HxVB2EiKIOwc
E0HYwJ0gCBtSEUSYxWVT6bRO1mmk9QrdSdamaayruVIkumCcCBB24zVXXSIS
LVvboLb09ejMGr05Ug2JWq0W8inkUM8LOAV4AmbBQfi45bycTmdnZye8Cn8C
Z8KfCCyDP9+8eXMwGO3vO0HYSIog7BwTQdjAnSAIG1IRDOdQUHKKMegV1u5j
CldAv+/If/7r2mv++sgf7XanXNOrPLn7zZf/8qv/mvzptz0n1Uad0RipcA5w
vgBGarUaUvDFKL6pUMgtHNm5cydgy+VygWsGG0IR4GQgF2BOKNemTZsi87QN
JYKwkRRB2DkmgrCBO0EQNqQiGFSvMSpP9HSGXEjTa6TMx4/1fPpTkejkriMn
jvfoWdpj7T164OtLrryt5Z19Brs3gkH1VquVZVkAGThZAptAQCuVSuXxeOBV
cMGgILABB6EUQC6hCwzKAoyDk9evXx+Zp20oEYSNpAjCzjERhA3cCYKwIRVB
hOmtum5lj8uITJSzR7tv75F//fanP21b3eBy+npU3Ubt4SP7tgHCZG/vtflQ
j1oZKYQBoYBWXq8XCAU8Aip1d3e73W6BaEqlEnI+UFKhLIA8ODjQLwbPQ2Se
tqFEEDaSIgg7x0QQNnAnCMKGVGTHhRlY03d7um1Gl9Eh/3bfe7PTU+/71e82
bqzvC3i2f/7WjT+9fGJMBuNCB04oe8AJihDCnE7nsWPHhMzbbLadO3dOnDgR
8n/ZZZetWLECnC+g2+LFi+HIFVdc8fjjjx8/fhwQBkUD9gke2erVq0lfGEEY
QdgoEkHYwJ0gCBtSEQznMNpYpVajV+m5Pq+K7nZ5jZ3fbr9SJLru+mtE40Q/
u+KyS0Sidz78Yn+X5picdnpDkQrngCyB8wVUEhwuoBJsOByOjo6Oyy+//ODB
g++///599923d+/eL7/88vbbb4dd+BOz2QynCXH1xAsjCCMIG10iCBu4EwRh
QyqSQfW0VkervSZK13mEYgwn5SqH3uzUMypNJ2OSy7/bz7ndR1T6LpNbb/Yp
FeCDRQZharXaZDJBCrkFMEEOhUbCd9997/777z/ZeXTF8qUx0+L6vIHuzu8S
E2JXr9nY1at2OixajZyi8fC0tWvXRv/7ThA2ssIIC/FVDToDYcFwhcOF+vLn
TKtYV1rdEl/d9gBGmGxGjWzGaEhrmlJrNszNmzOJQxZcu5+GMM8PIewcX2yF
V0nuRJe2Kkg9iejHkfZhpHocaZ5G6ieQ5gmkewpRTyB6IaIW4l3tU0j3BKIe
i6LBFbWPIe08fEXVw0j7kkezYV7e7xAyw60OhPnFK3L8QgRh/5MihTANTWms
hqPHdyPDCUR1K9QGtQX1Kvr0lEOr/s7vPqk5+qVe13PMEdzLBB12RPdoDdrI
IAwy5nQ6wRGDDfDFIIfLli0TicaNnzAFQEYpji2vW/Lwk//Q0A696vCfn5j1
6NMv2fqQRvGdsmtPo2xr85YP6urqgoG+KH/lCcJGVlz/Ss3o1I9kwQLhyp8L
egtnT6tcX1DXMqW2/e4aWUxNc1xtc9yoSBulFZsWZc2d5kFOvGBnAPVXZvDc
unC5QmE0h2l8ji95GeALli1NfClr2pKUO15Puvnl+OvfTLnlDcnNryXe9ErS
LX+X/OqvKbe8lHzTy+IbXhbf9A/JTX9Nvem5tGjZX1Jv+pvkxldSb34t7qdL
En/+esIv/iG57bn8qbmJ98HND/tfp/2KiNjNJwgbWhFEWJdB7Q9Y3N999FD8
/Vdf9cuvDtkYBzp6gmLoTkb1tU391f3jf3Pl+IQv1cHeboNDazT88DudtTS8
gFaQWyEc0WKxgHv1r/c+uvDCC/dt/2jtipoX31hzrNtg1Bx6/ulZi554qUfr
YbTHOafq0LHuwyep+vr66K9ySxA2shpA2KmVmsM1/imE+cMIa51U1/6HWtlk
cH9qm2eMhrSqKW3JpkWZc2PdyO1DyBf8IYQFBwrEBcYEwkozM1dnz9maXtyS
nt2YntqSm9Gcnf52QcGWwqKm0pKGspLW4pKOoqK24vzWkvzm0oKmsoKm0qIo
pQ1lRR2zit/Oyf0gr3BrTu7mosLlDy94vDAHHi1O4JfwEQQIwoZVEUWYtldx
2Nv50X1Xil7429K9JwJdao/V5TdSSjN12KL5vKGpUvTT321ToYP7uznWHimE
GY1GvV5vMpkYhjGbzZDJkydPKlUatUZ/++237//2s5deeH5aQq6SsgecuuSZ
965Yv6Vb6zBoTvTZVAo1rbd4+XFhBGFjG2HBcJ/RaeJwWxyPAzAeYdMr1xXW
tcRgL6x1fFXrxJqWiaMibRYvqV/wIwjzjD2E8W2k/odTUzuy5nydUbYtu/CT
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
6IURlhJGWN8aOgjrHXJ/0fIdlwojDCMMI2zQCyMsJYywvjVkEXZ1imGEYYRh
hA16YYSlhBHWtzIKYaq+BLzUdagwwjDCeoQRlmHCCEsJI6xvDQWE9YDsCotQ
XUEYYRhhGGGDXhhhKWGE9a0MRNjV1BOLiMM5MMIuE0ZYhgkjLCWMsL41hBD2
ZYURhhGGETbohRGWEkZY38IIwwjDCMMIG3zCCEsJI6xvYYRhhGGEYYQNPmGE
pYQR1rcwwjDCMMIwwgafMMJSwgjrWxhhGGEYYRhhg08YYSlhhPUtjDCMMIww
jLDBJ4ywlDDC+hZGGEYYRhhG2OATRlhKGGF9CyMMIwwjDCNs8AkjLCWMsL6F
EYYRhhGGETb4hBGWEkZY38IIwwjDCMMIG3zCCEsJI6xvYYRhhGGEYYQNPmGE
pYQR1rcwwjDCMMIwwgafMMJSwgjrWxhhGGEYYRhhg08YYSlhhPUtjDCMMIww
jLDBJ4ywlDDC+tbQQ5iT5XtM3XKFYxnOySJjKRaOOcHJik6O5QTAmQAI27tn
l3L/pVMYYQMrjLAME0LYIxPG7clZ8GbOotqcufppMw7lzaieNvXtqTlvTpuh
z5mlz3ng0LQH3pg6p3b6zNqcGbXTZyk2J01p9bTZb8x44I2Jee/kPADv7M+b
s2XhwiUTs+V4NJXjiQv3WPz6VReMsL6VoQhDVOo29Z0ebNGciIyVaNbtZCX4
gOCkXDTvolmBtXEcwbEemvVSPMtIDMtJFMW8vuc1BJa0UgwjbGCFEZZhggvr
HPWH3z0797EHRj0wc+yDsyY9PGf6ogdyF86aNGf2xLmzJjw0a/yjs7MfnT3+
4VkT590/ae6siQtmTXgQvZ+W9KG5k5bkjFwwf+JjcyYsnpn9YM74+Y8+/OzI
EeNT55tMKIYO46liuT7CCOtbQw5hYi+EeZ1ON6sgzE3xbpoROEsKYU6/Q2BJ
F8vwKsJegfoiXz/f/0o3IkbYgAojLMOEEDZjRs6OvW9u2ffhpsqzqyvPlBw4
WvD6u+urj23QH9+kqdtU1bipsvklTcMG/Ql4Z4Pu1AbdmZe0Z9KRgm3RNax9
/dRWPfrF9ZVflO/5+6b9781e/Fyq1UB9iTFEMeXUMcL6TRmKsCvKyfXyxRSE
IUeMQ7zzUKyHojjO5uRJ3ukCtBEC73DxLCfQJIURhhGGETbIlEgku6bkztyj
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
Ec4YYX1rCCOMsJuCHt7LUKzdSkkswTu9TreX9xFudxNFBj0h2kpzbrfVSaW8
sEQyfUqgxd5RO6mmYO1JOXv2X17SfrZKWwcNZj4wRU8u09MAMgVhqO6oAR5f
Mi07RD27vwXSkkNkfpW5qIZYXmkqrnVc8fPwc0triOdr0QTnZb0QBjh7ocpQ
UmNe9vqp9TV12fNfcCsrEie7a1DGKi7DU0OyKylHE2jzbOWi1ODnboT5YvLI
mU+t135RtP9kcXeM6JfP/2UVxhWHKXhQX1pphFTNeSiLay3HK6aAsE2aj8fP
ebhDeb5HriQaxUPBA3BtqnuZCiOAK010IUvGBzrP/+cCDPji8oQFz6ze91n5
wZbig/bSGm6ZznQJwvK14jI9s7RWXWfGcsXcQ96TUhYr33I+/3qLWkbLNOZr
yn9klbYVWseL+9rWHHYWHWwrr2zeUn3uvpwnO5PKLg4JZSMKFBeEsh2Vz3WS
rEQyx2Kp5d2UGS7ytm3bBrqBHSwaqgjjWKYz5La01AVoezzoN9HUebMlwEmW
VpOzM2L2eF2cW3A4Oa/f4mRf3f5Kz9JDaVJqanN3qu4dNjz34Q1Vn5RWnS7Q
NC7TGF/UWMGgchVUGgsr2wqq2vI112DF1anZyqWH7PAS0gKtUT2+3JZp2p7X
GZ/TG1/Qtb2obc3XpAzeBy+s7LBlhfb8xkMNw2c+JUXR2frbO9KYO/0hdZ1l
9Qm59+wwOdLZFe6MxZUOoLEzn9xac3qN7uzqQ4aCqtZryn/UAVtrQ+DTGuEA
ch6t3FVjvaYvuZqVVDZsrPxoZO68iLpUZWr+cnSoemExZVRp7ANPrK/8Yk1V
W7mOKjvE5OvbimoN+drzBZrmgkprQQWZX0G/WOV4Xtf2gq552dXrhVoukKpF
o1aTa8p/qIylGssqnT1/byukRfsaV1c1v6w/N2rGMxHlWeiiSWHXtUcnpkg9
7urq6uyE+1Tev3//QDexg0VDGGEsaYl4Wb+9zU1Zi9dtuPN7P7o1K6u8oPCM
nWsWA1ajSXQQTq+fED27duxUF8q7Xg9OlyuRTO3a3JGQ22OpXZvvnbJwa+2J
ddVny2taSmuhAbSU1ljKatpWVRvAymsM5dVtX96Wv1637g3r0j2nS7Ut+fvr
y3StBQcaVmiar/jh0tq24kOmosNtKw4ZSg+1lNW2wDnAL8Kv51edL9I2lunq
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
AQEyW7M=
          "], "Byte", ColorSpace -> "RGB", 
          ImageSize -> {48.413793103446764`, Automatic}, Interleaving -> 
          True]},
        SelectWithContents->True,
        Selectable->False]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Chart\>\"", ",", "\"\<Interpretation\>\""}], "}"}]}], 
    "]"}], ",", "\n", "\t", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Code",
 CellChangeTimes->{
  3.7400952158684435`*^9, {3.740095315574901*^9, 
   3.7400953166972737`*^9}},ExpressionUUID->"0318f98d-e715-4d19-8e70-\
a3647e6757f6"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Chart\"\>", "\<\"Interpretation\"\>"},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzt3UFom2Ucx/EXBellIExRkE3cFKxSHIJxNDC0zjp1m6Oz5FAGjVjdoEyp
G04dKIP16GBjm85DpLhL3HGnUhCKY4chtEJPKwzDPGyMdU5EPMVf84wwk3f/
vm5v8n+TfT88ljdp+yR58+37xrVv3qfe+2jogweiKPqkRx+Gip++OjFR/Gzn
w7owvPeTPR/uHXv/zb37xj4cm9j43oO68rdb/y0vVwEAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAwEouLl76eP9kWN534PDc/EK681+5em3r0JjG
8Mh46pMH0zOzml+P4vr1pVbMX38IWj8tugnYoqhvbe9mDS2kPnmlcrl/oFCt
hVQYnUh9fk2r+VVR+cxZjdTnr9Z+isND0PxaS624CdgOTR7VE62hhdQnV6Iq
vy+3XR/1XKc+vzae585fSH3a2+luD24rhuVVT+TZkLafKtJToB1ZKxIKk2uh
NFU+eep06vNrzvCTpXJacf+rtUS1csJNRNH6VtwEVqStXIt2YbWt6MPaUWor
2qLNnV7lLr9K6cm1aH4leushtOwmgHvH/h0AAAAAAHSfFv12G0jF4LbikWOl
0lS54fqLi5fuYixWfo8d+lSlcvlO4x4n75T5W71+Goa+0aWodF25eu2LL7/W
Qvgd3O1Onjqtbv/X+Hb33uPr1h/vfb5xrFv/w3dTy79J78nFjoTznxwYjJm8
9/kTG17UZ6OoL3by/oFC+czZJPOfyG2Mnz+30ZhfP+MJ5//u86/utH70qcLo
RPz6ifru4rnQmJ6Z9WgqfVrDYQ3c+1R///jD0pYNN4Y2NYyl156r/vVncc/B
tc+99eyLO5pHwvlv7t99Y0e+cf4d+T92vaXPrnry9eaZdYv1vwZcef7xXbHz
3xzbacwffsaT+Ofnn+64fn795Zvvf3z8mTeabyJavek+/92THn5ar0WV6I23
X7rx7isNw0j06Rfe0Ug4/61EG+Yf2pRyok3zG4kqqv+daPP62bKBRNuDRG0k
6o5EbSTqjkRtJOqORG0k6o5EbSTqjkRtJOqORG0k6o5EbSTqjkRtJOqORG0k
6o5EbSTqjkRtJOqORG0k6o5EbSTqjkRtJOqORG0k6o5EbSS6onCgVvgbey1f
uXotXJ/W2xKSqI1EVzQ9MxtFj5XPnFWTCmZ4ZFyPfevQ2KHJo6m8BTGJ2kg0
CW08lUppqqxKz52/UH+L1+YjQKvL7wG+Pno0n/wNwEnURqIrCm/o3Zfbrj73
HTisZsK5AFI8ApREDSSahLac4fHW3wpAF9N6c2AStZGoOxK1kag7ErWRqDsS
tZGoOxK1kag7ErWRqDsStZGoOxK1kag7ErWRqDsStZGoOxK1kag7ErWRqDsS
tZGoOxK1kag7ErWRqDsStZGoOxK1kag7ErWRqDsStZFoQuFgz/rxSufOX0i+
km2dnqjmWcqv0b39z8iv0a3caX4STZdWpjpZ9URecSpUVao+h0fGK5XL+w4c
bv56Xalvif1UrE5P1EaibTA3vzA9M6vk1GdYVquhQIUa+/VhJJyfRG0kmkTY
kFZrZ6cNx84r0f6BQiqnASVRG4m6I1EbibojURuJuiNRG4m6I1EbibojURuJ
uiNRG4m6I1EbibojURuJulOiy7/j3rKhcbz8CIlWQ6Kx6ye/hkSzgERtJ0+d
JlFfJGojUXckaiNRdyRqI1F3JGojUXckaiNRdyRqI1F3nZ5o9FC/EmoY0aP5
5AfO2EjUXacneuRYKXZMz8ymMj+JBvVT097+qOtXtlSnJ9pqJFqtHZ58aPLo
4LbixcVLwyPjW4fG9Ni1oF1VWpsCA4naSLRai6Q0VVaT2j0lOk1tT25t72a9
3Err1knUQKLV2kpQnCpzbn5BZWrjqVAVp7auur7Vt06iNhINtEMPJ6UNoVZr
L0TbsJevkuhKSNQdidpI1B2J2kjUHYnaSNQdidpI1B2J2kjUHYnaSNQdidpI
1B2J2kjUHYnaSNQdidpI1B2J2kjUHYnaSNQdidpI1F1hdEIVNR/+oysTztD1
iarGmMOjenIk2h7hTE+xI+EM3Z1o+Avz5nHkWIlEO0V3J4ouQKLIOBJFxpFo
19Or7tJU+eLipeptBzHpYjilcjN9TRjtvJOG5UTffklN/mfsyJNo1yjuOTg3
v7C2d7M+6v8Tv/jy63AEqCIMhyo3qL/hRtvvabw/D39+c2znzfFdzaNKol1B
KSpI1Ri2pbpoH0ffWUi0C6hGjf6Bgvb4ajJkWRid0NY1O3vzu0ai3SH2H4G7
41+GSRQZR6LIOBJFxpEoMo5EkXEkiowjUWQciSLjSBQZR6LIOBJFxpEoMo5E
kXEkiowjUWQciSLjotWbFGTDULckiowo7jkYO5K/2wkcXb++VD5zVgv1M9Ie
mjwanjtd1JXd8Yf36FwqMBy4dOXqtcLoRGmqrDLDR13Ulaq0+bv6ctsHtxX7
Bwrtv8O434QjPcOrMtWo5bn5hVBpiHN4ZLz5u5Su2m7P2epxnwtnoq9ULmur
WD8qWdvPam2PH85Q73wXAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABw9S+X8QMx
       "], {{0, 0}, {225, 225}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 225}, {0, 225}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6649999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                33060.553125}, "RoundingRadius" -> 0]},
              ImageSizeCache->{{37.461672904455895`, 
               62.91905463540865}, {-29.318094822779145`, 38.74689437998485}}],
             StatusArea[#, 33060.553125]& ,
             TagBoxNote->"33060.553125"],
            StyleBox["33060.553125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[33060.553125, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                41325.69140625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{65.11823877741645, 
               90.57562050836921}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 41325.69140625]& ,
             TagBoxNote->"41325.69140625"],
            StyleBox["41325.69140625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[41325.69140625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                22729.1302734375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{92.774804650377, 
               118.23218638132977`}, {-8.204035696915398, 38.74689437998485}}],
             StatusArea[#, 22729.1302734375]& ,
             TagBoxNote->"22729.1302734375"],
            StyleBox["22729.1302734375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22729.1302734375, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                18596.561132812498`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.43137052333756`, 145.88875225429032`}, {
               0.24158795343010553`, 38.74689437998485}}],
             StatusArea[#, 18596.561132812498`]& ,
             TagBoxNote->"18596.561132812498"],
            StyleBox["18596.561132812498`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18596.561132812498`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6649999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                30994.2685546875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{148.08793639629812`, 
               173.54531812725088`}, {-25.095282997606397`, 
               38.74689437998485}}],
             StatusArea[#, 30994.2685546875]& ,
             TagBoxNote->"30994.2685546875"],
            StyleBox["30994.2685546875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[30994.2685546875, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{5.451201747997087, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.45075018208302986`, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJztnd9PG0mCx3N3L/dwD/cH3Mu95OleTxppb+ducrqTstod3WWVaFYoGgYY
8G6SGQfIJJDNkYz5EcXiRyZhjRIPDIQkEFlk5jAhA6sEMs7MmhyxN8nAxqvA
BiuRl8wh45vAyivU9+0uaIxtbONuaLf9/ajTKZfb7XLTn6rq6uqqvy/5cF/5
X+7atavqr7Ha997xtyor36v56d/ixf4Pqn5e8cH7ZXs/qH6/4v3KN0r+CpG/
wr//+Itdu+RwMBh88uRJgBCS73i9Xvi+uLgoEULyHZTs9F0jf9p+9PoiYw8U
MRz6rp1IJLK4zYgv0ms/pGCh79qJ8z32ZUQhNqySuaTYWHxRYjx9J1uCvmsn
TvBQKBQbFocXBBXEu1hvZmtibpDUd7HzFMonzVWMPVDEcOi7dmK1klbCjsrK
wdk/InI+OFJRYnXYaq2tfS8m3Var1dHSuG9vTVe/7fi1aVxNJ0qKSNGCGpeH
iC+KjcGWRUVFWCdVHpGiPTbuW4w9UMRw6Lt24nzvqzkC3yHa+MC5ug43Di8U
ln1XrC8ra/Dcbk3qO2Lw54DFdrs9tuyO8111GVtiHZc5iA0QaVGIe9fYA0UM
h75rJ1bM8Ku57gsW+w1/WJLge3nV2f6LtW/8yzH/zISj6QLCB991wPfStnFJ
iiZKCoX3KED5zXxHtuBUwGZYu1yu2KxD1PNRlxD7QSA26zD2QBHDoe/aUW16
vbTg6bT1P3qJ9ad3AlIkCMFRpe/0PJFCPlTsj1aUICtAKX+mqhhFf2I9PBRD
rMLii2JrAniJzEFSbtJluB/+lQl9147wHevH7o76T75EyQ67T5fb5tfumIum
M/UmuBpO9DRpA/5m7XWjo6OpG/0Sm+wMPU7EeOi7dlSn4lrmk5qYBbwfR/SC
vmtnsxby7OxOuivxRdp3ZeyBIoZD37XD/nXELNB37Wjv1p5hv3e99kMKFvpO
SOFA3wkpHOg7IYUDfSekcKDvhBQO9J2QwoG+E1I40HfwbOzSm3vfsVgsdR3u
10sLQw3lRYeODAeWxZsX6wfm1zZEOGxcOuO41XQA6USy5WdzQr4zVcXlVWf9
zxfk96L+c+2D+C1tpT/ENhUl1ocLRid3lWhskl5Muo9WlBw8eV28h5f9j14i
4Om04Xep8UQv6LvMcsDRdEFIDfftN/yI+ch2VVH7WaPFsep71I9w7vguzd2v
b+sV6YEgyKCQ+BNd38ivo/76T76UFIN6XB4jE5nAepJWwuKwT3RVdzz4XlIO
vniucGjsAV76uj8U8UQv6Psqa8rj3Lvi+zNORbvdvrC0ssF3JZxDvkuy8ijH
kbz+i7VyCR7yIZuS49d8lxS/UG8xMpEJrCYpElzNr2YHlAEB1nwXRIIOW+1a
LYvoA31fZzkAR8YHzqm+48j4/jAkfA+/mhPh3PJdcQeOqL6LEXWQVNV3MHLZ
njP1+VWQpOGnz+G7/OJR1/Fr03P3J+48uKb6DveLq9vnU+2DbBn6LimnFuwQ
w87MB0dwEt7zfKHUOaPQ/+C7Svm+Ekad+W1rb+74jvQgkT0XqnAB8tjd4egb
vjfYKfuyEnY3HFUq9lEUkV6vt650f84UlHKSRkdHz1QVw3ekE2tXa4uSHT07
/uZPzv9Grs87jp2anpvCOteyKbND3xXg9XWchEoFXpqevIvrRxEGgUBAdRxh
g1KYjJUwkr2W1OjGZEfxZ5WUaonL5RKXwznChiRFgjjsavJeLy2EQiE5FPJh
m9W2R6IfeeC7eBzV6FRsGZzYZnxgLbdyvIwxabJ1h74bBX3fSUyabN2h70ZB
33cSkyZbd+i7UdD3ncSkydYdE/ku5mYSUy0E09HpefLpnYD2xf98oWfipvbF
PzORNs1AlzQPjT3QJc1YHgam0qYZfw5dko1lem5qx5K92jBYYJjIdwHKxEz+
Uu+5w7suf/d3n/2vlgV7+GpGeut+5T+MV7zx1ZGsl91jZb/6vSuTX4dv/JtP
NSUbe7ji+/N/fXtRY5pFssdCk2nTvLC0ov1Qi5T//v+e4Uu1J/vl0qtMjnYB
kq++H769iFNod4+mBerB9/0TNVBey4KTMEPftacZexC+40s1Jhs5Rua+a0w2
FuE7vlR7sun7ZuSy70MN5RaLRe7tFgN9p+/0PWty1/dHXXKf6pVw8+E6teuL
RN/pO33XQM76/t3tMyfvyPMsjFy2x/azou/0nb5nTe773n+xlr7Td/quCznr
uxT1l5U1+Gcmuttvxj6iQt/pO33Pmtz1XXnS0+VyxT0hRd/pO33PmkTfM5kN
zcAE03f6Tt+zhr7Td/peOKT2XQ3HZQIGJpi+03f6njUpfBcBrF8vLQQCgVjl
DUwwfafv9D1rNvMd62djl4qKit76WW3o9fcTXdWlbeNwjb7T9zjou4nYzHeU
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
       "], {{0, 0}, {336, 150}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 336}, {0, 150}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                35980.26953125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{90.83685801696474, 
               119.10262931249184`}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 35980.26953125]& ,
             TagBoxNote->"35980.26953125"],
            StyleBox["35980.26953125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[35980.26953125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzsvQdgG1ea59m3O+lmdmZnbnZ2Z27ntqfv5tzdTspZYhBF5ZxJiQrMOedM
gjkTBBgQiJxBkGAOIqksK1i2HLtt2VZkRCDBTAKo/QqPrIapAi1pKNPt5ue/
oUKhCLx69X7v+16oV79yDznq/Z9+8YtfRPwVvBy9GOMYHn4x7tjfw5sTwRF+
PsFennuCI718vMI3uv9n2CmH/3/7f/ziF/g2tmzLtmzLtmzLtmxLZyaTyWg0
vrhzenrabDbPzMygPWNjY2gDdhKHTU1Nwevk5OSPklISg0TC69DQEEoVSg9m
ST/aGB8fh1d0ghMTE0uTyu8nichSSBVKHpheryeOJA5AfwJnh96ik10qg6sM
6UEJhtyGzIT0E0lFO63fLtvCNo8jyFgCQ/QRvCVKNdqAS4DKMGIWcntpiwSy
0dFRzAouqCjQiaDSC58ShXypDNIDybAunCiFkJ8jIyOYpZaAHEa1B1GHEMej
Y5bcIIUGg8F6D6QQ9lhXa0QtvWwLGFDzossjLjdRFWu1WmyuGMMrcnPE2x8t
tS+a0WLWe1AFQnw6MDBg/dGPmjgrs64ThoeHSeME4kTQBlwF5GigYC955QZJ
gmTodDpij9liBIawTRD3YolaNlsGV5nILti2zmF4S5RkKD8INOQK0faSxxgo
HpsX+kLaCNCg3IK7WdpoEzllyDfrmgoSBr4MZSBpNqI0A6oIvZ+C44OUTFgM
m8tz2Lb2g1BdW4dSy/aDNi9uhDIMGQsXHbMUY6LcotyGPS8GTktiKIXI4KKj
Et7b22tdmRAbsP/HT6G1ESW2p6cHJRWZtTseHBzE5lCF/XBRfiJVHGQ1URJQ
koi0oW3U1oPcXsLo4o/ISCMfol2PDOUkZCyUbVSMnz17Zo3b0tZycArzEozN
NTcMFsO+39myJIYidmQERJBy2O7r6yM+QpcDeTdUqxBRHHzDEuYzQRPUCahy
6O/vx+YSCTyiehuBueS1xB+Rof5MtA2u4YMPPjh06BCFQoHtuLi41NRU2P/o
0SOhUIgqOplMBpcA+T7rqm9JUo4KpJ+fX1RUlFqtvnr1anBw8CeffAKgff31
159//jm8Hjx4MCkpCU5hCdOJzfVQoQR/8cUXJ0+eDAsLe/78eW1tbWZmpkaj
AQwhb6Fst7W1FRcXQ4Zb98wsYYsPUg4pUSqVe/bsyc/Phz0CgSAgIACzuOms
rCzYgHbKp59+ev369aVK5B+XzQsY0DZUcT4+PlCtQQGGMgDl+eHDh7Afyjb6
FGCEIrTkIwsoMaimBccHpRd8nFwu//bbb9PS0jBL8W5oaMAs5QSQXMJ0oqYx
crvwiiCCKk4qlYJHhuSBU6urq4OdYrEY0g+OD84lIiIC+/4YxBKmH23weLzP
PvsMUsvn8yFLb926BTtjY2Ph1cXFBQpGRkbGUib0tYy4LphVt/OLB7y4/yW/
nNSIGhUKMLENFxrKCdRpkLdXrlyBuve7776D2gzKNnwKGMbExKAjoYQsXBXb
+l1sLoaZN1xo6/gFvgegQxHaN998w+VywWuAH0lISIA9gGFHRwdmiTxZLBY4
8QW+52XsB0OpBb7fOqPQyUK01t3d3dzcDDn8+PFjhUIBp1BWVgbph0+h0gMv
g81VjwtHm7Z+FxL84njia+Qz0RcEZQ/cMXi6goKCy5cv371798GDB/Hx8XAJ
4BTKy8uh3rBuxv7INmA2YeNT2DdPsU8/xmZ049joJOTfSwQLqDP5xawmwips
ru/OZMNeu2gRFwic3Z07d0pKSioqKqAMQD5DPQa/+NVXXwUFBcHG/fv3IyMj
UfFA6Xy9njei+w6bG419jcAVtfIgVKupqQHuoK6Awkyn06Gi6OnpgcIM1TIU
CQaDkZeX9xrNf5TzxrkhQsLRv2o+E9yh0gsbkIFMJhMK8NOnT2k0Wk5Ozpdf
fglJhRoPmtJQ41VXV0PV8R8cWYAEwy+i7CVGZl+mPMwzVDLh0kPBCA0NhSsu
kUjS09NhZ1dXF5QHzFJjQ+Xc2dn5GulcoDwT2+Y5W+B7ejFzSUJqyK/XRf/b
e19U87DpcTNmMky8VNuTNFus0VtcQ2Po1vMQYANKMmxA0cWsagDrqgw1sVGn
/Wv/NCpRRBflf+QE0QAT4UABaqIzE8FCdNW+6jejckukDeWSdbfqyxsqP5A2
oqYaGBiwTtI8lwopty4M1u3xlzd0ccHgb4nvf72sJpKK8tk6E6CVhz5Fp7aE
Xk+PYZWVleIKGq0oveujS1ps8vGobuGzJc6LmDGC3iLX8CNM0YFLQxrHQvFA
DQ00qIeuPkoMKhvmBW3hX8QsV43Y8xpFArye9YCddWyAshSVE7Tf+rfmma30
o+lS1jHbvD7JlzcinfBtROEk4EJVBKSQ6CREYYBer4frYh2Wv1I+G+dG563n
Kb2GQfIgyESDHehcUKsEs4BGhBOoB+AHS8UrlZNXs3GsvpInqigvYxZ1fHZl
FJue0hkwww//Hcph6+l8kO0oYTNzhs7rVWP1hU/ZunRB3hI94fN4RzE/6km2
5vQ1spqYEgMOlAgqCBfzqpfMPBdQgcHXWs9mQecFRZoYInklQx2MKB/MFt8B
pw8t31fNZ6LYwzaKV+E7UbQMX0iQhQq2NSMol1BLHEWMr2So9wy+HwoV8eWv
jQbKEOviSmQOnMu8+ZyvZAsU3RcDTvMCVQ3UEiNjUHCx6RnMCOeL1znTkz/g
thBxKP2o6kOniUa3F/7b1zbSiWRoLhYR5UIOo/TATmL2BXoLkMIeswUlUlvg
p9Gn4FWtr+xrnAJKlen7s9pQSDzvTBdOjK22xrwjYQ+0yF4jnehXIDC2vprE
hBDEiNkCJmoPojBjXijyqvmMshSyiJhk8nqZDMmG0kjkBkSb1lPjiMPgh4gx
91ey10gSqUFmwc9rTBPDmEmLTRksb3+wU5KYJwlX9sMPP4QzQuNQDx48+Oyz
z+bl2MK104v2MqeMAhvrIkrkqvW0Q9PcTQ3WX/6DVdY8M885AmhREr+4wPG2
zDqKe/G2BdQfhTbQ2Lqt77GVftKcXGB80Nb3T1uM+ELT9+fBEvlvfRbWO1F1
9zKu4UXDLOAQ7Ur0Va+azygxcArWsxegxjPOza5HhqKyBbqhbNmrlmebpp8B
2MBXQOZa+mTh5Gcw3UKeC2UIKuqJiYkymayzs/Phw4cQYLPZbIFAAO0Lo2Xq
O5w+muJFagYbNmHD4AvhryA/YQO510mLoQ5MjUYDf4sKCRyDtlHDAYVe6K9Q
g4jUbP0u/Cia9/W73/0O/Qpswx5bx9sybK4hgzw1BJboSyBVKIpAtzCgwoAa
hqRmK/2oLkKjbKgnB14///zzV81nhN6IxVBgTPzo06dPUTcmmqsJBr8CB8Ar
5An6aVSHvF4+w+uzZ8++/vprtA01/ALptGWQt3CZIBkoyBm1GAqHIMEQY8B+
9HMmS0v2VdFboDyPzNmoldniaBQzTljCTkvoiaM3OKwHD7gAekTdAsnIy8uD
02xuboZzefLkyaVLly5fvvztt9+CgwAA4SO4WFDxtrS03L17t7u7GyBtb2+/
bLHuzqudHZeuXum8fv3qvY9//+tVe3efSnU4krntaBqp7A4lbT6csvZE/q5D
0U4uOavX2V2O+JfW6L+oC/9bUrVG//cO/79rjfrrSwH/0hj7V6Wn/vwXuzb9
3YlD/+C6h1T/5czufzmx559P7vqLMzv++zGnX5za4u3t+/nHn123YUxhw6qt
Zx0PJdsdotidSNvumrr1SOKWA0mOxyikWncq02Xr/7oU+nft4X9WF/2PTZF/
3xb+F41Rf1Mf9n8iqUP/ClQX8pdIN6P/0tvxn37h4vT/njj8125O//Xs/n9w
OfjfXHb93amdpPpb172/cFhFL6+8ffeDW7du3Gxpb7h2uaP5UlfntctXLl27
0X7n3t3AsMytzoE7TlDsj6c5HEkk1+HIzaeTnU7E7TqVt2Z9XP7ZP7vh/Vfq
qH9sCf0rUnVH/teusD9XBf91W+hftwf8l93O//qPbmf/h/vB/8tlD6n+3m3f
37vs/ofTO//2pNPfHN72T86bGq52f3LrQyJjr83ZVYs5HYtxPp5kfzjR7nDq
jpM59scpWw4n2Z9MJTLW4Wg6kv2RNNDqdbtbfP6iOfLPakP+riv0b1Rhf9kd
/Z9bwv+HdSZb57Pa/z/9YsuaPz9z9J9cHP7p9K5/OrHrL8+e+m+uDv9wejep
/uqI3TvH9n1478GD65Dmm63Xui9d7r7adunGjRtXrlyBEg7lHEo7UDDvlqX/
uKGeARRsZGRkwC/Cb2EWv1NVVUWj0QA3zOLxiSAQ4lKz5fYu49zsCBxeMzQu
Z8wm2AntTOzkhbhIijIgsc4zTkwqr2ihR6zkbFJDcDTbP0V1ytXjeeXW75jv
PmWsJdVznl0ffcMz7qpeuuN3vJXdae+/HXZxU0rMhtQQUq3PDHdKiXBMCV2Z
GWyfGPhvqZ7FxaXmKZu10NW7X7l4pgfESHzjanyT5IHpMp94oWe02C9BQaqL
6TWZ3rv6Get6me98w9n8hLPhGev97zirepjrCD2HZDPWPqtaAxpkvlvgs+X/
T/bdFR+1It13bVrY+uSITcmBttK/MTPqt0Hnbtz8wIRXoyZsbBIqXPMUNjON
zRgnpo3DkOMMToNPaEVgksIrXuITKySVRzj7bJzAK4btH1/jcpbTlPPeWOWm
Z/JdfQI7Umn4jlrBxsf4q0M/Y0tIoNOqhPiVCT4bU0LIlRmxKT1sS3rohtSg
9Qm+jmFej/Qa88gfAi0UvxEBpF8cOzABT5h3tCQgqdYnUeERK/JJlPglyHzj
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
zyHVUVqWV0nuIUbWKVrmKVrGoqM3brKF3s5+yS6EnlbiDOj187b1cjYNVa8s
9t22IiME0HMuidtdkALoHc5L3JefRKqXRC+7pLZadpspu86S3SYVg/8xR3GF
pbhaxrxjQe8zHD3b86Fm0TPhke3kHHpnKnNPl9vU2fK809SMUxXZBwoSFh29
Ky01CL2e2r0axS4cvZpDBukhaJIMyA8Dev3KY9AY6Rc6D3C3DbA2fEtd+a9+
5/eXFHsWJ++kpx6mU44UFZ8oiz9WlkmqnwF63z8Gj5snp0bHxoctp0Si6ZFB
KABDRnwMaAabvNLUNsReN8C3s8YN3caiV58FAYmDsmMT0j1PRYdHBZs7clY4
RPqcrihwoeeS6kRFrm9ZwRFWjkt59ml65vb0sDeBnpa/YlDkhCepxhHQ65fv
QejhY5Gy3Th6wu0W9PBZ1iV+diszQ12zM3aWxu8pTN2bm3YkP2l/QTKpfhC9
CZMJ0MulqnnKe5yaD7g1H5KKLX7AV13nqG7Q2Xf9gmkffvI5vmSkbfSmLPer
EeiFF+e55qYAemcq8slVVXC+qtCVlnW6MudgYeKuKP/FR4++Qs/c0lO7T6vc
PSr36FcdNkiP4B0CiiPQDAENyg8PiHYCeoPsjY/LVv0v/wsHSku8S1OhpX+U
nnGsuOQkLcFWdPQzQG9sbGJ0FK1CaSJ6J0zmcWzGSC7A0wghzQTyfB2K5n7q
uiHhQW2dG0inPoekrz+PpK09q5GfnJTtfSY+NibY1pG9yjHKz6Wy2K0in1Sn
GQX+9KJj1XlQbFzKsxYdvQkzVpd+0Ro9Pe8QoNcv2TMg3Qvo6WR7ddLd8OkA
H2JOOwN3dam/PaB3JidzFzUB0NuXl37UBncviR5L0JRXVi9Q3efX3RWo75OK
K/tMVH+DV3ejgnvXP5T24aefWpbwsXles+hZIhYCvbNVeecqC8jFKr7IhKuQ
68rIO1SU9AbQU31bvhrQ663br1XsHZV59auOjsiOaxRHNMrj0AwBwfageA/e
n1y9+Qlt9b8Fuh8po/qWpu2toByvyDpZQnWhJ9qKjn4G6GF4zInHKgaDARp9
09OTsw7OcsvLi5rST5im8FATLhMc1FHT/rhg1QBnvzVuQw0XCOkAScWpKfmB
5+KT40KHSzmrt0f7u1aVQpVLqjPs4qDK0hPcAig2rhXZTpTwN4GeTrBSI97x
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
Wovne2iS1yDAyspKl6InB/6FD1Q/gfk8J+PdcZHx+RlxC9LjA6mxuenxBdkT
AumNfkamzen4cb/0ZYXBB3MEP78eNOmdYPjf6SwQlN6vJ00RdroX7ZHi93r/
2EfgNhV+x8Ts9LdjIuML5sfnZcZkpUTzWZTh3gUQ8hmVPhfppS0t+B/p2bNZ
TiCQWNeuXT/66CMcX1RUVKdOnRjN6Ym4kZGRw4cP979YljwM9yoqKvRmZ88C
zqOGPmpWIK1H7LAJSwMT8gOf5mbg9cYuyvi9z4jUpE7/6p+5fNl/pWcB5wkH
g7uUlJTy8vIhQ4YQTBYUFOzevbuqqiozM5PtjRs3VldXl5SUsIG/I/P69ev9
zwYMd/OPDw7u258USO8dMzwhLwPdTV4wf+LCLMZ68YuzGv1EzJ3RZfCA3JXF
/MqH9h20yywnHnridN++fWtra0eMGFFcXIziSCkrK0N3hYWFa9ascZl1tdPv
9Wxy4Wg56KUvyO4dPXR0yqyRs6fHfpkUl5o8KmX2mC+TGv0MmDX5zaGDlpSt
5ffdV7/Xc4/0NE4UiCH79+/frVs3tqOjoyMiItCU3lRIINqrVy9l05iOdESn
eT29jlYp5vv+P796ufl5vUdHDJwyvm/MJ5ETEyKn/Lv/hLiPosc0+un32YSu
wyOWrS9Hej/v2mPSM2xK3TDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJ
zzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJ
zzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8wwoJJzzDCgknPMMKCSc8w/iqQ
T1FR0YEDB2pqanJyckgpKSlBWWvXrl23bl3I421//vnnqqoqbevFQ+S0l54Y
RlMpLS0dP35827Ztq6uru3fvPmnSpIKCgq1bt+7YsWPq1KnTpk3btm0b6quv
r9+zZw+6++WXX8ipsnpItUnPMI6NuLi4hIQEdBQVFbVhw4YVK1YgJfQVCAQK
Cwu3b9++JUhdXR1/9+7dW1tbq4J6CRHSs7DTMJoKKiO8fPLJJ9nu169fbm5u
Xl6e3FxMTEx8fDzuz/O9vBKF7tq1S9tSnL1zwTCOmcTExN27d5eXly9evNjp
aEkQ6Wt/EAJOpOre+Cw9mvQM4xhwL27+7rvvpKA9QXB2bgS3c+dO5/VQot4x
5Go4HOTvbbVhHPdIRy6G1Ov2BG7O7+BceOn55Ga6M4xjxunrxx9/9BpUhjd0
4uLrgQMH/NJzji/EAxqGYTQVBdjqiFxX41APo6hAkTkjX69hhkXbuuTrCiqW
IFx3RVwMr7eCuspDhs+qxyUqRWNqSu3bt0/1hBxOKex1naHeu+0yMI5QM8hD
PRpr8NffNnbpuCrlyrrBiL+ndXsppQz8pR4b+xtHDxaFyTl7k/lhRW7boTz+
xPr6en8lXtAUZcmMoLVLMtEiBAdmTza/Br3GlgnJnj3fu31VjyxcKlbE4q/Z
tVCHRjX6+v3337ts9CQhDfa3wX92IbENibSQRPocC3uMP4+ThryY3JYsHCv9
6aefvAbR+aURIhZlmDZtWuvWrWtraynuRO01+E3lcZ7C5fGPtXVFS57OHdTZ
uRsROOF7QZX5PQ4Ztm7d6r6yS2fEiTjv5jVcvvZ8GmcX2/oRdBSXWYmuhV5D
B+LOPaR7MYw/RmGh57vQ5Ia6jcZ1GJuM0IVwuBUZsHIOHDiwRYsWfi04/6I8
chx1dXX+ZujoqoecUp//6BwFU9dXhZcu3e+I/Ze/OLUQx+3HLQuU32zUxeso
zjv73Zx+HC/YAzgB2hILo0lIfXgEQrKNGzcuXry4srLSC4pL0RqJciI1NTXb
tm2TgSHA9evXOwls375dQebIkSNPOukkzJWcy5cvJ12ZEc4333zjDzLXrl27
YsWK8vJyL2i0freivdXV1Vu2bNm8ebMqUT2yc0qVlJRIsJs2baoPsmHDBs5F
nYOrzXneHTt20P6VK1cWFRVRp/b+8MMPXjAWpSqK6HQ4LxqvX6C4uLigoMAL
CpCfSNVyIuxCfe4onMjSpUv/QOmGcSSy5z59+px77rknNfDCCy9IkklJSWec
cYbMr1u3bu3atfOC/X/Pnj3PPPNMGf+cOXMogmbZHjVq1Omnnz5s2DDVc9ZZ
Z61evdoLepnmzZsPHjyYbQy7TZs27CLl5JNPHjRokJqBeSMT/mLbNIYMLVu2
PO2001TV+++/rysk8fHxONZTTz21VatW7733HrtKS0txXqR07NjRaxgbujBS
oSn9AHXSNvKTs1+/fuorOE1S3nrrLS8YQ0ZGRl5wwQUSOz/C2WefffPNN99z
zz1du3Y95ZRTcNacJonJycn69eidqIoaKFVWVvb3/uuM4xh11J9++inG8+qr
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
YRiGYRiGYfxJ/gNcdul7
       "], {{0, 0}, {297, 170}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 297}, {0, 170}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-1.274056809905317, 0.}, {3.2560087399854334`, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.693], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                38003.70703125}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{90.83685801696475, 
               119.10262931249187`}, {-43.31360670393819, 41.64262979951681}}],
             StatusArea[#, 38003.70703125]& ,
             TagBoxNote->"38003.70703125"],
            StyleBox["38003.70703125`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[38003.70703125, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-1.274056809905317, 0.}, {3.3105139111434814`, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{1.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {1.4512017479970867`, 
               0.}]}], {{}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-1.274056809905317, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJztnTFoK1GX3ydJE1CTQp2ruHXnKqAqoGZBlcJCQNUu/rIEwbfwzcISlE6t
i4DYyp1rV25dunOrUqVKleqHnOiim/tmRqOxNPfqHM3vx+Mxupaufjo6M3/P
SPe9//yP/zz9H/8+y7L8P8pf03/41//6t7/9w//6b/9Jbvz9X/P/+U9//cvL
3/31X/7yT3/523/5x/8gg//n32XZf5f7/79tAACAnlMAAAD0EnIQAAD6DDkI
AAB9hhwEAIA+Qw4CAECfIQcBAKDPkIMAANBnyEEAUMVgMBiNRvv9/tYirbBl
C7WQgwCgCsmUxYFbi7TCli3UQg4CgDa22+3T09OtLdpiyxaq9DkHpXWrVzNk
xLW0L4vf2O120+l0MBg8Pz///Pz4wclk4gbX63U82+/v79FoJE/0+Pj49vbm
xz8+PmTk4eHh9fW16hwajsdj2a7e4UrkVctrdxXYbDYtrWq3a4spL1zeEdeo
Mq0S7VpV1x5dGbYRPvvmni1+MlWprTzvcDhcrVZeQHY38ZeCu5/6GWT/kpuS
L1E9i6AU8lyy7W39+NmWiGdbehZx84esU+/75+en2Eof+iNbbaOGM1/ZtCXJ
5p3lbJcW5yof6WjQ5xxcLBZS4dLgcrl0lziqPT+fz6XNpMGk/v7Xv5eXF9dd
kk2SU5FUZReQA8j7+7s8u3SC9IaYuB9Jd8luKN0lJrX7qYzLkUceKIaz2ax6
hyuRVy1Fk/mlmNLnLa1qt2uLKaV2DV86VN5Wu1Y16qG7Vvjsm3uTHKxVdQcu
GczzPNyn3O4mG6GVPFxuykuL6lkEpXAHW3ne0vjZlohnW3oWqaQ/8p9636WM
MigHBymyv2dto4bPck3TtsnB9l1anKt8pKNBn3NQ3n0JlHBE3ikZcV1R7Xn5
UfX8sTRDJKSr/R5aHHrAt7RsyE+l86Xba/dTMXS/g4m8hGn1DlcSzu9/sTxr
VbvdUEy3E3VY7Su1a02i7kq1wmff3JvkYK1qeHYQltHtbu50zM/g3gg5iYjq
GVrJ6ZKcGfnfb/342ZaIZxs+i+SI6Pmbp953V0wZlDMpf8/mma9shjY52L5L
i3OVd3R+NOhzDgrSutmf+Gau9nxtoUoPj+Qpu2d40VXaQM4N3bY0mESk7CPS
+e0TJ5JqeKy7zKpaTJlK9gi56X4/VKJdq5psVzrr1nIwARdYufSU98IfM2Pr
bTYb94zyt7s02r4l4tn6Z3EXoPwVxaJFMcNfP5obNUEO/qohmysf6WjQ8xyU
XzbCi5my7a83Vt+v5vNBeYP872CdI296my9mh85+rxEr/8uYt42dg2etSttu
o7aY4/FYfjn5+vqK99X0X2k3qKbPwVNvblW4djClau2xzp8PSvqEh313NdW9
7wn05Hj78vJSHK7guQsv7Vsinm2YX3IEmM1mfhc49b67EA8HTzVqV81QzcHq
zG26tNnHD0Y6GvQ8B4tDn7jmkb/DE+3q/iv7iL807a+fzOdzf/ndX5PvnIYP
st0Fc3ehILzmsFqtXGuJob84L9ulF9WVnltC5ac9ZeU+v5AfPT8/u4+Qwuv8
tcXMjp+8uM/NO9T2tNc+qxpDr7pCLdSofXOrwrWDFzz1b2nOQZc7Mn/4GZB7
UcXhYmC8fSo08d98k79LX5NruX/FsA0rJkenxWLhP1w79b67rJRf5v1gwz7l
/DvPwdqdpblLa48GDZUvuj4akIPSXa49Sp/BVfdf/31ReYP8Kbm8TW4w/I5W
58g77r/JVkJM3PdIJcT9xVJxfn19le4qgi9ryd+Rzgj8Eio/7Skr19KC7Kry
S538NAu+91VbTLdrCFL27+/vDrU9bbTdxZkG1dKlpw6prlALe7L2zRV5KXIo
XPsqLnjq39Kcg+Isv+GLv7iFpw/+V9PY6xHcOVT4LO4ziLMt4feveLalXgo/
XDv1vrscD7+WWbtPef/rm7aag9XeO2XbfDSorXykowE56L4tE35DxqGqLPKL
U5jR0gBuH7yYzl+dW0Klqmjt6Uo73ssvrVBrfqJuNa5cHNde5ibNkx2+Ixp+
1VO2w9/obkg1B5sXOFzm3Pn54DWz3QrlOfjbJX7ha6ldOFO7XklGXl5eSl/3
OluWLEB+pZHTyfAU5uwytOpKn4ZHubCWNJQ7yHO5X5zO1O6cee2LPbvaqPbl
FMclVPF6KcZyv+rdrtSTeWoX99UWs33TFpUValfmYPuliNWnLn65kPaaHMwq
nPKsXZzoN2oXnbl5ssNHb+GZhYxf8xtdwwOb96PaDWlsdxol9XdfGrnsqU/d
x30s27wmsfrYhv3OzVa7JrQBF/HhJS/3IUvtiUnDxmXLlgv1OfjbJX7ha6ld
OFO7XkkiyQVT+CynDvjVOxSHFvLXV4t2y9CqK32aH+U61l0lcN+YOlW0szTk
YJvVRtXB4riEKl4vxVjuV73blXryHpUW9zUUs33TFpUValfmYPuliNWnLn65
kPbKHKze7dRitOriRL9Ru+jMCcuPZKPUEu/v7xdfb+k2B0NcGl721KfuI+++
/0c52q/yk/2u+iuKz8FTa0IbcEfgsMfcOxWOtKnYZcuWC/U5+NslfuFrqV1d
cmq90gWUHi7F98/YZhladaXP2Uc1LKi5xjwcab/aqDRJ7AVfMZb7xdZrLmb7
pi26Lm/7pYi1T51sIW1tkzcvRgsXJ5YeXlp0Fqklus1Bd5QIjy0d6rVck1h9
bPN+d8ExVmJLktf/SibITXELu65NxS5btlyoz8HiiiV+1d9Vqne4Rqy6l4U7
Y/vVc/5AdPZRtXe43rz4s4AtixYOplzwFT71lcv9Yus1F7N900Ytb3Pdap+6
toAxKnzqiVrKh31SXXQWqSUapmqWPNsY3epdsCax5X53gba7qhD+fiUzu3OE
8Ls9ZzcuW7ZcWMjBXy3xy4J1KLULZ2rXK11G+HB5CvnlqvbrBLVuWd1Kn7OP
OvXs15iXRtqvNsqSLKGqpfnwWGubZplnmye9oGmjltdr1C7yqn3qZAtpa9/o
s+thqxWuXXQWqSXCbJVfHuRMJzyS1+5HDRvuKNHt+aCn5ZrEliv7wrb/1TFW
3he3eFPyyx3bv7+/3YmqX6pW+0S1SVcrdnahov4cLH6zxC/7c11PdeFM7Xql
y8gq+C/3nl1zlNWt9Dn7qNo7dGLuS3FqtVHterQES6hO+buNK5f7xdZrXmPY
vmmjlje0rS7yqn3qZAtpa/fQs+thT1W4+HPRWaSWCE3cJ7Bn13U2bLijhEzi
kqJbvZZrEqvOp/Y7t/HbY6z7uLk4vBHueeXtcJ9aynj1k8qGjcuWLRdGcrB5
iV94JM+CdT21C2dq1ytdRvhwdz7uv9Jzds1RVrfS5+yjau9wpXlp5NRqo+rS
syzJEqpm/2uW+yXQa1hj+KumjVpeb1u7yKv2qZMtpK3dQ8+uh60eHmsXnUVq
iZJz6dyqdl1nw4Z0svunDGovCnWid3ZNYnVvOrXf+Xl+dYz1Fz+lx9xvKfK3
//pE9ZS/YeOyZcuFkRw8u8TvspfQYQ4WLVb3dPjUV9KQgyZQbtusd2XTdo4S
jVo0u52i4bDQsjGics1R61czNwyGSHKFX4aRBHQLyvyI/LS0Xj7GHmQiB4tz
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

       "], {{0, 0}, {600, 400}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 600}, {0, 400}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.4107501820830298, 0.}, {7.451201747997087, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
         Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{37.4616729044559, 
               55.68754991522334}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                21230.73544921875}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{57.10463427312716, 
               75.3305112838946}, {-41.98653029829738, 38.74689437998485}}],
             StatusArea[#, 21230.73544921875]& ,
             TagBoxNote->"21230.73544921875"],
            StyleBox["21230.73544921875`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[21230.73544921875, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{76.74759564179843, 
               94.97347265256586}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                15643.699804687501`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{96.39055701046968, 
               114.61643402123713`}, {-20.87247117243364, 38.74689437998485}}],
             StatusArea[#, 15643.699804687501`]& ,
             TagBoxNote->"15643.699804687501"],
            StyleBox["15643.699804687501`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[15643.699804687501`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{116.03351837914094`, 
               134.25939538990838`}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 
                18995.92119140625}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{135.67647974781218`, 
               153.90235675857963`}, {-33.540906647951886`, 
               38.74689437998485}}],
             StatusArea[#, 18995.92119140625]& ,
             TagBoxNote->"18995.92119140625"],
            StyleBox["18995.92119140625`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[18995.92119140625, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.651], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 
                22348.142578125004`}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{155.31944111648343`, 
               173.54531812725088`}, {-46.20934212347015, 38.74689437998485}}],
             StatusArea[#, 22348.142578125004`]& ,
             TagBoxNote->"22348.142578125004"],
            StyleBox["22348.142578125004`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[22348.142578125004`, {}], 
            "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{0.4107501820830298, 0.}, {7.592010779315368, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{7.451201747997087, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {7.451201747997087, 
               0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{0.4107501820830298, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     GraphicsBox[RasterBox[CompressedData["
1:eJzsvQd8HEWa9y92YWFZbsPt3cb3f3t7/7tN//u/m1gWdsHZkiVHyTljMCbD
EowtWZIly9nYxjbgjG1JEyTZpAXWgDFgnGXZSqPJPR2m4+SRNBpN6vep7pEs
Y1uHP69G0sj1+zwUPa2x1F1dVd96qp+q+vlDz+Yt+VpGRsYLd0CSt2jZyOef
X5Q/9bvwYfozLzz+6DOPLM5+5sVHHn3k+Xsf+jqcLL0lI2MkfB8dY2FhYWFh
palOnTrV3Nzc2Nh4/vz5ixcv1tfX1ymqxcLCwsLCGgRSqQR4AkgBqgBYgC2A
FyCsoaGBUmS1WkmSZBjG4XDAAY+FhYWFhTUIBEgCMAGe4ABQpTIL4KUizOl0
CoIAqSiKbrdbUOTEwsLCwsIaBFKpBHgCSDm7gKUiDHw0oBvHcTRNA+zUH7Es
O8BXjIWFhYWFpUhFEuAJIAWoAmABtgBegLALFy6AR6aSS3XZ4AvgrwlYWFhY
WFiDQIAk1ckCqSwDbAG8AGF1dXXwU0mS4DygDWAHP2KwsLCwsLAGjQBMgCeA
FKAKgAVnAF6qFwZ0E0URzqgum/rNgXpth4WFhYWF1VOqb6USClAFwAJsXe2F
qYyDVH1lhoWFhYWFNeACJHXjyXmlF1ZbW6u6ZvAjQRAAbUJXRAcWFhYWFtaA
y6m8/1LxpH4EbKnhHBhhWFhYWFiDWRhhWFhYWFhpKowwLCwsLKw0FUYYFhYW
FlaaCiMMCwsLCytNhRGGhYWFhZWmGkCEcc6k9TyTvCruiu/cnOqZP9fJBKYr
RQeQaU6WR4Zyj++vy8RKCuX/leWWc/Lqg1B/1PVThlNsoK7zphGj1BrmS3Un
WUdwBRkqGiiEQbnyiS6nlWAp2u/1uUTJbrVRdoIkHHYHIXrcDOt0OBxuQeRo
VAgFtIojpBwYTZMU5YCPJElKkiSKonKdXDwu2+0OhmE9Hp/DQcE/h39lt9td
Lhccwx/1eDzqweAXuuUu47pStekTBc7JUHD7Pr/LYjG53DwvMBRD8i63g+Es
BMXwAi+4RcktuTyMk8MVth8EeOI9oo2G8kvZrYTf7ZE43iP4BNbt9fvsFGkh
HG5/AB6Fg7C0el0SS2OKpUJcVw+BYynBiVKOpgi7FVoJg8Hg8fo9gTaSFWlO
xJViaGgAEUYYTH5e6mxt5xmnoaHR5/F2tIfQ35JEqPLReAwtfuUg4byTZiSR
h0/Nhnqnk3a7Jb/fK0mC0Wj0+/0WiyUYDNbXNwK2oNMLdyDw0KyLbrcXgBUO
h61Wq7pMFhwA8vrk+lOtngi7zDKlblrMRo9bMpmbm5ovtYcCgui0WA2cwJjt
pK8t7Pa32kiGkzwEzVptBM2wGGH9IEAYxTOEk/QFoGwGoFQTJhtppZ2UUHvh
ouD2uAIBpyQQpB2+2OZzE+YWjLBUSK0jAuR7l/EMmYh3XrxQl5DlZoO5tr5J
8rXbKBZXiqGhAURYJNRBGi2kwRwNtltajIFAwELYCRotwwjHzc3NFptVdEng
anW2hxxWC+mwy3LUZrO0tDSLIg8HcD1AJfg+gKmtLQTOF0UxYFYL+GgiQZDq
IpDgiEUiEZ7nTSZTR0dHn1x/P6h7IPGyKdUz3NFOUw63i/e4BZ9XsttMXg/w
jQQXTPAEmowWyRs4e+ESK7p9/qCDpDHC+kGAMOAX52L9ATf0+Zvrmn2CLxqK
gEcGLWegrfNic6OJsADgUA2iSDca7sUI63tdjTCJY1oMDSIvkDTlZEXB4+fd
Qd7tx5ViaGgA34XZrbZWj6/+89M/vet7drMFPC9CZIWAl6Xondt23JKR8U/f
+fYd3/t29dtvnjz+2Yg/32uzmknKtnz5Sz//+c/g8v70pz/abDa4nk8++SQD
6Wtf+9qtu3fvtdsd77/34W9/+3tgGXxh/Pjxr7/+OkEQLpeLUNRX199v+hLC
jC3NLYYm0mEFhDEO29OPLxk76gFRcPIur8XBLHx4yaS86TFZtjpoQXRhhPWP
nBzDSlyLtVkQ4MmYfveL334j47ZbMzKgGBcVrTPZWDHoMTiM0M3geJeL56Bp
vWlf8qZUVyNMZGmasne0h57527MZGbdmfP0bGbfcvnDxY7hSDA0NIML8wQBN
OM699/E9P/tl44WL7qC/yUk0k7YPjrx9R0bGx+//w2y3OVu9BspuaW4Z+ac/
280m6OIKAmc2G61W8+OPPzpv3jy4yNtuu62iogLcrvfe++COO+786KNj1VVv
/uIXvyJJdMF33333zp07wQULBoNwO+ptpoWujAFAUqun3+2KhNqhb2kzGTiK
ePdI9f1//qOpucFidZgJ+j9/9f+VrdvI8JKdchpaTJLLgxHWL2K8fo83IHBO
o7n54q/+128+evNYwON86y3dd779b0fe/tQXCRIS4XBKDOfjoT/CpMc72bTT
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
BgfwEfoalCRyQt/kBDS5gDCv10tRFPDLbrcDztJl38N+0BBGmEDaRWt9B3Vu
Xf5Tj7+0roVpa+UMf3t89oPLX70kyC6esDZ+UX746IHDn6xcuVJXvm/Xztd2
plC7X3t192s7dh3ce+DVV7Yd2PPG3t1v3D88c97iZ8fkLhqRt2TY1MfARkxd
PCpv0djc+WBwMDLvoZF5i79imjP36d+Pyhsz/dGcuU9mz3kKUjjOmvXY9b4/
bBqykVMXjcpbODYXbNGY3MWjcpcMn/xY5qy/5cx+Zvqi5+4fMf7AgUOHdr9e
uW93ivMn1Xpt187tYHDw+q6dr+7a+/rO3fBQ4KYO7t2l2b/34M5dlQcqho3M
yZv9+Ljpjz0w6QZyXk3HzYYMf2Tigr+Nn/fU8CkPZc95Yvy8Z/4weuqN/p7r
pdMfXfqH0RN37NPs2n9w+yvbDsIT2bF116vb4N5e3bX71Z371JuCO9r7+naw
tH5er+/a8fq+7fcM/8uMB5/KmfG3rFkvjZj2bObsx7LmLBozdVZW7txxkxaP
m/RY1qQnx05ZAgV45LS5UJKvmW9QCybMfxqeDtSI342cCjUCakrmzEdvNP/h
gY6d9eiYmY8Nn/bI8GmP5sx/auLcJcOyJil5vmPPzlfAoIC9vuu1Hbt370gW
sD7Qvn37Xn/99crKSjjevXv33r17NRrN2rVrB7qJHSwawghzMaSfsbQTF6r2
vnJ/zkzC3eljjGP++ofnNh5s8cp+F9vuohqsaAZPTU1NpD0gy3E5ZUrIciQq
R+LoAP2XQMfT5j26fpd+u/b4Fv3nm6pObdKf3qL/YqvuczgDtlX3KZyHj18x
3XDoY0hLd/99s+4zOH5Z++naN46uL//4et/fVIVsc9WnW/XHt+nAPt2m/Xyr
9tSG8s/XHTyOfsMb701f9GxHVI5HY3JCvfT0FTzciGJxuI+YYkjwIQp3GI92
hMMd8QcX/23bvjdfKf9o/f6jXz3nk/lZ8cmaA0dfrjwOOV+29/21Bz+E8+sO
fXSjv+eaKTygtburJy18PATXq152IirHwolIh9x1OzFZfUTwpCLIUlmeUy24
kWA0NPORJa9WHF27+8ON5WfL9n+2tvyjzfoPt+k/2K776LXKL16tPLu98vw2
zektVcc3Vx/bor92fYFasElzfGP5MagLkG6oOLb+4EeQ3lD+g63Z8/6mg59s
OPTJ+oPH1uz/cHPFx+ter5nz8PNdBSmOnohSuqKK9WF1iUbRM49EIurHzs7O
I0eODHQTO1g0hBEmOgne0hAVLHWfHf3Rf/3/H3xRe+nk8R9+9079p3VEu8zT
jlaJJXivVfDv2bMn1VVeLdidShpR0rAsPzBx3pbyj9ZUfFpacbq48lxxZW1J
xblV5WdXl58EW1VxurTiLHz8imlZxbnXj9oL953YeLhhdeX5TUca12hq11Vd
vOb3SyrPFmmQFWtOl1bC31IN/cXNb7dsqKnfUF277tCx+8Yv7Ohu7dNb3QiL
XoUwADRgWu6IyKMnzN/yxvuv6E9urj6/uvzG8n9jdX2Z5vw6XR3k3lrthTW6
C3AGnsVX/w29pGvKP9tS8cEDk2aFVYRBSwkNJkIV+jT0EAb3AgVv5NT5r2hO
rD1w5uUa8xpd82r9+c1vX1hV+cnqis/WHahdc6B+9cH60vI6KMPFmhOl16kv
8CzWV1+C57Kq8ty2d4xQI6B2wDO6ofwH21B+fsdhw9aapm1HDJu1F3fU1G3a
91HW1MehUqN8jye7pmA9nkXfSEVYLJYss62trVu2bBnoJnawaAgjjCUtYS/r
t7e4KWvR+o13/fCnt2dklBWsOGfnGsWA1WgSHYTT6ydEz+6du5QGIZZImaDJ
gaIOXej2uNwWldsTcrss3z9x4baak+urzpdVN5XUmFbWWEqqLaXVLaurDGBl
1YayqpavbsvfqF3/pnXp3rMl2qb8AxdKdc0FB+tWahqv+eWSmpaiw6bCIy0r
DxtKDjeV1jTBNcBfhL+eX3mpUFtfqruwQX/mL1MebVPIi6oktJppLOBUJ5ji
/iaS/WR0R8lmJ6Hc5vAJCzcdOLr20Kcl5WdWVzXdUP4XVzYUll+CPC+qqIds
Vz9CekO/5HoGDe+r1Z+rCAvH5WhnBPlfsTDcCtxbVAFz0geAO413IktleU61
AMBQ8O6dNG/9wROr3qhbrbcVa83LK+qKq+vKai6urm5Yq7Os1jnKdFRJlb3o
iGHlkYbSmmvXF3gc8BRWHLoIlWKV3gAfe6kX17PVVS2lhxrXa00rD0DPsKV4
f+0GTd2mAyeGT3ysA/o/8cvdCPDG0LNIKL2MPlJPnKkfDxw4MNBN7GDREEZY
qNVtaaoN0PZY0G+iqUtmS4CTLM0mZyhs9nhdnFtwODmv3+JkX9vxaqoHynp6
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
tgvuDMsd4NQgIEye/uQu3dmN5RfLKs1oQK+SL6oUwUoqePSKSmtW1ktPlXWv
VI8+6huL9I2FVchWVjcXlp/bWHlup/ZUZta85ArcbR1yDHthGGH9JoywpDDC
ehdGWL8hTFnvPYKaHbTdpezvQFOb12k+WVVdl3/Y+Pyb5DNvsUl72/niEbqw
iizRpcqKq8jlNc6lh+llh+nlNWR+DQG2/DABxyvgT+ss6w/btuqaHsh5ujPS
9RovrZtEjLA0E0ZYUhhhvQsjrP8QpixnFE9ACxSBI7Ej/MCM+aWa9wuqvnih
5sJTR5oefcuomOHxt5qePmxYprWsqCBSZMs1xAs66jk9+aKOXKqFjzawZVoC
7IVDtmWHrKsPk2sqm0ZOK25TZmMn0r1JxAhLM2GEJYUR1rswwvotnAO8r3b0
BiwcRpuXxFtleeIjj26seW/1m8eL3j6V/8755e9cWP7u+fx3zha+farorfMr
D7esrLGl0KodJVX2Mr19rc62XmsBW6e1rdXZ1+jJMq1t02GqaN/5YTMKhajs
isj+cPcC7+kpjLA0E0ZYUhhhvQsjrD8jEjvQGGI0imYKR6G4T5u3YNXW17ZV
vLWl4r3NFUe3VBzdVv7eq4fe2XXwyM6D72w7+MmWQ59vOXQiFekrB09sO3Dy
1f0nd+47sXvv5/v2INu758SuvSd3HTq/bf+p1yrOrn3tvVmLC9qVK4+me4uI
EZZmwghLCiOsd2GE9efUZqR4HEV0tLXL7R3zxk5cseiZh8fNXpw1/9GxC54c
Pf/5kTOXD88rfGBS/vCJz42e9GTmpCfHTklJOnbKE5nInhkzCf7Q86OQPTcq
7+kx0x4alTt35KSHJ896cEru5BH3ye1OOUrJnYzySixthRGWZsIISwojrHcN
DYQpO6rwyVQxZWsVJM755ZRnOfUYEIY2b6aofXv6A2HRzu5WMy53dMrtkWdG
5KydNHfX9CX7pi45mLu4cvJD1RMXvj1+7ns5s/4+flrVlLzKqVMqp6YkrZia
d3B6Xvk09FGXO6UqF6XaPDgzrXLe/NdnTNs5b9b62ZOfzhsuxxk5RskRRglM
TFt9uWHv2mlF2URGXXe5TZb/mrsE2qUyXW2xvlFFmLqFx4CnqzX1WyuOj81d
FFY2m4uhrlA0Hk/ucd9tcuJKS2NhhCWFEda70g5hzi5I9TSaQxtcdqXI4IBz
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
L1EUgxGGEYYRNsgENxaaOjV35763tu7/aHPF+TUV54oPHit4470NVcc36k9s
1tRurqzfXNH4sqZuo/4knNmoO7NRd+5l7blUpGBbdXXr3jizTY/+4oaK02V7
/7H5wPuzFj+fbDV6ICyafCx9I4yw3jXkEMb3QJjbyUpqjKKL5l00K7C2JMJY
L8WzjMSgvZsRwl7HA4kYYRhhg0kIYaP+/Mfn5j42Z9Sc6WMfnDn+4dlTFs3J
Wzhz/OxZOXNnZj80c9yjs7IenTXu4Zk582aMnzszZ8HM7AfR+ZSkD80dvyR3
5IL5OY/Nzl48PevB3HHzH334uZEjxiWvF70FS+Z7DCOsH5WmCOtFV+6JmZwy
hvZ3Rls8U+CUofdfLIrx4AQWjimK2rd3d2r5JWOEDbQwwtJMcBvhR7Iz9+Yu
eCt3UU3uXP3kqYenTa2aPOmdSblvTZ6qz52pz51zePKcNyfNrpkyvSZ3as2U
mYrNTlFaNXnWm1PnvJkz7d3cOXDmwLTZWxcuXJKTJcciyRyPXy5jeCCx3zT0
EPY/CkUhKuJ5Hm3cTFF79+7to+LWS0HECBtQYYSlmRDCnsga+2bOjHNZU09l
5ZwYO/xc9oizo/9ycfSIutEjvxg3+sQ4qCZjlY2tR5/JHJnS/If68kXmqHPZ
mbXDh9VnZsKZ9ydkH5iV92zWcHgiyhCicskxNfPjsb57K4ER1rswwjDCMMIw
wgafMMKSwgjrXRhhGGEYYRhhg08YYUlhhPUujDCMMIwwjLDBJ4ywpDDCehdG
GEYYRhhG2OATRlhSGGG9CyMMIwwjDCNs8AkjLCmMsN6FEYYRhhGGETb4hBGW
FEZY78IIwwjDCMMIG3zCCEsKI6x3YYRhhGGEYYQNPmGEJYUR1rswwjDCMMIw
wgafMMKSwgjrXRhhGGEYYRhhg08YYUlhhPUujDCMMIwwjLDBJ4ywpDDCehdG
GEYYRhhG2OATRlhSGGG9CyMMIwwjDCNs8AkjLCmMsN41hBDGd6Xddm1hhGGE
YYQNemGEJYUR1rvSEGH8tc0pJtNuuw7FMMIwwjDCBr0wwpLCCOtdQwFhPbGV
NAkjDCPsCmGEpZkwwpLCCOtdaYWw6/hf1wMZRhhGWLcwwtJMGGFJYYT1riGL
MPwuDCOspzDC0kwYYUlhhPWuoYOwa9i1hRGGEYYRNuiFEZYURljvGooIY3vh
F4sRhhGGEZYGwghLCiOsdw0JhH1JTO+/BSMMIwwjbNALIywpjLDelf4I6ynm
Sru2MMIwwjDCBr0wwpLCCOtdaYawZJzGFfwSRdHtlgjCJooAJZYXGKvN6PG4
QDabzePxwJWrN8IwDBxLkgQH8FOAF9wRfGHHjh19Vd6uXxAxwgZUGGFpJoyw
pDDCelc6IexyqOEVCDOZWgyGJig6zYZ6j1dkOcrnd5ktBsAZSZIOhyMWi9nt
dkCV2WxubW0FzhEEAeDrvrXXXnutr8rb9QsiRtiACiMszYQRlhRGWO9KP4Rd
ATJVjN/vNZmbOZ5iOVKUnDa70R9wwXmTyRQKhYxGIzhcgLBwOGwwGOAurFYr
rwjOw33t3r27r8rb9QsiRtiACiMszYQRlhRGWO9KH4RdvXiUijBGkgTgV7DV
4/NLFquBoi3BVhfjJIJBv8ViAc/L7XbD9yCFYzgAloF3xirvwkhF+/fvB0+t
r4rcdQoiRtiACiMszYQRlhRGWO9KN4RJVyPM5RIp2m4yNwkiwwvkllfWZHwt
I+MWuIOMn//851VVVQzDwBOHj7fffvvBgweBXOrNgmhFcLKzs7Ovitx1CiJG
2IAKIyzNhBGWFEZY70pnhKligF9WmxG8MMZpsxFNnGD//r/euapshSjy6hAi
pD/5yU8aGhrOnj171113nTt3zuVyqbGI6N8zzIEDB8LhcF8VuesURIywARVG
WJoJIywpjLDeNQQQJrm4YKu3qfkiSZnbQi6ztZ4XbXd+6+s7d74WDAbdbndx
cXFmZqYagjht2rTdu3erd2S320VRhPvCA4kYYRhhg0wYYUlhhPWudEPYNWI5
nE6acFha27x2wuTxcuCLOVm7k3X8+Ec/eG3Hq3DZ27dvf/bZZ9EsMIGft2D+
8y++YCMQvGw2myRJaF7Y7j0pr/MYYQOrRNISSjOT6D6ptPYKwuAHocfH/nn/
wpw3p9x9bMrdH0z5y/tT7h8k9ubUkftnjXs+8z451haVY2GFXSqHlZuKJ5Lo
inffZpoLIywpjLDelT4IY6+3HAcwCL0OoxzAMrheq9VMEDaGJhvqLn7nW3c1
NzZt2bJl6dKltJPhXdKChxY9t/RFmmMBZwaDQa/Xv7p9x57Xd8qxFPdcMcIG
WHG52z/paUri8bYq9xiaPeaXxfN/+fzojJJJGcvH37F0/PcGib0w4fsvzvzZ
tJE/lOOBzo5Ip9JEdkLjCU9H7nk7iGqxnphOV2GEJYUR1rvSCmHXlt/vh2sD
kJlMJvCtOjo6wOEK+gM2k3l6bt7xY5+sXLly9OjRHp+3ydiSO3P6y9tfIZ2M
5HZ5/T4nzRiamt+qOZyIRDHChjbCEmioLZ68l/hlfoEL1hlRzkQCTy+8lzds
6qCei/JPtXErgtyqVnb1YEj93Dpbc+lD8/5D7hDa/SE06inLbbFATA4lb0P1
yJThxGhyfDGthRGWFEZY7xoCCANsgT8F5AoEAgCyU6dO7d+/v672wonjn/7h
f//27Tff+vzzz3/xi198cerk8ROff/Of7vr40+MOcNIAegwt8gLLOCsPHupo
bcMIu/kQhsbfkqOIkIZcD03/dcJzQPYVxKUHo64Hw56Fne5BkYZczybadz04
59/lEK9ePzSWrVE/RhhG2E2uIYAwdf0ot9vd0NAAOPN4PM8999w3v/nNWzNu
Gf7X+8HJ6uzsXLNmzXf/+XsZt2QsL1xBc6zk9YAXRpAOykHSJLV3567uYaVU
CSNsgNWFsPiXEaa29uFQhyz7Fk3/r3bndpdxQatjQtQ1MeLJirqzBkPa4ZpL
m16alfcjOeGDi4+EZWUsMRyR29DNYYRhhN2sGgII43leDSyEa4MDkiRtNhsc
Bzxewcn6vT6Hw+FyuUSXZCHswC+CpiD1+n2CJLpESeD43a+9jhF20yJMfW3U
GvTLsvvBaf8ekbZ3cktkeUnClZlwj5BdIwZDGpFmtLnWLpz9M0BYPJwI+CIx
xKlwe9SHbg4jDCPsZtUQQFhLS0tra6skSerFwxkAFlytW3KRhMNqtqjh9IAw
cLvA/wKE2SmSQiv+oiV/OSf7+vYdqDFLqTDCBljxhPqM411NTRJhUeUwnoiH
ZVmYlv29NnZ9kJwjuyfLUqYsjRokFhVnxgOb507/qRx1w/VHO9UYeuyFYYTd
7BoCCGtra7NYLAAyuDxgmTqXGQ4AXuCCIT9LEEwmU2t7G2DLybG+gN8fDDAM
A/cCdIP0jX37cVD9TYuwYEerMk0MEMYtnP6jiHtDmJ8b4bJkF1BssFhcetDt
WDl98r/Kca96C+Go3CG34XdhGGE3uYYAwtR1DsPhMEEQDocjEAgAsDyKrFYr
q1y8KvgC7WSAd263GxAmiqK6IcvevXvx1OabAGE9BhKv8MJQGo0G5AT18Oyf
tgurOsVZcmCKLE0acHJ1W0xYFBI3oIjEiCsaiqnhHNgLwwjDGgIIu1HxLN7y
EiPsCoTF0ewqcGeYBdP/pY1fGXPPjrszZXfW4LGoNM/PrUYDiYoXlkguxhHG
XhhG2E2uIYwwJ4espzgnMkBY8kBBGElTe/btTXl9xwgbYF0ZVB9TG3y1tVF9
mm6EFSsIG5Pwjo75Rg6SNOKe5edXYYRhhKnHGGHdGtoIo3tQDJglKCZihN2k
CIugVv/LCOtqddC7MOdlL8wzCtgR9Y8YJGnYMxMjDCMMI+xqDVWEqS6YijAw
lVndCBOuRNiufXtT/CYMI2zA1SvC0K1FZJlbMO0HCsLmghcW846N+kbHvKMH
QxrGXhhGGEbYtYQRhhF20yAsnOi+l1jyjnogDNocYcG0H7bxpTHX/Lg7K+HO
iXkmJNwTBkMakRbid2EYYRhhV2sII4y+QYSltspjhA2woG0PJZS8vw7C4LO0
YNqP27iymGth3JUtuyYoNmkwpFERIwwjDCPsGrrZECYyrOTECMMIuxJhybtz
L5j60zZuTUx6MCEBwsbJrixZGhRpTJwXxAjDCMMIu0o3A8JUDbAXhkp2VI51
Jvv8EVlujxcOH6PLzftwQvYX40aezhoGBggDrJwZC/wCqGUp1Sd1KWoBakdn
gZ0bk31mTDbgDCgGCPs8c9iZSWMPTx735LhMdQJS+reJ1xpIlK+FMHYteGEJ
AAeysYMkjUlzglzJ3Ok/luNodY5E/EqExTHCMMJuUg1VhLH/U1A922NeWH9E
JKIi3SonQuj/HcAvWfbKBcNH6uZOenfqA59MvueLCfeeyf7r2axRZzMzz2aO
Ozs250xmzpmscSlKz4/NuTA659IoZBdHTbwwKq8WbPTE82PHAcI+GXf3x1P/
91uzhz1/zyjZjy5cVqbTprWS+0Imeq6RGE0G1Seu9MLQuzBlXhgiyLjBkEZd
c/x88dwZP5ATInIe42q34poIi2CEYYTdPBrCCLue1HUU2X6e2ixH2juFhNwW
Dcsd3iTF/jZuxMbp9xya/7ua2b98d/pvPsj73dEpfz46+S8fTEYb9b6Xm0KD
3//hpPs/nojSDyeOPDoh++iEnKMTR38wedg/pv9FO/k/3pj1/f0P//75Edly
UNngPtVbgqZeSUwlkoO6yn8RdY3EKxFWpkYkyu5xg8cQwoSiuTP+RU7wGGEY
YRhh3cII6x+EReVoUG71y2G0HnoMzUGC0jgx8zcrn/nL07l3LJ2csWJCRnHO
LcXZtxePu3NF9p3Lx9+5dMKdL05Mnd2xFNntL066HX0c/69Lc364LOd7y8bf
9XzObU9kZzw5M+O5x358/32/aU/IHll2yeHOVOdRioURllbCCEsKI6x3YYT1
G8ICaLfCNl5GI3Pg2fiigZnz/lhXty4obuwQC2N8QZwrjHElEb60QywJpdja
peJWV2HQXaBYcau4vl3Y2MGv6+TLOvnSsLs46F9qtBc9+MTkgCyLCGFoJfe0
FkZYWgkjLCmMsN6FEdY/CEsgBHQEEu2tceSCdUIa8Tz88O8jYY1fXNYmPRqS
HgpJD7ZJi4PuxT7vQ37Pgx3Sg1E+VdYpLmhzzw965ga9s1vd89ukJR3C41Fu
SYJd0mGdL3OPyK1PuBz586f9ubMj1hrrDCu1M62FEZZWwghLCiOsd2GE9de7
sLgSTa+sxheR460xOeFbOONnvK0kJDzZ6ZoZceVF3JM6PFNafVP8gYmt/olR
10RZnCgLKUkT0vhOT3bIlxXyj+nwZkVcU+JinixOkvlJsjhDds+RgwsizqWP
Tfuj8iIszZtDRRhhaSWMsKQwwnoXRlg/ISwelwM+OdQp+5RwxGBU7hSemf6/
IuRKWXhElnJlKQeFwHmyZF9WPDAaTPYq5klZ6h8dD46It96fCA6T/WNl71jZ
M0p2j5bZUbJzjMxldZJPLJnwa7kzipxGHM6BEdavwghLCiOsd2GE9R/ComG0
v1NQWRM9FJE7nQ9m3S671sn8QlkcL0tjZGmk7Bole0fK/uGy/wHZN1z2ptJ8
yh8K3Ifs/7B3HvBxFGf/PwyYTggkoSXh5Q0hhGrjItmS1XuvluRu01sSeCGF
AKFaVnfvllVOzaaEUEI3YONecZFVrt/e3t7t9X57e/N/ZvckyxS9r/O/k2V5
fp/H49291e3M3t5875l5ZiZ0rRhkikF0DM6JLSto+OPC7P/GNWKkF1MbERGE
nVMiCAuJIGx4EYSNVEMiJ6DLix9y/Jz7EVLPL73aqfs7Z5iHjFl4BCubCP5R
wJzstyaCcZbkyBlcJWhKD5pSg+aEgCUhIC7qYYlFlunIHOc3xXOODKvxsYqi
2yDnHhT0kL4wgrARFUFYSARhw4sgbKTCOTgfcnqR2yOs6hHA03Ooy8uvNjF/
d5nmcaYcoRUxNWjK4MwZXms6GGyABUwRSYNsFu75AhOnMML1JGQgEfgVNCf6
TIleV4bJ9MTMktsg504UdBKEEYSNqAjCQiIIG14EYSODMHikXchpQ26bMNeF
F9cz6pLZVzPs3x3m+X5zHmaKMSvI5nGmPK85z28WpnhlImZ0IdKUInUp0uYj
XR7S5QuBHOnIkIoM6YhJC9py7YanZhXeDl9PcB09eFq+c1sEYeeUCMJCIggb
XgRhI4gwtx15gV9OAWE8Us+cdY3R+KLTNJ8z5eMJyQ1g+UFjIeziI4Z8pAcr
jEiqK0bqMqQqQ9pCROUjqhhDTZ+DmAzEZPFgtny74Q8iwvwCws7xKpEg7NwS
QVhIBGHDiyBsxMaFBXDdwuNKEz+G8Lhr5s68xk6/yDHzMa2YLKTPwnxhCgWQ
CcbmRSjFV6SLseG2RLDiIBibFzDlBNg8L5vjcRaajH+aWXyH0Bfmd5/7IR0E
YeeUCMJCIggbXgRhIxXOgcQqJhgYrG2o+SXXOnUvBgBhuHEP+JUhAiWEEmxZ
EUqDbA4mlzFH6H3L8pvy/aZCv9CACQ6gm831OIpMxmfKijDCwGf04Nr+3J7n
lyDsnBJBWEgEYcOLIGzkECY+5H5x1lzYpeeVXgtemN84DwNFWN1DBIrXApYR
NKUjVlhuIxKpKRVHjwiBiJwlGcgF/IJLY7oZ8/2GfN5a5NQ/My//DhTwo6AP
L1NCEEYQNnIiCAuJIGx4hRFhwgomtJoyaClaRynBtBQDpqNUYFp83KCjNHpK
SVGa7yyDEsECDlnyUlxBTFwvDB/U0zSlUytHHGF+MbyPnjvzWqiXvMZ5gYGI
xIApw2/J8FhxUGIQKINxE6EUD3AOmhMDlgQOKGbO4rCDJlSYhjxen4ssRW76
TwvybkecH/E+FDzXEcYP2ADFcGXABUV88cLAPcQuLLrRRYkIS8O3wjhajDPM
sdIvzy69XkAYBxmGfAeQX5gxWijLwCKeCEMZqlD+HEcYHoTySGbi1pyinZmF
OzLSvkqL25kVtytl+oGUuL2pCV9nJH+ZmSwsrpeMF4rNSBC3I2ffpCbtz0g7
EJdwNCUN0PlRVmZzedHTaQm4lT142iI+wk+IsN1/grDhFS6ECQtKaigtI6Md
Ch1rpI6DqSizirIyVC9D9SsoF5hRKzdpuimdSq2jI00xcVEwhR5jy6jWMBpK
zmAzqXWsilLRlMrAAM5oOUbYiHzfheecG/zBTM8OIWz+oBcmDBADVyhDoEl6
aMmqCKUsdvSwI2YGdGbhkEjxJUMGz2QFrfkO5g9zC25HvJ8Xhjef+1WiFw1W
+IKJJfJ7ecGL4ZBf92Dh9byx0qkt9umTMDsMo8UCzDyHoa4o9xcooEZBb6iq
xB+NL9S5OqQKHSjpOfyTI4jpbHsgJ7YjP/frnJwvs5O+yJi+Iyd2R1r03tS4
XWkJn2cnfpqT+GVm4pdZCZ/lxH0OL2Uk7EmNnCXuSU46kpr2bUzCycS0A0mp
n2VktpWWPJuSgHyhpcABL8FgaD3AMI6jJAgbXuFFGPhcfbRLTptZ6iiYQmeW
01ZW02vU9sspDxir6bdojoNTNgII0ws5letpoJVJpQGKyRgazKzWwq5CTyuM
jEGr08sVgLDIxyoIbT1B3BcWDC0RTZ2GMFxTpeNppgSKBU2Rb54y5ggXSsUm
hPSHHDRjOm9IExGGIxIFfnnHAsLcgvEivIKDTW1iK5zThRyKh4pu8usXc+x8
5C/DCzfj8QWjIvXr5/kdGx5+YAJCOsTZOJdvwKHkBF+MF+vPAYS5hbjXsLVl
jbwGEDa9My93e3bOV1lJX2ZMBy/sm9Tp+1LigCnbshI/y04WEfa5gLDt4Iil
JwDdIpHuSkvcnZJ0OC3tSGxCdxJG2KeZQxDGhxAWEHoJXIIRhI2MwokwDQ0I
k+lZBc0AqsDAA5LrGVatMqop4BqYUaMyqeUYYXTE2xKxVwheGM0ALnEeNCqZ
3gD5MWnUJrUSjisNRobS0goZQdh5gDB+qBc2FGEB7GXCh8OjAPuHeXe66WqT
drZBmRi05SJbFrJmjYaUMy/qOfr3gtybEKfCa38LqAoEAhzv/SGEeQWKncMI
E1c5fzwj7u3sgr3p+bvT0nYlxx1IS9qfGHcsPvFIQvKu1NQdael7UlL3pCbv
TE8Efgm9Y8mRS79OF/vCEsAXg6v/Oxs3JD6Tegph4iMVGHjOCMJGRmHtC8M9
XwrB6wFegMkZcHYo4BerogEZYIwGt+nhrjGdKtJF01EiwgwYYRq5UaOU0yyY
SauAXTiuZMwCwvpHpCGRIOzsSuiGFLvdTyGMC6LBjniet6kWzbzdRi9Fvuf9
zgVOpmL0mFX/JO/veuShybxPiYIuyDDvRxzHCUU4HWFYYwJhQfdTaYnvZhYd
SC3cn5y1JzHxcEryofj47rjkY/Gpe5Mz96RkHkhKB4doX7LYI5a6HVt6JNKv
M1K/yEzanpO2KzHuQHoaHHx/MJzD78YdqfyphtxAWMNpCMKGVzgjEjHCaMG9
0gC29Frc8TSAMNwhBds6LQ3OGobLSCFMpWPVOsao7We0coXODMZSMtiF4yq9
laHUlLKXIOy8QFiQD3W7hxDGB5A3iLxurwv3vePi2R5bNPXYkVf19NMG5nGX
+XUXWzdKzM6uPnigetHCiUJDIkZYkBNL5Q+i0FjDseWFQQm9T6Umv5tZsj+1
eF9K9p7E5MMpqYfiErtnpB+Ly9wLUEvOOpgIBiBL3QvuWEq6YJmRSMHj+zQr
ZVte2vaUOPDFvsxMfTcvY9OsQiEi0Yk/DDEcMdTNjcNpwnUjCMKGV1iD6mkh
xU4Wo9EAreR6A3he4I6xaiVwTUXjlsbB0yJcMpwN+E9NmbWUgaF69VS/irKC
GXR9sAvHNbSd1qm0qpMEYWMfYYOx9KFKXuxFcgvm93FeIYLMmZ35m4ce+XXF
XEnZHEnFLElZxcUV5RePirT8yif/cE9axo0IGRDvHhgXgOwO05hFGPI+lpH8
ZvbMPWklu9Kyv0lO3p+Wui8x8dv49MMJmbtSsnamZu1LyjqQlCnwC/yy9H1g
SZmRSHempX+WOYCwrBQRYY0YYTMEhPlPR5jg3YeJYgRhwyuMCANIATgAXoxW
xWiBWZQcRyHajFQPSx3XacEhMqh0DIAMKAaAi3DJQo6eVosRptf16HT9aq0N
jKF7YRcf1zkAYWo1RljkR9EQhJ1VDfLrFML8AeTkkINDfqfP5fb4oM4sr5i2
pC57beuMjV1TVrVOXtEavaolejSkq5qSqpbmLHhgKkKs3+f0uXmXU+xsEQdp
cKcD2n+uIyyII0Tdi3IS2/JKvs4q/jIr6/P05B3ZyTtS4/clY4fry4ysbRlA
scxdqek74KX0ZGGMGAZZJNJdqanbMgYbElN2pKd+kJOxuaLw6bQZ8PjgVt3A
IMLE8YZhG4RCEDa8woUw4JeaxtRg1SqTWqmn5GodLaP8OJCeOm6iDuu1GjXF
igEVlJbBzYmRpdhAW6XGTGkNOl0vRfdTGptWa6XpPorugeM6nV1Hq1QagrDz
FmHAL4cHg4yHz8TtdeQVT1m6fm7jm9mvrLx1qXRSfdukeumUUZG2xK/cPCu3
5A6nWyU+SE4Hx/PiOEPvDyHsXA+qxys7LMiNlxYUbMvJ/zwn45Os+K9ykr5M
j9uVmrwzLfXzrPTPsjK3p2N+bc9IBIvouDB488FwDnFc2CdZGdKywmdT45HX
iYf/iwgLEISNtMKIMJlGYTBSxv5us6LXZTOnZRdKJNdLxv/i6ksll0ok4y+Q
LF255rBCq7K6DIxFI1OFC2Esy6pUqp6eHrvdzjBMX1+f1WpVqRSMgeru7qa0
rMXsUKi7DSat3eLv76WAWWqqV6NkLKzHyNJyRXd7e7vfF+kamiDsrOoHEOYN
IBuYH3nEsXq+oL9odlz12rkNrSn1bdNqpHHV0vhqaeJoSGtasuo2zi6efX8A
sbiWDD1CfBAHcXuFSJWBMo4RhOEfGA/kxHYW5H+dnftFdspnGTHbsmO3pUYL
ge6J27KSP89KBX7tFMY1b8+M+zozAcfYR8YAkfsyM4+kZR6elnAiPu1QctqX
mdmdJUX/kxB7CmGhp4sXYkTDNiEbQdjwCh/CKIPDbLMbDCf2sScPXXvNzyUX
XP3fd8b3yBhF36G6N/501cWScRdJ/rFi40G1iTU6WI1eF6apqnp7ew0G8LN0
MpkM+GU0Gp1OJxzUatVut1vWp7SabYePH1RpZRo5ZTc59SadmlaqFTqdSi9T
9Pf0nWhsbAzLwzasCMLOtoZSTEBYEDkER8wnIswb9BfOTqhaO7++Na22fRqw
o6otsUqaPBrS6pac2o1zC+dM9iEznorjFMI8QpvhdxDGnesIEyhseyQ9ektW
9vb0zK/TE7alxezMid+ZEbs/PWFfevLX2alguzOT92HnKGF3Vtw3WUk7spMi
lO7MTD6Ynn08Lef4tJT+hOzjKdk7sgvenFn6t+REjDCOO4UwxHP4K0MQNkIK
F8LUOuqESvbtsT2I00rr/nGB5OraFe+oDD6FVm9mKKP6qFG7+8prJPdnln1+
1GCz+Ol+pT58sy0Cwmw2G03TkEnwyJRKpcvl0ulpAJnDYjWzpn61kjGxqj6Z
nTWr9TqZRgVXN9EMkFdD69auXUsaEs8LhAWHIgwqGafQHeYPhBAWyJ+TULlu
bq00paZjalV7dGUH2PTRkFZJU6s3zS2YM9WLrAEBYcHvI2zAxxSiO859hPG2
p1Nj/5WRgyPqU5N3p844mJ14MCP+QHzM3oS4r1ISwHYnxu1LmLE3MWZ30rTd
iTPA9iZEJk1I2B2fdiAh8/DUpO4ZmYcTsr5Iz20vKnomPhZ53CjAD3HweR9u
BeUIwkZGYUSYymSkmX7DoXez7/1lXtYDtAUd6aM1DGPQapUn9jqMu9ZseFVy
yY3Nn/Ue3N/D2xzhQpjJZDp27Bi4YLDBsuz69euvu+46yP/lV1z18ccfaxX9
Kll/zYrVkgvH/+zKy1bX1/RpdDJKb6DUVj3wS2+w2JcvXx7kI933TRB21sWf
PisHVDJuqOp54QMJCAgrnBNXuW52bVtCbcf9VZ2TRpGBL9Y4N29OtBvZ4En1
86H12wYQ5h1rCAvCQ+d8NjX+g/SCAyl5e1NSdybF7ctI2JMy43BK8oHU1G8y
M3dkZe5PS4ft/elJB9KS4Pi3YMmpkUgPpaTvTs3el1FwKD6zO7XgYFrB5zlF
bWVlT6ck4qHNIsIGHi2CsJFUGBGmtZr75YeRbsf0G8c/8sBLOgtSG/39arVZ
rzdpj9uZr//5/jrJlbe0bafgsz25/2C4EAZuF+QNHLG+vj7IntFo7O/v93r9
0rauq6++et+OL44dPvCbu6fsOnhi5+fv//rnV+4/LlcbnXpVj0F18mS/Qmu0
CQjzRfgrTxB2dsUPTE85dGIpL/hifDA0u53QFxZbta68vm1Gbec9NR0Tqjsm
jhaTxldtmpc7d5obt3yeQhj6UYSd49My47n43U8kJfwzvXRPavE36dlfpiRt
z0zZlhK/My19R1rmp9lZH2dnfZ2ehZsZM/Cg5j0pEQyq35WS+WlG7hfZBV8l
Ze9OK/giNeftzNx1pTMfTYrH82Cf1ooLP4fgBzFB2AgpjAjr0WsAYd7uD++9
QvL8X5fuPRHoUbktTr+BUpiow2b1Z00t1ZKf/nabEh3c38uxtnAhDOBF0zSQ
i2EYcMQgkydPnlQo1So1fdttt+3/5tMXn39uWkKBgrIFHNqUGfesWL+lV2PX
q094rEq5SkebvZs2bUIR/8oThJ1d8aGwh9OEY6CDgxO08v6S2dOr15U0tEXX
d95V1z6hpn1SXdukUZG2Ji9pXJAzN8aFXPBjy/fjCAsKS4QHznWE4TZS/0Pp
6V25c77KrtiWV/JxbvanRXmf5GV/mpXzUXbeO/kFbxcUfJBTANsf5GZ9mJsF
xz/LBMuLRCpe8b3ikn9n5H2WXfheZm5bTt6yivKHMlKEZWzRUIoFydDmEVRY
EabyB8yubz98MP6+q6785ZeHrIwdHT1BMbpuRvmVVfXlfRP+64oJCV+o+P5e
vV1jCBfC1IIUCgXkViPIbDZTOv0/3/3wwgsv3Lf9w7Ur6l54fc2xXr1Bfei5
p2YtevzFPo2b0RznHMpDx3oPn6SEcA6CsLGNMC5U1Q9db2WgxhcrfwFh06rX
Fze0T27o/H29dEqdNLa+NXY0pDUtGUs2LfoRhDnHHsICQsHKc3JW583Zmjmz
LTOvOTO9rSC7NS/zreLiLSWlLeVlTRVl7TPLukpLO2YWtZcVtZYXt1QUt5SX
RihtqijtmjXzrfyC9wtLtuYXbC4tWf7QgsdK8oVFDoSPIziwZJj4aIVJBGHD
K4wIU1v0R4/vRvoTiOqVq/QqM+qXe2jKrlF963edVB/9gtb2HbPzexnebkO6
Po1eE56gesiYw+EAcsEGy7KQw2XLlkkk4yZMnApco+THljcseeiJv6t1dlp5
+E+Pz3rkqRetHqSWf6vo2dMs3dq65f2GhgY+4CEIOz8QdmqxlZCdQpg3hLC2
qdgLk0bXtcbVt8aNirQ5q2rTolMNiYEfQlhwsLvvnG9IFBGWl5X4Yu60JWm3
v5Z000vx172RdvPrqTe9mnjjy0k3/y31V39Ju/nFlBtfSr7+peQb/55641/S
b3w2I1L25/Qb/5p6w8vpN70a99MliT9/LeEXf0+99dmiqILEe+HmcyK4Thua
RxA2QgpjUL1Mp9HqVF4jpe0+QjH6kzKlnTY5aEap7maMMtm3+zmX64iS7jG6
aJNPIdcNzDT1/yuVSmU0GiGF3JpMJsih6JS98867991338nuoyuWL42eFufx
Bnq7v01MiFm9ZmNPv8phN2vUMmH1SwZHJEb8+04QdnbFC1H0A20+p+oZbrAj
ngt6iuZMq1pXXtsWX9txf01bdI0UO0GjIa1rSa/bgIPquWGC6sfQ0GZRZQWT
nJoannoC6R5DmoeQ8jGkfgqpHkfqx5H2SUQ9jnQLEbUQ72qeRNrHEfVoBA2u
qHkUaebhKyofQpoX3eoN8wp/i5BJmBRxwP1CQ0OGwiCCsOEVznFhVlahUdNK
mvN4lbpep9fQ/c32KySSa6+7WjJO8rPLLx0vkbz9wef7e9THZDqHN6gNE8Ig
S+CCgf8F2IJMMgwDG3a7vaur67LLLjt48OB7771377337t2794svvrjttttg
F/4EYAen0TQNZYTnIWwP3I+KIOxsSlid2SsMOB06l6D4oQTEM3zIVTRneuX6
WbXSpJqOqRhhbdNHidW1pDZsqCiZPVEY2szxpyHM+0MIc5/bCMOc5isK7zQZ
/+SwZgat6fjh1GcjQz5ixO9IDnxHguYEMGTIwcfxAxy5Lwu+orA9A1kTOCad
Mz7o0lXNK74Zz1opPFchX+y7ga//33eCIGxYhXF2DiWt0LPGb/f0Wg1Og132
zb53Z2em3/ur327c2OgJuLd/9uYNP71sUnQ240QHTij6VKpwrRfmcDiOHTsm
Zt5qte7cuXPSpEmQ/0svvXTFihUWi8Xr9S5evBiH2V9++WOPPXb8+HHgnTgU
GngHG6tXrxbm6omoCMLOpgjCzjERhA3eCYKwYRU+hKloi7ZX0ec0ICPl6NPs
23vkn7/56U87Vjc5Hb4+Za9Bc/jIvm3jr7hV+tZeqw/1qRThQhiQSKlUAqfA
pQJ3zGAw9Pb2ulyu7u5ulUolumaDJRXLAggTGxvhZDhCvDCCMIKw0SWCsME7
QRA2rMKIMLVBcaKvO+hE6n4DZTp+rO+Tn0okJ3cdOXG8j2Z1bkv/0QNfAcLa
3t6nt3k1DB0uhIGfBUjq6+sTmSUGJQLOgGtutxteBcZBQWBDnL5D9LzgTCgL
IAxOXr9+fXietuFEEHY2RRB2jokgbPBOEIQNqzA2JMopGcXoabml95jcGaD3
Hfn3f19z9V8e/oPN5pCp+xUnd7/x0p9/9d9TPvmm76TKAPAIF8IAXkAiQBKk
VqsVjkC2xdzCkZ07dwK5nE7n0aNHYUMsgkg6YJlYLmFcWKRFEHY2RRB2jokg
bPBOEIQNqzCGc5idVqVW42AdBh0t155krermhrorJJILxkkk4yQ3XH3leIlk
2domldnTpzWpaVO4wjkARpBPMYe0IIVCAXgC5wsOwsctE+RwOMBNo/FqZTgO
H/5EbEWEP9+8eTPpCyMIIwgbRSIIG7wTBGHDKpxB9RqNQqO2MEZ5b7eW0fQr
TtiV8qM7tl151SWAsGvGX3Jo574elZZxB77t0+pZl7CCcxhkNBrlcjn4X+CO
AbzMZjM4XHAQMg+vHjlyBHAGtAKK2e32wf4vYBkc1wpqamryer3heeB+VARh
Z1MEYeeYCMIG7wRB2LAKI8J6FAqK0Ru0OhOjM1oNR08cQBaTSd5jZHUavdqs
pZTd/XIdo2DtGtbVp9CHC2FnKhFtlEAxsVMML3kZcRGEnU0RhJ1jIggbvBME
YcMqjAgzOSxq8MVOyBhK1y07Qhtlv7z80qvhjS6QSC6SXCKRjJdIWrf864SG
PdpPmezecDUknqkIwgjCCMJGuwjCBu8EQdiwCu+4sO6+XovO47b6e1T7VfQB
3shY5DqWNfer+p59ai4g7ILxN+45ZtBZvN0yWbjCOc5UBGEEYQRho10EYYN3
giBsWIUxqL5f22OwGNUnrcpePWU6brAdpo4edWnNOsrYp+z12uR7d3x00WW3
bHnvsEJvCWNQ/ZmKIIwgjCBstIsgbPBOEIQNqxFAGKU1KLRyB9uzZ/u/J0/L
P6EIGJ1cr1JOEEYQNmIiCDvHRBA2eCcIwobViDUkrqx78YqLJLsPKPt0ge37
j7N2O0EYQdiIiSDsHBNB2OCdIAgbViMTznHVtVdeIpFcKpFce+OtB3o1epv/
pExDwjkIwkZMBGHnmAjCBu8EQdiwCmtQvYxiDIxWb2L0Jit9/PgeZDWy8j6D
UafQKh0mk6pfqTFYD/Wo5ZRJS5sJwgjCRlC8sIoWh0txqoYRKv2Bmp5DtqK5
U6rWz6yXJtR2TK5pi6pujx4lVtMKCJtbMmuygDD/EIT5Q6u1nlZtnvuLrRCE
Dd4JgrBhFUaEsXZrr1KpklOsnpH37efcGq+JVp44zjBGhUar01MylZo2ek70
6I1mx4mT3SNaziEiCDsvETZUHBqs+VGotuF5OGhKK/h13Ya8Fe0zlm2ZXNM5
ubprtFiNNK1h48OlFXEIWdxeEx/0QebdbvepMp2qM/nTSneOiiBs8E4QhA2r
MCLsWO8JvdlMaVmWNvJu7b7tb992888uxu2IF194yeWSiy+QXDjuhpvv3H9Q
xhjMdod5RMs5RARh5ynCTnle3oEVnHnxE4HU63N6OO3MeXetaCpsaJpe0zKh
un1KZWfUKLHq1owlKx/MK4rxBZggsguZ5/x+v8vl+V6FyQ0YQRhB2NhXGBGm
NegAYbTOLO+RWZluWrH35muvGC+RXCi55NIrfyIZB1vjLr/ql19t//bY8R5a
rxnRcg4RQRhB2FCE+Tyh2sbt0815cMrSjSX1m+KWd8TVdSTVdqaMEquTFq1q
em5mRQp4YSLCLFbjaeUiCCMIOy8VRoTpWL2Coixmt05F6VWHbMyxzIRpa5Yt
01OsXE31KPqcfIC1BFUau54x6Zkffp8REEHY+YswLG4IwvBBt1PoEOMRx1sK
y+9b2Th/ZUvuCmnKkubYylFjSxpzqpY9mphyH0K2IHJA5v2c+1S5CMIIws5X
hXWaXwVlNFJallJq3RbZ7i+3Xn/1JV989FF/j1LPWkwOS7dS0dNvPNnL2B2e
nt7jI1rOISIIO08RFhI3EO3gx3sDgXxOB+Zaes7da5ufXN4489Xl0+rbptV2
3D9KrL41rf2dV/OL4hFyeP0WsavL5XJx3PcrTIIwgrDzSOFtSIQzVEq9VqGx
G3uO7Hn/2svGTbjzTpvZtXv/oT6VTG009CvMNgc60d1ns5tGtJxDRBBGECYY
h/eCKOBHfi8K4vren1cUU7fy8WUb5q9qmdXQnA3gaGhJGw1pw+aSF16fX1iS
jJATEOb22OCJstvtYhFOry15gjCCsPNHYUSYglL1KpWs0WFjrYz6sIX+9tH5
5eOFcI4rr7nup9dfJ7lw3HW/+O3O3d062qillCNaziEiCDvvETakhh/wwgIc
YllD8czUmbNjMvJ/M3PefQVlU/LKogvKokdDWjAztrQ8/cGHK9xe04ALyft8
vlARCMIIws5XhRFhSp2asVjUKkYtU+kUBzyWXlrebdbrWcaqM5iO9Z7QsMZe
GavVuYysVa2Rj2g5h4gg7DxGGD+khh+oZ3jsiAleGPJxVoRMvqAcIX0QeQer
olFgeBSz1U6L/ArwoWFfXq//e/ziz3l+IYKwIXeCIGxYhRFhBivbLZOZWGfv
8R4r0+0wnvjldVeuXb6c0ZmUWlpFa2Q6yuFGKo2d0hlIOAdB2IiLP91OIWxg
Ugsk1ENOhCwI2UKdZaNFg6O9/MM6WacX8NwVQdjgnSAIG1ZhRFi/Gs+HCAjj
3P45pcmXSiS/+tlVFwkNiZILLpKMH5eYlblnf59MYWZNNpVaNqLlHCKCMIKw
0IHveztY3EC8InfWcvoD4k9vAv0xSBGEEYSdXwpvRKJMo+ntUe3ftW/G1NsA
YZdIJNdcfjkg7LKrrpGMk1x89VWXXH6jXGk52SNjTfoRLecQEYSd3wgboh9G
GPqevzba7DwQQdjgnSAIG1ZhRBhtYuAMh93PwFuqDln1R6+9bFzzhg201sha
Hcd6T3z01Zc/u/72TZvfNhgtCmXfiJZziAjCCMJC+sF6ZlSz7LwRQdjgnSAI
G1ZhRJiK1si12v4+jV5DA8Joxd77br+ldvHi3m65hjZoDbp3P/lYIrlaHNps
ZM/OHL8UQRhBGPrBKL4hx8NX/xD9hyIIG7wTBGHDKowIk2uVcAalZUUvzKw7
Qsu77SzLMtY+hRqPGjMaKL3neLcOvDLSF0YQNuIa4sWcVsNw349RxHbuF/gc
FkHY4J0gCBtWYURYn0qmY1mH3a+WqWyGk4Awg6pXI5MZaLOetaj12gMnjqsp
p9WOjh3vsdrYES3nEBGEne8IO62G4YdE+vFDERax8Pj/0H68YhyLLY0EYYN3
giBsWIURYWpaYzBb5DLckGg1yG3GPmXPUQtjVMg1BqOlV9HH2u2s2S9TGNUa
ymAYgXAOmhpYkkynpcEoSgNGU3pxm6bhZZ1aqSEIO78Rxg1EqvOhVwnCzrqC
eLTenILbrYZn3ObcoAWezwykz0VMvvBNAcsTnthEbLCBd+GRTo+YZWBQQsrG
I2sSx2SKCJtfdDMK6lEQj78IhBAWTn4hgrD/TeFCGCXOMYX9G4AFpaNUeKwz
pdHh0zFKxFe1FAM2IiWDbDBglJAHvcag1zCUTg7GaA2MGraVtF7JaPVaBbVx
/YbIf/0Jwkatvlf/h7UKIvpPBFDgbA/k3eIz/SVgLuPoAr86C1lKkakQMenY
9PnYYMOQiv0yMPj6GFMjZnDRHKTP8KimBgxxfkNOwPiIz1A3L/8XKKhFvBsF
hW+3CLIgtnA9QQRhwyuMCBtlogFbmGICwhgVC7siwgwaQJhBp5MThBGEEY1S
Bb2IYxfmXG9WP8lZZyHXQmSbjUwlTlk8YtOwN8QUIKYIGbOFhxnSTARfGXNa
pIzN4Kl05ClBfD4K5PlMuQ56oU37+ty861BQg3gH4vEMLyLCxNXBCcJGRmMa
YYzQfkgN8cKUYAatntHQOIJSj50xrUJDEEYQRjTK5EW84dE5/2WkH7fZSm1s
kYnO9lkK/OYsnynZx6b6DPlgXjbDa0p1mzIES4uceU1pLn0SXNrOTDbTk1k6
0WleZDdUPjz3lwgpUNCGmStEBIkII17YiGnsIizU/zWAMCAajT0ySgXY0uOm
To0+1BemIggjCCMaZeJ4t3XhnMlKzfN23x8drj+YzA/brY9YTfPsttl261y7
+VG7+TG7ZZHNNt9mXWSxPmizPGyzPBohs5sf9tuf8FoW+V2zUWAhzz9hMT0r
O/n6gorfIqRHQbfQHYa7U4NDO8XCIYKw4TWmEXbKxF0MMq3QV4dbF2m9joFt
tUqBERbxCpogjIjo/6wgDrGJnx738JP3lsyVFMyUzJx9wZz5F1XMlcyaL9jc
8RVzL62YJylfICmfLymfN75izlUVs6+JkM2adc3D86+vKBo3s1hSVCQpyJeU
Fo9//s/pOWkTEM9hYuGfwLwQmugX5mQO350gCBtWYxhhmFPgagkI0+pUWp2G
UTO4OZGGQmpgw0AZoXwqtYwgjCCMaHSJx25NXsGcJcvnrmjJX9VStKqpqGF9
duWK+GWNKUsb05duLGrYWNLQmFu3ObNuc27dpqKl62cvXT8vQrZs3YLV6x5c
uqx0c2tZ69byxray6ob82trHy0ozhowi5AcWBB8S4Pr/LYKw4TV2EaahdCow
RkMBxdS0Sk1rjCocyAFUg23YMGpZKJ+SIIwgjGiUCR42qx0VVmRVbcxduTW+
qmnqks1RDe1x6/6ZVtcZVdcxva4ttbYtvbYjoaYztgbSjuS6tvSG1qyIWU5D
U8HrKxKqNkQvWT95dWfqamlp/dqH84qmid9rQZyAMG94F7shCBteYxhhWhoH
bzAaQJZGwahUAsLA1HqdQk8BwkwalqJ1Ms1AQ2Jk62iCMCKi/6vEHqWKRbmv
rUlq2BJVLZ1a1Tp1ccvkJdIpSzruX9wxebE0YbE06Y32mDc6ol7rmAYbS9qm
VbVFVUkjk0pjlrTE13UkrX4v/uVNv6tsntTQnl27YUFe+dTAwLpyAwgbGCMf
rltBEDasxgDCxFz19fVZrdbu7m6VSmUymXRQGoPmZN+3NkbH6qmj8pNak0Ev
o+w6a7+ONrrcFspkUNByteaEor+zs5MgjCCMaBQpiAc3ZxWkLW+pqG2NqZUm
VbckVbWk1LQlVbXFVbYlVrbmLZbmLW5LX9yevLg9dXF7YlV7dFXnpKqOKRFJ
O6KWdMW90jqp+u0JlVvurO6aWNkaX9M0N7tiCofcA8EbfKgJMayzkxGEDa8x
gDCZTGaxWCBjRqPR4/EAwiDbgDCDVefymvqPHzDQapXVRNvsiqPdNq2xT2f4
VqnRy3WsimZtTji+YsUKE2sgCCMIIxotEtywnPyUlc0VdS0z6jHCUqoxwlKq
2uIr25IBYZWt+ZXSdLzdlgpQExFW3TEpEmllZ9TiLQkvSaOWvD3l9a33Luma
/EZrYs3mBVmzpnLIy50aDc8RhI2wxgDCGIYBbGk0mp6enpMnT7rd7mPHjlls
5ler/5GaGaNXHmcZ5V8qKyUXXnK5RLKxbmm/wdWrd/jMdqNCcaxf0aPVL12+
LPJrtROEERGdiYIotyBmVUtBQ+v9DW3TwBerbo2paY+pbo+qap9eJU3F1h4L
5Kpum44NNtqja9oikoLrt6Q97x9N6Uu2Jr/eGbukI+GN5tyaTY9llceJM0Sf
hjAywdQIagwgzOFw9Pf32+12k8lkNptpmlaC1IralVU5BYkOtnfv7s8u+vkv
+/TW3n07f3fDz786ovpW49L195kU/SqDTefglq9c4fc5CcIIwohGkYIor3Dy
Kmlmg/SehvbJtdKp1dKpNR1TqzsmgltU3RaHrX1KTftEsLq2KTVt02ukcRGy
ail4eZmvNMdVvxm7uGvKks6Yyua0ms0PZpdP5xAXIAg7exoDCAOfSyaTGQwG
yCHs3nHHHddee+0FF0okF0kkF0pK86OWNbycWvZAN2XXfLs7Ny5qecunGidi
VTIXLT8up79VmppamkOdsBEUQRgR0RmJzyuauEqa2tD2+4b2ibXS+6vbJtd0
Tq7uvLeqc6LoedV0TKjruLu+/e76tol1rXE1rakRMsBlbdf9r7f/uu7dX1W9
dX3Nm7dWSe+rbSnInX0Hh0wBPBYMTysVaswhCBtBjQGEgf8l8kuhULAsu2HD
hoqKCqPJULWiOn9mCq3cvmr5K2WP/23nCR0KsI9V5BQuevmkEen6jquP7Wps
f29F63u19XVCKBFBGEEY0ShSbtHklW2ZdW331LdPxkGJbVHVndHAL9w/1RYL
Vgf+V8fdS9swwmqkseAr1bQmRyIFF6+ua8Litpsb/nlzzZs/r996S4303vrm
/LxZdwQQKwQl4kHNpy3ZEyYRhA2vMYAwmqb7+/sZhoHsgUcGu8XFxf96/92G
dcumxN6plX8mbamb84dXDT50cs/7Lz4194m/b5JZkEnTg2yqkyrrca1n7fp1
Qc4eWvQwUiIIIyI6A0FtnVU0Y7m0qFY6taY9Zol0xhJp3JKO+MqO6Kr26dVS
DJe6tiig2FLpxPq2STXtU6o6puCesgik1e3RDW3JSxqnLdsypa79XtywuTm5
YdOCgrKpQeQWkMULjphXMDI7x8hpDCBMzJLJZFIqlZACwr744ouYGdOff+X5
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
15bVy5fdNzkKTmOpvtt+dV17e/uajU2/u+cet9fjtZpvv/XXm1tbFDTzsxtv
sVhdPBfcuH5DYWkJJwbqY0bxHOf7/Ksdv7/zbuR3o6Aftn939wS3X4iBDAoR
/gMrxAkSQyXHLMLEqVRgg2VZ+KkA2Z4/f75I/Gt/etWR/bt1lGrF2g2SCy66
UCJ58YW/nqXZOfDb+/wCCYK4ldjpoh59LFGp2mw0LmPNr1nMz1ssf7Ganrey
L1nY16zG1+zGl+3sSw7jS5FIHcaXHYZXcGp8AcxufAUb+5LV9ILZ8ILT/po3
8Prxk688/kAx70I+z4/+NCIiIoqowtOQyKOMnD+uaj/2SvvRv7Z3L35X/+fG
/pfb6b9L1X/qkP3lrZ6XpHvqmr4oynsECaOLPC4vRogXQKK/65ZLJOMlkosu
kkguu/Ham7wadduaNX98cTFuSfTJFuVOaO/oWtH85v+8+gYHf+O1VaQldL33
r/1K+vKb7lTTOOrxr888I7lwnOSiSy698oY775hk1Gv++7e/llx4RUvXO8jN
3HnTVZJLrl4u/Re8YQBH+zsQ7wxdHOdd/AXNCT/9xybCxKHNkDeFILEgPT09
gDNxjPOxY8fE+SHhoDisW/zDkZ2pHnm8vEdAmJ8TPhfkiIn/9aJHJpbM+Wnp
vAvL5kvKFkjK50vK50nK51xcMefi2bMvmD1HEjmbM/uCObMlc+Zgw9eafWHF
XHz14nJJdpGkdIHkwSd+nTBjcmjwCPHBiIjOhsITkcij7LynV0uPvNzx7TOt
B1/uUvxt44nFUu0/WhXPdHY/03Fo8Zb967t2lgPCPAP+j08I6/AoGpc9XTA7
247QI398/uXnX0cuT//evbdHJzEBv1P+8a0XSd586533vjl6V1ySm3PZuvfe
IJE0dm3dLmeu+c3kja0fBO2oq6ktpSCHDQZXr3tzdvlj61bXvfrG8yyPL/X+
5vrXn14E8DIhZOQEZgVsYFBHus4bhAG2oEQGg0Gc1pISwuxNJhNkGLZtNptM
JoNzzGazOIfz2UJYcMBMZnsADy90zJ4fV7V01vJNhSs3J65sjlrVPGlNU9Sa
zbFrNiWDrdocv2pzXMQsfk1j4prG+DWbp4PhazUmwvGVTXFNW7NXtMxYKY1q
2JhTMjMTHiPIs9Pt+t9LSEREFG6FK5wjPe+J+pZdr7x58Nn2PS9vPfmS9HjV
FuU/pCdffF/2p/bdr23ZVd/ySXJSCTg//qDADr9gDoWZ2j1lxr1fHzl4611T
du44goxm5Pdnz3lQcvG4+LuvnJt2+4f//pj2oJjcQskFkrg7rpubPq1164c7
ZaZLb741r3R29owSk9r+1N+eklw5TiL5uU7lsZq0kgsl46676ennX9Ed23nn
DZdLxl3x9OI1GlvAGxAR5gCEec4bhAGbRBJRQj7F0WEnT57s7+8Xp4V0u91Q
ZLziQH//WfTCgsLojGDIoeE8fiavZEJjxx9WNBasaE5Y0Tp1hfT+VS3Rq5pj
VjUlrWhOWt6SsKx1xrLW+Mik8fD+y1vil7dOAxOOiJebsXjt5JrGKWvejm1o
zk3Pi3N58IMUIH4YEdHZULgQlpL/wKvr33/97Z1/27rjjbcOL+46Ut11/IXm
fX/dsu+Zti/r39+3cuvneYUL4ApWzuMI+PAQZxxZb3Jbe2+/51cvLHn9xt9O
9IuTU9nsWpsPRxP6FSXJv2/c3OwSnKYgMC+gnZk8eW3j20o7ciJk87j8LHbo
bAGjBzkDPHLjyEQ3oNHMIweuWSzIb4G3siJ8vssXEBsSudMaEoVYOH7M9oWJ
CwpAVsXJLSGHwCm73W6xWIBuBw4cAEgBvMRFq2H7bCEM4dF8Tr9f7Ffyezl9
YvqttWtmL92U3dA8o6H1/gbpfQ2tkxtaohqa4+qa42pbZlRLp1W3xkQkbY2p
ks6oksZUtU0FE44Il5NOW7YlqVoaVd81uaopI6c0iRNaFJx+N0EYEdHIK1wI
m/vYc5WNb1e989lLXR8v7tpW3bmjtuOb11q2/aPrq79J//2a9IO/NWzMnTnf
J6DEC+AICBN1BAE3tu6+/ZKLJOs738PjuOwexHE6k0uYVcpQkjmlrWsLMMji
5R1OMwroMqN+/68PdmB+BT0BeAsHrkE4ZHUjs54WfhAjt9Ot9wgVC7IzyGmE
t1I5kMosdLrzbrCA8KpQ2rGPMHCvxLwBwmBXLgiO9Pb2siwLR5xOp3iOOA/w
WURYIBDw+XwOB/wQ8QaRqXxBVOOWJ+ubsupbY+vbJtW1T6iDtC2qrjWuRhpf
1R5b2RFd2TE9MilY7OLO6Yu7plR2ToFduFxVezTY0q0Jla2TazonLmlOy5uV
4hOeJS/OcKQjNomIiL6r8CAMoZikjPTy+UnzFkWXzo0tWpBU/FBa0aOpMx9P
mvNU6sI/Zi14ImfuQwVlc3UWsx0PMeIDDjf8mcft9IFbhOwB5LcLrhYcdBtY
TnhPp1mJeAsn8MsnXsehQQGbz4d9KB8mJwf/Bey822+E1/BQM3gjtwn+FGNL
b8bACnoZq9sptBx64C+CXrAQP0P3YIxHJIK3Be4V4AmYJYZzsILA7YLCAqGM
RqN4JqANjp8thAkTtgifBW5idnOIySi8/fUVRfUt2bXtMbUd99d23lfTeX9N
x9TqjhnV7fGVXTGVXdGVXdMikb6xZdobXTE43Tq5cstkuNaSzpglXdHVndGL
Wya/0Txh6ZuTqppS0wunQUa9Qb+fIIyI6GwojNP8ijEaHBqYr15oqrPb8Sod
fh75AsiJG/IQoMvqtgtT2YdcMc5nCiIvgMcQmiKY9wsvuR0sJN5gAN7W7ef8
PhcKOAFsSPD7LDYrEr05PMzZa7bp3U5xPmG312u1eHBcm9NqQkEO/tzoCgpv
wp+HQfX9/f1QIrGdUDwiLrwihnbAcZlMBvCy2+0isM6eF8b7vPCTI8AFwDd3
BpEht+Kupc1za5vSq6XTqtonLOm8a0nHfYs7Ji9uj3kDrCPqjY6pEbLXOsGi
cNp1/xud98O1FrdPW9I+dUn75Nr26MqWiQ2dE2qb0/LLEoQHiQuGAhOJiIhG
VGFBGB6OFfAipwVBFeTzIo8fuTjEupAzgD0r3FjoQZ4AxhYf8PjcGFwu4BHv
8gvNfchtsRpsCDGia+RxITHkA4dYcBzibX5hno0gbzfoBQYJM+ALs987LexA
aIhfWNPK73NbIBXhyAszDIs+ncXpHZxkKnha5/sYR9iZ6qwhDI9qxh8aD54y
cnKILpx7X+2mirrmjJq26OqOCVVdd1d2TVjcNQm373UIrYidUyJmUfD+izuj
4HKVnZOq2qOr26Nr2qeA1bVOrW6+b2XXhIamlPyiGUJEvRgfRBBGRDTSCg/C
Av6ymKjn8jKfTkl8JiH+rwmJf46Z8WJC6vMxyS8lZj4Xm/xsau6fcgrmpWZg
IgHIAhxuTQxwTq+IML/X5wSEYf8KagPwugSECUGCnNPv5kRgCZzhOB6/CZ7v
KEQul9MK2xx4dkBQh0g0zuaww1/bvEFxMLWf48Vot0AoigN9p8IhCBvUWUeY
sJDB/4Kwyo7Yqo6o6vYpETJ4c9zzBSnwq3MS5ldbdF3blHrplIaWqXWb71vV
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
ohP+/Or8Z9+ZvvDNsc99MH7xu+MWvzNm4epRL3x8+rMfjH1i+aSnli0YP+3X
hVLWrf/lFLIpxZ8hUCz4VSytGdNnTzx3Gvwrl3dnaPB80rcYL5nek4CFrKQs
5FKWn9VeFgoVL5m9nU664VjFyeXUZIqAzcoVLw0H9Ciy5OSL8aSjwwMUyMbP
X58847o20lcY3FTMFNNulFf+JSvMj8JkWYYVkiRVVV2xYkWP7l1rMGz6lIkg
tXw+f9+990CLarv1efovS/3Xl+JlVlQEnuVIpDCkMARiH2U3KSw56YKjFi2/
+Ll3pzy47PjH3jrh0TePffzt4x97+4hH3z7kyXePe+Dl015Ydd2MuWfm3YG7
sp0yXH+V0uVSLpe1hwzpVVWF1dU2nPLr01VNhN4slapcdNGC2rqGgYMOGjR0
eHNz61dfvldXhfXt2vm0k0+8/95bCDI6bsysbNrJ5jPnTjrn/ff/Dvv+2uvP
1tRiDz5wUywR7trvMEMrOBn53WefxBpGXHLPM06RNwNfY1ivD9bF3BNgbpfj
CrTkj5H9chUG8oIoDHbMNM1wOLxhw4YhQ4a0tLQQePycM0e/tuTFzZs29uhz
QJRgNm7c2KdPny3NQZxT4DiwDAXugzs+s+gJdF0YUhgCsQ+yu6KwSXOOX/T6
5U+/c95jK055bs24x98+8cE3jlv4wa8Wf3jso28et/CNSY+9dMXUWWeX/Bnt
7vOUC1kIr1IjRgy+954/wS3prPr68pePP+7XpYLzzfpvDxjQn+fNYJDq2Wdg
INB2+61XPHTvDXAnCBwevP+2ltbt5025XFMcyzZnXTD93Xf/Cvt+3vRxr694
wnG0YCjQa8jJHG076fhFo4Y//3kbDU+okt8s/fOCBTdOnndT2nFLvpSttFMs
Fr1osOg15BepMGgO/DQMA1ba2tq++eabGTNmRKPRtJ168rGH//T7G+675w/T
L7wyTEgcFZ45feKzr65qjnAST9gqLcm6kcwvW/KXknsJOVIYUhgCsW+xmxSW
nj7vlKeWX/X0qhmPvH7acx+ds+jd0x9bdfIT7530yJsjHn7juJc/mvv4y1fN
njel5M3QyGXLpqGBOjZt+vLww4dkUllPaplyJTNr5sWvLnnzi7V/P/GkE2y7
XCg4w484/quv1jqO0bsbVo9hdTXYA/fdKoj0qFMmegOJ5bMnjH311ZV2Kn/J
pTM++vjVSllhBP6gYyfThOnYLXdeNOre5etIePiUeeagzhu++7b/ESeSlmOk
vPmKhaJmu7XJvEvUfpkKC4VCkiRBoyCksizr4Ycfrqqq4nmxpTkwecL4h+/+
zZ8fueeG2x5nlQpP7bhuwcy7Hnq1gy5ockxhW9s7CIK23n7j9Xxa3eX5PQRS
GAKB+JfZXVHY9HknL3ztssVvTnng1ZMXrR6zaPUZ8GF/7M1fLXr/xPuXHfPc
6pkPvzh/xtyzc2V39kXJvRC6UMzZTy1eOH/ehZVKxk5q+Vw5ly395oZrVr2z
ctv2lqOP/lU2V8rmCkOHjWhvDxYyiuNYEIX97oZr7rnrZoqODxk04vnnl5lJ
Y+SJx/71sy9S6ey4cae8unRRuahHY4nq7sdIfNaRN90447iH3viCcZzAt+vH
DumVS+tX3nzbrQ+94FZ7ybvz8otebsVfsMIATdNisZhpmhB8ffDBB1OmTOne
vWeXzj2OPnwEE9/64L233ffIax3xJMdsu/XmeefPuyNCO8WCyJKbX1vx7kuv
vLdo4eP++cc9+U5ECkMgEP8yu3c6x9NvT3/0tVEL3xq36J2zF68+57GVo5b8
/ZwHl4189NVzn1q2YNqc0aYtu9GWK41cPp1satxx4gnH70zfUXEvWJ4+Y/In
n34ACjvyyBNYTsgXC8OPPGbLlm0CHR82sHeXKqwGw0r5VFt70xlnjPn97Xd1
7d5t8NBBkiK/+fbKHj3qqqqwZa88GwiGDjx4lCrnvl3xSD+QTd0Bdzzz3oRf
n/Lu04+V8snmSOzwUybgXNa9WM0dSCyzlvwLVhjskn9dGKxDFLZp06azzjor
Go0TCdrQVVUK/+Uvi04fPTtB2qkMdfKpw1969a+M4OBEq6aGGEahSH31O296
VbWRwpDCEIh9i92lsPPnn/T4Sxc9//achSsnLFo56Yk3Jj69asYTb5y78O0z
F6486+GXJ7+86qbZl5xZgUjKTTBlubnlK+V0yuzbp9fvb709bbs6eeON5fX1
XVhGTGdTfm5eUdJy3nT5Si6XUuW8pfsZfeE5TUtxc3dU/BS+RehDJk8av+aj
97K2O4Ox6M1IzLLBaWce/9f1m22IImTRSWnpVBI6SMV2Zyd41zRDWJgrOsVf
cIIp2Mm2tjaQF0VR8XhckqSxY8fedNNNPMvFoh2iGP92/doD+h7S2BhuCmwZ
MnzgRx9+zTJ2ggxpFsPQQjgYf/ml59GlzUhhCMQ+yO65tNlJX3r1xEeeuWLx
0osXvTbn8VfnPPji+U+8dumjr1zw+LKpSz68/NEX5z60+OrzZo6DLcFfmazk
zuawXRPlsuljjhxZX9tQDfFVFWaZafcqLU9JvCBVfkgp7+WVcucRVorFTEFV
VZBSvmzkCyX3CuZy0s4o/yidUq4MGnDQG8vf8i5aLvoXSvuxHvxTkO2KeyU1
xIFuJuGyU9BN5RecYMq27Ww229LSkkqlEokEKAzH8QvmzOrepa5Pj64tgXaK
oZe99FJDXT1WUzv/2utFRkiZVjBB4AKvCLwhcC+/8CyaVI8UhkDsg+wmhRXG
Txw7e/742ZedMnfBKbOuPH3KRb+efcXZ5192xrjzDp51+YkXXD5m3pUzL79i
gSqn/XS7aSvpeKmAfekkTfuHXUomTbcACqiq7NZJsTJJuBHiJzdflW2Vcmm/
qyiU5YKjlL0s9xUHojbb2ZW5N2/bTs59IvdkFzgzrzt51r2ArJgtehcyu/1N
pchbml5MeXb7JedIBG2RJAn+isVinDc1EWIxjqV5muA5hmQFTTfZRIiMRxK8
JiXzDBE3ZD7OSASvCgxpiPRTixfu+Xein92y6Be/cUeVK/bs+acsfuWqp167
4Knl0xcvn7F4+cyFy2e7y4oZC1f4t+y5ZeZTr7vL4hXTYFnoPvVM73lnPPn6
+U8snfLsW9PgC9v0WeORwhCIvchuSjDlZ0ksZEtiyVGLjm0X9aI7fd4uOVre
kUsQMRVzqeROxRTSO0tZZlJuXsSd6XnBJeVS2Q2UirtyRhUz+aR7FXLJyzOV
9TIxemkS3Sd1H9zNxJhMF2DFdiM7N1Ir50pOpeCUUylTc/NzuE9kORW15NVY
yfvpfzNZpwR/lrNudsSSm7Gq/Is9F/bPAH/BT5YTuF2FL2legkXgWb8IJkTB
sE5TxL+larP7PshkIDD3Xm6X4qw5E+dcPGHW3HGzLho966Kx/+/y32/ZQ8vo
//JcE8876Yprp0ycPnLmheOuvOrSVCrjXZmB/IVA7AV2l8K832VvpC7nOai4
K89hwVu8mQA/FJ4EI2UKII5ixbbzxs6s8q5/Cnm3kJibWN4dAvRKqBR3Rmru
EKIbYZUc7wFzVjab31UfDHSZyqo7KzxXCmlLdGfQlXO5fKVU2nkZmpvUd2ed
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
phIfr3ltePe+4448BVQSJrgYnWKkPCtKuiVqBsuQO9jgX6+4aEK/Q8fc/9yn
pKgQwUalcfOg2oZOg0Zu46CnbsqK27dsbobeEavGOtfXdqsZVlczbO22zVE+
fMF5U8AnC594Et6TGoQegbavP3oFzDF28vwO2elQTMG2OwIRiIZS2YooMGtX
PQWWmThz3raYxvBawdSTVOut183Hqrsu/ejzuBTeuP7LEd2OHnnQuE0RQnWc
IBFSVD6ZMiAKE0RGYTqW3L8AIkqsUxes/6FYTVVVFdalS9WVV10SxyPN27f0
74Rdd/GFWjbTFHf56P1PMeyAu+9+LEk2Thl7JNap6/0vrDYtx+D0wOava6vd
GRsXXH1TUhSMWIuTp1Yvf7amYcgpk67gy8737e1lO1kU6buuvxiM8NhLoK3i
zVfO6V+LPf3MizFOSNCNFBXsUXNY/36jPmtqp5xCVLMIWlGirB6N0yTEoJSe
TVGRJodY986Tt2B1B13x0DKbCk4/aRiGddkWSEiRxqmjjjlx1OiWcPT5B38L
8d1lt/0xKGbVBDn+5F9j9T02xchAsLl/9841WKebbry1UEi2tm8pFAoCTbz/
yqK+tdiosWfH1TybckI4q3N48/frqmtqqxu6d+7WE6uqxWp7UBTl8G03zJ2E
dep97f3P13XvO3z44Y1bOhiKtpJtzS0f9+rae8KYC/CgmTRyejKy8p1n4fvB
9Tc8HIiKZqqMpnMgfg5IYYg9ASvgMXYzRW7vjdX9auCxoLAIxRBckRaKrKgw
fCya2JZKRnLStpuvuRirOgirP3J7S3s5pfzlT/d0xaoPHzVxM8HkbOLZR29e
s+YTzSrQNNnU2NpQPeiIEWfQutwab5p2zliIwk495eT21jZQmJO2Pnz9yfpO
2JlTLgkpTiMpsMkkz0oCLfGKBeED0/bdaUceCCr84yN/phmBIxNfvL+yzg0Z
um/tiHN6bOPGv/evG3bqsdM2h8l2iccFmqQTOEMkaFxSeI0LL3v4+j4YtuDW
O1uFpKApH374Jlisc5eaL79ZG40ERw4bCvvz+DNPy7lcAidnTp+LVfV7evHL
emL71LHHYA29jhp93rpv2jTO3L7+74P6dpk4czYu6IbAff3xex+/u1xgEwcO
GAJ9+BU3/4HRTYkivnx/NfirZ98+G1oiUUr4zcVTQGHdu/VuiyYIpu3PT97f
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
       "], {{0, 0}, {577, 385}}, {0, 255},
       ColorFunction->RGBColor],
      ImageSize->200,
      PlotRange->{{0, 577}, {0, 385}}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.4116533139111435, 0.}, {4.35360524399126, 0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6789999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                9858.206250000001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{62.72770487231088, 
               89.5144845316672}, {-12.426847522088146`, 38.74689437998488}}],
             StatusArea[#, 9858.206250000001]& ,
             TagBoxNote->"9858.206250000001"],
            StyleBox["9858.206250000001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[9858.206250000001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                4929.103125000001}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{91.8574453664967, 118.64422502585302`}, {
               12.910023428948367`, 38.74689437998488}}],
             StatusArea[#, 4929.103125000001]& ,
             TagBoxNote->"4929.103125000001"],
            StyleBox["4929.103125000001`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[4929.103125000001, {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6789999999999999], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                16430.34375}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{120.98718586068252`, 
               147.77396552003881`}, {-46.20934212347015, 38.74689437998488}}],
             StatusArea[#, 16430.34375]& ,
             TagBoxNote->"16430.34375"],
            StyleBox["16430.34375`", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[16430.34375, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[{
         {Thickness[Tiny], 
          LineBox[{{-0.4116533139111435, 0.}, {4.430862345229425, 0.}}], 
          StyleBox[{}, "GraphicsLabel",
           StripOnInput->False]}, 
         StyleBox[{
           {Thickness[Tiny], 
            LineBox[{{0.5487982520029133, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
               0.}]}], 
            LineBox[{{3.4512017479970867`, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {3.4512017479970867`, 
               0.}]}], {{}, {}, {}, {}, {}}}, 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, "GraphicsTicks",
          StripOnInput->False]}, "GraphicsAxes",
        StripOnInput->False,
        Antialiasing->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.4116533139111435, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.740095221926755*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"b943be9c-136b-4e73-937c-79d8889058b9"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 178, 3, 67, "Chapter",ExpressionUUID->"b69111f4-04f5-4dcf-b216-9b6577f9df3b"],
Cell[CellGroupData[{
Cell[783, 29, 156, 2, 67, "Section",ExpressionUUID->"4a9279bf-fa06-481a-aff0-e0adbae3a4b0"],
Cell[942, 33, 243, 6, 34, "Text",ExpressionUUID->"27c1305a-5053-4102-86af-5c1c7c924729"],
Cell[1188, 41, 4240, 108, 321, "Code",ExpressionUUID->"8a1519b8-11a0-4ec7-b697-7d301d2ebe44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5465, 154, 176, 3, 67, "Section",ExpressionUUID->"a015abaf-d54a-468c-8e10-3a7f730c3323"],
Cell[5644, 159, 183, 3, 34, "Text",ExpressionUUID->"7b1a3692-1e07-4f31-8012-79eb89c0ab88"],
Cell[5830, 164, 2488, 66, 249, "Code",ExpressionUUID->"91d18ad3-2a1e-4a96-b04f-d4aeec5d4930"],
Cell[8321, 232, 182, 3, 34, "Text",ExpressionUUID->"55192e8e-d469-48e2-9bb0-2d72f3d46186"],
Cell[8506, 237, 504, 15, 69, "Code",ExpressionUUID->"e5da0905-37f6-40af-905c-5a879ea68896"],
Cell[9013, 254, 242, 4, 34, "Text",ExpressionUUID->"594d581d-2952-4383-956e-254ffbe27c86"],
Cell[9258, 260, 1545, 43, 141, "Code",ExpressionUUID->"22bd0d8b-886d-4a08-b2d1-265fd7533f16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10840, 308, 190, 3, 67, "Section",ExpressionUUID->"bb85da6c-05cc-4a19-803a-3104e4a51aa9"],
Cell[CellGroupData[{
Cell[11055, 315, 5390, 137, 393, "Code",ExpressionUUID->"a9bd7911-9791-405e-ac39-efafbdc446cd"],
Cell[16448, 454, 174959, 3317, 88, "Output",ExpressionUUID->"4a10a292-a590-4477-9629-fa371d8600cf"],
Cell[191410, 3773, 74440, 1412, 88, "Output",ExpressionUUID->"9ac019c7-e43c-4722-a596-e81e9acd4c8a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[265899, 5191, 179, 3, 67, "Section",ExpressionUUID->"3cc45fed-b98b-4a7d-aada-1eaecbdec5f2"],
Cell[266081, 5196, 177, 3, 34, "Text",ExpressionUUID->"97d07ceb-64ae-4836-a765-db5d61ab07de"],
Cell[266261, 5201, 604, 13, 105, "Code",ExpressionUUID->"2aa0693e-4074-4d93-9f20-6ea72f0ebf28"],
Cell[266868, 5216, 187, 3, 34, "Text",ExpressionUUID->"61480f1e-98ee-4bca-9084-b6d0422980a3"],
Cell[CellGroupData[{
Cell[267080, 5223, 243, 5, 50, "Code",ExpressionUUID->"019d5906-0589-44c8-8f69-412165b0e60c"],
Cell[267326, 5230, 73237, 1386, 88, "Output",ExpressionUUID->"f1775166-97e7-4a3a-884c-0ba3f05b37b1"]
}, Open  ]],
Cell[340578, 6619, 215, 5, 34, "Text",ExpressionUUID->"6a1ff284-1bec-40ee-82ce-d2d84726901e"],
Cell[CellGroupData[{
Cell[340818, 6628, 1901, 50, 105, "Code",ExpressionUUID->"b5ca959a-9b7e-491c-8de3-2189dd1ae8ed"],
Cell[342722, 6680, 156743, 2622, 1444, "Output",ExpressionUUID->"77e2e03a-d4cd-46ae-9c5a-896dfd04f995"]
}, Open  ]],
Cell[499480, 9305, 450, 9, 56, "Text",ExpressionUUID->"e9ed7a77-ecd2-46b7-a44f-bdefc67e935b"]
}, Open  ]],
Cell[499945, 9317, 261, 4, 73, "Section",ExpressionUUID->"63367760-08a6-4f4c-9d8f-4736677144d4"],
Cell[CellGroupData[{
Cell[500231, 9325, 165, 3, 53, "Section",ExpressionUUID->"9a52c627-a349-4e88-9819-5039a904c4e7"],
Cell[500399, 9330, 290, 7, 34, "Text",ExpressionUUID->"7e22a67c-4ab9-4033-93a1-38ab75c4d0c6"],
Cell[500692, 9339, 2515, 65, 195, "Code",ExpressionUUID->"a5ec2bca-6f24-4fc2-96a0-a7e31bbbf0d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[503244, 9409, 158, 3, 67, "Section",ExpressionUUID->"f2d69f65-efab-4a2d-99e3-d38da24ba171"],
Cell[503405, 9414, 2430, 61, 213, "Code",ExpressionUUID->"49fca4f3-1aba-4a71-b7ab-098ad004e2a0"],
Cell[505838, 9477, 674, 15, 69, "Code",ExpressionUUID->"7b7ec6a7-a366-4245-a21e-085ab6ffbff3"],
Cell[506515, 9494, 173, 3, 34, "Text",ExpressionUUID->"c9c2bd66-0633-4f42-bc14-495577ebc388"],
Cell[CellGroupData[{
Cell[506713, 9501, 297, 6, 50, "Code",ExpressionUUID->"3018dc09-5814-4770-9392-f633603504a4"],
Cell[507013, 9509, 78489, 1500, 67, "Output",ExpressionUUID->"f7ab621d-c174-4da8-bfad-3fe13c0fa4d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[585539, 11014, 1936, 49, 141, "Code",ExpressionUUID->"57b8b285-95e1-4986-a0de-b818286a0cce"],
Cell[587478, 11065, 337598, 7201, 1416, "Output",ExpressionUUID->"279440cb-6b43-439f-91f6-ebf415113fed"]
}, Open  ]],
Cell[925091, 18269, 602, 10, 56, "Text",ExpressionUUID->"2fe923bf-d533-4130-b4fb-f9dbd0c9d741"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[925742, 18285, 199, 3, 67, "Chapter",ExpressionUUID->"2c8849e6-a478-4d26-9155-f9bb434e2004"],
Cell[CellGroupData[{
Cell[925966, 18292, 1459, 41, 105, "Code",ExpressionUUID->"41cf982e-6a63-4eb0-89b7-e031dcdbdbaa"],
Cell[927428, 18335, 235650, 4537, 1444, "Output",ExpressionUUID->"c51ecbfd-8c0f-41a8-9bd4-a642231f9ee3"]
}, Open  ]],
Cell[1163093, 22875, 743, 12, 78, "Text",ExpressionUUID->"9c99285e-f310-4757-90e8-2624ea442963"],
Cell[CellGroupData[{
Cell[1163861, 22891, 140327, 2321, 83, "Code",ExpressionUUID->"0318f98d-e715-4d19-8e70-a3647e6757f6"],
Cell[1304191, 25214, 165102, 2938, 747, "Output",ExpressionUUID->"b943be9c-136b-4e73-937c-79d8889058b9"]
}, Open  ]]
}, Open  ]]
}
]
*)

